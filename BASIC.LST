     1                                      [map all BASIC.MAP]
     2                                      [DEFAULT REL]
     3                                      BITS 64
     4                                  %include "MEM.INC"
     5                              <1> 
     6                              <1> progLineBlockType   equ 0   ;Program Line
     7                              <1> varBlockType        equ 1   ;Variable block
     8                              <1> datBlockType        equ 2   ;Data block (i.e. a string block)
     9                              <1> 
    10                              <1> notLastMemBlock equ "t" ;Used for blocks that are not the last block
    11                              <1> lastMemBlock    equ "r" ;Used by the last block to indicate end of chain
    12                              <1> 
    13                              <1> %macro memBlockM 0 ;Memory block Macro
    14                              <1>     .bSignature resb 1      ;Valid Signature
    15                              <1>     .wBlockSize resw 1      ;Total block size in bytes
    16                              <1>     .bBlockType resb 1      ;Block type, program line, variable or string
    17                              <1> %endmacro
    18                              <1> 
    19                              <1> struc memBlock
    20                              <1>     memBlockM
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    21                              <1> endstruc
    22                              <1> 
    23                              <1> struc progLineBlock
    24                              <1>     memBlockM               ;Common memory block header
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    25 00000004 ????                <1>     .wLineNum   resw 1      ;Line number, up to 65535
    26 00000006 ????????????????    <1>     .qPtr       resq 1      ;Pointer to the next line, or -1 if last line
    27 0000000E <res 100h>          <1>     .sLine      resb maxLineLen  ;Maximum length 255, keep null char but 
    28                              <1>     ;                             NOT LINE NUMBER OR PRECEEDING SPACES
    29                              <1> endstruc
    30                              <1> 
    31                              <1> struc varBlock
    32                              <1>     memBlockM               ;Common memory block header
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    33 00000004 ????????????????    <1>     .qValue     resq 1      ;One value qword
    34                              <1>     .sVarName:              ;Up to 40 chars for the var name
    35                              <1> endstruc
    36                              <1> 
    37                              <1> struc stringBlock
    38                              <1>     memBlockM
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    39 00000004 <res 100h>          <1>     .string     resb maxLineLen    ;Strings allocate 256 chars
    40                              <1>     .sVarName:              ;Up to 40 chars for the var name
    41                              <1> endstruc
    42                              <1> 
    43                              <1> ;Variable equates
    44                              <1> intEquate  equ 0
    45                              <1> strEquate  equ 1
     5                                  Segment .text align=1
     6                                  %include "RELOC.ASM"
     7 00000000 55AA                <1>     dw 0AA55h 
     8                              <1> ;First verify I have Enough RAM for my program and then run
     9 00000002 B801E80000          <1>     mov eax, 0E801h ;Get low memory count in ax
    10 00000007 CD35                <1>     int 35h
    11 00000009 663D0008            <1>     cmp ax, 200000h/400h ;Divide 2Mb into 1Kb chunks.
    12 0000000D 722A                <1>     jb bad
    13 0000000F B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    14 00000014 0F32                <1>     rdmsr
    15 00000016 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    16 00000018 48C1E720            <1>     shl rdi, 20h        ;Shift high
    17 0000001C 89C7                <1>     mov edi, eax        ;Get the low dword in
    18 0000001E 4889F8              <1>     mov rax, rdi
    19 00000021 488D35(00000000)    <1>     lea rsi, section.resSeg.start
    20 00000028 4881C7[26110000]    <1>     add rdi, bssLen
    21 0000002F B900100000          <1>     mov ecx, 1000h
    22 00000034 F348A5              <1>     rep movsq
    23 00000037 FFE0                <1>     jmp qword rax
    24                              <1> bad:
    25 00000039 488D2D0D000000      <1>     lea rbp, badmsg
    26 00000040 B804130000          <1>     mov eax, 1304h
    27 00000045 CD30                <1>     int 30h
    28 00000047 30E4                <1>     xor ah, ah
    29 00000049 CD36                <1>     int 36h
    30 0000004B CD38                <1>     int 38h
    31 0000004D 4E6F7420456E6F7567- <1> badmsg: db "Not Enough Memory. Press any key to enter SYSDEBUG...",0
    31 00000056 68204D656D6F72792E- <1>
    31 0000005F 20507265737320616E- <1>
    31 00000068 79206B657920746F20- <1>
    31 00000071 656E74657220535953- <1>
    31 0000007A 44454255472E2E2E00  <1>
     7                                  Segment dSeg nobits align=1 start=0
     8                                  %include "BSS.ASM"
     9 00000000 <res FC0h>          <1> stack       resq 200h - 8  ;Save 4Kb stack space
    10 00000FC0 ????????????????    <1> stacktop    resq 1
    11                              <1> 
    12                              <1> maxLineLen  equ 256
    13 00000FC8 <res 100h>          <1> inString    resb maxLineLen         ;256 character input string
    14                              <1> 
    15                              <1> ;This string is used for printing long numbers and saving
    16                              <1> ; the variable names for string comparisons
    17                              <1> digitStringLen  equ 48
    18 000010C8 <res 30h>           <1> digitString resb digitStringLen     
    19                              <1> 
    20 000010F8 ????????????????    <1> minMemAddr  resq 1  ;Pointer from where to start allocating memory blocks
    21 00001100 ????????????????    <1> maxMemAddr  resq 1  ;Pointer to the byte past which we cannot allocate anything
    22                              <1> ;==============================================================================
    23                              <1> ;This is the SDA for each program and must be included in the program area
    24                              <1> ; once we add the ability to save the program to disk.
    25                              <1> ;==============================================================================
    26                              <1> 
    27                              <1> ;void* mcbChain, lastBlock, firstLinPtr = -1 => New program, empty entries
    28                              <1> 
    29 00001108 ??                  <1> strLen      resb 1  ;Counter for number of chars entered in string
    30 00001109 ??                  <1> stateByte   resb 1  ;TROFF/TRON etc, unused for now
    31 0000110A ????????????????    <1> mcbChain    resq 1  ;Pointer to the start of the chain
    32 00001112 ????????????????    <1> lastBlock   resq 1  ;Pointer to the last block
    33 0000111A ????????????????    <1> firstLinPtr resq 1  ;Pointer to the programs' first line 
    34 00001122 ????                <1> firstLinNum resw 1  ;Line number of the first line of the program
    35 00001124 ????                <1> currentLine resw 1  ;Currently being executed line number
    36                              <1> 
    37                              <1> bssLen: ;Needed to compute the resident portion load location
     9                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1
    10                                  %include "MAIN.ASM"
    11                              <1> start:
    12 00000000 B801C50000          <1>     mov eax, 0C501h
    13 00000005 CD35                <1>     int 35h         ;Connect the debugger
    14 00000007 E85F010000          <1>     call ttyClear   ;Clear the teletype
    15                              <1>     ;Memory stuff
    16 0000000C 488D2DE8080000      <1>     lea rbp, mainmsg
    17 00000013 E846010000          <1>     call ttyOutString
    18 00000018 E877080000          <1>     call memoryDetection
    19 0000001D 488D2DEB080000      <1>     lea rbp, bytemsg
    20 00000024 E835010000          <1>     call ttyOutString
    21 00000029 E8AD040000          <1>     call newProgram         ;Use this to reset program pointers
    22                              <1> mainLoop:
    23 0000002E FC                  <1>     cld                 ;Set default string op direction
    24 0000002F 488D25(C00F0000)    <1>     lea rsp, stacktop    ;Reinitialize stack pointer
    25 00000036 488D05F1FFFFFF      <1>     lea rax, mainLoop
    26 0000003D 50                  <1>     push rax    ;Save address on stack
    27 0000003E 488D2DB1080000      <1>     lea rbp, prompt
    28 00000045 E814010000          <1>     call ttyOutString
    29                              <1> .ml0:
    30                              <1> ;This section will execute an input line if it is an interactive expression
    31                              <1> ; or store it in the program if it has a line number.
    32                              <1> ;It will keep accepting lines until a line is entered without a line number
    33 0000004A E872000000          <1>     call getLineInput
    34 0000004F E887050000          <1>     call decimalToHex   ;Check to see if we have a valid line number
    35                              <1>     ;xchg bx, bx
    36 00000054 6685C0              <1>     test ax, ax
    37 00000057 750F                <1>     jnz .saveLine
    38                              <1> ;Here we execute the line
    39                              <1> .ml1:
    40 00000059 E826010000          <1>     call executeExpression
    41                              <1>     ;Now see if the line has any more expressions by checking for :
    42 0000005E E807040000          <1>     call findOtherExpressionsOnLine
    43 00000063 84C0                <1>     test al, al ;If al is null, no more expressions on the line
    44 00000065 75F2                <1>     jnz .ml1    ;Execute portion
    45 00000067 C3                  <1>     ret
    46                              <1> .saveLine:
    47                              <1>     ;ax has the line number
    48 00000068 6689C2              <1>     mov dx, ax
    49 0000006B E8B3060000          <1>     call searchForProgramLine
    50 00000070 4881FBFFFFFFFF      <1>     cmp rbx, -1
    51 00000077 751D                <1>     jne .commonProc ;If not equal, line must exist, continue
    52 00000079 E8D1010000          <1>     call spaceSkip  ;Skip all the prceeding spaces
    53 0000007E 803E00              <1>     cmp byte [rsi], 0  ;Is the first non space char the end of the string?
    54 00000081 742D                <1>     je .lineDoesntExist
    55                              <1>     ;So we have a new line that isn't empty, allocate a new block for this line
    56 00000083 E8D4050000          <1>     call allocateBlock  ;Return a default block in rbx
    57 00000088 C6430300            <1>     mov byte [rbx + progLineBlock.bBlockType], progLineBlockType
    58 0000008C 66894304            <1>     mov word [rbx + progLineBlock.wLineNum], ax
    59 00000090 66C743010E01        <1>     mov word [rbx + progLineBlock.wBlockSize], progLineBlock_size
    60                              <1> .commonProc:
    61                              <1>     ;If the line already exists, simply override the stored string
    62                              <1>     ;rbx has a pointer to the block
    63 00000096 E8EB070000          <1>     call strlen ;Get the string length
    64 0000009B 488D7B0E            <1>     lea rdi, qword [rbx + progLineBlock.sLine]  ;Get address here
    65 0000009F E8D9070000          <1>     call strcpy ;Copy the program string to the program block
    66 000000A4 56                  <1>     push rsi
    67 000000A5 4889DE              <1>     mov rsi, rbx    ;Move the block into rsi
    68 000000A8 E899060000          <1>     call insertProgramLine
    69 000000AD 5E                  <1>     pop rsi
    70 000000AE EB9A                <1>     jmp short .ml0
    71                              <1> .lineDoesntExist:
    72 000000B0 488D2DD0080000      <1>     lea rbp, lineNoXist
    73                              <1> ;For any error, syntax or otherwise, come here
    74                              <1> criticalError:
    75                              <1> ;Called with rbp pointing at error message
    76 000000B7 E8A2000000          <1>     call ttyOutString
    77 000000BC E96DFFFFFF          <1>     jmp mainLoop    ;Trash input line, restart line input
    11                                  %include "TTY.ASM"
    12                              <1> getLineInput:
    13                              <1>     ;Sets rsi to the inputstring
    14 000000C1 30E4                <1>     xor ah, ah
    15 000000C3 8825(08110000)      <1>     mov byte [strLen], ah   ;Zero the char counter
    16 000000C9 488D3D(C80F0000)    <1>     lea rdi, inString   ;Move to start of line
    17 000000D0 4889FE              <1>     mov rsi, rdi
    18 000000D3 57                  <1>     push rdi
    19 000000D4 B900010000          <1>     mov ecx, maxLineLen
    20 000000D9 B00D                <1>     mov al, 0Dh    ;Ensure the input line is sanitised
    21 000000DB F3AA                <1>     rep stosb
    22 000000DD 5F                  <1>     pop rdi
    23                              <1> .getChar:
    24 000000DE E883000000          <1>     call ttyIn
    25 000000E3 3C0D                <1>     cmp al, 0Dh ;Line Feed
    26 000000E5 7456                <1>     je .gliExit
    27 000000E7 3C08                <1>     cmp al, 08h ;Bspace
    28 000000E9 740F                <1>     je .glibspace
    29 000000EB 803D(08110000)FE    <1>     cmp byte [strLen], -2   ;If at max length (255 chars), simply beep and wait for either bspace or enter
    30 000000F2 7459                <1>     je .gliFull 
    31 000000F4 84C0                <1>     test al, al
    32 000000F6 7443                <1>     je .gliExtendedChar
    33 000000F8 EB29                <1>     jmp short .gliCheckCase
    34                              <1> .glibspace:
    35 000000FA F605(08110000)FF    <1>     test byte [strLen], -1  ;This will only be zero if strLen=0
    36 00000101 74DB                <1>     jz .getChar
    37 00000103 48FFCF              <1>     dec rdi ;Go back by one position in the input line
    38 00000106 FE0D(08110000)      <1>     dec byte [strLen]
    39 0000010C B008                <1>     mov al, 08h
    40 0000010E E846000000          <1>     call ttyOutChar
    41 00000113 B020                <1>     mov al, 20h  
    42 00000115 E83F000000          <1>     call ttyOutChar
    43 0000011A B008                <1>     mov al, 08h
    44 0000011C E838000000          <1>     call ttyOutChar
    45 00000121 EBBB                <1>     jmp short .getChar
    46                              <1> .gliCheckCase:
    47                              <1>     ;al has char
    48 00000123 E831000000          <1>     call ttyOutChar ;Echo the char as is, but store it uppercase
    49 00000128 3C61                <1>     cmp al, "a"
    50 0000012A 7206                <1>     jb .gliccStore
    51 0000012C 3C7A                <1>     cmp al, "z"
    52 0000012E 7702                <1>     ja .gliccStore
    53 00000130 2C20                <1>     sub al, 20h
    54                              <1> .gliccStore:
    55 00000132 AA                  <1>     stosb   ;Increment the pointer, add char to buffer
    56 00000133 FE05(08110000)      <1>     inc byte [strLen]   ;Inc char count
    57 00000139 EBA3                <1>     jmp short .getChar
    58                              <1> .gliExtendedChar:
    59                              <1>     ;Currently, extended chars do nothing, 
    60                              <1>     ; eventually add F1-F10 functionality
    61                              <1>     ; and arrow key support
    62 0000013B EBA1                <1>     jmp short .getChar
    63                              <1> .gliExit:
    64 0000013D 488D2DD9070000      <1>     lea rbp, crlf
    65 00000144 E815000000          <1>     call ttyOutString
    66 00000149 C60700              <1>     mov byte [rdi], 0   ;Null terminate string here
    67 0000014C C3                  <1>     ret
    68                              <1> .gliFull:
    69 0000014D B007                <1>     mov al, 07h
    70 0000014F E805000000          <1>     call ttyOutChar
    71 00000154 E985FFFFFF          <1>     jmp .getChar
    72                              <1> 
    73                              <1> ttyOutChar:
    74 00000159 B40E                <1>     mov ah, 0Eh
    75 0000015B CD30                <1>     int 30h
    76 0000015D C3                  <1>     ret
    77                              <1> ttyOutString:
    78 0000015E B804130000          <1>     mov eax, 1304h
    79 00000163 CD30                <1>     int 30h
    80 00000165 C3                  <1>     ret
    81                              <1> ttyIn:
    82 00000166 30E4                <1>     xor ah, ah
    83 00000168 CD36                <1>     int 36h
    84 0000016A C3                  <1>     ret
    85                              <1> ttyClear:
    86 0000016B B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
    87 00000170 CD30                <1>     int 30h
    88 00000172 B402                <1>     mov ah, 02h
    89 00000174 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
    90 00000176 88D7                <1>     mov bh, dl      ;Set cursor for page 0
    91 00000178 CD30                <1>     int 30h
    92 0000017A B707                <1>     mov bh, 07h     ;Grey/Black attribs
    93 0000017C B800060000          <1>     mov eax, 0600h  ;Clear whole screen
    94 00000181 CD30                <1>     int 30h
    95 00000183 C3                  <1>     ret
    12                                  %include "PROCESS.ASM"
    13                              <1> executeExpression:
    14                              <1> ;rsi must point to the start of the portion of the line to execute
    15 00000184 E8C6000000          <1>     call spaceSkip  ;Skip any leading spaces
    16 00000189 803E00              <1>     cmp byte [rsi], 0   ;Null terminated line, empty line?
    17 0000018C 743F                <1>     je .exit
    18                              <1>     ;rsi now points to function
    19 0000018E 488D3DDF020000      <1>     lea rdi, funTbl     ;Point rdi to the function table
    20                              <1> .functionFinderLoop:
    21 00000195 0FB60F              <1>     movzx ecx, byte [rdi]  ;Get the string length  
    22 00000198 80F9FF              <1>     cmp cl, -1  ;-1 is the end of table marker, either Var assignment or error
    23 0000019B 7431                <1>     je .variableAssignment 
    24 0000019D 56                  <1>     push rsi    ;Save ptr to start of string on stack 
    25 0000019E 57                  <1>     push rdi
    26 0000019F 48FFC7              <1>     inc rdi             ;Goto first char in function name
    27 000001A2 F3A6                <1>     repe cmpsb
    28 000001A4 5F                  <1>     pop rdi
    29 000001A5 5E                  <1>     pop rsi     ;Return ptr to start of string pointer from stack
    30 000001A6 84C9                <1>     test cl, cl ;Did all the chars match?
    31 000001A8 740F                <1>     jz .functionFound
    32 000001AA 480FB607            <1>     movzx rax, byte [rdi]    ;Skip unnecessary function pointer
    33 000001AE 480502000000        <1>     add rax, 2      ;Add 2 to skip relative pointer
    34 000001B4 4801C7              <1>     add rdi, rax
    35 000001B7 EBDC                <1>     jmp short .functionFinderLoop
    36                              <1> .functionFound:
    37                              <1>     ;Function found! Execute!
    38                              <1>     ;rsi points to start of expression to evaluate for function
    39                              <1>     ;rdi points to table entry
    40 000001B9 488D1DB4020000      <1>     lea rbx, funTbl         ;Get table address
    41 000001C0 480FB617            <1>     movzx rdx, byte [rdi]   ;Get pascal string length
    42 000001C4 0FB71417            <1>     movzx edx, word [rdi + rdx]    ;Add pascal strlen to table entry and get ptr
    43 000001C8 4801D3              <1>     add rbx, rdx    ;Add word offset to table base
    44 000001CB FFE3                <1>     jmp rbx ;Goto function pointer in rbx
    45                              <1> .exit:
    46 000001CD C3                  <1>     ret
    47                              <1> 
    48                              <1> .variableAssignment:
    49                              <1>     ;Establish if the string is a variable assignment or not
    50                              <1>     ;rsi points to start of string
    51 000001CE E887000000          <1>     call getVarNameLength   ;Get the variable name length
    52 000001D3 4889F7              <1>     mov rdi, rsi    ;Save ptr to start of string in rdi
    53 000001D6 4801CE              <1>     add rsi, rcx    ;Go to end of string
    54 000001D9 E871000000          <1>     call spaceSkip  ;Skip spaces after the end of the var name
    55 000001DE AC                  <1>     lodsb   ;Get the first char after the spaces. This must be a =
    56 000001DF 3C3D                <1>     cmp al, "="
    57 000001E1 7554                <1>     jne .syntaxError
    58 000001E3 4889FE              <1>     mov rsi, rdi    ;Return rsi to the start of the string name
    59 000001E6 4801CE              <1>     add rsi, rcx    ;Go to end of var name
    60 000001E9 48FFCE              <1>     dec rsi
    61 000001EC AC                  <1>     lodsb   ;Get last char into al and inc rsi
    62 000001ED 3C24                <1>     cmp al, "$"
    63 000001EF 7420                <1>     je .stringAssignment
    64 000001F1 E859000000          <1>     call spaceSkip  ;Skip any spaces
    65 000001F6 48FFC6              <1>     inc rsi         ;Go past the equality sign
    66 000001F9 E851000000          <1>     call spaceSkip  ;Skip any spaces
    67 000001FE 803E22              <1>     cmp byte [rsi], 22h ;Open speech mark
    68 00000201 7440                <1>     je .typError    ;Integers cant have speechmarks
    69 00000203 E89A000000          <1>     call handleAlgebraicExpression  ;Get the result of the expression into rax
    70 00000208 4889FE              <1>     mov rsi, rdi    ;Return the start of the string into rsi
    71 0000020B E8E7010000          <1>     call setNumericVariable
    72 00000210 C3                  <1>     ret
    73                              <1> .stringAssignment:
    74                              <1> ;This simply copies the string which is either speech mark, 0 or : terminated
    75                              <1> ;First allocate a string
    76                              <1> ;rsi = First char after the end of the variable name
    77                              <1> ;rdi = start of variable name 
    78                              <1> ;rcx = char count for var name
    79 00000211 E839000000          <1>     call spaceSkip  ;Skip any spaces
    80 00000216 48FFC6              <1>     inc rsi         ;Go past the equality sign
    81 00000219 E831000000          <1>     call spaceSkip  ;Skip any spaces
    82 0000021E 803E22              <1>     cmp byte [rsi], 22h ;Open speechmark check again
    83 00000221 7520                <1>     jne .typError    ;Assigning a number to a string is a type error
    84                              <1>     ;rsi now points to the start of the string to save
    85 00000223 48FFC6              <1>     inc rsi ;Go past the speech mark
    86 00000226 4889F2              <1>     mov rdx, rsi    ;save start of string data in rdx
    87 00000229 4889FE              <1>     mov rsi, rdi
    88 0000022C 57                  <1>     push rdi
    89 0000022D E8FC010000          <1>     call setStringVariable
    90 00000232 5E                  <1>     pop rsi ;Save the start of the assignment in rsi
    91 00000233 6687DB              <1>     xchg bx, bx
    92 00000236 C3                  <1>     ret
    93                              <1> 
    94                              <1> .syntaxError:
    95 00000237 488D2D2A070000      <1>     lea rbp, syntax ;Syntax error, keyword a bit confused
    96 0000023E E974FEFFFF          <1>     jmp criticalError
    97                              <1> .typError:
    98 00000243 488D2D2D070000      <1>     lea rbp, typeError
    99 0000024A E968FEFFFF          <1>     jmp criticalError
   100                              <1> 
    13                                  %include "PARSE.ASM"
    14                              <1> ;Main Parsing Routines go here
    15                              <1> 
    16                              <1> spaceSkip:
    17                              <1> ;Allows us to skip spaces that might have been placed for
    18                              <1> ; ease of reading by the user.
    19                              <1> ;Input: rsi = Pointer to string
    20                              <1> ;Output: rsi = First non space character encountered
    21 0000024F 803E20              <1>     cmp byte [rsi], " "
    22 00000252 7505                <1>     jne .exit
    23 00000254 48FFC6              <1>     inc rsi
    24 00000257 EBF6                <1>     jmp short spaceSkip
    25                              <1> .exit:
    26 00000259 C3                  <1>     ret
    27                              <1> 
    28                              <1> getVarNameLength:
    29                              <1> ;Called pointing to the buffer with the var name in it
    30                              <1> ;Input: rsi = Start of var name
    31                              <1> ;Output: ecx = Length of varname
    32 0000025A 50                  <1>     push rax
    33 0000025B 56                  <1>     push rsi
    34 0000025C 57                  <1>     push rdi
    35 0000025D 53                  <1>     push rbx
    36 0000025E 52                  <1>     push rdx
    37 0000025F 31D2                <1>     xor edx, edx    ;Clear counter of chars
    38 00000261 488D1DCA060000      <1>     lea rbx, varChrs    ;Get the list of valid variable name chars
    39                              <1> .search:
    40 00000268 4889DF              <1>     mov rdi, rbx    ;Save pointer in rbx
    41 0000026B AC                  <1>     lodsb       ;Get the first char into al
    42 0000026C B926000000          <1>     mov ecx, numVarChars
    43 00000271 F2AE                <1>     repne scasb       ;Look for char in the valid chars list
    44 00000273 750A                <1>     jne .exit   ;Char not found, drop it
    45 00000275 FFC2                <1>     inc edx     ;Add one to number of chars found
    46 00000277 81FA28000000        <1>     cmp edx, 40 ;At position for char 40?
    47 0000027D 72E9                <1>     jb .search  ;Whilst below, keep going
    48                              <1> .exit:
    49 0000027F 89D1                <1>     mov ecx, edx
    50 00000281 5A                  <1>     pop rdx
    51 00000282 5B                  <1>     pop rbx
    52 00000283 5F                  <1>     pop rdi
    53 00000284 5E                  <1>     pop rsi
    54 00000285 58                  <1>     pop rax
    55 00000286 C3                  <1>     ret
    56                              <1> 
    57                              <1> getVarType:
    58                              <1> ;Input: rsi = Start of var name
    59                              <1> ;       rcx = Length of varname
    60                              <1> ;Output: ebx = 0 => Integer
    61                              <1> ;        ebx = 1 => String
    62                              <1> ;        ebx = -1 => Var doesnt exist, caller handles
    63 00000287 50                  <1>     push rax
    64 00000288 51                  <1>     push rcx
    65 00000289 56                  <1>     push rsi
    66 0000028A E82C040000          <1>     call findVariable
    67 0000028F 4881FBFFFFFFFF      <1>     cmp rbx, -1
    68 00000296 7406                <1>     je .exit
    69 00000298 0FB65B03            <1>     movzx ebx, byte [rbx + memBlock.bBlockType]
    70 0000029C FFCB                <1>     dec ebx
    71                              <1> .exit:
    72 0000029E 5E                  <1>     pop rsi
    73 0000029F 59                  <1>     pop rcx
    74 000002A0 58                  <1>     pop rax
    75 000002A1 C3                  <1>     ret
    76                              <1> 
    77                              <1> handleAlgebraicExpression:
    78                              <1> ;Input: rsi = Points to a mathematical expression
    79                              <1> ;Output: rax = Result of said expression
    80                              <1> ;Declares a syntax error if weird chars found
    81                              <1> ;Declares a type error if a string variable found
    82                              <1>     ;Handle Logical Connectives here
    83 000002A2 66813E4E4F          <1>     cmp word [rsi], "NO"
    84 000002A7 7504                <1>     jne .hae0
    85 000002A9 807E0254            <1>     cmp byte [rsi + 2], "T"
    86                              <1> ;    je .not
    87                              <1> .hae0:
    88 000002AD 66813E414E          <1>     cmp word [rsi], "AN"
    89 000002B2 7504                <1>     jne .hae1
    90 000002B4 807E0244            <1>     cmp byte [rsi + 2], "D"
    91                              <1> ;    je .and
    92                              <1> .hae1:
    93 000002B8 66813E4F52          <1>     cmp word [rsi], "OR"
    94                              <1> ;    je .or
    95 000002BD 66813E584F          <1>     cmp word [rsi], "XO"
    96 000002C2 7504                <1>     jne .hae2
    97 000002C4 807E0252            <1>     cmp byte [rsi + 2], "R"
    98                              <1> ;    je .xor
    99                              <1> .hae2:
   100 000002C8 66813E494D          <1>     cmp word [rsi], "IM"
   101 000002CD 7504                <1>     jne .relationals
   102 000002CF 807E0250            <1>     cmp byte [rsi + 2], "P"
   103                              <1> ;    je .implicaton
   104                              <1> .relationals:
   105                              <1>     ;Handle Relational connectives
   106 000002D3 803E3D              <1>     cmp byte [rsi], "="
   107                              <1> ;    je .equivalence
   108 000002D6 66813E3C3E          <1>     cmp word [rsi], "<>"
   109                              <1> ;    je .neq
   110 000002DB 66813E3E3C          <1>     cmp word [rsi], "><"
   111                              <1> ;    je .neq
   112 000002E0 803E3C              <1>     cmp byte [rsi], "<"
   113                              <1> ;    je .less
   114 000002E3 803E3E              <1>     cmp byte [rsi], ">"
   115                              <1> ;    je .greater
   116 000002E6 66813E3C3D          <1>     cmp word [rsi], "<="
   117                              <1> ;    je .leq
   118 000002EB 66813E3E3D          <1>     cmp word [rsi], ">="
   119                              <1> ;    je .geq
   120 000002F0 E828000000          <1>     call .handleSecondLevel
   121                              <1> .parseAdditiveOperators:    
   122 000002F5 803E2D              <1>     cmp byte [rsi], '-'
   123 000002F8 7415                <1>     je .processMinus
   124 000002FA 803E2B              <1>     cmp byte [rsi], '+'
   125 000002FD 0F8592000000        <1>     jne .exit              ;No operators, expression evaluated, exit
   126 00000303 50                  <1>     push rax
   127 00000304 E811000000          <1>     call .handleSecondLevelSkip   ;Parse second level
   128                              <1> .processAdd:    
   129 00000309 59                  <1>     pop rcx
   130 0000030A 4801C8              <1>     add rax, rcx           ;Add the two numbers
   131 0000030D EBE6                <1>     jmp short .parseAdditiveOperators  ;Search again for + or -
   132                              <1> .processMinus:
   133 0000030F 50                  <1>     push rax
   134 00000310 E805000000          <1>     call .handleSecondLevelSkip   ;Parse second level
   135 00000315 48F7D8              <1>     neg rax              ;Change a - b to a + -b
   136 00000318 EBEF                <1>     jmp short .processAdd
   137                              <1> 
   138                              <1> ;Level 2, Division and multiplication
   139                              <1> 
   140                              <1> .handleSecondLevelSkip:
   141 0000031A 48FFC6              <1>     inc rsi              ;Skip the op symbol
   142                              <1> .handleSecondLevel:
   143 0000031D E82C000000          <1>     call .handleThirdLevel      ;Call third level
   144                              <1> .parseProductOperators:   
   145 00000322 803E2F              <1>     cmp byte [rsi], '/'
   146 00000325 7411                <1>     je .processDiv
   147 00000327 803E2A              <1>     cmp byte [rsi], '*'
   148 0000032A 7569                <1>     jne .exit           ;Neither multiplication or division, return up a level
   149                              <1> 
   150 0000032C 50                  <1>     push rax
   151 0000032D E819000000          <1>     call .handleThirdLevelSkip   ;Call third level
   152 00000332 59                  <1>     pop rcx
   153 00000333 48F7E9              <1>     imul rcx             ; Multiplication
   154 00000336 EBEA                <1>     jmp short .parseProductOperators   ;Search again for * or /
   155                              <1> 
   156                              <1> .processDiv:
   157 00000338 50                  <1>     push rax
   158 00000339 E80D000000          <1>     call .handleThirdLevelSkip   ;Call third level
   159 0000033E 59                  <1>     pop rcx
   160 0000033F 4891                <1>     xchg rax, rcx
   161 00000341 31D2                <1>     xor edx, edx         ;Clear rdx for rdx:rax
   162 00000343 48F7F9              <1>     idiv rcx             ;Signed division
   163 00000346 E9D7FFFFFF          <1>     jmp .parseProductOperators         ;Search again for * or /
   164                              <1> 
   165                              <1> ;Level 3, Brackets, numbers and vars.
   166                              <1> 
   167                              <1> .handleThirdLevelSkip:
   168 0000034B 48FFC6              <1>     inc rsi             ;Skip the op symbol
   169                              <1> .handleThirdLevel:
   170 0000034E E8FCFEFFFF          <1>     call spaceSkip
   171 00000353 AC                  <1>     lodsb               ;Read char and adv rsi
   172 00000354 3C28                <1>     cmp al, '('
   173 00000356 750C                <1>     jne .notBracket
   174 00000358 E845FFFFFF          <1>     call handleAlgebraicExpression  ;Parse the inner expression
   175 0000035D 803E29              <1>     cmp byte [rsi], ')'   
   176 00000360 744D                <1>     je .closeBracket     ;If close bracket, goto skip spaces
   177 00000362 EB53                <1>     jmp short .error     ;Otherwise, error
   178                              <1> 
   179                              <1> .notBracket:    
   180 00000364 3C5E                <1>     cmp al, "^"
   181 00000366 742E                <1>     je .exponentFound
   182                              <1> .varConstCheck:
   183 00000368 3C41                <1>     cmp al, "A"       ;Alphabetical first char?
   184 0000036A 730D                <1>     jae .varOrRNDFound      ;Yes, variable found or rnd function or error
   185 0000036C 48FFCE              <1>     dec rsi            ;Else back one symbol 
   186 0000036F E867020000          <1>     call decimalToHex  ;to read number into rax
   187 00000374 E9D6FEFFFF          <1>     jmp spaceSkip
   188                              <1> 
   189                              <1> .varOrRNDFound:
   190 00000379 3C5A                <1>     cmp al, "Z"  
   191 0000037B 773A                <1>     ja .error   ;Syntax error if char not between A-Z  
   192 0000037D 3C52                <1>     cmp al, "R"
   193 0000037F 7517                <1>     jne .varFound
   194 00000381 803E4E              <1>     cmp byte [rsi], "N" ;rsi was advanced by 1, check 
   195 00000384 7512                <1>     jne .varFound
   196 00000386 807E0144            <1>     cmp byte [rsi+1], "D"
   197 0000038A 750C                <1>     jne .varFound
   198 0000038C 66AD                <1>     lodsw               ;Advance rsi by 3
   199 0000038E AC                  <1>     lodsb
   200 0000038F E440                <1>     in al, 40h         ;Read timer counter 0
   201 00000391 480FB6C0            <1>     movzx rax, al
   202                              <1> .exit:
   203 00000395 C3                  <1>     ret                ;Return
   204                              <1> .exponentFound:
   205 00000396 EBD0                <1>    jmp short .varConstCheck
   206                              <1> .varFound:    
   207 00000398 48FFCE              <1>     dec rsi ;Back a char
   208 0000039B 51                  <1>     push rcx
   209 0000039C E8B9FEFFFF          <1>     call getVarNameLength
   210 000003A1 E81D000000          <1>     call getNumericVariable ;Get variable value in rax
   211 000003A6 4801CE              <1>     add rsi, rcx    ;Go past the edge of the name
   212 000003A9 59                  <1>     pop rcx
   213 000003AA E9A0FEFFFF          <1>     jmp spaceSkip
   214                              <1> 
   215                              <1> .closeBracket:
   216 000003AF 48FFC6              <1>     inc rsi
   217 000003B2 E998FEFFFF          <1>     jmp spaceSkip
   218                              <1> .error:
   219 000003B7 488D2DAA050000      <1>     lea rbp, syntax
   220 000003BE E9F4FCFFFF          <1>     jmp criticalError
   221                              <1> 
   222                              <1> 
   223                              <1> getNumericVariable:
   224                              <1> ;Gets the value stored in a variable into rax 
   225                              <1> ;Input: rsi = Pointer to first char of a variable name
   226                              <1> ;Output: rax = Variable Value
   227                              <1> ;        rsi = Pointer to first char of a variable name
   228 000003C3 56                  <1>     push rsi
   229 000003C4 51                  <1>     push rcx
   230 000003C5 53                  <1>     push rbx
   231 000003C6 E88FFEFFFF          <1>     call getVarNameLength   ;Returns the length of the var name in cx
   232 000003CB E8EB020000          <1>     call findVariable       ;Returns a pointer to the variable block in rbx
   233 000003D0 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Variable doesnt exist? Pretend it is 0
   234 000003D7 740E                <1>     je .noVar
   235 000003D9 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
   236 000003DD 750C                <1>     jne .stringFoundError
   237 000003DF 488B4304            <1>     mov rax, qword [rbx + varBlock.qValue]
   238                              <1> .exit:
   239 000003E3 5B                  <1>     pop rbx
   240 000003E4 59                  <1>     pop rcx
   241 000003E5 5E                  <1>     pop rsi
   242 000003E6 C3                  <1>     ret
   243                              <1> .noVar:
   244 000003E7 31C0                <1>     xor eax, eax
   245 000003E9 EBF8                <1>     jmp short .exit
   246                              <1> .stringFoundError:
   247 000003EB 488D2D85050000      <1>     lea rbp, typeError
   248 000003F2 E9C0FCFFFF          <1>     jmp criticalError
   249                              <1> 
   250                              <1> setNumericVariable:
   251                              <1> ;Sets the value stored in a variable
   252                              <1> ;Input: rsi = Pointer to first char of a variable name
   253                              <1> ;       rax = Variable value
   254                              <1> ;Output: rsi = Pointer to first char of variable name
   255 000003F7 56                  <1>     push rsi
   256 000003F8 51                  <1>     push rcx
   257 000003F9 53                  <1>     push rbx
   258                              <1> 
   259 000003FA E85BFEFFFF          <1>     call getVarNameLength   ;Returns the length of the var name in cx
   260 000003FF E8B7020000          <1>     call findVariable       ;Returns a pointer to the variable block in rbx
   261 00000404 4881FBFFFFFFFF      <1>     cmp rbx, -1             ;Variable doesnt exit?
   262 0000040B 740E                <1>     je .makeEditInteger      ;Make one!
   263 0000040D 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
   264 00000411 750F                <1>     jne .stringFoundError
   265 00000413 48894304            <1>     mov qword [rbx + varBlock.qValue], rax  ;Save value
   266                              <1> .exit:
   267 00000417 5B                  <1>     pop rbx
   268 00000418 59                  <1>     pop rcx
   269 00000419 5E                  <1>     pop rsi
   270 0000041A C3                  <1>     ret
   271                              <1> .makeEditInteger:
   272 0000041B E8A5030000          <1>     call makeEditInteger
   273 00000420 EBF5                <1>     jmp short .exit
   274                              <1> .stringFoundError:
   275 00000422 488D2D4E050000      <1>     lea rbp, typeError
   276 00000429 E989FCFFFF          <1>     jmp criticalError
   277                              <1> 
   278                              <1> setStringVariable:
   279                              <1> ;Sets the string pointed to by rdx
   280                              <1> ;Input: rsi = Pointer to first char of a variable name
   281                              <1> ;       rdx = Start of string
   282                              <1> ;Output: rsi = Pointer to first char of variable name
   283                              <1> ;Keeps adding characters until a 0, : or " encountered
   284                              <1> ;Adds a 0 to the end
   285 0000042E 56                  <1>     push rsi
   286 0000042F 51                  <1>     push rcx
   287 00000430 53                  <1>     push rbx
   288 00000431 52                  <1>     push rdx
   289 00000432 57                  <1>     push rdi
   290 00000433 E822FEFFFF          <1>     call getVarNameLength   ;Gets the length of the var name in cx
   291 00000438 E87E020000          <1>     call findVariable       ;Returns a ptr to the var block in rbx
   292 0000043D 7418                <1>     je .makeEditString
   293 0000043F 807B0302            <1>     cmp byte [rbx + memBlock.bBlockType], datBlockType
   294 00000443 7519                <1>     jne .intFoundError
   295 00000445 488D7B04            <1>     lea rdi, qword [rbx + stringBlock.string]
   296 00000449 4889D6              <1>     mov rsi, rdx
   297 0000044C E819040000          <1>     call terminatedstrcpy
   298                              <1> .exit:
   299 00000451 5F                  <1>     pop rdi
   300 00000452 5A                  <1>     pop rdx
   301 00000453 5B                  <1>     pop rbx
   302 00000454 59                  <1>     pop rcx
   303 00000455 5E                  <1>     pop rsi
   304 00000456 C3                  <1>     ret
   305                              <1> .makeEditString:
   306 00000457 E8B4030000          <1>     call makeEditString
   307 0000045C EBF3                <1>     jmp short .exit
   308                              <1> .intFoundError:
   309 0000045E 488D2D12050000      <1>     lea rbp, typeError
   310 00000465 E94DFCFFFF          <1>     jmp criticalError
   311                              <1> 
   312                              <1> findOtherExpressionsOnLine:
   313                              <1> ;Input: rsi = start of line portion
   314                              <1> ;Output: rsi = points to first char after first ":" found
   315                              <1> ;         al = : if it was found or 00 if not
   316 0000046A AC                  <1>     lodsb
   317 0000046B 3C00                <1>     cmp al, 0   ;Null hit, RIP procedure
   318 0000046D 7404                <1>     je .exit
   319 0000046F 3C3A                <1>     cmp al, ":" ;Strings can be terminated with a :
   320 00000471 75F7                <1>     jne findOtherExpressionsOnLine
   321                              <1> .exit:
   322 00000473 C3                  <1>     ret
    14                                  %include "COMMANDS.ASM"
    15                              <1> 
    16                              <1> funTbl:
    17                              <1> ;Use PASCAL strings to know how long the comparisons need to be
    18                              <1> ;All function pointers are saved as distances from the head
    19                              <1> ; of the function table
    20 00000474 044C4554            <1>     db 4, "LET"     ;DONE
    21 00000478 5700                <1>     dw oldSchoolAssignemnt - funTbl
    22 0000047A 044E4557            <1>     db 4, "NEW"     ;DONE
    23 0000047E 6700                <1>     dw newProgram - funTbl 
    24                              <1> 
    25 00000480 054C495354          <1>     db 5, "LIST"
    26 00000485 BB00                <1>     dw listProgram - funTbl 
    27                              <1> 
    28 00000487 0452554E            <1>     db 4, "RUN"
    29 0000048B BE00                <1>     dw runProgram - funTbl
    30                              <1> 
    31 0000048D 065052494E54        <1>     db 6, "PRINT"    ;ALMOST DONE
    32 00000493 C100                <1>     dw printStatement - funTbl
    33                              <1> 
    34 00000495 023F                <1>     db 2, "?"        ;ALMOST DONE
    35 00000497 C100                <1>     dw printStatement - funTbl
    36                              <1> 
    37 00000499 06494E505554        <1>     db 6, "INPUT"
    38 0000049F 5001                <1>     dw getInput - funTbl
    39                              <1> 
    40 000004A1 034946              <1>     db 3, "IF"
    41 000004A4 5301                <1>     dw handleIf - funTbl
    42                              <1> 
    43 000004A6 05474F544F          <1>     db 5, "GOTO"
    44 000004AB 5601                <1>     dw fancyJmp - funTbl
    45                              <1> 
    46 000004AD 0753595354454D      <1>     db 7, "SYSTEM"
    47 000004B4 5901                <1>     dw returnToDOS - funTbl
    48                              <1> 
    49 000004B6 04464F52            <1>     db 4, "FOR"
    50 000004BA 5C01                <1>     dw forLoop - funTbl
    51                              <1> 
    52 000004BC 04434C53            <1>     db 4, "CLS"     ;DONE
    53 000004C0 5F01                <1>     dw cls - funTbl
    54                              <1> 
    55 000004C2 064445425547        <1>     db 6, "DEBUG"
    56 000004C8 6401                <1>     dw dbgr - funTbl
    57                              <1> 
    58 000004CA FF                  <1>     db -1    ;Demarkate the end of the table
    59                              <1> oldSchoolAssignemnt:
    60                              <1> ;
    61 000004CB 0FB60F              <1>     movzx ecx, byte [rdi]
    62 000004CE 4801CE              <1>     add rsi, rcx
    63 000004D1 E879FDFFFF          <1>     call spaceSkip  ;Goto var assignment as if at start of line
    64 000004D6 E9F3FCFFFF          <1>     jmp executeExpression.variableAssignment
    65                              <1> newProgram: 
    66                              <1> ;Simply reset the program pointers
    67 000004DB 488D05(00000000)    <1>     lea rax, section.programArea.vstart
    68 000004E2 488905(F8100000)    <1>     mov qword [minMemAddr], rax
    69 000004E9 488905(12110000)    <1>     mov qword [lastBlock], rax  ;Start writing at this location
    70 000004F0 488905(0A110000)    <1>     mov qword [mcbChain], rax   ;Create a mock MCB here
    71 000004F7 C60072              <1>     mov byte [rax + memBlock.bSignature], lastMemBlock
    72 000004FA 66C740010000        <1>     mov word [rax + memBlock.wBlockSize], 0 ;Dummy block, no size, gets overwritten
    73 00000500 31C0                <1>     xor eax, eax
    74 00000502 8805(08110000)      <1>     mov byte [strLen], al
    75 00000508 488D3D(C80F0000)    <1>     lea rdi, inString
    76 0000050F B900010000          <1>     mov ecx, maxLineLen
    77 00000514 F3AA                <1>     rep stosb
    78 00000516 C605(24110000)0A    <1>     mov byte [currentLine], 10  ;Default to line 10
    79 0000051D 48FFC8              <1>     dec rax ;rax = -1
    80 00000520 488905(1A110000)    <1>     mov qword [firstLinPtr], rax ;No program in memory
    81 00000527 668905(22110000)    <1>     mov word [firstLinNum], ax
    82 0000052E C3                  <1>     ret
    83                              <1> listProgram:
    84                              <1> ;Go line by line and echo the program lines, inserting a crlf after each
    85                              <1> ;First print the line number, then add a space
    86 0000052F B002                <1>     mov al, 2
    87 00000531 C3                  <1>     ret
    88                              <1> runProgram:
    89                              <1> ;Go to each line, one at a time, skip the line number and execute the expr
    90                              <1> ;First thing it does, takes the first line number and moves it to current line number
    91 00000532 B003                <1>     mov al, 3
    92 00000534 C3                  <1>     ret
    93                              <1> printStatement:
    94                              <1> ;Strings must be "" delimited or a string variable must be used
    95                              <1> ;rdi points to the command length
    96 00000535 0FB60F              <1>     movzx ecx, byte [rdi]
    97 00000538 4801CE              <1>     add rsi, rcx
    98                              <1> .printStart:
    99 0000053B E80FFDFFFF          <1>     call spaceSkip  ;move rsi to the start of the expression
   100 00000540 AC                  <1>     lodsb
   101 00000541 84C0                <1>     test al, al     ;Is this a null string?
   102 00000543 746B                <1>     jz .psvexit
   103 00000545 3C22                <1>     cmp al, 022h    ;22h = ASCII Speechmarks
   104 00000547 744F                <1>     je .stringPrint
   105                              <1>     ;Here we check if the first char is ASCII, if it is, check if its a string var
   106 00000549 3C41                <1>     cmp al, "A"
   107 0000054B 7204                <1>     jb .printExpr
   108 0000054D 3C5A                <1>     cmp al, "Z"
   109 0000054F 721A                <1>     jb .printStringVar
   110                              <1> .printExpr:
   111 00000551 48FFCE              <1>     dec rsi ;Return to the start of the string
   112 00000554 E849FDFFFF          <1>     call handleAlgebraicExpression ;Gets value of a var and/or algebraic operation
   113 00000559 E8A5000000          <1>     call printdecimalword
   114 0000055E 488D2DB8030000      <1>     lea rbp, crlf
   115 00000565 E8F4FBFFFF          <1>     call ttyOutString
   116 0000056A C3                  <1>     ret
   117                              <1> .printStringVar:
   118                              <1>     ;Check if it is a string var
   119 0000056B 48FFCE              <1>     dec rsi
   120 0000056E E8E7FCFFFF          <1>     call getVarNameLength
   121 00000573 E80FFDFFFF          <1>     call getVarType
   122 00000578 81FB01000000        <1>     cmp ebx, strEquate
   123 0000057E 75D1                <1>     jne .printExpr  ;rsi points to the same point as initially
   124 00000580 E836010000          <1>     call findVariable   ;ecx has string length, get block ptr in rbx
   125 00000585 55                  <1>     push rbp
   126 00000586 488D6B04            <1>     lea rbp, qword [rbx + stringBlock.string]
   127 0000058A E8CFFBFFFF          <1>     call ttyOutString
   128 0000058F 5D                  <1>     pop rbp
   129 00000590 4801CE              <1>     add rsi, rcx    ;Go past variable
   130 00000593 E8B7FCFFFF          <1>     call spaceSkip
   131                              <1> .stringPrint:
   132 00000598 AC                  <1>     lodsb
   133 00000599 3C00                <1>     cmp al, 0
   134 0000059B 7413                <1>     je .psvexit
   135 0000059D 3C3A                <1>     cmp al, ":"
   136 0000059F 740F                <1>     je .psvexit
   137 000005A1 3C22                <1>     cmp al, 022h    ;Close Speech marks, check next char
   138 000005A3 7418                <1>     je .closespeechmarks
   139 000005A5 3C3B                <1>     cmp al, ";"     ;Semicolon means print next section on same line
   140 000005A7 7492                <1>     je .printStart
   141 000005A9 E8ABFBFFFF          <1>     call ttyOutChar
   142 000005AE EBE8                <1>     jmp short .stringPrint
   143                              <1> .psvexit:
   144 000005B0 488D2D66030000      <1>     lea rbp, crlf
   145 000005B7 E8A2FBFFFF          <1>     call ttyOutString
   146 000005BC C3                  <1>     ret
   147                              <1> .closespeechmarks:
   148 000005BD E88DFCFFFF          <1>     call spaceSkip
   149 000005C2 EBD4                <1>     jmp short .stringPrint
   150                              <1> getInput:
   151                              <1> ;Take a string as a prompt
   152 000005C4 B005                <1>     mov al, 5
   153 000005C6 C3                  <1>     ret
   154                              <1> handleIf:
   155                              <1> ;Evaluate the string after IF is greater than 0, THEN goto line x
   156                              <1> ;IF exp1 THEN exp2
   157 000005C7 B006                <1>     mov al, 6
   158 000005C9 C3                  <1>     ret
   159                              <1> fancyJmp:
   160                              <1> ;GOTO, the hell of every dumb high level programmer
   161 000005CA B007                <1>     mov al, 7
   162 000005CC C3                  <1>     ret
   163                              <1> returnToDOS:
   164 000005CD B008                <1>     mov al, 8
   165 000005CF C3                  <1>     ret
   166                              <1> forLoop:
   167 000005D0 B009                <1>     mov al, 9
   168 000005D2 C3                  <1>     ret
   169                              <1> cls:
   170 000005D3 E993FBFFFF          <1>     jmp ttyClear
   171                              <1> dbgr:
   172 000005D8 CD38                <1>     int 38h
   173                              <1>     ;Reconnect CTRL+BREAK handler
   174 000005DA C3                  <1>     ret
    15                                  %include "MATH.ASM"
    16                              <1> decimalToHex:
    17                              <1>     ;Takes ASCII encoded decimal number and 
    18                              <1>     ;returns its hex value
    19                              <1>     ;Input: rsi = Start of numeric ONLY string
    20                              <1>     ;Output: rax = Number
    21                              <1>     ;        rsi = First non-numeric char past end of number
    22 000005DB 53                  <1>     push rbx
    23 000005DC 51                  <1>     push rcx
    24 000005DD 52                  <1>     push rdx
    25 000005DE 31DB                <1>     xor ebx, ebx    ;Start with rbx = 0
    26                              <1> .processDigits:    
    27 000005E0 AC                  <1>     lodsb           ;Get the first digit in al
    28 000005E1 2C30                <1>     sub al, 30h     ;Reduce to value
    29 000005E3 31D2                <1>     xor edx, edx    ;Clear for multiplication
    30 000005E5 3C0A                <1>     cmp al, 10      ;Digit valid? Propagte CF
    31 000005E7 480FB6C0            <1>     movzx rax, al   ;Clear upper bits
    32 000005EB 4893                <1>     xchg rax, rbx
    33 000005ED 730D                <1>     jnc .exit       ;Digit was not valid, exit
    34 000005EF B90A000000          <1>     mov ecx, 10     ;Multiply result by 10
    35 000005F4 48F7E1              <1>     mul rcx
    36 000005F7 4801C3              <1>     add rbx, rax    ;Add the new digits
    37 000005FA EBE4                <1>     jmp short .processDigits
    38                              <1> .exit:
    39 000005FC 48FFCE              <1>     dec rsi         ;rsi points to first non-digit
    40 000005FF 5A                  <1>     pop rdx
    41 00000600 59                  <1>     pop rcx
    42 00000601 5B                  <1>     pop rbx
    43 00000602 C3                  <1>     ret
    44                              <1> 
    45                              <1> printdecimalword:
    46                              <1> ;Takes the qword in rax and prints its decimal representation
    47 00000603 50                  <1>     push rax
    48 00000604 53                  <1>     push rbx
    49 00000605 488D3D(C8100000)    <1>     lea rdi, digitString   ;Use the default line as a buffer
    50                              <1>     ;Sanitise the digit buffer
    51 0000060C 57                  <1>     push rdi
    52 0000060D 51                  <1>     push rcx
    53 0000060E 50                  <1>     push rax
    54 0000060F 31C0                <1>     xor eax, eax
    55 00000611 B906000000          <1>     mov ecx, digitStringLen/8
    56 00000616 F348AB              <1>     rep stosq
    57 00000619 58                  <1>     pop rax
    58 0000061A 59                  <1>     pop rcx
    59 0000061B 5F                  <1>     pop rdi
    60                              <1> 
    61 0000061C 4881C72F000000      <1>     add rdi, digitStringLen - 1 ;Go to the end of the buffer
    62 00000623 FD                  <1>     std ;Reverse string ops
    63 00000624 50                  <1>     push rax
    64 00000625 30C0                <1>     xor al, al  ;Place delimiter
    65 00000627 AA                  <1>     stosb
    66 00000628 58                  <1>     pop rax
    67 00000629 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
    67 00000632 00                  <1>
    68                              <1> .pdw0:
    69 00000633 31D2                <1>     xor edx, edx
    70 00000635 48F7F3              <1>     div rbx
    71 00000638 80C230              <1>     add dl, '0'
    72 0000063B 80FA39              <1>     cmp dl, '9'
    73 0000063E 7603                <1>     jbe .pdw1
    74 00000640 80C207              <1>     add dl, 'A'-'0'-10
    75                              <1> .pdw1:
    76 00000643 50                  <1>     push rax
    77 00000644 88D0                <1>     mov al, dl    ;Save remainder byte
    78 00000646 AA                  <1>     stosb   ;Store the byte and add one to rdi
    79 00000647 58                  <1>     pop rax
    80 00000648 4885C0              <1>     test rax, rax
    81 0000064B 75E6                <1>     jnz .pdw0
    82 0000064D FC                  <1>     cld ;Return string ops to normal
    83 0000064E 48FFC7              <1>     inc rdi ;Skip the extra 0 that was inserted
    84 00000651 4889FD              <1>     mov rbp, rdi    ;Point rbp to the head of the string
    85 00000654 E805FBFFFF          <1>     call ttyOutString
    86 00000659 5B                  <1>     pop rbx
    87 0000065A 58                  <1>     pop rax
    88 0000065B C3                  <1>     ret
    16                                  %include "MEMORY.ASM"
    17                              <1> allocateBlock:
    18                              <1> ;Allocates a program memory block, the caller then fixes the specifics
    19                              <1> ;Output: rbx = Pointer to generic memory block, or -1 if memory full
    20                              <1> ;       Caller needs to fill in, block size, block type and specifics
    21 0000065C 52                  <1>     push rdx
    22 0000065D 488B1D(12110000)    <1>     mov rbx, qword [lastBlock]    ;Get the last block in the chain
    23 00000664 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;First allocation?
    24 0000066B 742F                <1>     je .firstAllocation
    25 0000066D C60374              <1>     mov byte [rbx + memBlock.bSignature], notLastMemBlock ;Make it not be the last
    26 00000670 480FB75301          <1>     movzx rdx, word [rbx + memBlock.wBlockSize] ;Goto end of block
    27 00000675 4801D3              <1>     add rbx, rdx    ;Move rbx over the previous last block
    28 00000678 488B15(00110000)    <1>     mov rdx, qword [maxMemAddr]
    29 0000067F 4839D3              <1>     cmp rbx, rdx ;rbx above maxmemory? 
    30 00000682 770C                <1>     ja .memoryFull
    31 00000684 48891D(12110000)    <1>     mov qword [lastBlock], rbx  ;New last block
    32 0000068B C60372              <1>     mov byte [rbx + memBlock.bSignature], lastMemBlock
    33                              <1> .exit:
    34 0000068E 5A                  <1>     pop rdx
    35 0000068F C3                  <1>     ret
    36                              <1> .memoryFull:
    37 00000690 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    37 00000699 FF                  <1>
    38 0000069A EBF2                <1>     jmp short .exit
    39                              <1> .firstAllocation:
    40                              <1> ;Deal with first allocation
    41 0000069C 488D1D(00000000)    <1>     lea rbx, section.programArea.vstart   ;Get this as the head of the chain
    42 000006A3 48891D(12110000)    <1>     mov qword [lastBlock], rbx
    43 000006AA 48891D(0A110000)    <1>     mov qword [mcbChain], rbx
    44 000006B1 C60372              <1>     mov byte [rbx + memBlock.bSignature], lastMemBlock
    45 000006B4 66C743010000        <1>     mov word [rbx + memBlock.wBlockSize], 0 ;Dummy block
    46 000006BA C3                  <1>     ret
    47                              <1> 
    48                              <1> findVariable:
    49                              <1> ;Input: rsi = Source string for variable name
    50                              <1> ;       ecx = Length of variable name (max 40)
    51                              <1> ;Output: rbx = ptr to varBlock/strBlock OR -1 if doesnt exist
    52 000006BB 50                  <1>     push rax
    53 000006BC 51                  <1>     push rcx
    54 000006BD 52                  <1>     push rdx
    55 000006BE 56                  <1>     push rsi
    56 000006BF 57                  <1>     push rdi
    57 000006C0 488B1D(0A110000)    <1>     mov rbx, qword [mcbChain]   ;Start of the chain
    58 000006C7 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Chain empty?
    59 000006CE 743E                <1>     je .exit
    60                              <1> .search:
    61 000006D0 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
    62 000006D4 7415                <1>     je .varFound    ;We found a numerical variable
    63 000006D6 807B0302            <1>     cmp byte [rbx + memBlock.bBlockType], datBlockType
    64 000006DA 741A                <1>     je .datFound    ;We found a string variable
    65                              <1> .invalid:
    66                              <1>     ;Are we at the end of the chain?
    67 000006DC 803B72              <1>     cmp byte [rbx + memBlock.bSignature], lastMemBlock
    68 000006DF 7423                <1>     je .varNotFound ;At the end of the chain and var not found? Error!
    69 000006E1 480FB75301          <1>     movzx rdx, word [rbx + memBlock.wBlockSize]
    70 000006E6 4801D3              <1>     add rbx, rdx    ;Goto next block
    71 000006E9 EBE5                <1>     jmp short .search
    72                              <1> .varFound:
    73                              <1>     ;Compare to see the var is our var
    74 000006EB 488D7B0C            <1>     lea rdi, qword [rbx + varBlock.sVarName] ;point rdi to the name string
    75 000006EF F3A6                <1>     repe cmpsb  ;Compare one byte at a time
    76 000006F1 75E9                <1>     jne .invalid
    77 000006F3 F8                  <1>     clc
    78 000006F4 EB18                <1>     jmp short .exit
    79                              <1> .datFound:
    80 000006F6 488DBB04010000      <1>     lea rdi, qword [rbx + stringBlock.sVarName] ;point rdi to the name string
    81 000006FD F3A6                <1>     repe cmpsb  ;Compare one byte at a time
    82 000006FF 75DB                <1>     jne .invalid
    83 00000701 F8                  <1>     clc
    84 00000702 EB0A                <1>     jmp short .exit
    85                              <1> .varNotFound:
    86 00000704 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    86 0000070D FF                  <1>
    87                              <1> .exit:
    88 0000070E 5F                  <1>     pop rdi
    89 0000070F 5E                  <1>     pop rsi
    90 00000710 5A                  <1>     pop rdx
    91 00000711 59                  <1>     pop rcx
    92 00000712 58                  <1>     pop rax
    93 00000713 C3                  <1>     ret
    94                              <1> 
    95                              <1> findFirstLine:
    96                              <1> ;Output: rbx = Pointer to the first program block
    97                              <1> ;         dx = Number of the first line
    98 00000714 488B1D(1A110000)    <1>     mov rbx, qword [firstLinPtr]
    99 0000071B 668B15(22110000)    <1>     mov dx, word [firstLinNum]
   100 00000722 C3                  <1>     ret
   101                              <1> 
   102                              <1> ;FIRST SEARCH FOR A LINE NUMBER BEFORE INSERTING IT INTO THE CHAIN
   103                              <1> ;IF THE LINE NUMBER IS FOUND, REPLACE THE COMMAND STRING
   104                              <1> 
   105                              <1> searchForProgramLine:
   106                              <1> ;Walk the program chain looking to see if a line number exists. If it does,
   107                              <1> ; return a pointer to the block in rbx. If it doesn't, return -1 in rbx
   108                              <1> ;Input: dx = Line number
   109                              <1> ;Output: rbx = Pointer to program block 
   110 00000723 488B1D(1A110000)    <1>     mov rbx, qword [firstLinPtr]
   111 0000072A 4881FBFFFFFFFF      <1>     cmp rbx, -1
   112 00000731 7412                <1>     je .lineFound
   113                              <1> .search:
   114 00000733 66395304            <1>     cmp word [rbx + progLineBlock.wLineNum], dx ;Equal line numbers?
   115 00000737 740C                <1>     je .lineFound
   116 00000739 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr]   ;Walk chain
   117 0000073D 48FFC3              <1>     inc rbx ;At the end? If yes, this would be 0 now
   118 00000740 75F1                <1>     jnz .search ;Not zero? Keep searching
   119 00000742 48FFCB              <1>     dec rbx ;Make it -1 again
   120                              <1> .lineFound:
   121 00000745 C3                  <1>     ret
   122                              <1> 
   123                              <1> insertProgramLine:
   124                              <1> ;Walk the program chain looking for the biggest number less than our
   125                              <1> ; line number. Once we have reached the end of the chain, insert the block there, or
   126                              <1> ; if there is no block, then we are the last in the chain
   127                              <1> ;Input: rsi = New Program Block to be added
   128 00000746 50                  <1>     push rax
   129 00000747 53                  <1>     push rbx
   130 00000748 51                  <1>     push rcx
   131 00000749 52                  <1>     push rdx
   132 0000074A 57                  <1>     push rdi
   133 0000074B E8C4FFFFFF          <1>     call findFirstLine  ;Get start of program in rbx and line number in dx
   134                              <1> ;First check if we should be the first line
   135 00000750 6687DB              <1>     xchg bx, bx
   136 00000753 668B4E04            <1>     mov cx, word [rsi + progLineBlock.wLineNum] ;Save line number in cx
   137 00000757 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Empty program marker
   138 0000075E 744D                <1>     je .first
   139 00000760 6639D1              <1>     cmp cx, dx  ;If cx is below dx, then our entry is first
   140 00000763 7248                <1>     jb .first    
   141                              <1> ;Use ax as the best line number and rdi as the pointer to that block
   142 00000765 66B8FFFF            <1>     mov ax, -1  ;Marker to indicate no insertion
   143                              <1> .walk:
   144 00000769 48817B06FFFFFFFF    <1>     cmp qword [rbx + progLineBlock.qPtr], -1    ;We are at the end
   145 00000771 7419                <1>     je .sort
   146 00000773 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Walk chain in rbx
   147 00000777 663B4B04            <1>     cmp cx, word [rbx + progLineBlock.wLineNum]
   148 0000077B 77EC                <1>     ja .walk    ;If line number is above my line number, keep walking
   149                              <1> .candidate:
   150                              <1>     ;If the new line number is below the old line number, reject
   151 0000077D 663B4304            <1>     cmp ax, word [rbx + progLineBlock.wLineNum]
   152 00000781 72E6                <1>     jb .walk
   153 00000783 4889DF              <1>     mov rdi, rbx
   154 00000786 668B4304            <1>     mov ax, word [rbx + progLineBlock.wLineNum]
   155 0000078A EBDD                <1>     jmp short .walk
   156                              <1> .sort:
   157 0000078C 66FFC0              <1>     inc ax  ;If no candidates, exit
   158 0000078F 740E                <1>     jz .skipLink
   159                              <1>     ;rdi points to the previous line to link to
   160 00000791 488B5706            <1>     mov rdx, qword [rdi + progLineBlock.qPtr]
   161 00000795 48897706            <1>     mov qword [rdi + progLineBlock.qPtr], rsi   ;Insert self here
   162 00000799 48895606            <1>     mov qword [rsi + progLineBlock.qPtr], rdx   ;Link new block to next line
   163 0000079D EB20                <1>     jmp short .exit
   164                              <1> .skipLink:
   165 0000079F 48897306            <1>     mov qword [rbx + progLineBlock.qPtr], rsi   ;Link rsi to last element in list
   166 000007A3 48C74606FFFFFFFF    <1>     mov qword [rsi + progLineBlock.qPtr], -1    ;End of chain marker
   167 000007AB EB12                <1>     jmp short .exit
   168                              <1> .first:
   169 000007AD 488935(1A110000)    <1>     mov qword [firstLinPtr], rsi
   170 000007B4 66890D(22110000)    <1>     mov word [firstLinNum], cx
   171 000007BB 48895E06            <1>     mov qword [rsi + progLineBlock.qPtr], rbx   ;Put the old first line as second line
   172                              <1> .exit:
   173 000007BF 5F                  <1>     pop rdi
   174 000007C0 5A                  <1>     pop rdx
   175 000007C1 59                  <1>     pop rcx
   176 000007C2 5B                  <1>     pop rbx
   177 000007C3 58                  <1>     pop rax
   178 000007C4 C3                  <1>     ret
   179                              <1> 
   180                              <1> makeEditInteger:
   181                              <1> ;Will make a variable if it is new name, or edit the value if it already exists
   182                              <1> ;Input: rsi = Var name
   183                              <1> ;       (e)cx = Length of varname, max 40 chars
   184                              <1> ;       rax = Value
   185 000007C5 E8F1FEFFFF          <1>     call findVariable   ;rbx returned with var block or -1
   186 000007CA 4881FBFFFFFFFF      <1>     cmp rbx, -1
   187 000007D1 7405                <1>     je .newVar
   188 000007D3 48894304            <1>     mov qword [rbx + varBlock.qValue], rax
   189 000007D7 C3                  <1>     ret
   190                              <1> .newVar:
   191 000007D8 E87FFEFFFF          <1>     call allocateBlock
   192 000007DD 4881FBFFFFFFFF      <1>     cmp rbx, -1
   193 000007E4 741E                <1>     je .error
   194 000007E6 48894304            <1>     mov qword [rbx + varBlock.qValue], rax  ;Save value
   195 000007EA 66894B01            <1>     mov word [rbx + varBlock.wBlockSize], cx    ;Save length of name
   196 000007EE 668143010C00        <1>     add word [rbx + varBlock.wBlockSize], varBlock_size ;Add full block size
   197 000007F4 C6430301            <1>     mov byte [rbx + varBlock.bBlockType], varBlockType  ;Block type
   198 000007F8 57                  <1>     push rdi
   199 000007F9 488D7B0C            <1>     lea rdi, qword [rbx + varBlock.sVarName]
   200 000007FD E87B000000          <1>     call strcpy ;Copy the string name into block buffer
   201 00000802 5F                  <1>     pop rdi
   202 00000803 C3                  <1>     ret
   203                              <1> .error:
   204 00000804 488D2D4D010000      <1>     lea rbp, noMem
   205 0000080B E9A7F8FFFF          <1>     jmp criticalError
   206                              <1> makeEditString:
   207                              <1> ;Will make a string if it is new name, or replace the string. Strings are null termin
   208                              <1> ;Input: rsi = Var name
   209                              <1> ;       ecx = Length of varname, max 40 chars
   210                              <1> ;       rdx = Ptr to string itself
   211 00000810 57                  <1>     push rdi
   212 00000811 56                  <1>     push rsi
   213 00000812 50                  <1>     push rax
   214 00000813 53                  <1>     push rbx
   215 00000814 E8A2FEFFFF          <1>     call findVariable   ;rbx returned with var block or -1
   216 00000819 4881FBFFFFFFFF      <1>     cmp rbx, -1
   217 00000820 7528                <1>     jne .strcopy
   218 00000822 E835FEFFFF          <1>     call allocateBlock
   219 00000827 4881FBFFFFFFFF      <1>     cmp rbx, -1
   220 0000082E 742E                <1>     je .error
   221 00000830 66894B01            <1>     mov word [rbx + stringBlock.wBlockSize], cx    ;Save length of name
   222 00000834 668143010401        <1>     add word [rbx + stringBlock.wBlockSize], stringBlock_size ;Add full block size
   223 0000083A C6430302            <1>     mov byte [rbx + stringBlock.bBlockType], datBlockType  ;Block type
   224 0000083E 488DBB04010000      <1>     lea rdi, qword [rbx + stringBlock.sVarName]
   225 00000845 E833000000          <1>     call strcpy ;Copy the string name into block buffer
   226                              <1> .strcopy:
   227 0000084A 488D7B04            <1>     lea rdi, qword [rbx + stringBlock.string]   ;point to string space
   228 0000084E 4889D6              <1>     mov rsi, rdx    ;Point rsi to the string itself
   229 00000851 E814000000          <1>     call terminatedstrcpy
   230 00000856 30C0                <1>     xor al, al
   231 00000858 AA                  <1>     stosb   ;Store the null delimiter
   232 00000859 5B                  <1>     pop rbx
   233 0000085A 58                  <1>     pop rax
   234 0000085B 5E                  <1>     pop rsi
   235 0000085C 5F                  <1>     pop rdi
   236 0000085D C3                  <1>     ret
   237                              <1> .error:
   238 0000085E 488D2DF3000000      <1>     lea rbp, noMem
   239 00000865 E94DF8FFFF          <1>     jmp criticalError
   240                              <1> ;------------------------------------------------:
   241                              <1> ;  The below are misc memory related functions   :
   242                              <1> ;------------------------------------------------:
   243                              <1> terminatedstrcpy:
   244                              <1> ;rdi = Destination String
   245                              <1> ;rsi = Source String
   246                              <1> ;Copy a terminated string
   247 0000086A 50                  <1>     push rax
   248                              <1> .copy:
   249 0000086B AC                  <1>     lodsb   ;Get char in al and inc rsi
   250 0000086C 3C00                <1>     cmp al, 0
   251 0000086E 740B                <1>     je .exit
   252 00000870 3C3A                <1>     cmp al, ":"
   253 00000872 7407                <1>     je .exit
   254 00000874 3C22                <1>     cmp al, 22h ;Speechmark
   255 00000876 7403                <1>     je .exit
   256 00000878 AA                  <1>     stosb   ;Save char from al and inc rdi
   257 00000879 EBF0                <1>     jmp short .copy 
   258                              <1> .exit:
   259 0000087B 58                  <1>     pop rax
   260 0000087C C3                  <1>     ret
   261                              <1> strcpy:
   262                              <1> ;rdi = Destination string
   263                              <1> ;rsi = Source string
   264                              <1> ;rcx = Number of Chars to copy
   265 0000087D 57                  <1>     push rdi
   266 0000087E 56                  <1>     push rsi
   267 0000087F 51                  <1>     push rcx
   268 00000880 F3A4                <1>     rep movsb
   269 00000882 59                  <1>     pop rcx
   270 00000883 5E                  <1>     pop rsi
   271 00000884 5F                  <1>     pop rdi
   272 00000885 C3                  <1>     ret
   273                              <1> strlen:
   274                              <1> ;Input: rsi = String start
   275                              <1> ;Output: rsi = String start
   276                              <1> ;        ecx = String length, inclusive of NULL char
   277 00000886 50                  <1>     push rax
   278 00000887 56                  <1>     push rsi
   279 00000888 31C9                <1>     xor ecx, ecx    ;Clear counter
   280                              <1> .search:
   281 0000088A AC                  <1>     lodsb
   282 0000088B FFC1                <1>     inc ecx
   283 0000088D 84C0                <1>     test al, al ;Is this a null char?
   284 0000088F 75F9                <1>     jnz .search ;Null not found
   285                              <1> .exit:
   286 00000891 5E                  <1>     pop rsi
   287 00000892 58                  <1>     pop rax
   288 00000893 C3                  <1>     ret
   289                              <1> 
   290                              <1> memoryDetection:
   291 00000894 B820E80000          <1>     mov eax, 0E820h
   292 00000899 CD35                <1>     int 35h     ;rax = ptr to start, rsi = ptr to data table, each entry 24 bytes
   293 0000089B EB07                <1>     jmp short .fsa1
   294                              <1> .findStartAddr:
   295 0000089D 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   296                              <1> .fsa1:
   297 000008A4 6685C9              <1>     test cx, cx
   298 000008A7 742C                <1>     jz .worstCase
   299 000008A9 66FFC9              <1>     dec cx
   300 000008AC 488B1E              <1>     mov rbx, qword [rsi]    ;Get the address entry into rbx
   301 000008AF 4839C3              <1>     cmp rbx, rax    
   302 000008B2 75E9                <1>     jne .findStartAddr
   303 000008B4 488B4608            <1>     mov rax, qword [rsi + 8] ;Get the number of bytes saved into rax
   304                              <1> 
   305 000008B8 488D15(00000000)    <1>     lea rdx, section.programArea.vstart
   306 000008BF 4829DA              <1>     sub rdx, rbx    ;Get the size of the interpreter and internal data area
   307 000008C2 4829D0              <1>     sub rax, rdx    ;Remove the number of bytes reserved to the interpreter
   308 000008C5 E839FDFFFF          <1>     call printdecimalword
   309 000008CA 4801C3              <1>     add rbx, rax    ;Add number of bytes to start address
   310 000008CD 48891D(00110000)    <1>     mov qword [maxMemAddr], rbx ;Save this address
   311                              <1> .exit:
   312 000008D4 C3                  <1>     ret
   313                              <1> .worstCase:
   314                              <1> ;Assume 2Mb MAX memory, rax has base address
   315 000008D5 48BB00002000000000- <1>     mov rbx, 200000h    ;2Mb value
   315 000008DE 00                  <1>
   316 000008DF 4829C3              <1>     sub rbx, rax
   317 000008E2 4889D8              <1>     mov rax, rbx    ;Get value in rax
   318 000008E5 E819FDFFFF          <1>     call printdecimalword
   319 000008EA 48C705(00110000)00- <1>     mov qword [maxMemAddr], 200000h
   319 000008F2 002000              <1>
   320 000008F5 C3                  <1>     ret
   321                              <1> 
    17                                  %include "BASICDAT.ASM"
    18 000008F6 4F6B0A0D00          <1> prompt  db "Ok",0Ah,0Dh,0
    19 000008FB 5343522036342D4241- <1> mainmsg db "SCR 64-BASIC v0.1",0Ah,0Dh,0
    19 00000904 5349432076302E310A- <1>
    19 0000090D 0D00                <1>
    20 0000090F 204279746573206672- <1> bytemsg db " Bytes free",0Ah,0Dh,0
    20 00000918 65650A0D00          <1>
    21 0000091D 0A0D00              <1> crlf    db 0Ah,0Dh,0
    22 00000920 4572726F720A0D00    <1> errmsg  db "Error",0Ah,0Dh,0
    23 00000928 303132333435363738- <1> numbers db "0123456789"
    23 00000931 39                  <1>
    24                              <1> ;startVarChars db "ABCDEFGHIJKLMNOPQRSTUVWXYZ" ;Valid starting chars for a var name
    25                              <1> ;numStartVarChars equ $ - startVarChars
    26 00000932 414243444546474849- <1> varChrs db "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789%$" ;Valid inner chars for var name
    26 0000093B 4A4B4C4D4E4F505152- <1>
    26 00000944 535455565758595A30- <1>
    26 0000094D 313233343536373839- <1>
    26 00000956 2524                <1>
    27                              <1> numVarChars equ $ - varChrs
    28                              <1> ;% => Integer variable (8 bytes)
    29                              <1> ;! => Single-Precision, Unused and ignored
    30                              <1> ;# => Double-Precision, Unused and ignored
    31                              <1> ;$ => String variable
    32                              <1> 
    33                              <1> ;Error Messages
    34 00000958 4F7574206F66204D65- <1> noMem   db "Out of Memory",0Ah,0Dh,0
    34 00000961 6D6F72790A0D00      <1>
    35 00000968 53796E746178204572- <1> syntax  db "Syntax Error",0Ah,0Dh,0
    35 00000971 726F720A0D00        <1>
    36 00000977 54797065206D69736D- <1> typeError   db "Type mismatch",0Ah,0Dh,0
    36 00000980 617463680A0D00      <1>
    37 00000987 556E646566696E6564- <1> lineNoXist  db "Undefined line number",0Ah,0Dh,0
    37 00000990 206C696E65206E756D- <1>
    37 00000999 6265720A0D00        <1>
    18                                  Segment programArea follows=resSeg align=1 vfollows=resSeg valign=1
    19                                  ENDOFPROGRAM:

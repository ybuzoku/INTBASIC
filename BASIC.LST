     1                                      [map all BASIC.MAP]
     2                                      [DEFAULT REL]
     3                                      BITS 64
     4                                  %include "MEM.INC"
     5                              <1> 
     6                              <1> progLineBlockType   equ 0   ;Program Line
     7                              <1> varBlockType        equ 1   ;Variable block
     8                              <1> datBlockType        equ 2   ;Data block (i.e. a string block)
     9                              <1> 
    10                              <1> notLastMemBlock equ "t" ;Used for blocks that are not the last block
    11                              <1> lastMemBlock    equ "r" ;Used by the last block to indicate end of chain
    12                              <1> 
    13                              <1> %macro memBlockM 0 ;Memory block Macro
    14                              <1>     .bSignature resb 1      ;Valid Signature
    15                              <1>     .wBlockSize resw 1      ;Total block size in bytes
    16                              <1>     .bBlockType resb 1      ;Block type, program line, variable or string
    17                              <1> %endmacro
    18                              <1> 
    19                              <1> struc memBlock
    20                              <1>     memBlockM
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    21                              <1> endstruc
    22                              <1> 
    23                              <1> struc progLineBlock
    24                              <1>     memBlockM               ;Common memory block header
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    25 00000004 ????                <1>     .wLineNum   resw 1      ;Line number, up to 65535
    26 00000006 ????????????????    <1>     .qPtr       resq 1      ;Pointer to the next line, or -1 if last line
    27 0000000E <res 100h>          <1>     .sLine      resb maxLineLen  ;Maximum length 255, keep null char but 
    28                              <1>     ;                             NOT LINE NUMBER OR PRECEEDING SPACES
    29                              <1> endstruc
    30                              <1> 
    31                              <1> struc varBlock
    32                              <1>     memBlockM               ;Common memory block header
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    33 00000004 ????????????????    <1>     .qValue     resq 1      ;One qword, either value or pointer to string
    34                              <1>     .sVarName:              ;Up to 40 chars for the var name
    35                              <1> endstruc
    36                              <1> 
    37                              <1> struc stringBlock
    38                              <1>     memBlockM
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    39 00000004 <res 100h>          <1>     .string     resb maxLineLen    ;Strings allocate 256 chars
    40                              <1>     .sVarName:              ;Up to 40 chars for the var name
    41                              <1> endstruc
    42                              <1> 
    43                              <1> ;Variable equates
    44                              <1> intEquate  equ 0
    45                              <1> strEquate  equ 1
     5                                  Segment .text align=1
     6                                  %include "RELOC.ASM"
     7 00000000 55AA                <1>     dw 0AA55h 
     8                              <1> ;First verify I have Enough RAM for my program and then run
     9 00000002 B801E80000          <1>     mov eax, 0E801h ;Get low memory count in ax
    10 00000007 CD35                <1>     int 35h
    11 00000009 663D0008            <1>     cmp ax, 200000h/400h ;Divide 2Mb into 1Kb chunks.
    12 0000000D 722A                <1>     jb bad
    13 0000000F B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    14 00000014 0F32                <1>     rdmsr
    15 00000016 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    16 00000018 48C1E720            <1>     shl rdi, 20h        ;Shift high
    17 0000001C 89C7                <1>     mov edi, eax        ;Get the low dword in
    18 0000001E 4889F8              <1>     mov rax, rdi
    19 00000021 488D35(00000000)    <1>     lea rsi, section.resSeg.start
    20 00000028 4881C7[26110000]    <1>     add rdi, bssLen
    21 0000002F B900100000          <1>     mov ecx, 1000h
    22 00000034 F348A5              <1>     rep movsq
    23 00000037 FFE0                <1>     jmp qword rax
    24                              <1> bad:
    25 00000039 488D2D0D000000      <1>     lea rbp, badmsg
    26 00000040 B804130000          <1>     mov eax, 1304h
    27 00000045 CD30                <1>     int 30h
    28 00000047 30E4                <1>     xor ah, ah
    29 00000049 CD36                <1>     int 36h
    30 0000004B CD38                <1>     int 38h
    31 0000004D 4E6F7420456E6F7567- <1> badmsg: db "Not Enough Memory. Press any key to enter SYSDEBUG...",0
    31 00000056 68204D656D6F72792E- <1>
    31 0000005F 20507265737320616E- <1>
    31 00000068 79206B657920746F20- <1>
    31 00000071 656E74657220535953- <1>
    31 0000007A 44454255472E2E2E00  <1>
     7                                  Segment dSeg nobits align=1 start=0
     8                                  %include "BSS.ASM"
     9 00000000 <res FC0h>          <1> stack       resq 200h - 8  ;Save 4Kb stack space
    10 00000FC0 ????????????????    <1> stacktop    resq 1
    11                              <1> 
    12                              <1> maxLineLen  equ 256
    13 00000FC8 <res 100h>          <1> inString    resb maxLineLen         ;256 character input string
    14                              <1> 
    15                              <1> ;This string is used for printing long numbers and saving
    16                              <1> ; the variable names for string comparisons
    17                              <1> digitStringLen  equ 48
    18 000010C8 <res 30h>           <1> digitString resb digitStringLen     
    19                              <1> 
    20 000010F8 ????????????????    <1> minMemAddr  resq 1  ;Pointer from where to start allocating memory blocks
    21 00001100 ????????????????    <1> maxMemAddr  resq 1  ;Pointer to the byte past which we cannot allocate anything
    22                              <1> ;==============================================================================
    23                              <1> ;This is the SDA for each program and must be included in the program area
    24                              <1> ; once we add the ability to save the program to disk.
    25                              <1> ;==============================================================================
    26                              <1> 
    27                              <1> ;void* mcbChain, lastBlock, firstLinPtr = -1 => New program, empty entries
    28                              <1> 
    29 00001108 ??                  <1> strLen      resb 1  ;Counter for number of chars entered in string
    30 00001109 ??                  <1> stateByte   resb 1  ;TROFF/TRON etc, unused for now
    31 0000110A ????????????????    <1> mcbChain    resq 1  ;Pointer to the start of the chain
    32 00001112 ????????????????    <1> lastBlock   resq 1  ;Pointer to the last block
    33 0000111A ????????????????    <1> firstLinPtr resq 1  ;Pointer to the programs' first line 
    34 00001122 ????                <1> firstLinNum resw 1  ;Line number of the first line of the program
    35 00001124 ????                <1> currentLine resw 1  ;Currently being executed line number
    36                              <1> 
    37                              <1> bssLen: ;Needed to compute the resident portion load location
     9                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1
    10                                  %include "MAIN.ASM"
    11                              <1> start:
    12 00000000 B801C50000          <1>     mov eax, 0C501h
    13 00000005 CD35                <1>     int 35h         ;Connect the debugger
    14 00000007 E85F010000          <1>     call ttyClear   ;Clear the teletype
    15                              <1>     ;Memory stuff
    16 0000000C 488D2D82070000      <1>     lea rbp, mainmsg
    17 00000013 E846010000          <1>     call ttyOutString
    18 00000018 E811070000          <1>     call memoryDetection
    19 0000001D 488D2D85070000      <1>     lea rbp, bytemsg
    20 00000024 E835010000          <1>     call ttyOutString
    21 00000029 E81B040000          <1>     call newProgram         ;Use this to reset program pointers
    22                              <1> mainLoop:
    23 0000002E FC                  <1>     cld                 ;Set default string op direction
    24 0000002F 488D25(C00F0000)    <1>     lea rsp, stacktop    ;Reinitialize stack pointer
    25 00000036 488D05F1FFFFFF      <1>     lea rax, mainLoop
    26 0000003D 50                  <1>     push rax    ;Save address on stack
    27 0000003E 488D2D4B070000      <1>     lea rbp, prompt
    28 00000045 E814010000          <1>     call ttyOutString
    29                              <1> .ml0:
    30                              <1> ;This section will execute an input line if it is an interactive expression
    31                              <1> ; or store it in the program if it has a line number.
    32                              <1> ;It will keep accepting lines until a line is entered without a line number
    33 0000004A E872000000          <1>     call getLineInput
    34 0000004F E877040000          <1>     call decimalToHex   ;Check to see if we have a valid line number
    35                              <1>     ;xchg bx, bx
    36 00000054 6685C0              <1>     test ax, ax
    37 00000057 750F                <1>     jnz .saveLine
    38                              <1> ;Here we execute the line
    39                              <1> .ml1:
    40 00000059 E826010000          <1>     call executeExpression
    41                              <1>     ;Now see if the line has any more expressions by checking for :
    42 0000005E E897030000          <1>     call findOtherExpressionsOnLine
    43 00000063 84C0                <1>     test al, al ;If al is null, no more expressions on the line
    44 00000065 75F2                <1>     jnz .ml1    ;Execute portion
    45 00000067 C3                  <1>     ret
    46                              <1> .saveLine:
    47                              <1>     ;ax has the line number
    48 00000068 6689C2              <1>     mov dx, ax
    49 0000006B E88C050000          <1>     call searchForProgramLine
    50 00000070 4881FBFFFFFFFF      <1>     cmp rbx, -1
    51 00000077 751D                <1>     jne .commonProc ;If not equal, line must exist, continue
    52 00000079 E89F010000          <1>     call spaceSkip  ;Skip all the prceeding spaces
    53 0000007E 803E00              <1>     cmp byte [rsi], 0  ;Is the first non space char the end of the string?
    54 00000081 742D                <1>     je .lineDoesntExist
    55                              <1>     ;So we have a new line that isn't empty, allocate a new block for this line
    56 00000083 E8C4040000          <1>     call allocateBlock  ;Return a default block in rbx
    57 00000088 C6430300            <1>     mov byte [rbx + progLineBlock.bBlockType], progLineBlockType
    58 0000008C 66894304            <1>     mov word [rbx + progLineBlock.wLineNum], ax
    59 00000090 66C743010E01        <1>     mov word [rbx + progLineBlock.wBlockSize], progLineBlock_size
    60                              <1> .commonProc:
    61                              <1>     ;If the line already exists, simply override the stored string
    62                              <1>     ;rbx has a pointer to the block
    63 00000096 E885060000          <1>     call strlen ;Get the string length
    64 0000009B 488D7B0E            <1>     lea rdi, qword [rbx + progLineBlock.sLine]  ;Get address here
    65 0000009F E873060000          <1>     call strcpy ;Copy the program string to the program block
    66 000000A4 56                  <1>     push rsi
    67 000000A5 4889DE              <1>     mov rsi, rbx    ;Move the block into rsi
    68 000000A8 E872050000          <1>     call insertProgramLine
    69 000000AD 5E                  <1>     pop rsi
    70 000000AE EB9A                <1>     jmp short .ml0
    71                              <1> .lineDoesntExist:
    72 000000B0 488D2D60070000      <1>     lea rbp, lineNoXist
    73                              <1> ;For any error, syntax or otherwise, come here
    74                              <1> criticalError:
    75                              <1> ;Called with rbp pointing at error message
    76 000000B7 E8A2000000          <1>     call ttyOutString
    77 000000BC E96DFFFFFF          <1>     jmp mainLoop    ;Trash input line, restart line input
    11                                  %include "TTY.ASM"
    12                              <1> getLineInput:
    13                              <1>     ;Sets rsi to the inputstring
    14 000000C1 30E4                <1>     xor ah, ah
    15 000000C3 8825(08110000)      <1>     mov byte [strLen], ah   ;Zero the char counter
    16 000000C9 488D3D(C80F0000)    <1>     lea rdi, inString   ;Move to start of line
    17 000000D0 4889FE              <1>     mov rsi, rdi
    18 000000D3 57                  <1>     push rdi
    19 000000D4 B900010000          <1>     mov ecx, maxLineLen
    20 000000D9 B00D                <1>     mov al, 0Dh    ;Ensure the input line is sanitised
    21 000000DB F3AA                <1>     rep stosb
    22 000000DD 5F                  <1>     pop rdi
    23                              <1> .getChar:
    24 000000DE E883000000          <1>     call ttyIn
    25 000000E3 3C0D                <1>     cmp al, 0Dh ;Line Feed
    26 000000E5 7456                <1>     je .gliExit
    27 000000E7 3C08                <1>     cmp al, 08h ;Bspace
    28 000000E9 740F                <1>     je .glibspace
    29 000000EB 803D(08110000)FE    <1>     cmp byte [strLen], -2   ;If at max length (255 chars), simply beep and wait for either bspace or enter
    30 000000F2 7459                <1>     je .gliFull 
    31 000000F4 84C0                <1>     test al, al
    32 000000F6 7443                <1>     je .gliExtendedChar
    33 000000F8 EB29                <1>     jmp short .gliCheckCase
    34                              <1> .glibspace:
    35 000000FA F605(08110000)FF    <1>     test byte [strLen], -1  ;This will only be zero if strLen=0
    36 00000101 74DB                <1>     jz .getChar
    37 00000103 48FFCF              <1>     dec rdi ;Go back by one position in the input line
    38 00000106 FE0D(08110000)      <1>     dec byte [strLen]
    39 0000010C B008                <1>     mov al, 08h
    40 0000010E E846000000          <1>     call ttyOutChar
    41 00000113 B020                <1>     mov al, 20h  
    42 00000115 E83F000000          <1>     call ttyOutChar
    43 0000011A B008                <1>     mov al, 08h
    44 0000011C E838000000          <1>     call ttyOutChar
    45 00000121 EBBB                <1>     jmp short .getChar
    46                              <1> .gliCheckCase:
    47                              <1>     ;al has char
    48 00000123 E831000000          <1>     call ttyOutChar ;Echo the char as is, but store it uppercase
    49 00000128 3C61                <1>     cmp al, "a"
    50 0000012A 7206                <1>     jb .gliccStore
    51 0000012C 3C7A                <1>     cmp al, "z"
    52 0000012E 7702                <1>     ja .gliccStore
    53 00000130 2C20                <1>     sub al, 20h
    54                              <1> .gliccStore:
    55 00000132 AA                  <1>     stosb   ;Increment the pointer, add char to buffer
    56 00000133 FE05(08110000)      <1>     inc byte [strLen]   ;Inc char count
    57 00000139 EBA3                <1>     jmp short .getChar
    58                              <1> .gliExtendedChar:
    59                              <1>     ;Currently, extended chars do nothing, 
    60                              <1>     ; eventually add F1-F10 functionality
    61                              <1>     ; and arrow key support
    62 0000013B EBA1                <1>     jmp short .getChar
    63                              <1> .gliExit:
    64 0000013D 488D2D73060000      <1>     lea rbp, crlf
    65 00000144 E815000000          <1>     call ttyOutString
    66 00000149 C60700              <1>     mov byte [rdi], 0   ;Null terminate string here
    67 0000014C C3                  <1>     ret
    68                              <1> .gliFull:
    69 0000014D B007                <1>     mov al, 07h
    70 0000014F E805000000          <1>     call ttyOutChar
    71 00000154 E985FFFFFF          <1>     jmp .getChar
    72                              <1> 
    73                              <1> ttyOutChar:
    74 00000159 B40E                <1>     mov ah, 0Eh
    75 0000015B CD30                <1>     int 30h
    76 0000015D C3                  <1>     ret
    77                              <1> ttyOutString:
    78 0000015E B804130000          <1>     mov eax, 1304h
    79 00000163 CD30                <1>     int 30h
    80 00000165 C3                  <1>     ret
    81                              <1> ttyIn:
    82 00000166 30E4                <1>     xor ah, ah
    83 00000168 CD36                <1>     int 36h
    84 0000016A C3                  <1>     ret
    85                              <1> ttyClear:
    86 0000016B B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
    87 00000170 CD30                <1>     int 30h
    88 00000172 B402                <1>     mov ah, 02h
    89 00000174 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
    90 00000176 88D7                <1>     mov bh, dl      ;Set cursor for page 0
    91 00000178 CD30                <1>     int 30h
    92 0000017A B707                <1>     mov bh, 07h     ;Grey/Black attribs
    93 0000017C B800060000          <1>     mov eax, 0600h  ;Clear whole screen
    94 00000181 CD30                <1>     int 30h
    95 00000183 C3                  <1>     ret
    12                                  %include "PROCESS.ASM"
    13                              <1> executeExpression:
    14                              <1> ;rsi must point to the start of the portion of the line to execute
    15 00000184 E894000000          <1>     call spaceSkip  ;Skip any leading spaces
    16 00000189 803E00              <1>     cmp byte [rsi], 0   ;Null terminated line, empty line?
    17 0000018C 7444                <1>     je .exit
    18                              <1>     ;rsi now points to function
    19 0000018E 488D3D6F020000      <1>     lea rdi, funTbl     ;Point rdi to the function table
    20                              <1> .functionFinderLoop:
    21 00000195 0FB60F              <1>     movzx ecx, byte [rdi]  ;Get the string length  
    22 00000198 80F9FF              <1>     cmp cl, -1  ;-1 is the end of table marker, either Var assignment or error
    23 0000019B 7436                <1>     je .variableAssignment 
    24 0000019D 56                  <1>     push rsi    ;Save ptr to start of string on stack 
    25 0000019E 57                  <1>     push rdi
    26 0000019F 48FFC7              <1>     inc rdi             ;Goto first char in function name
    27 000001A2 F3A6                <1>     repe cmpsb
    28 000001A4 5F                  <1>     pop rdi
    29 000001A5 5E                  <1>     pop rsi     ;Return ptr to start of string pointer from stack
    30 000001A6 84C9                <1>     test cl, cl ;Did all the chars match?
    31 000001A8 740F                <1>     jz .functionFound
    32 000001AA 480FB607            <1>     movzx rax, byte [rdi]    ;Skip unnecessary function pointer
    33 000001AE 480502000000        <1>     add rax, 2      ;Add 2 to skip relative pointer
    34 000001B4 4801C7              <1>     add rdi, rax
    35 000001B7 EBDC                <1>     jmp short .functionFinderLoop
    36                              <1> .functionFound:
    37                              <1>     ;Function found! Execute!
    38                              <1>     ;rsi points to start of expression to evaluate for function
    39                              <1>     ;rdi points to table entry
    40 000001B9 E85F000000          <1>     call spaceSkip  ;move rsi to the start of the expression
    41 000001BE 488D1D3F020000      <1>     lea rbx, funTbl         ;Get table address
    42 000001C5 480FB617            <1>     movzx rdx, byte [rdi]   ;Get pascal string length
    43 000001C9 0FB71417            <1>     movzx edx, word [rdi + rdx]    ;Add pascal strlen to table entry and get ptr
    44 000001CD 4801D3              <1>     add rbx, rdx    ;Add word offset to table base
    45 000001D0 FFE3                <1>     jmp rbx ;Goto function pointer in rbx
    46                              <1> .exit:
    47 000001D2 C3                  <1>     ret
    48                              <1> 
    49                              <1> .variableAssignment:
    50                              <1>     ;Establish if the string is a variable assignment or not
    51                              <1>     ;rsi points to start of string
    52 000001D3 E850000000          <1>     call getVarNameLength   ;Get the variable name length
    53 000001D8 4889F7              <1>     mov rdi, rsi    ;Save ptr to start of string in rdi
    54 000001DB 4801CE              <1>     add rsi, rcx    ;Go to end of string
    55 000001DE E83A000000          <1>     call spaceSkip  ;Skip spaces after the end of the var name
    56 000001E3 AC                  <1>     lodsb   ;Get the first char after the spaces. This must be a =
    57 000001E4 3C3D                <1>     cmp al, "="
    58 000001E6 7529                <1>     jne .exitError
    59 000001E8 4889FE              <1>     mov rsi, rdi    ;Return rsi to the start of the string name
    60 000001EB 4801CE              <1>     add rsi, rcx    ;Go to end of var name
    61 000001EE 48FFCE              <1>     dec rsi
    62 000001F1 AC                  <1>     lodsb           ;Get the last char into al
    63 000001F2 3C24                <1>     cmp al, "$"     ;Are we a string variable?
    64 000001F4 7427                <1>     je .stringAssignment
    65 000001F6 E822000000          <1>     call spaceSkip  ;Skip any spaces
    66 000001FB 48FFC6              <1>     inc rsi         ;Go past the equality sign
    67 000001FE E81A000000          <1>     call spaceSkip  ;Skip any spaces
    68 00000203 E86A000000          <1>     call handleAlgebraicExpression  ;Get the result of the expression into rax
    69 00000208 4889FE              <1>     mov rsi, rdi    ;Return the start of the string into rsi
    70 0000020B E8B3010000          <1>     call setNumericVariable
    71 00000210 C3                  <1>     ret
    72                              <1> 
    73                              <1> .exitError:
    74 00000211 488D2DE0050000      <1>     lea rbp, syntax ;Syntax error, keyword a bit confused
    75 00000218 E99AFEFFFF          <1>     jmp criticalError
    76                              <1> 
    77                              <1> .stringAssignment:
    13                                  %include "PARSE.ASM"
    14                              <1> ;Main Parsing Routines go here
    15                              <1> 
    16                              <1> spaceSkip:
    17                              <1> ;Allows us to skip spaces that might have been placed for
    18                              <1> ; ease of reading by the user.
    19                              <1> ;Input: rsi = Pointer to string
    20                              <1> ;Output: rsi = First non space character encountered
    21 0000021D 803E20              <1>     cmp byte [rsi], " "
    22 00000220 7505                <1>     jne .exit
    23 00000222 48FFC6              <1>     inc rsi
    24 00000225 EBF6                <1>     jmp short spaceSkip
    25                              <1> .exit:
    26 00000227 C3                  <1>     ret
    27                              <1> 
    28                              <1> getVarNameLength:
    29                              <1> ;Input: rsi = Start of var name
    30                              <1> ;Output: ecx = Length of varname
    31 00000228 50                  <1>     push rax
    32 00000229 56                  <1>     push rsi
    33 0000022A 57                  <1>     push rdi
    34 0000022B 53                  <1>     push rbx
    35 0000022C 52                  <1>     push rdx
    36 0000022D 31D2                <1>     xor edx, edx    ;Clear counter of chars
    37 0000022F 488D1D96050000      <1>     lea rbx, varChrs    ;Get the list of valid variable name chars
    38                              <1> .search:
    39 00000236 4889DF              <1>     mov rdi, rbx    ;Save pointer in rbx
    40 00000239 AC                  <1>     lodsb       ;Get the first char into al
    41 0000023A B91C000000          <1>     mov ecx, numVarChars
    42 0000023F F2AE                <1>     repne scasb       ;Look for char in the valid chars list
    43 00000241 750A                <1>     jne .exit   ;Char not found, drop it
    44 00000243 FFC2                <1>     inc edx     ;Add one to number of chars found
    45 00000245 81FA28000000        <1>     cmp edx, 40 ;At position for char 40?
    46 0000024B 72E9                <1>     jb .search  ;Whilst below, keep going
    47                              <1> .exit:
    48 0000024D 89D1                <1>     mov ecx, edx
    49 0000024F 5A                  <1>     pop rdx
    50 00000250 5B                  <1>     pop rbx
    51 00000251 5F                  <1>     pop rdi
    52 00000252 5E                  <1>     pop rsi
    53 00000253 58                  <1>     pop rax
    54 00000254 C3                  <1>     ret
    55                              <1> 
    56                              <1> getVarType:
    57                              <1> ;Input: rsi = Start of var name
    58                              <1> ;       rcx = Length of varname
    59                              <1> ;Output: ebx = 0 => Integer
    60                              <1> ;        ebx = 1 => String
    61 00000255 50                  <1>     push rax
    62 00000256 51                  <1>     push rcx
    63 00000257 56                  <1>     push rsi
    64 00000258 48FFC9              <1>     dec rcx         ;Get second to last char in name
    65 0000025B 4801CE              <1>     add rsi, rcx    ;Move rsi to that char
    66 0000025E AC                  <1>     lodsb   ;Get the char into al
    67 0000025F BB00000000          <1>     mov ebx, intEquate
    68 00000264 B901000000          <1>     mov ecx, strEquate
    69 00000269 3C24                <1>     cmp al, "$"     ;String?
    70 0000026B 0F44D9              <1>     cmove ebx, ecx  ;Move the string type into ebx
    71 0000026E 5E                  <1>     pop rsi
    72 0000026F 59                  <1>     pop rcx
    73 00000270 58                  <1>     pop rax
    74 00000271 C3                  <1>     ret
    75                              <1> 
    76                              <1> handleAlgebraicExpression:
    77                              <1> ;Input: rsi = Points to a mathematical expression
    78                              <1> ;Output: rax = Result of said expression
    79                              <1> ;Declares a syntax error if weird chars found
    80                              <1> ;Declares a type error if a string variable found
    81                              <1>     ;Handle Logical Connectives here
    82 00000272 66813E4E4F          <1>     cmp word [rsi], "NO"
    83 00000277 7504                <1>     jne .hae0
    84 00000279 807E0254            <1>     cmp byte [rsi + 2], "T"
    85                              <1> ;    je .not
    86                              <1> .hae0:
    87 0000027D 66813E414E          <1>     cmp word [rsi], "AN"
    88 00000282 7504                <1>     jne .hae1
    89 00000284 807E0244            <1>     cmp byte [rsi + 2], "D"
    90                              <1> ;    je .and
    91                              <1> .hae1:
    92 00000288 66813E4F52          <1>     cmp word [rsi], "OR"
    93                              <1> ;    je .or
    94 0000028D 66813E584F          <1>     cmp word [rsi], "XO"
    95 00000292 7504                <1>     jne .hae2
    96 00000294 807E0252            <1>     cmp byte [rsi + 2], "R"
    97                              <1> ;    je .xor
    98                              <1> .hae2:
    99 00000298 66813E494D          <1>     cmp word [rsi], "IM"
   100 0000029D 7504                <1>     jne .relationals
   101 0000029F 807E0250            <1>     cmp byte [rsi + 2], "P"
   102                              <1> ;    je .implicaton
   103                              <1> .relationals:
   104                              <1>     ;Handle Relational connectives
   105 000002A3 803E3D              <1>     cmp byte [rsi], "="
   106                              <1> ;    je .equivalence
   107 000002A6 66813E3C3E          <1>     cmp word [rsi], "<>"
   108                              <1> ;    je .neq
   109 000002AB 66813E3E3C          <1>     cmp word [rsi], "><"
   110                              <1> ;    je .neq
   111 000002B0 803E3C              <1>     cmp byte [rsi], "<"
   112                              <1> ;    je .less
   113 000002B3 803E3E              <1>     cmp byte [rsi], ">"
   114                              <1> ;    je .greater
   115 000002B6 66813E3C3D          <1>     cmp word [rsi], "<="
   116                              <1> ;    je .leq
   117 000002BB 66813E3E3D          <1>     cmp word [rsi], ">="
   118                              <1> ;    je .geq
   119 000002C0 E828000000          <1>     call .handleSecondLevel
   120                              <1> .parseAdditiveOperators:    
   121 000002C5 803E2D              <1>     cmp byte [rsi], '-'
   122 000002C8 7415                <1>     je .processMinus
   123 000002CA 803E2B              <1>     cmp byte [rsi], '+'
   124 000002CD 0F858E000000        <1>     jne .exit              ;No operators, expression evaluated, exit
   125 000002D3 50                  <1>     push rax
   126 000002D4 E811000000          <1>     call .handleSecondLevelSkip   ;Parse second level
   127                              <1> .processAdd:    
   128 000002D9 59                  <1>     pop rcx
   129 000002DA 4801C8              <1>     add rax, rcx           ;Add the two numbers
   130 000002DD EBE6                <1>     jmp short .parseAdditiveOperators  ;Search again for + or -
   131                              <1> .processMinus:
   132 000002DF 50                  <1>     push rax
   133 000002E0 E805000000          <1>     call .handleSecondLevelSkip   ;Parse second level
   134 000002E5 48F7D8              <1>     neg rax              ;Change a - b to a + -b
   135 000002E8 EBEF                <1>     jmp short .processAdd
   136                              <1> 
   137                              <1> ;Level 2, Division and multiplication
   138                              <1> 
   139                              <1> .handleSecondLevelSkip:
   140 000002EA 48FFC6              <1>     inc rsi              ;Skip the op symbol
   141                              <1> .handleSecondLevel:
   142 000002ED E82C000000          <1>     call .handleThirdLevel      ;Call third level
   143                              <1> .parseProductOperators:   
   144 000002F2 803E2F              <1>     cmp byte [rsi], '/'
   145 000002F5 7411                <1>     je .processDiv
   146 000002F7 803E2A              <1>     cmp byte [rsi], '*'
   147 000002FA 7565                <1>     jne .exit           ;Neither multiplication or division, return up a level
   148                              <1> 
   149 000002FC 50                  <1>     push rax
   150 000002FD E819000000          <1>     call .handleThirdLevelSkip   ;Call third level
   151 00000302 59                  <1>     pop rcx
   152 00000303 48F7E9              <1>     imul rcx             ; Multiplication
   153 00000306 EBEA                <1>     jmp short .parseProductOperators   ;Search again for * or /
   154                              <1> 
   155                              <1> .processDiv:
   156 00000308 50                  <1>     push rax
   157 00000309 E80D000000          <1>     call .handleThirdLevelSkip   ;Call third level
   158 0000030E 59                  <1>     pop rcx
   159 0000030F 4891                <1>     xchg rax, rcx
   160 00000311 31D2                <1>     xor edx, edx         ;Clear rdx for rdx:rax
   161 00000313 48F7F9              <1>     idiv rcx             ;Signed division
   162 00000316 E9D7FFFFFF          <1>     jmp .parseProductOperators         ;Search again for * or /
   163                              <1> 
   164                              <1> ;Level 3, Brackets, numbers and vars.
   165                              <1> 
   166                              <1> .handleThirdLevelSkip:
   167 0000031B 48FFC6              <1>     inc rsi             ;Skip the op symbol
   168                              <1> .handleThirdLevel:
   169 0000031E E8FAFEFFFF          <1>     call spaceSkip
   170 00000323 AC                  <1>     lodsb               ;Read char and adv rsi
   171 00000324 3C28                <1>     cmp al, '('
   172 00000326 750C                <1>     jne .notBracket
   173 00000328 E845FFFFFF          <1>     call handleAlgebraicExpression  ;Parse the inner expression
   174 0000032D 803E29              <1>     cmp byte [rsi], ')'   
   175 00000330 7449                <1>     je .closeBracket     ;If close bracket, goto skip spaces
   176 00000332 EB4F                <1>     jmp short .error     ;Otherwise, error
   177                              <1> 
   178                              <1> .notBracket:    
   179 00000334 3C5E                <1>     cmp al, "^"
   180 00000336 742A                <1>     je .exponentFound
   181                              <1> .varConstCheck:
   182 00000338 3C40                <1>     cmp al, 40h       ;Alphanumeric first char?
   183 0000033A 730D                <1>     jnc .varOrRNDFound      ;Yes, variable found or rnd function
   184 0000033C 48FFCE              <1>     dec rsi            ;Else back one symbol 
   185 0000033F E887010000          <1>     call decimalToHex  ;to read number into rax
   186 00000344 E9D4FEFFFF          <1>     jmp spaceSkip
   187                              <1> 
   188                              <1> .varOrRNDFound:    
   189 00000349 3C72                <1>     cmp al, "r"
   190 0000034B 7517                <1>     jne .varFound
   191 0000034D 803E6E              <1>     cmp byte [rsi], "n" ;rsi was advanced by 1, check 
   192 00000350 7512                <1>     jne .varFound
   193 00000352 807E0164            <1>     cmp byte [rsi+1], "d"
   194 00000356 750C                <1>     jne .varFound
   195 00000358 66AD                <1>     lodsw               ;Advance rsi by 3
   196 0000035A AC                  <1>     lodsb
   197 0000035B E440                <1>     in al, 40h         ;Read timer counter 0
   198 0000035D 480FB6C0            <1>     movzx rax, al
   199                              <1> .exit:
   200 00000361 C3                  <1>     ret                ;Return
   201                              <1> .exponentFound:
   202 00000362 EBD4                <1>    jmp short .varConstCheck
   203                              <1> .varFound:    
   204 00000364 48FFCE              <1>     dec rsi ;Back a char
   205 00000367 51                  <1>     push rcx
   206 00000368 E8BBFEFFFF          <1>     call getVarNameLength
   207 0000036D E81D000000          <1>     call getNumericVariable ;Get variable value in rax
   208 00000372 4801CE              <1>     add rsi, rcx    ;Go past the edge of the name
   209 00000375 59                  <1>     pop rcx
   210 00000376 E9A2FEFFFF          <1>     jmp spaceSkip
   211                              <1> 
   212                              <1> .closeBracket:
   213 0000037B 48FFC6              <1>     inc rsi
   214 0000037E E99AFEFFFF          <1>     jmp spaceSkip
   215                              <1> .error:
   216 00000383 488D2D6E040000      <1>     lea rbp, syntax
   217 0000038A E928FDFFFF          <1>     jmp criticalError
   218                              <1> 
   219                              <1> 
   220                              <1> getNumericVariable:
   221                              <1> ;Gets the value stored in a variable into rax 
   222                              <1> ;Input: rsi = Pointer to first char of a variable name
   223                              <1> ;Output: rax = Variable Value
   224                              <1> ;        rsi = Pointer to first char of a variable name
   225 0000038F 56                  <1>     push rsi
   226 00000390 51                  <1>     push rcx
   227 00000391 53                  <1>     push rbx
   228 00000392 E891FEFFFF          <1>     call getVarNameLength   ;Returns the length of the var name in cx
   229 00000397 E80C020000          <1>     call findVariable       ;Returns a pointer to the variable block in rbx
   230 0000039C 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Variable doesnt exist? Pretend it is 0
   231 000003A3 740E                <1>     je .noVar
   232 000003A5 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
   233 000003A9 750C                <1>     jne .stringFoundError
   234 000003AB 488B4304            <1>     mov rax, qword [rbx + varBlock.qValue]
   235                              <1> .exit:
   236 000003AF 5B                  <1>     pop rbx
   237 000003B0 59                  <1>     pop rcx
   238 000003B1 5E                  <1>     pop rsi
   239 000003B2 C3                  <1>     ret
   240                              <1> .noVar:
   241 000003B3 31C0                <1>     xor eax, eax
   242 000003B5 EBF8                <1>     jmp short .exit
   243                              <1> .stringFoundError:
   244 000003B7 488D2D49040000      <1>     lea rbp, typeError
   245 000003BE E9F4FCFFFF          <1>     jmp criticalError
   246                              <1> 
   247                              <1> setNumericVariable:
   248                              <1> ;Sets the value stored in a variable
   249                              <1> ;Input: rsi = Pointer to first char of a variable name
   250                              <1> ;       rax = Variable value
   251                              <1> ;Output: rsi = Pointer to first char of variable name
   252 000003C3 56                  <1>     push rsi
   253 000003C4 51                  <1>     push rcx
   254 000003C5 53                  <1>     push rbx
   255                              <1> 
   256 000003C6 E85DFEFFFF          <1>     call getVarNameLength   ;Returns the length of the var name in cx
   257 000003CB E8D8010000          <1>     call findVariable       ;Returns a pointer to the variable block in rbx
   258 000003D0 4881FBFFFFFFFF      <1>     cmp rbx, -1             ;Variable doesnt exit?
   259 000003D7 740E                <1>     je .makeEditInteger      ;Make one!
   260 000003D9 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
   261 000003DD 750F                <1>     jne .stringFoundError
   262 000003DF 48894304            <1>     mov qword [rbx + varBlock.qValue], rax  ;Save value
   263                              <1> .exit:
   264 000003E3 5B                  <1>     pop rbx
   265 000003E4 59                  <1>     pop rcx
   266 000003E5 5E                  <1>     pop rsi
   267 000003E6 C3                  <1>     ret
   268                              <1> .makeEditInteger:
   269 000003E7 E8D3020000          <1>     call makeEditInteger
   270 000003EC EBF5                <1>     jmp short .exit
   271                              <1> .stringFoundError:
   272 000003EE 488D2D12040000      <1>     lea rbp, typeError
   273 000003F5 E9BDFCFFFF          <1>     jmp criticalError
   274                              <1> 
   275                              <1> findOtherExpressionsOnLine:
   276                              <1> ;Input: rsi = start of line portion
   277                              <1> ;Output: rsi = points to first char after first ":" found
   278                              <1> ;         al = : if it was found or 00 if not
   279 000003FA AC                  <1>     lodsb
   280 000003FB 3C00                <1>     cmp al, 0   ;Null hit, RIP procedure
   281 000003FD 7404                <1>     je .exit
   282 000003FF 3C3A                <1>     cmp al, ":" ;Strings can be terminated with a :
   283 00000401 75F7                <1>     jne findOtherExpressionsOnLine
   284                              <1> .exit:
   285 00000403 C3                  <1>     ret
    14                                  %include "COMMANDS.ASM"
    15                              <1> 
    16                              <1> funTbl:
    17                              <1> ;Use PASCAL strings to know how long the comparisons need to be
    18                              <1> ;All function pointers are saved as distances from the head
    19                              <1> ; of the function table
    20 00000404 044E4557            <1>     db 4,"NEW"
    21 00000408 4500                <1>     dw newProgram - funTbl 
    22                              <1> 
    23 0000040A 054C495354          <1>     db 5,"LIST"
    24 0000040F 9900                <1>     dw listProgram - funTbl 
    25                              <1> 
    26 00000411 0452554E            <1>     db 4,"RUN"
    27 00000415 9C00                <1>     dw runProgram - funTbl
    28                              <1> 
    29 00000417 065052494E54        <1>     db 6,"PRINT"
    30 0000041D 9F00                <1>     dw printStatement - funTbl
    31                              <1> 
    32 0000041F 06494E505554        <1>     db 6,"INPUT"
    33 00000425 B300                <1>     dw getInput - funTbl
    34                              <1> 
    35 00000427 034946              <1>     db 3,"IF"
    36 0000042A B600                <1>     dw handleIf - funTbl
    37                              <1> 
    38 0000042C 05474F544F          <1>     db 5,"GOTO"
    39 00000431 B900                <1>     dw fancyJmp - funTbl
    40                              <1> 
    41 00000433 0753595354454D      <1>     db 7,"SYSTEM"
    42 0000043A BC00                <1>     dw returnToDOS - funTbl
    43                              <1> 
    44 0000043C 04464F52            <1>     db 4,"FOR"
    45 00000440 BF00                <1>     dw forLoop - funTbl
    46                              <1> 
    47 00000442 04434C53            <1>     db 4, "CLS"
    48 00000446 C200                <1>     dw cls - funTbl
    49                              <1> 
    50 00000448 FF                  <1>     db -1    ;Demarkate the end of the table
    51                              <1> 
    52                              <1> newProgram: 
    53                              <1> ;Simply reset the program pointers
    54 00000449 488D05(00000000)    <1>     lea rax, section.programArea.vstart
    55 00000450 488905(F8100000)    <1>     mov qword [minMemAddr], rax
    56 00000457 488905(12110000)    <1>     mov qword [lastBlock], rax  ;Start writing at this location
    57 0000045E 488905(0A110000)    <1>     mov qword [mcbChain], rax   ;Create a mock MCB here
    58 00000465 C60072              <1>     mov byte [rax + memBlock.bSignature], lastMemBlock
    59 00000468 66C740010000        <1>     mov word [rax + memBlock.wBlockSize], 0 ;Dummy block, no size, gets overwritten
    60 0000046E 31C0                <1>     xor eax, eax
    61 00000470 8805(08110000)      <1>     mov byte [strLen], al
    62 00000476 488D3D(C80F0000)    <1>     lea rdi, inString
    63 0000047D B900010000          <1>     mov ecx, maxLineLen
    64 00000482 F3AA                <1>     rep stosb
    65 00000484 C605(24110000)0A    <1>     mov byte [currentLine], 10  ;Default to line 10
    66 0000048B 48FFC8              <1>     dec rax ;rax = -1
    67 0000048E 488905(1A110000)    <1>     mov qword [firstLinPtr], rax ;No program in memory
    68 00000495 668905(22110000)    <1>     mov word [firstLinNum], ax
    69 0000049C C3                  <1>     ret
    70                              <1> listProgram:
    71                              <1> ;Go line by line and echo the program lines, inserting a crlf after each
    72                              <1> ;First print the line number, then add a space
    73 0000049D B002                <1>     mov al, 2
    74 0000049F C3                  <1>     ret
    75                              <1> runProgram:
    76                              <1> ;Go to each line, one at a time, skip the line number and execute the expr
    77                              <1> ;First thing it does, takes the first line number and moves it to current line number
    78 000004A0 B003                <1>     mov al, 3
    79 000004A2 C3                  <1>     ret
    80                              <1> printStatement:
    81                              <1> ;Strings must be "" delimited or a string variable must be used (unsupported rn)
    82 000004A3 803E22              <1>     cmp byte [rsi], 022h    ;22h = ASCII Speechmarks
    83 000004A6 7403                <1>     je .stringPrint
    84 000004A8 B004                <1>     mov al, 4
    85 000004AA C3                  <1>     ret
    86                              <1> .stringPrint:
    87 000004AB 488D2D46030000      <1>     lea rbp, syntax
    88 000004B2 E900FCFFFF          <1>     jmp criticalError
    89                              <1> getInput:
    90                              <1> ;Take a string as a prompt
    91 000004B7 B005                <1>     mov al, 5
    92 000004B9 C3                  <1>     ret
    93                              <1> handleIf:
    94                              <1> ;Evaluate the string after IF is greater than 0, THEN goto line x
    95                              <1> ;IF exp1 THEN exp2
    96 000004BA B006                <1>     mov al, 6
    97 000004BC C3                  <1>     ret
    98                              <1> fancyJmp:
    99                              <1> ;GOTO, the hell of every dumb high level programmer
   100 000004BD B007                <1>     mov al, 7
   101 000004BF C3                  <1>     ret
   102                              <1> returnToDOS:
   103 000004C0 B008                <1>     mov al, 8
   104 000004C2 C3                  <1>     ret
   105                              <1> forLoop:
   106 000004C3 B009                <1>     mov al, 9
   107 000004C5 C3                  <1>     ret
   108                              <1> cls:
   109 000004C6 E9A0FCFFFF          <1>     jmp ttyClear
    15                                  %include "MATH.ASM"
    16                              <1> decimalToHex:
    17                              <1>     ;Takes ASCII encoded decimal number and 
    18                              <1>     ;returns its hex value
    19                              <1>     ;Input: rsi = Start of numeric ONLY string
    20                              <1>     ;Output: rax = Number
    21                              <1>     ;        rsi = First non-numeric char past end of number
    22 000004CB 53                  <1>     push rbx
    23 000004CC 51                  <1>     push rcx
    24 000004CD 52                  <1>     push rdx
    25 000004CE 31DB                <1>     xor ebx, ebx    ;Start with rbx = 0
    26                              <1> .processDigits:    
    27 000004D0 AC                  <1>     lodsb           ;Get the first digit in al
    28 000004D1 2C30                <1>     sub al, 30h     ;Reduce to value
    29 000004D3 31D2                <1>     xor edx, edx    ;Clear for multiplication
    30 000004D5 3C0A                <1>     cmp al, 10      ;Digit valid? Propagte CF
    31 000004D7 480FB6C0            <1>     movzx rax, al   ;Clear upper bits
    32 000004DB 4893                <1>     xchg rax, rbx
    33 000004DD 730D                <1>     jnc .exit       ;Digit was not valid, exit
    34 000004DF B90A000000          <1>     mov ecx, 10     ;Multiply result by 10
    35 000004E4 48F7E1              <1>     mul rcx
    36 000004E7 4801C3              <1>     add rbx, rax    ;Add the new digits
    37 000004EA EBE4                <1>     jmp short .processDigits
    38                              <1> .exit:
    39 000004EC 48FFCE              <1>     dec rsi         ;rsi points to first non-digit
    40 000004EF 5A                  <1>     pop rdx
    41 000004F0 59                  <1>     pop rcx
    42 000004F1 5B                  <1>     pop rbx
    43 000004F2 C3                  <1>     ret
    44                              <1> 
    45                              <1> printdecimalword:
    46                              <1> ;Takes the qword in rax and prints its decimal representation
    47 000004F3 50                  <1>     push rax
    48 000004F4 53                  <1>     push rbx
    49 000004F5 488D3D(C8100000)    <1>     lea rdi, digitString   ;Use the default line as a buffer
    50                              <1>     ;Sanitise the digit buffer
    51 000004FC 57                  <1>     push rdi
    52 000004FD 51                  <1>     push rcx
    53 000004FE 50                  <1>     push rax
    54 000004FF 31C0                <1>     xor eax, eax
    55 00000501 B906000000          <1>     mov ecx, digitStringLen/8
    56 00000506 F348AB              <1>     rep stosq
    57 00000509 58                  <1>     pop rax
    58 0000050A 59                  <1>     pop rcx
    59 0000050B 5F                  <1>     pop rdi
    60                              <1> 
    61 0000050C 4881C72F000000      <1>     add rdi, digitStringLen - 1 ;Go to the end of the buffer
    62 00000513 FD                  <1>     std ;Reverse string ops
    63 00000514 50                  <1>     push rax
    64 00000515 30C0                <1>     xor al, al  ;Place delimiter
    65 00000517 AA                  <1>     stosb
    66 00000518 58                  <1>     pop rax
    67 00000519 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
    67 00000522 00                  <1>
    68                              <1> .pdw0:
    69 00000523 31D2                <1>     xor edx, edx
    70 00000525 48F7F3              <1>     div rbx
    71 00000528 80C230              <1>     add dl, '0'
    72 0000052B 80FA39              <1>     cmp dl, '9'
    73 0000052E 7603                <1>     jbe .pdw1
    74 00000530 80C207              <1>     add dl, 'A'-'0'-10
    75                              <1> .pdw1:
    76 00000533 50                  <1>     push rax
    77 00000534 88D0                <1>     mov al, dl    ;Save remainder byte
    78 00000536 AA                  <1>     stosb   ;Store the byte and add one to rdi
    79 00000537 58                  <1>     pop rax
    80 00000538 4885C0              <1>     test rax, rax
    81 0000053B 75E6                <1>     jnz .pdw0
    82 0000053D FC                  <1>     cld ;Return string ops to normal
    83 0000053E 48FFC7              <1>     inc rdi ;Skip the extra 0 that was inserted
    84 00000541 4889FD              <1>     mov rbp, rdi    ;Point rbp to the head of the string
    85 00000544 E815FCFFFF          <1>     call ttyOutString
    86 00000549 5B                  <1>     pop rbx
    87 0000054A 58                  <1>     pop rax
    88 0000054B C3                  <1>     ret
    16                                  %include "MEMORY.ASM"
    17                              <1> allocateBlock:
    18                              <1> ;Allocates a program memory block, the caller then fixes the specifics
    19                              <1> ;Output: rbx = Pointer to generic memory block, or -1 if memory full
    20                              <1> ;       Caller needs to fill in, block size, block type and specifics
    21 0000054C 488B1D(12110000)    <1>     mov rbx, qword [lastBlock]    ;Get the last block in the chain
    22 00000553 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;First allocation?
    23 0000055A 742D                <1>     je .firstAllocation
    24 0000055C C60374              <1>     mov byte [rbx + memBlock.bSignature], notLastMemBlock ;Make it not be the last
    25 0000055F 480FB75301          <1>     movzx rdx, word [rbx + memBlock.wBlockSize] ;Goto end of block
    26 00000564 4801D3              <1>     add rbx, rdx    ;Move rbx over the previous last block
    27 00000567 488B15(00110000)    <1>     mov rdx, qword [maxMemAddr]
    28 0000056E 4839D3              <1>     cmp rbx, rdx ;rbx above maxmemory? 
    29 00000571 770B                <1>     ja .memoryFull
    30 00000573 48891D(12110000)    <1>     mov qword [lastBlock], rbx  ;New last block
    31 0000057A C60372              <1>     mov byte [rbx + memBlock.bSignature], lastMemBlock
    32 0000057D C3                  <1>     ret
    33                              <1> .memoryFull:
    34 0000057E 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    34 00000587 FF                  <1>
    35 00000588 C3                  <1>     ret
    36                              <1> .firstAllocation:
    37                              <1> ;Deal with first allocation
    38 00000589 488D1D(00000000)    <1>     lea rbx, section.programArea.vstart   ;Get this as the head of the chain
    39 00000590 48891D(12110000)    <1>     mov qword [lastBlock], rbx
    40 00000597 48891D(0A110000)    <1>     mov qword [mcbChain], rbx
    41 0000059E C60372              <1>     mov byte [rbx + memBlock.bSignature], lastMemBlock
    42 000005A1 66C743010000        <1>     mov word [rbx + memBlock.wBlockSize], 0 ;Dummy block
    43 000005A7 C3                  <1>     ret
    44                              <1> 
    45                              <1> findVariable:
    46                              <1> ;Input: rsi = Source string for variable name
    47                              <1> ;       ecx = Length of variable name (max 40)
    48                              <1> ;Output: rbx = ptr to varBlock OR -1 if doesnt exist
    49 000005A8 50                  <1>     push rax
    50 000005A9 51                  <1>     push rcx
    51 000005AA 52                  <1>     push rdx
    52 000005AB 56                  <1>     push rsi
    53 000005AC 57                  <1>     push rdi
    54 000005AD 488B1D(0A110000)    <1>     mov rbx, qword [mcbChain]   ;Start of the chain
    55 000005B4 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Chain empty?
    56 000005BB 742A                <1>     je .exit
    57                              <1> .search:
    58 000005BD 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
    59 000005C1 740F                <1>     je .varFound    ;We found a variable
    60                              <1> .invalid:
    61                              <1>     ;Are we at the end of the chain?
    62 000005C3 803B72              <1>     cmp byte [rbx + memBlock.bSignature], lastMemBlock
    63 000005C6 7415                <1>     je .varNotFound ;At the end of the chain and var not found? Error!
    64 000005C8 480FB75301          <1>     movzx rdx, word [rbx + memBlock.wBlockSize]
    65 000005CD 4801D3              <1>     add rbx, rdx    ;Goto next block
    66 000005D0 EBEB                <1>     jmp short .search
    67                              <1> .varFound:
    68                              <1>     ;Compare to see the var is our var
    69 000005D2 488D7B0C            <1>     lea rdi, qword [rbx + varBlock.sVarName] ;point rdi to the name string
    70 000005D6 F3A6                <1>     repe cmpsb  ;Compare one byte at a time
    71 000005D8 75E9                <1>     jne .invalid
    72 000005DA F8                  <1>     clc
    73 000005DB EB0A                <1>     jmp short .exit
    74                              <1> .varNotFound:
    75 000005DD 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    75 000005E6 FF                  <1>
    76                              <1> .exit:
    77 000005E7 5F                  <1>     pop rdi
    78 000005E8 5E                  <1>     pop rsi
    79 000005E9 5A                  <1>     pop rdx
    80 000005EA 59                  <1>     pop rcx
    81 000005EB 58                  <1>     pop rax
    82 000005EC C3                  <1>     ret
    83                              <1> 
    84                              <1> findFirstLine:
    85                              <1> ;Output: rbx = Pointer to the first program block
    86                              <1> ;         dx = Number of the first line
    87 000005ED 488B1D(1A110000)    <1>     mov rbx, qword [firstLinPtr]
    88 000005F4 668B15(22110000)    <1>     mov dx, word [firstLinNum]
    89 000005FB C3                  <1>     ret
    90                              <1> 
    91                              <1> ;FIRST SEARCH FOR A LINE NUMBER BEFORE INSERTING IT INTO THE CHAIN
    92                              <1> ;IF THE LINE NUMBER IS FOUND, REPLACE THE COMMAND STRING
    93                              <1> 
    94                              <1> searchForProgramLine:
    95                              <1> ;Walk the program chain looking to see if a line number exists. If it does,
    96                              <1> ; return a pointer to the block in rbx. If it doesn't, return -1 in rbx
    97                              <1> ;Input: dx = Line number
    98                              <1> ;Output: rbx = Pointer to program block 
    99 000005FC 488B1D(1A110000)    <1>     mov rbx, qword [firstLinPtr]
   100 00000603 4881FBFFFFFFFF      <1>     cmp rbx, -1
   101 0000060A 7412                <1>     je .lineFound
   102                              <1> .search:
   103 0000060C 66395304            <1>     cmp word [rbx + progLineBlock.wLineNum], dx ;Equal line numbers?
   104 00000610 740C                <1>     je .lineFound
   105 00000612 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr]   ;Walk chain
   106 00000616 48FFC3              <1>     inc rbx ;At the end? If yes, this would be 0 now
   107 00000619 75F1                <1>     jnz .search ;Not zero? Keep searching
   108 0000061B 48FFCB              <1>     dec rbx ;Make it -1 again
   109                              <1> .lineFound:
   110 0000061E C3                  <1>     ret
   111                              <1> 
   112                              <1> insertProgramLine:
   113                              <1> ;Walk the program chain looking for the biggest number less than our
   114                              <1> ; line number. Once we have reached the end of the chain, insert the block there, or
   115                              <1> ; if there is no block, then we are the last in the chain
   116                              <1> ;Input: rsi = New Program Block to be added
   117 0000061F 50                  <1>     push rax
   118 00000620 53                  <1>     push rbx
   119 00000621 51                  <1>     push rcx
   120 00000622 52                  <1>     push rdx
   121 00000623 57                  <1>     push rdi
   122 00000624 E8C4FFFFFF          <1>     call findFirstLine  ;Get start of program in rbx and line number in dx
   123                              <1> ;First check if we should be the first line
   124 00000629 6687DB              <1>     xchg bx, bx
   125 0000062C 668B4E04            <1>     mov cx, word [rsi + progLineBlock.wLineNum] ;Save line number in cx
   126 00000630 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Empty program marker
   127 00000637 744D                <1>     je .first
   128 00000639 6639D1              <1>     cmp cx, dx  ;If cx is below dx, then our entry is first
   129 0000063C 7248                <1>     jb .first    
   130                              <1> ;Use ax as the best line number and rdi as the pointer to that block
   131 0000063E 66B8FFFF            <1>     mov ax, -1  ;Marker to indicate no insertion
   132                              <1> .walk:
   133 00000642 48817B06FFFFFFFF    <1>     cmp qword [rbx + progLineBlock.qPtr], -1    ;We are at the end
   134 0000064A 7419                <1>     je .sort
   135 0000064C 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Walk chain in rbx
   136 00000650 663B4B04            <1>     cmp cx, word [rbx + progLineBlock.wLineNum]
   137 00000654 77EC                <1>     ja .walk    ;If line number is above my line number, keep walking
   138                              <1> .candidate:
   139                              <1>     ;If the new line number is below the old line number, reject
   140 00000656 663B4304            <1>     cmp ax, word [rbx + progLineBlock.wLineNum]
   141 0000065A 72E6                <1>     jb .walk
   142 0000065C 4889DF              <1>     mov rdi, rbx
   143 0000065F 668B4304            <1>     mov ax, word [rbx + progLineBlock.wLineNum]
   144 00000663 EBDD                <1>     jmp short .walk
   145                              <1> .sort:
   146 00000665 66FFC0              <1>     inc ax  ;If no candidates, exit
   147 00000668 740E                <1>     jz .skipLink
   148                              <1>     ;rdi points to the previous line to link to
   149 0000066A 488B5706            <1>     mov rdx, qword [rdi + progLineBlock.qPtr]
   150 0000066E 48897706            <1>     mov qword [rdi + progLineBlock.qPtr], rsi   ;Insert self here
   151 00000672 48895606            <1>     mov qword [rsi + progLineBlock.qPtr], rdx   ;Link new block to next line
   152 00000676 EB20                <1>     jmp short .exit
   153                              <1> .skipLink:
   154 00000678 48897306            <1>     mov qword [rbx + progLineBlock.qPtr], rsi   ;Link rsi to last element in list
   155 0000067C 48C74606FFFFFFFF    <1>     mov qword [rsi + progLineBlock.qPtr], -1    ;End of chain marker
   156 00000684 EB12                <1>     jmp short .exit
   157                              <1> .first:
   158 00000686 488935(1A110000)    <1>     mov qword [firstLinPtr], rsi
   159 0000068D 66890D(22110000)    <1>     mov word [firstLinNum], cx
   160 00000694 48895E06            <1>     mov qword [rsi + progLineBlock.qPtr], rbx   ;Put the old first line as second line
   161                              <1> .exit:
   162 00000698 5F                  <1>     pop rdi
   163 00000699 5A                  <1>     pop rdx
   164 0000069A 59                  <1>     pop rcx
   165 0000069B 5B                  <1>     pop rbx
   166 0000069C 58                  <1>     pop rax
   167 0000069D C3                  <1>     ret
   168                              <1> 
   169                              <1> makeEditVariable:
   170                              <1> ;Will make a variable if it is a new name, or edit the value if it already exists
   171                              <1> ;Input: rsi = Var name
   172                              <1> ;       rax = Value/String Pointer
   173 0000069E 50                  <1>     push rax
   174 0000069F 53                  <1>     push rbx
   175 000006A0 51                  <1>     push rcx
   176                              <1> 
   177 000006A1 E882FBFFFF          <1>     call getVarNameLength   ;Get the length in ecx, clear upper of rcx
   178 000006A6 E8AAFBFFFF          <1>     call getVarType ;Get type in rbx
   179 000006AB 85DB                <1>     test ebx, ebx
   180 000006AD 7507                <1>     jnz .string
   181 000006AF E80B000000          <1>     call makeEditInteger
   182 000006B4 EB05                <1>     jmp short .exit
   183                              <1> .string:
   184 000006B6 E850000000          <1>     call makeEditString
   185                              <1> .exit:
   186 000006BB 59                  <1>     pop rcx
   187 000006BC 5B                  <1>     pop rbx
   188 000006BD 58                  <1>     pop rax
   189 000006BE C3                  <1>     ret
   190                              <1> 
   191                              <1> makeEditInteger:
   192                              <1> ;Will make a variable if it is new name, or edit the value if it already exists
   193                              <1> ;Input: rsi = Var name
   194                              <1> ;       (e)cx = Length of varname, max 40 chars
   195                              <1> ;       rax = Value
   196 000006BF E8E4FEFFFF          <1>     call findVariable   ;rbx returned with var block or -1
   197 000006C4 4881FBFFFFFFFF      <1>     cmp rbx, -1
   198 000006CB 7405                <1>     je .newVar
   199 000006CD 48894304            <1>     mov qword [rbx + varBlock.qValue], rax
   200 000006D1 C3                  <1>     ret
   201                              <1> .newVar:
   202 000006D2 90                  <1>     nop
   203 000006D3 E874FEFFFF          <1>     call allocateBlock
   204 000006D8 4881FBFFFFFFFF      <1>     cmp rbx, -1
   205 000006DF 741E                <1>     je .error
   206 000006E1 48894304            <1>     mov qword [rbx + varBlock.qValue], rax  ;Save value
   207 000006E5 66894B01            <1>     mov word [rbx + varBlock.wBlockSize], cx    ;Save length of name
   208 000006E9 668143010C00        <1>     add word [rbx + varBlock.wBlockSize], varBlock_size ;Add full block size
   209 000006EF C6430301            <1>     mov byte [rbx + varBlock.bBlockType], varBlockType  ;Block type
   210 000006F3 57                  <1>     push rdi
   211 000006F4 488D7B0C            <1>     lea rdi, qword [rbx + varBlock.sVarName]
   212 000006F8 E81A000000          <1>     call strcpy ;Copy the string name into block buffer
   213 000006FD 5F                  <1>     pop rdi
   214 000006FE C3                  <1>     ret
   215                              <1> .error:
   216 000006FF 488D2DE2000000      <1>     lea rbp, noMem
   217 00000706 E9ACF9FFFF          <1>     jmp criticalError
   218                              <1> makeEditString:
   219                              <1> ;Will make a string if it is new name, or replace the string. Strings are null termin
   220                              <1> ;Input: rsi = Var name
   221                              <1> ;       ecx = Length of varname
   222                              <1> ;       rax = Ptr to string
   223                              <1> ;FOR NOW, JUST THROW ERRORS
   224 0000070B 488D2DE6000000      <1>     lea rbp, syntax
   225 00000712 E9A0F9FFFF          <1>     jmp criticalError
   226                              <1> ;------------------------------------------------:
   227                              <1> ;  The below are misc memory related functions   :
   228                              <1> ;------------------------------------------------:
   229                              <1> strcpy:
   230                              <1> ;rdi = Destination string
   231                              <1> ;rsi = Source string
   232                              <1> ;rcx = Number of Chars to copy
   233 00000717 57                  <1>     push rdi
   234 00000718 56                  <1>     push rsi
   235 00000719 51                  <1>     push rcx
   236 0000071A F3A4                <1>     rep movsb
   237 0000071C 59                  <1>     pop rcx
   238 0000071D 5E                  <1>     pop rsi
   239 0000071E 5F                  <1>     pop rdi
   240 0000071F C3                  <1>     ret
   241                              <1> strlen:
   242                              <1> ;Input: rsi = String start
   243                              <1> ;Output: rsi = String start
   244                              <1> ;        ecx = String length, inclusive of NULL char
   245 00000720 50                  <1>     push rax
   246 00000721 56                  <1>     push rsi
   247 00000722 31C9                <1>     xor ecx, ecx    ;Clear counter
   248                              <1> .search:
   249 00000724 AC                  <1>     lodsb
   250 00000725 FFC1                <1>     inc ecx
   251 00000727 84C0                <1>     test al, al ;Is this a null char?
   252 00000729 75F9                <1>     jnz .search ;Null not found
   253                              <1> .exit:
   254 0000072B 5E                  <1>     pop rsi
   255 0000072C 58                  <1>     pop rax
   256 0000072D C3                  <1>     ret
   257                              <1> 
   258                              <1> memoryDetection:
   259 0000072E B820E80000          <1>     mov eax, 0E820h
   260 00000733 CD35                <1>     int 35h     ;rax = ptr to start, rsi = ptr to data table, each entry 24 bytes
   261 00000735 EB07                <1>     jmp short .fsa1
   262                              <1> .findStartAddr:
   263 00000737 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   264                              <1> .fsa1:
   265 0000073E 6685C9              <1>     test cx, cx
   266 00000741 742C                <1>     jz .worstCase
   267 00000743 66FFC9              <1>     dec cx
   268 00000746 488B1E              <1>     mov rbx, qword [rsi]    ;Get the address entry into rbx
   269 00000749 4839C3              <1>     cmp rbx, rax    
   270 0000074C 75E9                <1>     jne .findStartAddr
   271 0000074E 488B4608            <1>     mov rax, qword [rsi + 8] ;Get the number of bytes saved into rax
   272                              <1> 
   273 00000752 488D15(00000000)    <1>     lea rdx, section.programArea.vstart
   274 00000759 4829DA              <1>     sub rdx, rbx    ;Get the size of the interpreter and internal data area
   275 0000075C 4829D0              <1>     sub rax, rdx    ;Remove the number of bytes reserved to the interpreter
   276 0000075F E88FFDFFFF          <1>     call printdecimalword
   277 00000764 4801C3              <1>     add rbx, rax    ;Add number of bytes to start address
   278 00000767 48891D(00110000)    <1>     mov qword [maxMemAddr], rbx ;Save this address
   279                              <1> .exit:
   280 0000076E C3                  <1>     ret
   281                              <1> .worstCase:
   282                              <1> ;Assume 2Mb MAX memory, rax has base address
   283 0000076F 48BB00002000000000- <1>     mov rbx, 200000h    ;2Mb value
   283 00000778 00                  <1>
   284 00000779 4829C3              <1>     sub rbx, rax
   285 0000077C 4889D8              <1>     mov rax, rbx    ;Get value in rax
   286 0000077F E86FFDFFFF          <1>     call printdecimalword
   287 00000784 48C705(00110000)00- <1>     mov qword [maxMemAddr], 200000h
   287 0000078C 002000              <1>
   288 0000078F C3                  <1>     ret
   289                              <1> 
    17                                  %include "BASICDAT.ASM"
    18 00000790 4F6B0A0D00          <1> prompt  db "Ok",0Ah,0Dh,0
    19 00000795 5343522036342D4241- <1> mainmsg db "SCR 64-BASIC v0.1",0Ah,0Dh,0
    19 0000079E 5349432076302E310A- <1>
    19 000007A7 0D00                <1>
    20 000007A9 204279746573206672- <1> bytemsg db " Bytes free",0Ah,0Dh,0
    20 000007B2 65650A0D00          <1>
    21 000007B7 0A0D00              <1> crlf    db 0Ah,0Dh,0
    22 000007BA 4572726F720A0D00    <1> errmsg  db "Error",0Ah,0Dh,0
    23 000007C2 303132333435363738- <1> numbers db "0123456789"
    23 000007CB 39                  <1>
    24 000007CC 414243444546474849- <1> varChrs db "ABCDEFGHIJKLMNOPQRSTUVWXYZ%$" ;Valid chars for var name
    24 000007D5 4A4B4C4D4E4F505152- <1>
    24 000007DE 535455565758595A25- <1>
    24 000007E7 24                  <1>
    25                              <1> numVarChars equ 28
    26                              <1> ;% => Integer variable (8 bytes)
    27                              <1> ;! => Single-Precision, Unused and ignored
    28                              <1> ;# => Double-Precision, Unused and ignored
    29                              <1> ;$ => String variable
    30                              <1> 
    31                              <1> ;Error Messages
    32 000007E8 4F7574206F66204D65- <1> noMem   db "Out of Memory",0Ah,0Dh,0
    32 000007F1 6D6F72790A0D00      <1>
    33 000007F8 53796E746178204572- <1> syntax  db "Syntax Error",0Ah,0Dh,0
    33 00000801 726F720A0D00        <1>
    34 00000807 54797065206D69736D- <1> typeError   db "Type mismatch",0Ah,0Dh,0
    34 00000810 617463680A0D00      <1>
    35 00000817 556E646566696E6564- <1> lineNoXist  db "Undefined line number",0Ah,0Dh,0
    35 00000820 206C696E65206E756D- <1>
    35 00000829 6265720A0D00        <1>
    18                                  Segment programArea follows=resSeg align=1 vfollows=resSeg valign=1
    19                                  ENDOFPROGRAM:

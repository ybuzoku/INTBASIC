     1                                      [map all BASIC.MAP]
     2                                      [DEFAULT REL]
     3                                      BITS 64
     4                                  %include "MEM.INC"
     5                              <1> 
     6                              <1> progLineBlockType   equ 0   ;Program Line
     7                              <1> varBlockType        equ 1   ;Variable block
     8                              <1> datBlockType        equ 2   ;Data block (i.e. a string block)
     9                              <1> 
    10                              <1> notLastMemBlock equ "t" ;Used for blocks that are not the last block
    11                              <1> lastMemBlock    equ "r" ;Used by the last block to indicate end of chain
    12                              <1> 
    13                              <1> %macro memBlockM 0 ;Memory block Macro
    14                              <1>     .bSignature resb 1      ;Valid Signature
    15                              <1>     .wBlockSize resw 1      ;Total block size in bytes
    16                              <1>     .bBlockType resb 1      ;Block type, program line, variable or string
    17                              <1> %endmacro
    18                              <1> 
    19                              <1> struc memBlock
    20                              <1>     memBlockM
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    21                              <1> endstruc
    22                              <1> 
    23                              <1> struc progLineBlock
    24                              <1>     memBlockM               ;Common memory block header
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    25 00000004 ????                <1>     .wLineNum   resw 1      ;Line number, up to 65535
    26 00000006 ????????????????    <1>     .qPtr       resq 1      ;Pointer to the next line, or -1 if last line
    27 0000000E <res 100h>          <1>     .sLine      resb maxLineLen  ;Maximum length 255, keep null char but 
    28                              <1>     ;                             NOT LINE NUMBER OR PRECEEDING SPACES
    29                              <1> endstruc
    30                              <1> 
    31                              <1> struc varBlock
    32                              <1>     memBlockM               ;Common memory block header
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    33 00000004 ????????????????    <1>     .qValue     resq 1      ;One value qword
    34                              <1>     .sVarName:              ;Up to 40 chars for the var name
    35                              <1> endstruc
    36                              <1> 
    37                              <1> struc stringBlock
    38                              <1>     memBlockM
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    39 00000004 <res 100h>          <1>     .string     resb maxLineLen    ;Strings allocate 256 chars
    40                              <1>     .sVarName:              ;Up to 40 chars for the var name
    41                              <1> endstruc
    42                              <1> 
    43                              <1> ;Variable equates
    44                              <1> intEquate   equ 0
    45                              <1> strEquate   equ 1
    46                              <1> 
    47                              <1> ;State byte equates
    48                              <1> breakBit    equ 1    ;Set means on
    49                              <1> traceBit    equ 2    ;Set means TRON, Clear means TROFF
    50                              <1> indirectBit equ 4    ;Set means indirect/program mode, Clear means direct/line mode
    51                              <1> ctrlFlow    equ 8    ;Set means do not find other expression on current line
    52                              <1> 
    53                              <1> ;Control Instruction Signatures
    54                              <1> WHILEsig    equ 055h
    55                              <1> FORsig      equ 05Ah
    56                              <1> GOSUBsig    equ 0A5h
    57                              <1> ;Control stack data structures
    58                              <1> 
    59                              <1> struc forStruct
    60 00000000 ????????????????    <1>     .specQword  resq 1  ;Special qword (see function description)
    61 00000008 ????????????????    <1>     .cntrPtr    resq 1  ;Pointer to counter variable
    62 00000010 ????????????????    <1>     .limitValue resq 1  ;At what value, or after, do we stop the loop 
    63 00000018 ????????????????    <1>     .stepValue  resq 1  ;By how much do we increase on each iteration
    64                              <1> ;Special qword:
    65                              <1> ; Byte 7 = Offset into the line for next instruction after FOR
    66                              <1> ; Bytes[6:5] = Line number of portion after FOR (either FOR line or line after FOR)
    67                              <1> ; Byte 4 = Offset into the line for next instruction after NEXT
    68                              <1> ; Bytes[3:2] = Line number of portion after NEXT (either NEXT line or line after NEXT)
    69                              <1> ; Byte 1 = Parity check sum for the qword, makes the sum of the bytes in qword 0
    70                              <1> ; Byte 0 = FOR signature
    71                              <1> endstruc
    72                              <1> 
    73                              <1> struc whileStruct
    74 00000000 ????????????????    <1>     .specQword  resq 1  ;Special qword
    75                              <1> ;Special qword:
    76                              <1> ; Byte 7 = Offset into the line for the condition to evaluate
    77                              <1> ; Bytes[6:5] = Line number of WHILE 
    78                              <1> ; Byte 4 = Offset in line for either first : after WEND or ASCII NULL (end of line)
    79                              <1> ; Bytes[3:2] = Line number of WEND
    80                              <1> ; Byte 1 = Parity check sum for the qword, makes the sum of the bytes in qword 0
    81                              <1> ; Byte 0 = WHILE signature
    82                              <1> endstruc
    83                              <1> 
    84                              <1> struc gosubStruct
    85 00000000 ????????????????    <1>     .specQword  resq 1  ;Special qword
    86                              <1> ;Special qword:
    87                              <1> ; Byte 7 =  Offset in line for either first : after GOSUB or ASCII NULL (end of line)
    88                              <1> ; Bytes[6:5] = Line number of GOSUB 
    89                              <1> ; Bytes[4:2] = 055AA55h space filler signature
    90                              <1> ; Byte 1 = Parity check sum for the qword, makes the sum of the bytes in qword 0
    91                              <1> ; Byte 0 = GOSUB signature
    92                              <1> endstruc
    93                              <1> 
    94                              <1> ;Stack based macros
    95                              <1> %macro makeSpaceOnStack 1
    96                              <1>     ;The argument is to specify how much space to make on the stack
    97                              <1>     ;It will check to ensure that we dont go past the stack minimum.
    98                              <1>     ;If we do, call stack overflow!
    99                              <1>     pop rax    ;Get the return address qword into rax
   100                              <1>     shl %1, 3  ;Multiply argument register by 8
   101                              <1>     sub rsp, %1 ;Clear space on the stack plus one qword for ret addr
   102                              <1>     lea rbp, stack
   103                              <1>     cmp rsp, rbp
   104                              <1>     ja .macroNotOverflow ;If rsp above overflow buffer, its oki
   105                              <1>     lea rbp, stkOvflw
   106                              <1>     jmp criticalError
   107                              <1> .macroNotOverflow:
   108                              <1>     ;rsp now points to the start of the cleared space
   109                              <1>     ;Put the return address back on the stack
   110                              <1>     push rax
   111                              <1> %endmacro
   112                              <1> 
   113                              <1> %macro cleanSpaceOnStack 1
   114                              <1>     ;The argument is to specify how much space to reclaim from the stack
   115                              <1>     pop rax
   116                              <1>     shl %1, 3   ;Multiply argument register by 8
   117                              <1>     add rsp, %1
   118                              <1>     push rax
   119                              <1> %endmacro
     5                                  Segment .text align=1
     6                                  %include "RELOC.ASM"
     7 00000000 55AA                <1>     dw 0AA55h 
     8                              <1> ;First verify I have Enough RAM for my program and then run
     9 00000002 B801E80000          <1>     mov eax, 0E801h ;Get low memory count in ax
    10 00000007 CD35                <1>     int 35h
    11 00000009 663D0008            <1>     cmp ax, 200000h/400h ;Divide 2Mb into 1Kb chunks.
    12 0000000D 722A                <1>     jb bad
    13 0000000F B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    14 00000014 0F32                <1>     rdmsr
    15 00000016 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    16 00000018 48C1E720            <1>     shl rdi, 20h        ;Shift high
    17 0000001C 89C7                <1>     mov edi, eax        ;Get the low dword in
    18 0000001E 4889F8              <1>     mov rax, rdi
    19 00000021 488D35(00000000)    <1>     lea rsi, section.resSeg.start
    20 00000028 4881C7[F60E0000]    <1>     add rdi, bssLen
    21 0000002F B900100000          <1>     mov ecx, 1000h
    22 00000034 F348A5              <1>     rep movsq
    23 00000037 FFE0                <1>     jmp qword rax
    24                              <1> bad:
    25 00000039 488D2D0D000000      <1>     lea rbp, badmsg
    26 00000040 B804130000          <1>     mov eax, 1304h
    27 00000045 CD30                <1>     int 30h
    28 00000047 30E4                <1>     xor ah, ah
    29 00000049 CD36                <1>     int 36h
    30 0000004B CD38                <1>     int 38h
    31 0000004D 4E6F7420456E6F7567- <1> badmsg: db "Not Enough Memory. Press any key to enter SYSDEBUG...",0
    31 00000056 68204D656D6F72792E- <1>
    31 0000005F 20507265737320616E- <1>
    31 00000068 79206B657920746F20- <1>
    31 00000071 656E74657220535953- <1>
    31 0000007A 44454255472E2E2E00  <1>
     7                                  Segment dSeg nobits align=1 start=0
     8                                  %include "BSS.ASM"
     9 00000000 <res 50h>           <1> oflowbuff   resq 10        ;10 Qwords of overflow buffer
    10                              <1> ;rsp should never get here when operating in a program.
    11                              <1> ;Only acceptable to be used when processing a line
    12 00000050 <res D40h>          <1> stack       resq 200h - 8 - 10*8  ;Save total 4Kb stack space
    13 00000D90 ????????????????    <1> stacktop    resq 1
    14                              <1> 
    15                              <1> maxLineLen  equ 256
    16 00000D98 <res 100h>          <1> inString    resb maxLineLen         ;256 character input string
    17                              <1> 
    18                              <1> ;This string is used for printing long numbers and saving
    19                              <1> ; the variable names for string comparisons
    20                              <1> digitStringLen  equ 48
    21 00000E98 <res 30h>           <1> digitString resb digitStringLen     
    22                              <1> 
    23 00000EC8 ????????????????    <1> minMemAddr  resq 1  ;Pointer from where to start allocating memory blocks
    24 00000ED0 ????????????????    <1> maxMemAddr  resq 1  ;Pointer to the byte past which we cannot allocate anything
    25                              <1> ;==============================================================================
    26                              <1> ;This is the SDA for each program and must be included in the program area
    27                              <1> ; once we add the ability to save the program to disk.
    28                              <1> ;==============================================================================
    29                              <1> 
    30                              <1> ;void* mcbChain, lastBlock, firstLinPtr = -1 => New program, empty entries
    31                              <1> 
    32 00000ED8 ??                  <1> strLen      resb 1  ;Counter for number of chars entered in string
    33 00000ED9 ??                  <1> stateByte   resb 1  ;Bit 0 => Break Set, stop processing after end of current line
    34 00000EDA ????????????????    <1> mcbChain    resq 1  ;Pointer to the start of the chain
    35 00000EE2 ????????????????    <1> lastBlock   resq 1  ;Pointer to the last block
    36 00000EEA ????????????????    <1> firstLinPtr resq 1  ;Pointer to the programs' first line 
    37 00000EF2 ????                <1> firstLinNum resw 1  ;Line number of the first line of the program
    38 00000EF4 ????                <1> currentLine resw 1  ;Currently being executed line number
    39                              <1> 
    40                              <1> bssLen: ;Needed to compute the resident portion load location
     9                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1
    10                                  %include "MAIN.ASM"
    11                              <1> start:
    12 00000000 B801C50000          <1>     mov eax, 0C501h
    13 00000005 CD35                <1>     int 35h         ;Connect the debugger
    14 00000007 E8AF010000          <1>     call ttyClear   ;Clear the teletype
    15                              <1>     ;Set the CtrlBreak Handler
    16 0000000C 488D3DD5000000      <1>     lea rdi, ctrlBreakHandler
    17 00000013 B03B                <1>     mov al, 3Bh
    18 00000015 E8D7000000          <1>     call setHandler
    19                              <1> 
    20                              <1>     ;Memory stuff
    21 0000001A 488D2D97150000      <1>     lea rbp, mainmsg
    22 00000021 E888010000          <1>     call ttyOutString
    23 00000026 E826150000          <1>     call memoryDetection
    24 0000002B 488D2D9D150000      <1>     lea rbp, bytemsg
    25 00000032 E877010000          <1>     call ttyOutString
    26 00000037 E87D090000          <1>     call newProgram         ;Use this to reset program pointers
    27                              <1> mainLoop:
    28                              <1> ;Entering here resets the program counter but doesnt remove the program from memory
    29 0000003C 668B05(F20E0000)    <1>     mov ax, word [firstLinNum]  ;Error occured, restart the program counter
    30 00000043 668905(F40E0000)    <1>     mov word [currentLine], ax
    31                              <1> 
    32 0000004A FC                  <1>     cld                 ;Set default string op direction
    33 0000004B 488D25(900D0000)    <1>     lea rsp, stacktop    ;Reinitialize stack pointer
    34 00000052 8025(D90E0000)FE    <1>     and byte [stateByte], 0FEh  ;Clear the break bit
    35 00000059 488D2D53150000      <1>     lea rbp, prompt
    36 00000060 E849010000          <1>     call ttyOutString
    37 00000065 488D05D0FFFFFF      <1>     lea rax, mainLoop
    38 0000006C 50                  <1>     push rax    ;Save address on stack
    39                              <1> .ml0:
    40                              <1> ;This section will execute an input line if it is an interactive expression
    41                              <1> ; or store it in the program if it has a line number.
    42                              <1> ;It will keep accepting lines until a line is entered without a line number
    43 0000006D E89F000000          <1>     call getLineInput
    44 00000072 E8FD110000          <1>     call decimalToHex   ;Check to see if we have a valid line number
    45 00000077 6685C0              <1>     test ax, ax
    46 0000007A 750C                <1>     jnz .saveLine
    47                              <1> ;Here we execute the line, move rsi to the start of the line
    48 0000007C 488D35(980D0000)    <1>     lea rsi, inString
    49 00000083 E9AE010000          <1>     jmp runLine
    50                              <1> .saveLine:
    51                              <1>     ;ax has the line number
    52 00000088 6689C2              <1>     mov dx, ax
    53 0000008B E852130000          <1>     call searchForProgramLine
    54 00000090 4881FBFFFFFFFF      <1>     cmp rbx, -1
    55 00000097 751D                <1>     jne .commonProc ;If not equal, line must exist, continue
    56 00000099 E8B1020000          <1>     call spaceSkip  ;Skip all the prceeding spaces
    57 0000009E 803E00              <1>     cmp byte [rsi], 0  ;Is the first non space char the end of the string?
    58 000000A1 742D                <1>     je .lineDoesntExist
    59                              <1>     ;So we have a new line that isn't empty, allocate a new block for this line
    60 000000A3 E86A120000          <1>     call allocateBlock  ;Return a default block in rbx
    61 000000A8 C6430300            <1>     mov byte [rbx + progLineBlock.bBlockType], progLineBlockType
    62 000000AC 66894304            <1>     mov word [rbx + progLineBlock.wLineNum], ax
    63 000000B0 66C743010E01        <1>     mov word [rbx + progLineBlock.wBlockSize], progLineBlock_size
    64                              <1> .commonProc:
    65                              <1>     ;If the line already exists, simply override the stored string
    66                              <1>     ;rbx has a pointer to the block
    67 000000B6 E888140000          <1>     call strlen ;Get the string length
    68 000000BB 488D7B0E            <1>     lea rdi, qword [rbx + progLineBlock.sLine]  ;Get address here
    69 000000BF E876140000          <1>     call strcpy ;Copy the program string to the program block
    70 000000C4 56                  <1>     push rsi
    71 000000C5 4889DE              <1>     mov rsi, rbx    ;Move the block into rsi
    72 000000C8 E839130000          <1>     call insertProgramLine
    73 000000CD 5E                  <1>     pop rsi
    74 000000CE EB9D                <1>     jmp short .ml0
    75                              <1> .lineDoesntExist:
    76 000000D0 488D2D70150000      <1>     lea rbp, lineNoXist
    77                              <1> ;For any error, syntax or otherwise, come here
    78                              <1> criticalError:
    79                              <1> ;Called with rbp pointing at error message
    80 000000D7 E8D2000000          <1>     call ttyOutString
    81 000000DC C605(D90E0000)00    <1>     mov byte [stateByte], 0 ;Reset the state byte
    82 000000E3 E954FFFFFF          <1>     jmp mainLoop    ;Trash input line, restart line input
    83                              <1> 
    84                              <1> ctrlBreakHandler:
    85 000000E8 800D(D90E0000)01    <1>     or byte [stateByte], 1  ;Set the byte
    86 000000EF 48CF                <1>     iretq
    87                              <1> setHandler:
    88                              <1> ;Called with:
    89                              <1> ;   rdi = Pointer to interrupt handler
    90                              <1> ;   al = Interrupt number
    91 000000F1 89C5                <1>     mov ebp, eax    ;al has interrupt number which we need to save
    92 000000F3 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
    93                              <1> ;First call to get default BIOS segement selector and attribute word
    94 000000F9 88C3                <1>     mov bl, al  ;Set interrupt number 
    95 000000FB B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
    96 00000100 CD35                <1>     int 35h
    97 00000102 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
    98 00000104 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
    99                              <1> ;dx preserves the attribute word
   100 00000106 4889FB              <1>     mov rbx, rdi  ;Pointer passed in rdi
   101 00000109 B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   102 0000010E CD35                <1>     int 35h
   103                              <1>     
   104 00000110 C3                  <1>     ret
    11                                  %include "TTY.ASM"
    12                              <1> getLineInput:
    13                              <1>     ;Sets rsi to the inputstring
    14 00000111 30E4                <1>     xor ah, ah
    15 00000113 8825(D80E0000)      <1>     mov byte [strLen], ah   ;Zero the char counter
    16 00000119 488D3D(980D0000)    <1>     lea rdi, inString   ;Move to start of line
    17 00000120 4889FE              <1>     mov rsi, rdi
    18 00000123 57                  <1>     push rdi
    19 00000124 B900010000          <1>     mov ecx, maxLineLen
    20 00000129 30C0                <1>     xor al, al    ;Ensure the input line is sanitised
    21 0000012B F3AA                <1>     rep stosb
    22 0000012D 5F                  <1>     pop rdi
    23                              <1> .getChar:
    24 0000012E E883000000          <1>     call ttyIn
    25 00000133 3C0D                <1>     cmp al, 0Dh ;Line Feed
    26 00000135 7456                <1>     je .gliExit
    27 00000137 3C08                <1>     cmp al, 08h ;Bspace
    28 00000139 740F                <1>     je .glibspace
    29 0000013B 803D(D80E0000)FE    <1>     cmp byte [strLen], -2   ;If at max length (255 chars), simply beep and wait for either bspace or enter
    30 00000142 7459                <1>     je .gliFull 
    31 00000144 84C0                <1>     test al, al
    32 00000146 7443                <1>     je .gliExtendedChar
    33 00000148 EB29                <1>     jmp short .gliCheckCase
    34                              <1> .glibspace:
    35 0000014A F605(D80E0000)FF    <1>     test byte [strLen], -1  ;This will only be zero if strLen=0
    36 00000151 74DB                <1>     jz .getChar
    37 00000153 48FFCF              <1>     dec rdi ;Go back by one position in the input line
    38 00000156 FE0D(D80E0000)      <1>     dec byte [strLen]
    39 0000015C B008                <1>     mov al, 08h
    40 0000015E E846000000          <1>     call ttyOutChar
    41 00000163 B020                <1>     mov al, 20h  
    42 00000165 E83F000000          <1>     call ttyOutChar
    43 0000016A B008                <1>     mov al, 08h
    44 0000016C E838000000          <1>     call ttyOutChar
    45 00000171 EBBB                <1>     jmp short .getChar
    46                              <1> .gliCheckCase:
    47                              <1>     ;al has char
    48 00000173 E831000000          <1>     call ttyOutChar ;Echo the char as is, but store it uppercase
    49 00000178 3C61                <1>     cmp al, "a"
    50 0000017A 7206                <1>     jb .gliccStore
    51 0000017C 3C7A                <1>     cmp al, "z"
    52 0000017E 7702                <1>     ja .gliccStore
    53 00000180 2C20                <1>     sub al, 20h
    54                              <1> .gliccStore:
    55 00000182 AA                  <1>     stosb   ;Increment the pointer, add char to buffer
    56 00000183 FE05(D80E0000)      <1>     inc byte [strLen]   ;Inc char count
    57 00000189 EBA3                <1>     jmp short .getChar
    58                              <1> .gliExtendedChar:
    59                              <1>     ;Currently, extended chars do nothing, 
    60                              <1>     ; eventually add F1-F10 functionality
    61                              <1>     ; and arrow key support
    62 0000018B EBA1                <1>     jmp short .getChar
    63                              <1> .gliExit:
    64 0000018D 488D2D49140000      <1>     lea rbp, crlf
    65 00000194 E815000000          <1>     call ttyOutString
    66 00000199 C60700              <1>     mov byte [rdi], 0   ;Null terminate string here
    67 0000019C C3                  <1>     ret
    68                              <1> .gliFull:
    69 0000019D B007                <1>     mov al, 07h
    70 0000019F E805000000          <1>     call ttyOutChar
    71 000001A4 E985FFFFFF          <1>     jmp .getChar
    72                              <1> 
    73                              <1> ttyOutChar:
    74 000001A9 B40E                <1>     mov ah, 0Eh
    75 000001AB CD30                <1>     int 30h
    76 000001AD C3                  <1>     ret
    77                              <1> ttyOutString:
    78                              <1> ;Print 0 terminated strings
    79 000001AE B804130000          <1>     mov eax, 1304h
    80 000001B3 CD30                <1>     int 30h
    81 000001B5 C3                  <1>     ret
    82                              <1> ttyIn:
    83 000001B6 30E4                <1>     xor ah, ah
    84 000001B8 CD36                <1>     int 36h
    85 000001BA C3                  <1>     ret
    86                              <1> ttyClear:
    87 000001BB B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
    88 000001C0 CD30                <1>     int 30h
    89 000001C2 B402                <1>     mov ah, 02h
    90 000001C4 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
    91 000001C6 88D7                <1>     mov bh, dl      ;Set cursor for page 0
    92 000001C8 CD30                <1>     int 30h
    93 000001CA B707                <1>     mov bh, 07h     ;Grey/Black attribs
    94 000001CC B800060000          <1>     mov eax, 0600h  ;Clear whole screen
    95 000001D1 CD30                <1>     int 30h
    96 000001D3 C3                  <1>     ret
    12                                  %include "PROCESS.ASM"
    13                              <1> keywordParser:
    14                              <1> ;rsi must point to the start of the portion of the line to execute
    15 000001D4 E876010000          <1>     call spaceSkip  ;Skip any leading spaces
    16 000001D9 803E00              <1>     cmp byte [rsi], 0   ;Null terminated line, empty line?
    17 000001DC 7444                <1>     je .exitEmpty
    18                              <1>     ;rsi now points to function
    19 000001DE 488D3DDA050000      <1>     lea rdi, funTbl     ;Point rdi to the function table
    20                              <1> .functionFinderLoop:
    21 000001E5 0FB60F              <1>     movzx ecx, byte [rdi]  ;Get the string length  
    22 000001E8 80F9FF              <1>     cmp cl, -1  ;-1 is the end of table marker, either Var assignment or error
    23 000001EB 7440                <1>     je .notLetVarAssignment ;No key word found, consider variable assignment
    24 000001ED 56                  <1>     push rsi    ;Save ptr to start of string on stack 
    25 000001EE 57                  <1>     push rdi
    26 000001EF 48FFC7              <1>     inc rdi             ;Goto first char in function name
    27 000001F2 F3A6                <1>     repe cmpsb
    28 000001F4 5F                  <1>     pop rdi
    29 000001F5 5E                  <1>     pop rsi     ;Return ptr to start of string pointer from stack
    30 000001F6 84C9                <1>     test cl, cl ;Did all the chars match?
    31 000001F8 740F                <1>     jz .functionFound
    32 000001FA 480FB607            <1>     movzx rax, byte [rdi]    ;Skip unnecessary function pointer
    33 000001FE 480502000000        <1>     add rax, 2      ;Add 2 to skip relative pointer
    34 00000204 4801C7              <1>     add rdi, rax
    35 00000207 EBDC                <1>     jmp short .functionFinderLoop
    36                              <1> .functionFound:
    37                              <1>     ;Function found! Execute!
    38                              <1>     ;rsi points to start of expression to evaluate for function
    39                              <1>     ;rdi points to table entry
    40 00000209 488D1DAF050000      <1>     lea rbx, funTbl         ;Get table address
    41 00000210 480FB617            <1>     movzx rdx, byte [rdi]   ;Get pascal string length
    42 00000214 0FB70C17            <1>     movzx ecx, word [rdi + rdx] ;Add pascal strlen to table entry and get word offset
    43 00000218 4801CB              <1>     add rbx, rcx    ;Add word offset to table base
    44 0000021B 48FFCA              <1>     dec rdx         ;Get number of chars in function name
    45 0000021E 4801D6              <1>     add rsi, rdx    ;rsi points to first char AFTER function name
    46                              <1> .exit:
    47 00000221 C3                  <1>     ret 
    48                              <1> .exitEmpty:
    49 00000222 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    49 0000022B FF                  <1>
    50 0000022C C3                  <1>     ret
    51                              <1>     ;rbx has the function pointer, 
    52                              <1>     ;rsi points to the first char after the keyword (e.g. PRINT, INPUT etc)
    53                              <1> .notLetVarAssignment:
    54 0000022D 488D1D07070000      <1>     lea rbx, variableAssignment
    55 00000234 EBEB                <1>     jmp short .exit  ;Now call the function as if it was found from the table
    56                              <1> 
    57                              <1> runLine:
    58                              <1> ;New lines begin here, rsi point to the start of the program line
    59 00000236 F605(D90E0000)02    <1>     test byte [stateByte], traceBit ;Are we TRON?
    60 0000023D 0F85B0000000        <1>     jnz .tron
    61                              <1> .stringPortionProcess:
    62                              <1>     ;rsi points to string portion to begin processing
    63 00000243 E88CFFFFFF          <1>     call keywordParser
    64                              <1>     ;rbx has the function pointer, if rbx is -1, line was empty
    65                              <1>     ;rsi points to the first char after the keyword (e.g. PRINT, INPUT etc)
    66 00000248 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If the line is empty, rbx has a -1 so skip the line
    67 0000024F 7437                <1>     je .gotoNextLine
    68 00000251 F605(D90E0000)01    <1>     test byte [stateByte], breakBit ;Is break set before exec?
    69 00000258 0F85C1000000        <1>     jnz .break
    70                              <1> ;EXEC   LINE    PORTION
    71 0000025E FFD3                <1>     call rbx        ;Call the function pointer in rbx
    72                              <1>     ;rsi should be pointing to the next portion of the line or the end of the line
    73                              <1> ;EXEC COMPLETE
    74 00000260 F605(D90E0000)01    <1>     test byte [stateByte], breakBit ;Is break set after exec?
    75 00000267 0F85B2000000        <1>     jnz .break
    76 0000026D F605(D90E0000)04    <1>     test byte [stateByte], indirectBit
    77 00000274 7448                <1>     jz .exit    ;IF in direct mode, just return to command line
    78 00000276 F605(D90E0000)08    <1>     test byte [stateByte], ctrlFlow ;Ctrl Flow =>ignore other expressions temporarily
    79 0000027D 7540                <1>     jnz .ctrlFlowHandler
    80                              <1> 
    81 0000027F E831050000          <1>     call findOtherExpressionsOnLine ;See if there are any other expressions
    82 00000284 84C0                <1>     test al, al ;If al is null, no more expressions on the line
    83                              <1>     ;If not null, keep executing expressions on same line
    84                              <1>     ;rsi points to first char after :
    85 00000286 75BB                <1>     jnz .stringPortionProcess ;If a : found, keep processing
    86                              <1> .gotoNextLine:
    87 00000288 668B15(F40E0000)    <1>     mov dx, word [currentLine]  ;Get in rbx the ptr to current line
    88 0000028F E84E110000          <1>     call searchForProgramLine
    89 00000294 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Does the line not exist somehow?
    90 0000029B 7421                <1>     je .exit
    91 0000029D 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Walk chain
    92 000002A1 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Are we at the end of the chain?
    93 000002A8 7414                <1>     je .exit
    94 000002AA 668B5304            <1>     mov dx, word [rbx + progLineBlock.wLineNum] ;Save the new line number
    95 000002AE 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Point rsi to the start of the next line
    96                              <1> .gotoNextLineCommon:
    97 000002B2 668915(F40E0000)    <1>     mov word [currentLine], dx
    98 000002B9 E978FFFFFF          <1>     jmp runLine
    99                              <1> .exit:
   100 000002BE C3                  <1>     ret
   101                              <1> .ctrlFlowHandler:
   102                              <1>     ;The stack pointer should be pointing now at the block
   103                              <1>     ; control flow data block. 
   104                              <1>     ;The functions which return with this bit set, also have placed
   105                              <1>     ; the next line number in dx, offset into line in byte three of edx
   106 000002BF 8025(D90E0000)F7    <1>     and byte [stateByte], ~ctrlFlow ;First clear the ctrlflow bit
   107 000002C6 E817110000          <1>     call searchForProgramLine   ;Get pointer to line
   108 000002CB 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Does the line not exist?
   109 000002D2 74DE                <1>     je .gotoNextLineCommon
   110 000002D4 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Point rsi to the start of the next line
   111 000002D8 89D0                <1>     mov eax, edx    ;Isolate the offset into the line
   112 000002DA C1E810              <1>     shr eax, 10h    ;Get byte three into byte 1
   113 000002DD 25FF000000          <1>     and eax, 0FFh   ;Save only the bottom byte
   114 000002E2 4801C6              <1>     add rsi, rax    ;Add the offset into the string to rsi
   115 000002E5 EBCB                <1>     jmp short .gotoNextLineCommon
   116                              <1> .badLineNumber:
   117 000002E7 488D2D59130000      <1>     lea rbp, lineNoXist
   118 000002EE E9E4FDFFFF          <1>     jmp criticalError
   119                              <1> 
   120                              <1> .tron:
   121                              <1> ;Print the line number about to be executed
   122 000002F3 F605(D90E0000)04    <1>     test byte [stateByte], indirectBit  ;Tron should only work in indirect mode
   123 000002FA 0F8443FFFFFF        <1>     jz .stringPortionProcess
   124 00000300 B05B                <1>     mov al, "["
   125 00000302 E8A2FEFFFF          <1>     call ttyOutChar
   126 00000307 0FB705(F40E0000)    <1>     movzx eax, word [currentLine]
   127 0000030E E8890F0000          <1>     call printdecimalword
   128 00000313 B05D                <1>     mov al, "]"
   129 00000315 E88FFEFFFF          <1>     call ttyOutChar
   130 0000031A E924FFFFFF          <1>     jmp .stringPortionProcess
   131                              <1> .break:
   132 0000031F 488D2D39130000      <1>     lea rbp, breakmsg
   133 00000326 E883FEFFFF          <1>     call ttyOutString
   134 0000032B 0FB705(F40E0000)    <1>     movzx eax, word [currentLine]
   135 00000332 E8650F0000          <1>     call printdecimalword
   136 00000337 488D2D9F120000      <1>     lea rbp, crlf
   137 0000033E E86BFEFFFF          <1>     call ttyOutString
   138                              <1>     ;Preserve only bit 2 of the state byte
   139 00000343 8025(D90E0000)02    <1>     and byte [stateByte], traceBit
   140 0000034A E9EDFCFFFF          <1>     jmp mainLoop    ;Exit processing
    13                                  %include "PARSE.ASM"
    14                              <1> ;Main Parsing Routines go here
    15                              <1> 
    16                              <1> spaceSkip:
    17                              <1> ;Allows us to skip spaces that might have been placed for
    18                              <1> ; ease of reading by the user without modifying any registers
    19                              <1> ; except for rsi.
    20                              <1> ;Input: rsi = Pointer to string
    21                              <1> ;Output: rsi = First non space character encountered
    22 0000034F 803E20              <1>     cmp byte [rsi], " "
    23 00000352 7505                <1>     jne .exit
    24 00000354 48FFC6              <1>     inc rsi
    25 00000357 EBF6                <1>     jmp short spaceSkip
    26                              <1> .exit:
    27 00000359 C3                  <1>     ret
    28                              <1> 
    29                              <1> getVarNameLength:
    30                              <1> ;Called pointing to the buffer with the var name in it
    31                              <1> ;Input: rsi = Start of var name
    32                              <1> ;Output: ecx = Length of varname
    33 0000035A 50                  <1>     push rax
    34 0000035B 56                  <1>     push rsi
    35 0000035C 57                  <1>     push rdi
    36 0000035D 53                  <1>     push rbx
    37 0000035E 52                  <1>     push rdx
    38 0000035F 31D2                <1>     xor edx, edx    ;Clear counter of chars
    39 00000361 488D1D8A120000      <1>     lea rbx, varChrs    ;Get the list of valid variable name chars
    40                              <1> .search:
    41 00000368 4889DF              <1>     mov rdi, rbx    ;Save pointer in rbx
    42 0000036B AC                  <1>     lodsb       ;Get the first char into al
    43 0000036C B926000000          <1>     mov ecx, numVarChars
    44 00000371 F2AE                <1>     repne scasb       ;Look for char in the valid chars list
    45 00000373 750A                <1>     jne .exit   ;Char not found, drop it
    46 00000375 FFC2                <1>     inc edx     ;Add one to number of chars found
    47 00000377 81FA28000000        <1>     cmp edx, 40 ;At position for char 40?
    48 0000037D 72E9                <1>     jb .search  ;Whilst below, keep going
    49                              <1> .exit:
    50 0000037F 89D1                <1>     mov ecx, edx
    51 00000381 5A                  <1>     pop rdx
    52 00000382 5B                  <1>     pop rbx
    53 00000383 5F                  <1>     pop rdi
    54 00000384 5E                  <1>     pop rsi
    55 00000385 58                  <1>     pop rax
    56 00000386 C3                  <1>     ret
    57                              <1> 
    58                              <1> getVarType:
    59                              <1> ;Input: rsi = Start of var name
    60                              <1> ;       rcx = Length of varname
    61                              <1> ;Output: ebx = 0 => Integer
    62                              <1> ;        ebx = 1 => String
    63                              <1> ;        ebx = -1 => Var doesnt exist, caller handles
    64 00000387 50                  <1>     push rax
    65 00000388 51                  <1>     push rcx
    66 00000389 56                  <1>     push rsi
    67 0000038A E8E30F0000          <1>     call findVariable
    68 0000038F 4881FBFFFFFFFF      <1>     cmp rbx, -1
    69 00000396 7406                <1>     je .exit
    70 00000398 0FB65B03            <1>     movzx ebx, byte [rbx + memBlock.bBlockType]
    71 0000039C FFCB                <1>     dec ebx
    72                              <1> .exit:
    73 0000039E 5E                  <1>     pop rsi
    74 0000039F 59                  <1>     pop rcx
    75 000003A0 58                  <1>     pop rax
    76 000003A1 C3                  <1>     ret
    77                              <1> 
    78                              <1> handleAlgebraicExpression:
    79                              <1> ;Input: rsi = Points to a mathematical expression
    80                              <1> ;Output: rax = Result of said expression
    81                              <1> ;Declares a syntax error if weird chars found
    82                              <1> ;Declares a type error if a string variable found
    83                              <1> ;Declares a stack overflow if less than 20 stack words available
    84 000003A2 50                  <1>     push rax
    85 000003A3 488D05(50000000)    <1>     lea rax, stack
    86 000003AA 480550000000        <1>     add rax, 10*8   ;Be extra careful
    87 000003B0 4839C4              <1>     cmp rsp, rax
    88                              <1>     ;if rsp is below rax, fail
    89 000003B3 0F8278030000        <1>     jb .stack
    90 000003B9 58                  <1>     pop rax
    91                              <1> .handleFourthLevel:
    92 000003BA E807010000          <1>     call .handleThirdLevel
    93                              <1> .parseLogicals:
    94 000003BF 813E414E4420        <1>     cmp dword [rsi], "AND "
    95 000003C5 0F84B2000000        <1>     je .and
    96 000003CB 66813E4F52          <1>     cmp word [rsi], "OR"
    97 000003D0 0F84B6000000        <1>     je .or
    98 000003D6 813E584F5220        <1>     cmp dword [rsi], "XOR "
    99 000003DC 0F84BC000000        <1>     je .xor
   100 000003E2 813E45515620        <1>     cmp dword [rsi], "EQV "
   101 000003E8 0F84BF000000        <1>     je .eqv
   102 000003EE 813E494D5020        <1>     cmp dword [rsi], "IMP "
   103 000003F4 7468                <1>     je .imp
   104 000003F6 813E524F4C20        <1>     cmp dword [rsi], "ROL "
   105 000003FC 744F                <1>     je .leftRoll
   106 000003FE 813E524F5220        <1>     cmp dword [rsi], "ROR "
   107 00000404 7436                <1>     je .rightRoll
   108 00000406 813E53484C20        <1>     cmp dword [rsi], "SHL "
   109 0000040C 741D                <1>     je .leftShift
   110 0000040E 813E53485220        <1>     cmp dword [rsi], "SHR "
   111 00000414 0F85EB020000        <1>     jne .exit
   112                              <1> .rightShift:
   113                              <1> ;Shift count is truncated to between 1 and 255 for shift and Roll
   114 0000041A 50                  <1>     push rax
   115 0000041B E89F000000          <1>     call .handleThirdLevelSkip
   116 00000420 59                  <1>     pop rcx
   117 00000421 4891                <1>     xchg rax, rcx   ;Move count into rcx, and shift target to rax
   118 00000423 48D3E8              <1>     shr rax, cl
   119 00000426 E994FFFFFF          <1>     jmp .parseLogicals
   120                              <1> 
   121                              <1> .leftShift:
   122 0000042B 50                  <1>     push rax
   123 0000042C E88E000000          <1>     call .handleThirdLevelSkip
   124 00000431 59                  <1>     pop rcx
   125 00000432 4891                <1>     xchg rax, rcx   ;Move count into rcx, and shift target to rax
   126 00000434 48D3E0              <1>     shl rax, cl
   127 00000437 E983FFFFFF          <1>     jmp .parseLogicals
   128                              <1> 
   129                              <1> .rightRoll:
   130 0000043C 50                  <1>     push rax
   131 0000043D E87D000000          <1>     call .handleThirdLevelSkip
   132 00000442 59                  <1>     pop rcx
   133 00000443 4891                <1>     xchg rax, rcx   ;Move count into rcx, and shift target to rax
   134 00000445 48D3C8              <1>     ror rax, cl
   135 00000448 E972FFFFFF          <1>     jmp .parseLogicals
   136                              <1> 
   137                              <1> .leftRoll:
   138 0000044D 50                  <1>     push rax
   139 0000044E E86C000000          <1>     call .handleThirdLevelSkip
   140 00000453 59                  <1>     pop rcx
   141 00000454 4891                <1>     xchg rax, rcx   ;Move count into rcx, and shift target to rax
   142 00000456 48D3C0              <1>     rol rax, cl
   143 00000459 E961FFFFFF          <1>     jmp .parseLogicals
   144                              <1> 
   145                              <1> .imp:
   146                              <1>     ;A => B == ¬A OR B
   147 0000045E 50                  <1>     push rax
   148 0000045F E85B000000          <1>     call .handleThirdLevelSkip
   149 00000464 59                  <1>     pop rcx ;rcx has A
   150 00000465 48F7D1              <1>     not rcx
   151 00000468 4809C8              <1>     or rax, rcx
   152 0000046B E94FFFFFFF          <1>     jmp .parseLogicals
   153                              <1> 
   154                              <1> .not:
   155 00000470 E84A000000          <1>     call .handleThirdLevelSkip  ;Get result in rax
   156 00000475 48F7D0              <1>     not rax ;Save 1's compliment in rax
   157 00000478 E942FFFFFF          <1>     jmp .parseLogicals
   158                              <1> .and:
   159 0000047D 50                  <1>     push rax
   160 0000047E E83C000000          <1>     call .handleThirdLevelSkip
   161 00000483 59                  <1>     pop rcx
   162 00000484 4821C8              <1>     and rax, rcx
   163 00000487 E933FFFFFF          <1>     jmp .parseLogicals
   164                              <1> .or:
   165 0000048C 48FFCE              <1>     dec rsi ;handle third level skips skips one too many for or
   166 0000048F 50                  <1>     push rax
   167 00000490 E82A000000          <1>     call .handleThirdLevelSkip
   168 00000495 59                  <1>     pop rcx
   169 00000496 4809C8              <1>     or rax, rcx
   170 00000499 E921FFFFFF          <1>     jmp .parseLogicals
   171                              <1> .xor:
   172 0000049E 50                  <1>     push rax
   173 0000049F E81B000000          <1>     call .handleThirdLevelSkip
   174 000004A4 59                  <1>     pop rcx
   175 000004A5 4831C8              <1>     xor rax, rcx
   176 000004A8 E912FFFFFF          <1>     jmp .parseLogicals
   177                              <1> .eqv:
   178                              <1> ;Not XOR, ie only if the two bits are equal do we set it
   179 000004AD 50                  <1>     push rax
   180 000004AE E80C000000          <1>     call .handleThirdLevelSkip
   181 000004B3 59                  <1>     pop rcx
   182 000004B4 4831C8              <1>     xor rax, rcx
   183 000004B7 48F7D0              <1>     not rax
   184 000004BA E900FFFFFF          <1>     jmp .parseLogicals
   185                              <1> 
   186                              <1> ;Level 3, Relational Connectives
   187                              <1> .handleThirdLevelSkip:
   188 000004BF 4881C603000000      <1>     add rsi, 3  ;Go past the end of the word
   189                              <1> .handleThirdLevel:
   190 000004C6 E80B010000          <1>    call .handleSecondLevel
   191                              <1> .parseRelationals:
   192                              <1>     ;Handle Relational connectives
   193 000004CB 803E3D              <1>     cmp byte [rsi], "="
   194 000004CE 0F84BA000000        <1>     je .processEq
   195 000004D4 66813E3C3E          <1>     cmp word [rsi], "<>"
   196 000004D9 0F84D0000000        <1>     je .processNeq
   197 000004DF 66813E3E3C          <1>     cmp word [rsi], "><"
   198 000004E4 0F84C5000000        <1>     je .processNeq
   199 000004EA 803E3C              <1>     cmp byte [rsi], "<"
   200 000004ED 7430                <1>     je .processLess
   201 000004EF 803E3E              <1>     cmp byte [rsi], ">"
   202 000004F2 0F850D020000        <1>     jne .exit
   203                              <1> .processGreater:
   204 000004F8 807E013D            <1>     cmp byte [rsi + 1], "=" ;Is this a GEQ
   205 000004FC 7448                <1>     je .processGeq
   206 000004FE 50                  <1>     push rax
   207 000004FF E8CF000000          <1>     call .handleSecondLevelSkip
   208 00000504 59                  <1>     pop rcx ;lhs, rax has rhs of >
   209                              <1> 
   210 00000505 53                  <1>     push rbx
   211 00000506 31DB                <1>     xor ebx, ebx
   212 00000508 4839C1              <1>     cmp rcx, rax
   213 0000050B 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1 ;Default to true
   213 00000514 FF                  <1>
   214 00000515 480F4EC3            <1>     cmovle rax, rbx  ;Move the false value if less than
   215 00000519 5B                  <1>     pop rbx
   216 0000051A E9ACFFFFFF          <1>     jmp .parseRelationals
   217                              <1> .processLess:
   218 0000051F 807E013D            <1>     cmp byte [rsi + 1], "=" ;Is this a LEQ
   219 00000523 7445                <1>     je .processLeq
   220 00000525 50                  <1>     push rax
   221 00000526 E8A8000000          <1>     call .handleSecondLevelSkip
   222 0000052B 59                  <1>     pop rcx ;lhs, rax has rhs of <
   223                              <1> 
   224 0000052C 53                  <1>     push rbx
   225 0000052D 31DB                <1>     xor ebx, ebx
   226 0000052F 4839C1              <1>     cmp rcx, rax
   227 00000532 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1 ;Default to true
   227 0000053B FF                  <1>
   228 0000053C 480F4DC3            <1>     cmovge rax, rbx  ;Move the false value if greater than or equal to
   229 00000540 5B                  <1>     pop rbx
   230 00000541 E985FFFFFF          <1>     jmp .parseRelationals
   231                              <1> 
   232                              <1> .processGeq:
   233                              <1> ;Symbol has two chars so skip second char
   234 00000546 48FFC6              <1>     inc rsi ;Skip first symbol
   235 00000549 50                  <1>     push rax
   236 0000054A E884000000          <1>     call .handleSecondLevelSkip
   237 0000054F 59                  <1>     pop rcx ;lhs, rax has rhs of >=
   238                              <1> 
   239 00000550 53                  <1>     push rbx
   240 00000551 31DB                <1>     xor ebx, ebx
   241 00000553 4839C1              <1>     cmp rcx, rax
   242 00000556 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1 ;Default to true
   242 0000055F FF                  <1>
   243 00000560 480F4CC3            <1>     cmovl rax, rbx  ;Move the false value if less than
   244 00000564 5B                  <1>     pop rbx
   245 00000565 E961FFFFFF          <1>     jmp .parseRelationals
   246                              <1> 
   247                              <1> .processLeq:
   248                              <1> ;Symbol has two chars so skip second char
   249 0000056A 48FFC6              <1>     inc rsi
   250 0000056D 50                  <1>     push rax
   251 0000056E E860000000          <1>     call .handleSecondLevelSkip
   252 00000573 59                  <1>     pop rcx ;lhs, rax has rhs of <=
   253                              <1> 
   254 00000574 53                  <1>     push rbx
   255 00000575 31DB                <1>     xor ebx, ebx
   256 00000577 4839C1              <1>     cmp rcx, rax
   257 0000057A 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1 ;Default to true
   257 00000583 FF                  <1>
   258 00000584 480F4FC3            <1>     cmovg rax, rbx  ;Move the false value if greater than
   259 00000588 5B                  <1>     pop rbx
   260 00000589 E93DFFFFFF          <1>     jmp .parseRelationals
   261                              <1> 
   262                              <1> .processEq:
   263 0000058E 50                  <1>     push rax
   264 0000058F E83F000000          <1>     call .handleSecondLevelSkip
   265 00000594 59                  <1>     pop rcx ;lhs, rax has rhs of =
   266                              <1> 
   267 00000595 53                  <1>     push rbx 
   268 00000596 31DB                <1>     xor ebx, ebx
   269 00000598 4839C1              <1>     cmp rcx, rax
   270 0000059B 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1
   270 000005A4 FF                  <1>
   271 000005A5 480F45C3            <1>     cmovne rax, rbx ;Only set rax to 0 if not equal
   272 000005A9 5B                  <1>     pop rbx
   273 000005AA E91CFFFFFF          <1>     jmp .parseRelationals
   274                              <1> 
   275                              <1> .processNeq:
   276                              <1> ;Symbol has two chars so skip second char
   277 000005AF 48FFC6              <1>     inc rsi
   278 000005B2 50                  <1>     push rax
   279 000005B3 E81B000000          <1>     call .handleSecondLevelSkip
   280 000005B8 59                  <1>     pop rcx ;lhs, rax has rhs of <>
   281                              <1> 
   282 000005B9 53                  <1>     push rbx 
   283 000005BA 31DB                <1>     xor ebx, ebx
   284 000005BC 4839C1              <1>     cmp rcx, rax
   285 000005BF 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1 ;Assume true, not equal
   285 000005C8 FF                  <1>
   286 000005C9 480F44C3            <1>     cmove rax, rbx ;Only set rax to 0 if equal
   287 000005CD 5B                  <1>     pop rbx
   288 000005CE E9F8FEFFFF          <1>     jmp .parseRelationals
   289                              <1> 
   290                              <1> ;Level 2, Addition and Subtraction
   291                              <1> .handleSecondLevelSkip:
   292 000005D3 48FFC6              <1>     inc rsi
   293                              <1> .handleSecondLevel:
   294 000005D6 E828000000          <1>     call .handleFirstLevel
   295                              <1> .parseAdditiveOperators:    
   296 000005DB 803E2D              <1>     cmp byte [rsi], "-"
   297 000005DE 7415                <1>     je .processMinus
   298 000005E0 803E2B              <1>     cmp byte [rsi], "+"
   299 000005E3 0F851C010000        <1>     jne .exit              ;No operators, expression evaluated, exit
   300 000005E9 50                  <1>     push rax
   301 000005EA E811000000          <1>     call .handleFirstLevelSkip   ;Parse first level
   302                              <1> .processAdd:    
   303 000005EF 59                  <1>     pop rcx
   304 000005F0 4801C8              <1>     add rax, rcx           ;Add the two numbers
   305 000005F3 EBE6                <1>     jmp short .parseAdditiveOperators  ;Search again for + or -
   306                              <1> .processMinus:
   307 000005F5 50                  <1>     push rax
   308 000005F6 E805000000          <1>     call .handleFirstLevelSkip   ;Parse first level
   309 000005FB 48F7D8              <1>     neg rax              ;Change a - b to a + -b
   310 000005FE EBEF                <1>     jmp short .processAdd
   311                              <1> 
   312                              <1> ;Level 1, Exponent, Division and multiplication
   313                              <1> 
   314                              <1> .handleFirstLevelSkip:
   315 00000600 48FFC6              <1>     inc rsi              ;Skip the op symbol
   316                              <1> .handleFirstLevel:
   317 00000603 E8A5000000          <1>     call .handleZerothLevel      ;Call third level
   318                              <1> .parseProductOperators:
   319 00000608 803E5E              <1>     cmp byte [rsi], "^"
   320 0000060B 747D                <1>     je .exponentFound
   321 0000060D 803E2F              <1>     cmp byte [rsi], "/"
   322 00000610 743F                <1>     je .processDiv
   323 00000612 803E2A              <1>     cmp byte [rsi], "*"
   324 00000615 742E                <1>     je .processMult
   325 00000617 813E4D4F4420        <1>     cmp dword [rsi], "MOD "
   326 0000061D 0F85E2000000        <1>     jne .exit     ;Neither exp, multiplication, division or MOD, return up a level
   327                              <1> 
   328 00000623 4881C603000000      <1>     add rsi, 3  ;Skip the MOD part
   329 0000062A 50                  <1>     push rax
   330 0000062B E87A000000          <1>     call .handleZerothLevelSkip   ;Call zeroth level
   331 00000630 59                  <1>     pop rcx
   332 00000631 4885C0              <1>     test rax, rax        ;Dividend is returned in rax
   333 00000634 7436                <1>     jz .divByZero
   334 00000636 4891                <1>     xchg rax, rcx
   335 00000638 31D2                <1>     xor edx, edx         ;Clear rdx for rdx:rax
   336 0000063A 48F7F9              <1>     idiv rcx             ;Signed division
   337 0000063D 4889D0              <1>     mov rax, rdx         ;Save remainder in rax
   338 00000640 E9C3FFFFFF          <1>     jmp .parseProductOperators         ;Search again for * or /
   339                              <1>     
   340                              <1> .processMult:
   341 00000645 50                  <1>     push rax
   342 00000646 E85F000000          <1>     call .handleZerothLevelSkip   ;Call zeroth level
   343 0000064B 59                  <1>     pop rcx
   344 0000064C 48F7E9              <1>     imul rcx             ; Multiplication
   345 0000064F EBB7                <1>     jmp short .parseProductOperators   ;Search again for * or /
   346                              <1> 
   347                              <1> .processDiv:
   348 00000651 50                  <1>     push rax
   349 00000652 E853000000          <1>     call .handleZerothLevelSkip   ;Call zeroth level
   350 00000657 59                  <1>     pop rcx
   351 00000658 6687DB              <1>     xchg bx, bx 
   352 0000065B 4885C0              <1>     test rax, rax        ;Dividend is returned in rax
   353 0000065E 740C                <1>     jz .divByZero
   354 00000660 4891                <1>     xchg rax, rcx
   355 00000662 31D2                <1>     xor edx, edx         ;Clear rdx for rdx:rax
   356 00000664 48F7F9              <1>     idiv rcx             ;Signed division
   357 00000667 E99CFFFFFF          <1>     jmp .parseProductOperators         ;Search again for * or /
   358                              <1> .divByZero:
   359                              <1>     ;If a division by zero occurs, print the message and return
   360                              <1>     ; result as signed 64 bit MAX or MIN + 1 depending on if the 
   361                              <1>     ; number being divided is positive or negative
   362 0000066C 55                  <1>     push rbp
   363 0000066D 488D2D81100000      <1>     lea rbp, divZer
   364 00000674 E835FBFFFF          <1>     call ttyOutString   ;Print the message
   365 00000679 B801000000          <1>     mov eax, 1 ;Get 1 in ebp and clear upper bits
   366 0000067E 48D1C8              <1>     ror rax, 1 ;Put the bit in bit 63
   367 00000681 48F7D0              <1>     not rax    ;Set all other bits and clear sign bit
   368 00000684 5D                  <1>     pop rbp
   369 00000685 E97EFFFFFF          <1>     jmp .parseProductOperators
   370                              <1> 
   371                              <1> .exponentFound:
   372                              <1>     ;rax has the number to exponentiate
   373 0000068A 50                  <1>     push rax
   374 0000068B E81A000000          <1>     call .handleZerothLevelSkip  ;Parse the inner expression
   375 00000690 59                  <1>     pop rcx
   376 00000691 4891                <1>     xchg rcx, rax
   377                              <1>     ;rax has the number to exponentiate, rcx has the number of times to loop imul
   378 00000693 53                  <1>     push rbx
   379 00000694 4889C3              <1>     mov rbx, rax    ;Save a copy of rax in rbx
   380 00000697 48FFC9              <1>     dec rcx
   381                              <1> .imulLoop:
   382 0000069A 31D2                <1>     xor edx, edx
   383 0000069C 48F7EB              <1>     imul rbx
   384 0000069F 48FFC9              <1>     dec rcx
   385 000006A2 75F6                <1>     jnz .imulLoop
   386 000006A4 5B                  <1>     pop rbx
   387 000006A5 E95EFFFFFF          <1>     jmp .parseProductOperators
   388                              <1> 
   389                              <1> 
   390                              <1> ;Level 0, Brackets, numbers and vars.
   391                              <1> 
   392                              <1> .handleZerothLevelSkip:
   393 000006AA 48FFC6              <1>     inc rsi             ;Skip the op symbol
   394                              <1> .handleZerothLevel:
   395 000006AD E89DFCFFFF          <1>     call spaceSkip
   396 000006B2 AC                  <1>     lodsb               ;Read char and adv rsi
   397 000006B3 3C28                <1>     cmp al, '('
   398 000006B5 750F                <1>     jne .varConstCheck
   399 000006B7 E8E6FCFFFF          <1>     call handleAlgebraicExpression  ;Parse the inner expression
   400 000006BC 803E29              <1>     cmp byte [rsi], ')'   
   401 000006BF 745C                <1>     je .closeBracket     ;If close bracket, goto skip spaces
   402 000006C1 E95F000000          <1>     jmp .error     ;Otherwise, error
   403                              <1>   
   404                              <1> .varConstCheck:
   405 000006C6 3C41                <1>     cmp al, "A"       ;Alphabetical first char?
   406 000006C8 730D                <1>     jae .varOrRNDFound      ;Yes, variable found or rnd function or error
   407 000006CA 48FFCE              <1>     dec rsi            ;Else back one symbol 
   408 000006CD E8A20B0000          <1>     call decimalToHex  ;to read number into rax
   409 000006D2 E978FCFFFF          <1>     jmp spaceSkip
   410                              <1> 
   411                              <1> .varOrRNDFound:
   412 000006D7 48FFCE              <1>     dec rsi
   413                              <1> ;Evaluate UNARY operators here in reverse stack order of importance
   414 000006DA 813E4E4F5420        <1>     cmp dword [rsi], "NOT "
   415 000006E0 0F848AFDFFFF        <1>     je .not
   416 000006E6 48FFC6              <1>     inc rsi
   417 000006E9 3C5A                <1>     cmp al, "Z"  
   418 000006EB 7738                <1>     ja .error   ;Syntax error if char not between A-Z  
   419 000006ED 3C52                <1>     cmp al, "R"
   420 000006EF 7515                <1>     jne .varFound
   421 000006F1 803E4E              <1>     cmp byte [rsi], "N" ;rsi was advanced by 1, check 
   422 000006F4 7510                <1>     jne .varFound
   423 000006F6 807E0144            <1>     cmp byte [rsi+1], "D"
   424 000006FA 750A                <1>     jne .varFound
   425 000006FC 66AD                <1>     lodsw               ;Advance rsi by 3
   426 000006FE AC                  <1>     lodsb
   427 000006FF E440                <1>     in al, 40h         ;Read timer counter 0
   428 00000701 480FB6C0            <1>     movzx rax, al
   429                              <1> .exit:
   430 00000705 C3                  <1>     ret                ;Return
   431                              <1> 
   432                              <1> .varFound:    
   433 00000706 48FFCE              <1>     dec rsi ;Back a char
   434 00000709 51                  <1>     push rcx
   435 0000070A E84BFCFFFF          <1>     call getVarNameLength
   436 0000070F E829000000          <1>     call getNumericVariable ;Get variable value in rax
   437 00000714 4801CE              <1>     add rsi, rcx    ;Go past the edge of the name
   438 00000717 59                  <1>     pop rcx
   439 00000718 E932FCFFFF          <1>     jmp spaceSkip
   440                              <1> 
   441                              <1> .closeBracket:
   442 0000071D 48FFC6              <1>     inc rsi
   443 00000720 E92AFCFFFF          <1>     jmp spaceSkip
   444                              <1> .error:
   445 00000725 488D2DFC0E0000      <1>     lea rbp, syntax
   446 0000072C E9A6F9FFFF          <1>     jmp criticalError
   447                              <1> .stack:
   448 00000731 488D2D310F0000      <1>     lea rbp, stkOvflw
   449 00000738 E99AF9FFFF          <1>     jmp criticalError
   450                              <1> 
   451                              <1> 
   452                              <1> getNumericVariable:
   453                              <1> ;Gets the value stored in a variable into rax 
   454                              <1> ;Input: rsi = Pointer to first char of a variable name
   455                              <1> ;Output: rax = Variable Value
   456                              <1> ;        rsi = Pointer to first char of a variable name
   457 0000073D 56                  <1>     push rsi
   458 0000073E 51                  <1>     push rcx
   459 0000073F 53                  <1>     push rbx
   460 00000740 E815FCFFFF          <1>     call getVarNameLength   ;Returns the length of the var name in cx
   461 00000745 E8280C0000          <1>     call findVariable       ;Returns a pointer to the variable block in rbx
   462 0000074A 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Variable doesnt exist? Pretend it is 0
   463 00000751 740E                <1>     je .noVar
   464 00000753 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
   465 00000757 750C                <1>     jne .stringFoundError
   466 00000759 488B4304            <1>     mov rax, qword [rbx + varBlock.qValue]
   467                              <1> .exit:
   468 0000075D 5B                  <1>     pop rbx
   469 0000075E 59                  <1>     pop rcx
   470 0000075F 5E                  <1>     pop rsi
   471 00000760 C3                  <1>     ret
   472                              <1> .noVar:
   473 00000761 31C0                <1>     xor eax, eax
   474 00000763 EBF8                <1>     jmp short .exit
   475                              <1> .stringFoundError:
   476 00000765 488D2DCB0E0000      <1>     lea rbp, typeError
   477 0000076C E966F9FFFF          <1>     jmp criticalError
   478                              <1> 
   479                              <1> setNumericVariable:
   480                              <1> ;Sets the value stored in a variable
   481                              <1> ;Input: rsi = Pointer to first char of a variable name
   482                              <1> ;       rax = Variable value
   483                              <1> ;Output: rsi = Pointer to first char of variable name
   484 00000771 56                  <1>     push rsi
   485 00000772 51                  <1>     push rcx
   486 00000773 53                  <1>     push rbx
   487                              <1> 
   488 00000774 E8E1FBFFFF          <1>     call getVarNameLength   ;Returns the length of the var name in cx
   489 00000779 E8F40B0000          <1>     call findVariable       ;Returns a pointer to the variable block in rbx
   490 0000077E 4881FBFFFFFFFF      <1>     cmp rbx, -1             ;Variable doesnt exit?
   491 00000785 740E                <1>     je .makeEditInteger      ;Make one!
   492 00000787 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
   493 0000078B 750F                <1>     jne .stringFoundError
   494 0000078D 48894304            <1>     mov qword [rbx + varBlock.qValue], rax  ;Save value
   495                              <1> .exit:
   496 00000791 5B                  <1>     pop rbx
   497 00000792 59                  <1>     pop rcx
   498 00000793 5E                  <1>     pop rsi
   499 00000794 C3                  <1>     ret
   500                              <1> .makeEditInteger:
   501 00000795 E8E80C0000          <1>     call makeEditInteger
   502 0000079A EBF5                <1>     jmp short .exit
   503                              <1> .stringFoundError:
   504 0000079C 488D2D940E0000      <1>     lea rbp, typeError
   505 000007A3 E92FF9FFFF          <1>     jmp criticalError
   506                              <1> 
   507                              <1> setStringVariable:
   508                              <1> ;Sets the string pointed to by rdx
   509                              <1> ;Input: rsi = Pointer to first char of a variable name
   510                              <1> ;       rdx = Start of string
   511                              <1> ;Output: rsi = Pointer to first char of variable name
   512                              <1> ;Keeps adding characters until a 0, : or " encountered
   513                              <1> ;Adds a 0 to the end
   514 000007A8 51                  <1>     push rcx
   515 000007A9 E8ACFBFFFF          <1>     call getVarNameLength   ;Gets the length of the var name in cx
   516 000007AE E81A0D0000          <1>     call makeEditString     ;Returns a ptr to the var block in rbx
   517 000007B3 59                  <1>     pop rcx
   518 000007B4 C3                  <1>     ret
   519                              <1> 
   520                              <1> findOtherExpressionsOnLine:
   521                              <1> ;Input: rsi = start of line portion
   522                              <1> ;Output: rsi = points to first char after first ":" found
   523                              <1> ;         al = : if it was found or 00 if not
   524 000007B5 AC                  <1>     lodsb
   525 000007B6 3C00                <1>     cmp al, 0   ;Null hit, RIP procedure
   526 000007B8 7404                <1>     je .exit
   527 000007BA 3C3A                <1>     cmp al, ":" ;Strings can be terminated with a :
   528 000007BC 75F7                <1>     jne findOtherExpressionsOnLine
   529                              <1> .exit:
   530 000007BE C3                  <1>     ret
    14                                  %include "COMMANDS.ASM"
    15                              <1> 
    16                              <1> funTbl:
    17                              <1> ;Use PASCAL strings to know how long the comparisons need to be
    18                              <1> ;All function pointers are saved as distances from the head
    19                              <1> ; of the function table
    20                              <1> ;BASIC instructions are space terminated
    21                              <1> ;Interpreter instructions are null terminated
    22 000007BF 044C4554            <1>     db 4, "LET"     ;DONE
    23 000007C3 7701                <1>     dw oldSchoolAssignemnt - funTbl
    24                              <1> 
    25 000007C5 054E455700          <1>     db 5, "NEW",0     ;DONE
    26 000007CA FA01                <1>     dw newProgram - funTbl 
    27                              <1> 
    28 000007CC 07434C45415200      <1>     db 7, "CLEAR",0   ;DONE
    29 000007D3 FA01                <1>     dw newProgram - funTbl 
    30                              <1> 
    31 000007D5 064C49535400        <1>     db 6, "LIST",0    ;DONE
    32 000007DB 5E02                <1>     dw listProgram - funTbl 
    33                              <1> 
    34 000007DD 0552554E00          <1>     db 5, "RUN",0     ;DONE
    35 000007E2 9A02                <1>     dw runProgram - funTbl
    36                              <1> 
    37 000007E4 085052494E542420    <1>     db 8, "PRINT$ "    ;Not implemented yet
    38 000007EC CB02                <1>     dw printStatement - funTbl
    39                              <1> 
    40 000007EE 075052494E5420      <1>     db 7, "PRINT "    ;DONE
    41 000007F5 CB02                <1>     dw printStatement - funTbl
    42                              <1> 
    43 000007F7 033F20              <1>     db 3, "? "        ;DONE, alias Print
    44 000007FA CB02                <1>     dw printStatement - funTbl
    45                              <1> 
    46 000007FC 07494E50555420      <1>     db 7, "INPUT "
    47 00000803 6A03                <1>     dw getInput - funTbl
    48                              <1> 
    49 00000805 04494620            <1>     db 4, "IF "      ;DONE, needs to be tested
    50 00000809 1D0A                <1>     dw handleIf - funTbl
    51                              <1> 
    52 0000080B 06474F544F20        <1>     db 6, "GOTO "    ;DONE
    53 00000811 CA06                <1>     dw goto - funTbl
    54                              <1> 
    55 00000813 07474F53554220      <1>     db 7, "GOSUB "
    56 0000081A DF06                <1>     dw gosub - funTbl
    57                              <1> 
    58 0000081C 0852455455524E20    <1>     db 8, "RETURN "
    59 00000824 2807                <1>     dw return - funTbl
    60                              <1> 
    61 00000826 0852455455524E00    <1>     db 8, "RETURN",0
    62 0000082E 2807                <1>     dw return - funTbl
    63                              <1> 
    64 00000830 05464F5220          <1>     db 5, "FOR "
    65 00000835 7607                <1>     dw forLoop - funTbl
    66                              <1> 
    67 00000837 064E45585400        <1>     db 6, "NEXT",0
    68 0000083D 8208                <1>     dw next - funTbl
    69                              <1> 
    70 0000083F 064E45585420        <1>     db 6, "NEXT "
    71 00000845 8208                <1>     dw next - funTbl
    72                              <1> 
    73 00000847 07                  <1>     db 7
    74                              <1> whileStr:
    75 00000848 5748494C4520        <1>     db "WHILE "
    76 0000084E F608                <1>     dw while - funTbl
    77                              <1> 
    78 00000850 0657454E4420        <1>     db 6, "WEND "
    79 00000856 6D09                <1>     dw wend - funTbl    
    80 00000858 0657454E4400        <1>     db 6, "WEND",0
    81 0000085E 6D09                <1>     dw wend - funTbl   
    82                              <1> thenStr:
    83 00000860 065448454E20        <1>     db 6, "THEN "    ;DONE
    84 00000866 4401                <1>     dw badCmd - funTbl
    85                              <1> elseStr:
    86 00000868 06454C534520        <1>     db 6, "ELSE "    ;DONE
    87 0000086E 4401                <1>     dw badCmd - funTbl
    88                              <1> 
    89 00000870 0853595354454D00    <1>     db 8, "SYSTEM",0  ;DONE
    90 00000878 0904                <1>     dw returnToDOS - funTbl
    91                              <1> 
    92 0000087A 05434C5300          <1>     db 5, "CLS",0     ;DONE
    93 0000087F 1504                <1>     dw cls - funTbl
    94 00000881 05434C5320          <1>     db 5, "CLS "      ;DONE
    95 00000886 1504                <1>     dw cls - funTbl
    96                              <1> 
    97 00000888 07444542554700      <1>     db 7, "DEBUG",0   ;DONE
    98 0000088F 1A04                <1>     dw dbgr - funTbl
    99                              <1> 
   100 00000891 0654524F4E00        <1>     db 6, "TRON",0    ;DONE
   101 00000897 5501                <1>     dw tron - funTbl
   102                              <1> 
   103 00000899 0754524F464600      <1>     db 7, "TROFF",0   ;DONE
   104 000008A0 5D01                <1>     dw troff - funTbl
   105                              <1> 
   106 000008A2 05454E4420          <1>     db 5, "END "     ;DONE
   107 000008A7 5001                <1>     dw endProg - funTbl
   108 000008A9 05454E4400          <1>     db 5, "END",0     ;DONE
   109 000008AE 5001                <1>     dw endProg - funTbl
   110                              <1> 
   111 000008B0 0653544F5020        <1>     db 6, "STOP "    ;DONE
   112 000008B6 5001                <1>     dw endProg - funTbl
   113 000008B8 0653544F5000        <1>     db 6, "STOP",0    ;DONE
   114 000008BE 5001                <1>     dw endProg - funTbl
   115                              <1> 
   116 000008C0 0845534341504520    <1>     db 8, "ESCAPE "  ;DONE
   117 000008C8 5001                <1>     dw endProg - funTbl
   118 000008CA 0845534341504500    <1>     db 8, "ESCAPE",0  ;DONE
   119 000008D2 5001                <1>     dw endProg - funTbl
   120                              <1> 
   121 000008D4 07455045454B20      <1>     db 7, "EPEEK "
   122 000008DB 6D01                <1>     dw memRead - funTbl
   123                              <1> 
   124 000008DD 0745504F4B4520      <1>     db 7, "EPOKE "
   125 000008E4 6D01                <1>     dw memWrite - funTbl
   126                              <1> 
   127 000008E6 065045454B20        <1>     db 6, "PEEK "
   128 000008EC 6D01                <1>     dw byteRead - funTbl
   129                              <1> 
   130 000008EE 06504F4B4520        <1>     db 6, "POKE "
   131 000008F4 6D01                <1>     dw byteWrite - funTbl
   132                              <1> 
   133 000008F6 0552454D20          <1>     db 5, "REM "
   134 000008FB 6E01                <1>     dw remark - funTbl
   135 000008FD 032720              <1>     db 3, "' "
   136 00000900 6E01                <1>     dw remark - funTbl
   137                              <1> 
   138 00000902 FF                  <1>     db -1    ;Demarkate the end of the table
   139                              <1> ;End of Table
   140                              <1> badCmd:
   141 00000903 488D2D1E0D0000      <1>     lea rbp, syntax
   142 0000090A E8C8F7FFFF          <1>     call criticalError 
   143                              <1> endProg:
   144 0000090F E96A010000          <1>     jmp runProgram.endProgramPoint
   145                              <1> tron:
   146 00000914 800D(D90E0000)02    <1>     or byte [stateByte], traceBit   ;Set the traceBit
   147 0000091B C3                  <1>     ret
   148                              <1> troff:
   149 0000091C 8025(D90E0000)FD    <1>     and byte [stateByte], ~traceBit ;Clear the traceBit
   150 00000923 C3                  <1>     ret
   151                              <1> notWrapper:
   152 00000924 6687DB              <1>     xchg bx, bx
   153 00000927 E944FBFFFF          <1>     jmp handleAlgebraicExpression.not
   154                              <1> memRead:
   155                              <1> memWrite:
   156                              <1> byteRead:
   157                              <1> byteWrite:
   158 0000092C C3                  <1>     ret
   159                              <1> remark:
   160                              <1> ;Comment code, keep looping until end of line
   161 0000092D AC                  <1>     lodsb
   162 0000092E 84C0                <1>     test al, al 
   163 00000930 75FB                <1>     jnz remark
   164 00000932 48FFCE              <1>     dec rsi ;When al = 0, rsi points past it, move it back by one
   165 00000935 C3                  <1>     ret
   166                              <1> 
   167                              <1> oldSchoolAssignemnt:
   168                              <1> ;Assign with a LET directive
   169                              <1> ;rsi points to first char AFTER function name
   170 00000936 E814FAFFFF          <1>     call spaceSkip  ;Goto var assignment as if at start of line
   171                              <1> variableAssignment: ;Assignment without a LET directive
   172                              <1>     ;Establish if the string is a variable assignment or not
   173                              <1>     ;rsi points to start of string
   174 0000093B E81AFAFFFF          <1>     call getVarNameLength   ;Get the variable name length
   175 00000940 4889F7              <1>     mov rdi, rsi    ;Save ptr to start of string in rdi
   176 00000943 4801CE              <1>     add rsi, rcx    ;Go to end of string
   177 00000946 E804FAFFFF          <1>     call spaceSkip  ;Skip spaces after the end of the var name
   178 0000094B AC                  <1>     lodsb   ;Get the first char after the spaces. This must be a =
   179 0000094C 3C3D                <1>     cmp al, "="
   180 0000094E 7551                <1>     jne .syntaxError
   181 00000950 4889FE              <1>     mov rsi, rdi    ;Return rsi to the start of the string name
   182 00000953 4801CE              <1>     add rsi, rcx    ;Go to end of var name
   183 00000956 48FFCE              <1>     dec rsi
   184 00000959 AC                  <1>     lodsb   ;Get last char into al and inc rsi
   185 0000095A 3C24                <1>     cmp al, "$"
   186 0000095C 7420                <1>     je .stringAssignment
   187 0000095E E8ECF9FFFF          <1>     call spaceSkip  ;Skip any spaces
   188 00000963 48FFC6              <1>     inc rsi         ;Go past the equality sign
   189 00000966 E8E4F9FFFF          <1>     call spaceSkip  ;Skip any spaces
   190 0000096B 803E22              <1>     cmp byte [rsi], 22h ;Open speech mark
   191 0000096E 743D                <1>     je .typError    ;Integers cant have speechmarks
   192 00000970 E82DFAFFFF          <1>     call handleAlgebraicExpression  ;Get the result of the expression into rax
   193 00000975 4889FE              <1>     mov rsi, rdi    ;Return the start of the string into rsi
   194 00000978 E8F4FDFFFF          <1>     call setNumericVariable
   195 0000097D C3                  <1>     ret
   196                              <1> .stringAssignment:
   197                              <1> ;This simply copies the string which is either speech mark, 0 or : terminated
   198                              <1> ;First allocate a string
   199                              <1> ;rsi = First char after the end of the variable name
   200                              <1> ;rdi = start of variable name 
   201                              <1> ;rcx = char count for var name
   202 0000097E E8CCF9FFFF          <1>     call spaceSkip  ;Skip any spaces
   203 00000983 48FFC6              <1>     inc rsi         ;Go past the equality sign
   204 00000986 E8C4F9FFFF          <1>     call spaceSkip  ;Skip any spaces
   205 0000098B 803E22              <1>     cmp byte [rsi], 22h ;Open speechmark check again
   206 0000098E 751D                <1>     jne .typError    ;Assigning a number to a string is a type error
   207                              <1>     ;rsi now points to the start of the string to save
   208 00000990 48FFC6              <1>     inc rsi ;Go past the speech mark
   209 00000993 4889F2              <1>     mov rdx, rsi    ;save start of string data in rdx
   210 00000996 4889FE              <1>     mov rsi, rdi
   211 00000999 57                  <1>     push rdi
   212 0000099A E809FEFFFF          <1>     call setStringVariable
   213 0000099F 5E                  <1>     pop rsi ;Save the start of the assignment in rsi
   214 000009A0 C3                  <1>     ret
   215                              <1> 
   216                              <1> .syntaxError:
   217 000009A1 488D2D800C0000      <1>     lea rbp, syntax ;Syntax error, keyword a bit confused
   218 000009A8 E92AF7FFFF          <1>     jmp criticalError
   219                              <1> .typError:
   220 000009AD 488D2D830C0000      <1>     lea rbp, typeError
   221 000009B4 E91EF7FFFF          <1>     jmp criticalError
   222                              <1> 
   223                              <1> 
   224                              <1> newProgram: 
   225                              <1> ;Simply reset the program pointers
   226 000009B9 488D05(00000000)    <1>     lea rax, section.programArea.vstart
   227 000009C0 488905(C80E0000)    <1>     mov qword [minMemAddr], rax
   228 000009C7 488905(E20E0000)    <1>     mov qword [lastBlock], rax  ;Start writing at this location
   229 000009CE 488905(DA0E0000)    <1>     mov qword [mcbChain], rax   ;Create a mock MCB here
   230                              <1> 
   231 000009D5 4889C2              <1>     mov rdx, rax
   232 000009D8 668B4801            <1>     mov cx, word [rax + memBlock.wBlockSize]
   233 000009DC 4889C7              <1>     mov rdi, rax
   234 000009DF 30C0                <1>     xor al, al
   235 000009E1 F3AA                <1>     rep stosb   ;Sanitise the old first allocation
   236                              <1> 
   237 000009E3 C60272              <1>     mov byte [rdx + memBlock.bSignature], lastMemBlock
   238 000009E6 66C742010000        <1>     mov word [rdx + memBlock.wBlockSize], 0 ;Dummy block, no size, gets overwritten
   239 000009EC 31C0                <1>     xor eax, eax
   240 000009EE 8805(D80E0000)      <1>     mov byte [strLen], al
   241 000009F4 488D3D(980D0000)    <1>     lea rdi, inString
   242 000009FB B900010000          <1>     mov ecx, maxLineLen
   243 00000A00 F3AA                <1>     rep stosb
   244 00000A02 C605(F40E0000)0A    <1>     mov byte [currentLine], 10  ;Default to line 10
   245 00000A09 31C0                <1>     xor eax, eax,
   246 00000A0B 48FFC8              <1>     dec rax ;rax = -1
   247 00000A0E 488905(EA0E0000)    <1>     mov qword [firstLinPtr], rax ;No program in memory
   248 00000A15 668905(F20E0000)    <1>     mov word [firstLinNum], ax
   249 00000A1C C3                  <1>     ret
   250                              <1> listProgram:
   251                              <1> ;Go line by line and echo the program lines, inserting a crlf after each
   252                              <1> ;First print the line number, then add a space
   253 00000A1D 488B1D(EA0E0000)    <1>     mov rbx, qword [firstLinPtr]    ;Get a pointer to the first program line
   254                              <1> .printLines:
   255 00000A24 488D2DB20B0000      <1>     lea rbp, crlf           ;New line
   256 00000A2B E87EF7FFFF          <1>     call ttyOutString
   257 00000A30 4881FBFFFFFFFF      <1>     cmp rbx, -1
   258 00000A37 741F                <1>     je .exit
   259 00000A39 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]
   260 00000A3D E85A080000          <1>     call printdecimalword
   261 00000A42 B020                <1>     mov al, " "
   262 00000A44 E860F7FFFF          <1>     call ttyOutChar ;Print a space
   263 00000A49 488D6B0E            <1>     lea rbp, qword [rbx + progLineBlock.sLine]  ;Null terminated string
   264 00000A4D E85CF7FFFF          <1>     call ttyOutString
   265 00000A52 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr]   ;Walk list of program lines
   266 00000A56 EBCC                <1>     jmp short .printLines
   267                              <1> .exit:
   268 00000A58 C3                  <1>     ret
   269                              <1> runProgram:
   270                              <1>     ;Runs the machine in indirect mode
   271 00000A59 800D(D90E0000)04    <1>     or byte [stateByte], indirectBit    ;Entering indirect mode
   272                              <1>     ;rsi must point to the first line
   273 00000A60 668B15(F20E0000)    <1>     mov dx, word [firstLinNum]
   274 00000A67 668915(F40E0000)    <1>     mov word [currentLine], dx ;Reset the current line back to the start
   275 00000A6E 488B1D(EA0E0000)    <1>     mov rbx, qword [firstLinPtr]
   276 00000A75 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine]
   277 00000A79 E8B8F7FFFF          <1>     call runLine
   278                              <1> .endProgramPoint:
   279 00000A7E 8025(D90E0000)FB    <1>     and byte [stateByte], ~indirectBit  ;Exit indirect mode
   280 00000A85 E9B2F5FFFF          <1>     jmp mainLoop    ;Resets the stack if exit mid loop to avoid stkoverflow
   281                              <1> 
   282                              <1> printStatement:
   283                              <1> ;Strings must be "" delimited or a string variable must be used
   284                              <1> ;rsi points to first char AFTER function name
   285                              <1> .printStart:
   286 00000A8A E8C0F8FFFF          <1>     call spaceSkip  ;move rsi to the start of the expression
   287 00000A8F AC                  <1>     lodsb
   288                              <1> 
   289 00000A90 84C0                <1>     test al, al     ;Is this a null string?
   290 00000A92 746B                <1>     jz .psvexit
   291 00000A94 3C22                <1>     cmp al, 022h    ;22h = ASCII Speechmarks
   292 00000A96 7449                <1>     je .stringPrint
   293                              <1>     ;Here we check if the first char is ASCII, if it is, check if its a string var
   294 00000A98 3C41                <1>     cmp al, "A"
   295 00000A9A 7204                <1>     jb .printExpr
   296 00000A9C 3C5A                <1>     cmp al, "Z"
   297 00000A9E 7214                <1>     jb .printStringVar
   298                              <1> .printExpr:
   299 00000AA0 48FFCE              <1>     dec rsi ;Return to the start of the string
   300                              <1> .printExpr1:    ;Return without dec rsi
   301 00000AA3 E8FAF8FFFF          <1>     call handleAlgebraicExpression ;Gets value of a var and/or algebraic operation
   302 00000AA8 E8EF070000          <1>     call printdecimalword
   303 00000AAD E89DF8FFFF          <1>     call spaceSkip
   304 00000AB2 EB2D                <1>     jmp short .stringPrint
   305                              <1> .printStringVar:
   306                              <1>     ;Check if it is a string var or a unary function
   307 00000AB4 48FFCE              <1>     dec rsi
   308 00000AB7 E89EF8FFFF          <1>     call getVarNameLength
   309 00000ABC E8C6F8FFFF          <1>     call getVarType
   310 00000AC1 81FB01000000        <1>     cmp ebx, strEquate
   311 00000AC7 75DA                <1>     jne .printExpr1  ;rsi points to the same point as initially
   312 00000AC9 E8A4080000          <1>     call findVariable   ;ecx has string length, get block ptr in rbx
   313 00000ACE 55                  <1>     push rbp
   314 00000ACF 488D6B04            <1>     lea rbp, qword [rbx + stringBlock.string]
   315 00000AD3 E8D6F6FFFF          <1>     call ttyOutString
   316 00000AD8 5D                  <1>     pop rbp
   317 00000AD9 4801CE              <1>     add rsi, rcx    ;Go past variable
   318 00000ADC E86EF8FFFF          <1>     call spaceSkip
   319                              <1> .stringPrint:
   320 00000AE1 AC                  <1>     lodsb
   321 00000AE2 3C00                <1>     cmp al, 0
   322 00000AE4 7419                <1>     je .psvexit
   323 00000AE6 3C3A                <1>     cmp al, ":"
   324 00000AE8 7412                <1>     je .psvexitColon
   325 00000AEA 3C22                <1>     cmp al, 022h    ;Close Speech marks, check next char
   326 00000AEC 741E                <1>     je .closespeechmarks
   327 00000AEE 3C3B                <1>     cmp al, ";"     ;Semicolon means print next section on same line
   328 00000AF0 742D                <1>     je .continue
   329 00000AF2 E8B2F6FFFF          <1>     call ttyOutChar
   330 00000AF7 EBE8                <1>     jmp short .stringPrint
   331                              <1> .openSpeechMark:
   332 00000AF9 48FFC6              <1>     inc rsi ;Go back a char
   333                              <1> .psvexitColon:
   334 00000AFC 48FFCE              <1>     dec rsi ;Go back a char
   335                              <1> .psvexit:
   336 00000AFF 488D2DD70A0000      <1>     lea rbp, crlf
   337 00000B06 E8A3F6FFFF          <1>     call ttyOutString
   338 00000B0B C3                  <1>     ret
   339                              <1> .closespeechmarks:
   340 00000B0C E83EF8FFFF          <1>     call spaceSkip
   341 00000B11 AC                  <1>     lodsb
   342 00000B12 3C3B                <1>     cmp al, ";" ;only exception to exiting if next non space char is a semicolon
   343 00000B14 0F8470FFFFFF        <1>     je .printStart
   344 00000B1A 48FFCE              <1>     dec rsi ;Go back a step
   345 00000B1D EBE0                <1>     jmp short .psvexit
   346                              <1> .continue:
   347 00000B1F E82BF8FFFF          <1>     call spaceSkip
   348 00000B24 E961FFFFFF          <1>     jmp .printStart
   349                              <1> getInput:
   350                              <1> ;Take a string as a prompt
   351                              <1> ;rdi points just past the end of the command line
   352                              <1> ;rsi points to first char AFTER function name
   353                              <1> ;Input prompt strings must be speech mark delimited on both sides!
   354 00000B29 E821F8FFFF          <1>     call spaceSkip
   355                              <1>     ;Now check to see if the user has specified a custom prompt
   356 00000B2E AC                  <1>     lodsb   ;Get first symbol and go past it
   357 00000B2F 3C22                <1>     cmp al, 22h ;Speechmark?
   358 00000B31 7535                <1>     jne .defaultPrompt ;If no speechmark, print default prompt
   359                              <1> .customPrompt:
   360 00000B33 4889F7              <1>     mov rdi, rsi    ;Save start of string in rdi
   361                              <1> .cp0:
   362 00000B36 AC                  <1>     lodsb           ;Now search for end of string speech marks or null terminator
   363 00000B37 3C22                <1>     cmp al, 22h     ;Is al a speech mark?
   364 00000B39 7410                <1>     je .printCustomPrompt
   365 00000B3B 84C0                <1>     test al, al     ;Is al null?
   366 00000B3D 75F7                <1>     jnz .cp0        ;No, keep searching for terminator
   367                              <1> .error:
   368 00000B3F 488D2DE20A0000      <1>     lea rbp, syntax
   369 00000B46 E98CF5FFFF          <1>     jmp criticalError
   370                              <1> .printCustomPrompt:
   371 00000B4B 4889FE              <1>     mov rsi, rdi    ;rsi points to the first char of the string
   372                              <1> .pcp0:
   373 00000B4E AC                  <1>     lodsb
   374 00000B4F 3C22                <1>     cmp al, 22h     ;Speechmark?
   375 00000B51 7407                <1>     je .stopPrompt
   376 00000B53 E851F6FFFF          <1>     call ttyOutChar
   377 00000B58 EBF4                <1>     jmp short .pcp0
   378                              <1> .stopPrompt:
   379 00000B5A E8F0F7FFFF          <1>     call spaceSkip  ;Skip spaces
   380 00000B5F AC                  <1>     lodsb   ;Get first non space char after closing speechmark
   381 00000B60 3C3B                <1>     cmp al, ";" ;Semicolon means no default prompt
   382 00000B62 740E                <1>     je .noDefaultPrompt
   383 00000B64 3C2C                <1>     cmp al, "," ;Comma also means no default prompt
   384 00000B66 740A                <1>     je .noDefaultPrompt
   385                              <1> .defaultPrompt:
   386 00000B68 48FFCE              <1>     dec rsi
   387 00000B6B B03F                <1>     mov al, "?"
   388 00000B6D E837F6FFFF          <1>     call ttyOutChar
   389                              <1> .noDefaultPrompt:
   390 00000B72 B020                <1>     mov al, " " ;space
   391 00000B74 E830F6FFFF          <1>     call ttyOutChar
   392 00000B79 E8D1F7FFFF          <1>     call spaceSkip  ;Skip spaces after default supressor to get to var name
   393 00000B7E E8D7F7FFFF          <1>     call getVarNameLength   ;Get var name length in ecx
   394 00000B83 488D3D(980E0000)    <1>     lea rdi, digitString    ;Buffer has 48 chars, string names are max 40
   395 00000B8A E8AB090000          <1>     call strcpy     ;rsi points to var name
   396 00000B8F 57                  <1>     push rdi    ;rdi points to first char of variable
   397 00000B90 51                  <1>     push rcx
   398 00000B91 E87BF5FFFF          <1>     call getLineInput   ;Get input from the user in inString, null terminated
   399                              <1>     ;This will sanitise in direct mode meaning input cannot have any more statements
   400                              <1>     ; after it.
   401 00000B96 59                  <1>     pop rcx
   402 00000B97 5F                  <1>     pop rdi 
   403 00000B98 4889FE              <1>     mov rsi, rdi    ;Save the start of the var name in rsi
   404 00000B9B 4801CE              <1>     add rsi, rcx    ;Go to end of var
   405 00000B9E 48FFCE              <1>     dec rsi
   406 00000BA1 AC                  <1>     lodsb   ;Are we a string variable?
   407 00000BA2 488D35(980D0000)    <1>     lea rsi, inString   ;Move rsi to start of user input
   408 00000BA9 3C24                <1>     cmp al, "$"
   409 00000BAB 740F                <1>     je .handleString
   410                              <1> .handleNumeric:
   411 00000BAD E8F0F7FFFF          <1>     call handleAlgebraicExpression  ;Get the result of the expression into rax
   412 00000BB2 4889FE              <1>     mov rsi, rdi    ;Return the start of the string into rsi
   413 00000BB5 E8B7FBFFFF          <1>     call setNumericVariable
   414 00000BBA EB0B                <1>     jmp short .commonExit
   415                              <1> .handleString:
   416                              <1>     ;IF a string variable, come here
   417                              <1>     ;rdi has the start of the variable name
   418                              <1> 
   419                              <1>     ;rdx must point to the start of the string
   420                              <1>     ;rsi must point to the start of the variable name
   421 00000BBC 4889F2              <1>     mov rdx, rsi
   422 00000BBF 4889FE              <1>     mov rsi, rdi    ;Return start of user name in rsi
   423 00000BC2 E8E1FBFFFF          <1>     call setStringVariable
   424                              <1> .commonExit:
   425 00000BC7 C3                  <1>     ret
   426                              <1> 
   427                              <1> ;==========================================================:
   428                              <1> ;==========================================================:
   429                              <1> ;==========================================================:
   430                              <1> ;          Functions Related to Program Management         :
   431                              <1> ;==========================================================:
   432                              <1> ;==========================================================:
   433                              <1> ;==========================================================:
   434                              <1> returnToDOS:
   435 00000BC8 B007                <1>     mov al, 07h
   436 00000BCA E8DAF5FFFF          <1>     call ttyOutChar
   437 00000BCF E92CF4FFFF          <1>     jmp start   ;Reset the interpreter
   438                              <1> cls:
   439 00000BD4 E9E2F5FFFF          <1>     jmp ttyClear
   440                              <1> dbgr:
   441                              <1>     ;Hook int 40h to main prog EP to allow returning 
   442                              <1> ;First call to get default BIOS segement selector and attribute word
   443 00000BD9 B340                <1>     mov bl, 40h
   444 00000BDB B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   445 00000BE0 CD35                <1>     int 35h
   446 00000BE2 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   447 00000BE4 B940000000          <1>     mov ecx, 40h    ;Interrupt number
   448                              <1> ;dx preserves the attribute word
   449 00000BE9 488D1D09000000      <1>     lea rbx, .farReturn  ;Pointer passed in
   450 00000BF0 B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   451 00000BF5 CD35                <1>     int 35h
   452 00000BF7 CD38                <1>     int 38h ;Call debugger
   453                              <1> .farReturn:
   454                              <1>     ;Reconnect CTRL+BREAK handler
   455 00000BF9 48BC-               <1>     mov rsp, stacktop   ;Immediately reset stack
   455 00000BFB [900D000000000000]  <1>
   456 00000C03 488D3DDEF4FFFF      <1>     lea rdi, ctrlBreakHandler
   457 00000C0A B03B                <1>     mov al, 3Bh
   458 00000C0C E8E0F4FFFF          <1>     call setHandler
   459                              <1>     
   460 00000C11 488D2DC5090000      <1>     lea rbp, crlf
   461 00000C18 E891F5FFFF          <1>     call ttyOutString
   462 00000C1D E91AF4FFFF          <1>     jmp mainLoop
    15                                  %include "CTRLFLOW.ASM"
    16                              <1> 
    17                              <1> ;Handles all the specific functions related to control flow such as scanning 
    18                              <1> ; lines for WEND, RETURN, NEXT
    19                              <1> retScan:
    20                              <1> ;Gets the current line address and starts searching program from current prog line
    21                              <1> ; for a return
    22 00000C22 56                  <1>     push rsi
    23 00000C23 668B15(F40E0000)    <1>     mov dx, word [currentLine]  ;pre-load dx with the current line number
    24 00000C2A E8B3070000          <1>     call searchForProgramLine   ;Get program block pointer into rbx
    25 00000C2F 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If for some reason line doesnt exist?
    26 00000C36 0F8493000000        <1>     je .error   ;Unknown Error
    27                              <1> ;Now pack for the first portion/line after the GOSUB
    28                              <1> ;rsi points just after the GOSUB itself
    29 00000C3C 56                  <1>     push rsi    ;Save the first point after the WHILE itself
    30 00000C3D E873FBFFFF          <1>     call findOtherExpressionsOnLine     ;Get the first : or ASCII NUL
    31 00000C42 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]  ;Get the line number
    32 00000C46 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine]  ;Load ptr to start of string in rsi
    33 00000C4A 4829CE              <1>     sub rsi, rcx    ;Compute difference from start of string
    34 00000C4D 89F1                <1>     mov ecx, esi    ;Should just be low byte of si so cl
    35 00000C4F 81E1FF000000        <1>     and ecx, 0FFh   ;Save only bottom byte just in case of garbage
    36 00000C55 C1E110              <1>     shl ecx, 2*8    ;Move to the third byte in the dword
    37 00000C58 09C8                <1>     or eax, ecx     ;Add byte three to eax
    38 00000C5A 89C2                <1>     mov edx, eax    ;Save in edx
    39 00000C5C 48C1E228            <1>     shl rdx, 5*8    ;Shift three bytes to top of qword
    40 00000C60 5E                  <1>     pop rsi
    41                              <1> .initialSearch:
    42                              <1>     ;First look for a ASCII NUL or RETURN
    43 00000C61 803E00              <1>     cmp byte [rsi], 0
    44 00000C64 7415                <1>     je .gotoNextLine
    45 00000C66 813E52455455        <1>     cmp dword [rsi], "RETU"
    46 00000C6C 7508                <1>     jne .notCandidate
    47 00000C6E 66817E04524E        <1>     cmp word [rsi + 4], "RN"
    48 00000C74 7418                <1>     je .wordFound
    49                              <1> .notCandidate:
    50 00000C76 48FFC6              <1>     inc rsi ;Now search up until the end of the line for a RETURN
    51 00000C79 EBE6                <1>     jmp short .initialSearch
    52                              <1> .gotoNextLine:
    53 00000C7B 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Get pointer to next program line
    54 00000C7F 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Now, when walking if it gives a value of -1, no NEXT found
    55 00000C86 7431                <1>     je .noRet
    56 00000C88 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Load pointer to string rsi
    57 00000C8C EBD3                <1>     jmp short .initialSearch
    58                              <1> .wordFound:
    59                              <1>     ;Here, RETURN found! Huzzah! Now pack edx correctly
    60                              <1>     ;Add 055AA55h in bytes 4:2
    61 00000C8E 48B8000055AA550000- <1>     mov rax, 055AA550000h
    61 00000C97 00                  <1>
    62 00000C98 4809C2              <1>     or rdx, rax
    63                              <1>     ;Compute checksum now
    64 00000C9B 31C0                <1>     xor eax, eax
    65 00000C9D B0A5                <1>     mov al, GOSUBsig 
    66 00000C9F 6689C2              <1>     mov dx, ax  ;Zero checksum byte
    67 00000CA2 31C0                <1>     xor eax, eax
    68 00000CA4 B908000000          <1>     mov ecx, 8  ;8 times
    69                              <1> .csumLoop:
    70                              <1>     ;Spin rdx 8 times adding each byte to al
    71 00000CA9 00D0                <1>     add al, dl
    72 00000CAB 48C1C208            <1>     rol rdx, 8  ;Rotate left by 8 bits
    73 00000CAF FFC9                <1>     dec ecx
    74 00000CB1 75F6                <1>     jnz .csumLoop
    75 00000CB3 F6D8                <1>     neg al ;Get twos compliment of sum (FFh - al)
    76 00000CB5 88C6                <1>     mov dh, al  ;Save in checksum byte
    77                              <1> .exit:
    78 00000CB7 5E                  <1>     pop rsi
    79 00000CB8 C3                  <1>     ret
    80                              <1> .noRet:
    81 00000CB9 488D2D0A0A0000      <1>     lea rbp, noReturn
    82 00000CC0 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
    82 00000CC9 FF                  <1>
    83 00000CCA E9E8FFFFFF          <1>     jmp .exit
    84                              <1> .error:
    85 00000CCF 488D2D0B0A0000      <1>     lea rbp, uknowner
    86 00000CD6 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
    86 00000CDF FF                  <1>
    87 00000CE0 E9D2FFFFFF          <1>     jmp .exit
    88                              <1> 
    89                              <1> wendScan:
    90                              <1> ; Gets the current line address and starts searching program from the current line
    91                              <1> ; for a WEND
    92                              <1> ; Puts the packed specialQword into rdx if a WEND is found
    93                              <1> ; Returns rdx = -1 if an error occured with rbp pointing to the error string
    94 00000CE5 56                  <1>     push rsi
    95 00000CE6 668B15(F40E0000)    <1>     mov dx, word [currentLine]  ;pre-load dx with the current line number
    96 00000CED E8F0060000          <1>     call searchForProgramLine   ;Get program block pointer into rbx
    97 00000CF2 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If for some reason line doesnt exist?
    98 00000CF9 0F84A2000000        <1>     je .error   ;Unknown Error
    99                              <1> ;Now pack for the first portion/line after the for loop
   100                              <1> ;rsi points just after the FOR itself
   101 00000CFF 56                  <1>     push rsi    ;Save the first point after the WHILE itself
   102 00000D00 E8B0FAFFFF          <1>     call findOtherExpressionsOnLine     ;Get the first : or ASCII NUL
   103 00000D05 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]  ;Get the line number
   104 00000D09 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine]  ;Load ptr to start of string in rsi
   105 00000D0D 4829CE              <1>     sub rsi, rcx    ;Compute difference from start of string
   106 00000D10 89F1                <1>     mov ecx, esi    ;Should just be low byte of si so cl
   107 00000D12 81E1FF000000        <1>     and ecx, 0FFh   ;Save only bottom byte just in case of garbage
   108 00000D18 C1E110              <1>     shl ecx, 2*8    ;Move to the third byte in the dword
   109 00000D1B 09C8                <1>     or eax, ecx     ;Add byte three to eax
   110 00000D1D 89C2                <1>     mov edx, eax    ;Save in edx
   111 00000D1F 48C1E228            <1>     shl rdx, 5*8    ;Shift three bytes to top of qword
   112 00000D23 5E                  <1>     pop rsi
   113                              <1> .initialSearch:
   114                              <1>     ;First look for a : or a ASCII NUL to leave the WHILE part of the line
   115 00000D24 803E00              <1>     cmp byte [rsi], 0
   116 00000D27 740D                <1>     je .gotoNextLine
   117 00000D29 813E57454E44        <1>     cmp dword [rsi], "WEND"
   118 00000D2F 7418                <1>     je .wordFound
   119 00000D31 48FFC6              <1>     inc rsi ;Now search up until the end of the line for a WEND
   120                              <1>     ;"WEND" found here!
   121 00000D34 EBEE                <1>     jmp short .initialSearch
   122                              <1> .gotoNextLine:
   123 00000D36 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Get pointer to next program line
   124 00000D3A 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Now, when walking if it gives a value of -1, no NEXT found
   125 00000D41 7448                <1>     je .noWend
   126 00000D43 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Load pointer to string rsi
   127 00000D47 EBDB                <1>     jmp short .initialSearch
   128                              <1> .wordFound:
   129                              <1>     ;Here, word found! Huzzah! Now pack edx correctly
   130                              <1>     ;rsi points to the N in "WEND "
   131 00000D49 E867FAFFFF          <1>     call findOtherExpressionsOnLine 
   132                              <1>     ;make rsi point to next expression on the line or the end of the line
   133 00000D4E 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]  ;Get the line number
   134 00000D52 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine]  ;Load ptr to start of string in rsi
   135 00000D56 4829CE              <1>     sub rsi, rcx    ;Compute difference from start of string
   136 00000D59 89F1                <1>     mov ecx, esi    ;Should just be low byte of si so cl
   137 00000D5B 81E1FF000000        <1>     and ecx, 0FFh   ;Save only bottom byte just in case of garbage
   138 00000D61 C1E110              <1>     shl ecx, 2*8    ;Move to the third byte in the dword
   139 00000D64 09C8                <1>     or eax, ecx     ;Add byte three to eax
   140 00000D66 48C1E010            <1>     shl rax, 8*2    ;Shift three bytes to byte 4 of qword
   141 00000D6A 4809C2              <1>     or rdx, rax     ;Add bytes [4:2] to rdx
   142                              <1>     ;Compute checksum now
   143 00000D6D 31C0                <1>     xor eax, eax
   144 00000D6F B055                <1>     mov al, WHILEsig 
   145 00000D71 6689C2              <1>     mov dx, ax  ;Zero checksum byte
   146 00000D74 31C0                <1>     xor eax, eax
   147 00000D76 B908000000          <1>     mov ecx, 8  ;8 times
   148                              <1> .csumLoop:
   149                              <1>     ;Spin rdx 8 times adding each byte to al
   150 00000D7B 00D0                <1>     add al, dl
   151 00000D7D 48C1C208            <1>     rol rdx, 8  ;Rotate left by 8 bits
   152 00000D81 FFC9                <1>     dec ecx
   153 00000D83 75F6                <1>     jnz .csumLoop
   154 00000D85 F6D8                <1>     neg al ;Get twos compliment of sum (FFh - al)
   155 00000D87 88C6                <1>     mov dh, al  ;Save in checksum byte
   156                              <1> .exit:
   157 00000D89 5E                  <1>     pop rsi
   158 00000D8A C3                  <1>     ret
   159                              <1> .noWend:
   160 00000D8B 488D2DE8080000      <1>     lea rbp, noWend
   161 00000D92 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
   161 00000D9B FF                  <1>
   162 00000D9C E9E8FFFFFF          <1>     jmp .exit
   163                              <1> .error:
   164 00000DA1 488D2D39090000      <1>     lea rbp, uknowner
   165 00000DA8 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
   165 00000DB1 FF                  <1>
   166 00000DB2 E9D2FFFFFF          <1>     jmp .exit
   167                              <1> nextScan:
   168                              <1> ; Gets the current line address and starts searching program from the current line
   169                              <1> ; for a NEXT
   170                              <1> ; Puts the packed specialQword into rdx if a NEXT is found
   171                              <1> ; Returns rdx = -1 if an error occured with rbp pointing to the error string
   172 00000DB7 56                  <1>     push rsi
   173 00000DB8 668B15(F40E0000)    <1>     mov dx, word [currentLine]  ;pre-load dx with the current line number
   174 00000DBF E81E060000          <1>     call searchForProgramLine   ;Get program block pointer into rbx
   175 00000DC4 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If for some reason line doesnt exist?
   176 00000DCB 0F84A2000000        <1>     je .error   ;Unknown Error
   177                              <1> ;Now pack for the first portion/line after the for loop
   178                              <1> ;rsi points just after the FOR itself
   179 00000DD1 56                  <1>     push rsi    ;Save the first point after the FOR itself
   180 00000DD2 E8DEF9FFFF          <1>     call findOtherExpressionsOnLine     ;Get the first : or ASCII NUL
   181 00000DD7 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]  ;Get the line number
   182 00000DDB 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine]  ;Load ptr to start of string in rsi
   183 00000DDF 4829CE              <1>     sub rsi, rcx    ;Compute difference from start of string
   184 00000DE2 89F1                <1>     mov ecx, esi    ;Should just be low byte of si so cl
   185 00000DE4 81E1FF000000        <1>     and ecx, 0FFh   ;Save only bottom byte just in case of garbage
   186 00000DEA C1E110              <1>     shl ecx, 2*8    ;Move to the third byte in the dword
   187 00000DED 09C8                <1>     or eax, ecx     ;Add byte three to eax
   188 00000DEF 89C2                <1>     mov edx, eax    ;Save in edx
   189 00000DF1 48C1E228            <1>     shl rdx, 5*8    ;Shift three bytes to top of qword
   190 00000DF5 5E                  <1>     pop rsi
   191                              <1> .initialSearch:
   192                              <1>     ;First look for a : or a ASCII NUL to leave the FOR part of the line
   193 00000DF6 803E00              <1>     cmp byte [rsi], 0
   194 00000DF9 740D                <1>     je .gotoNextLine
   195 00000DFB 813E4E455854        <1>     cmp dword [rsi], "NEXT"
   196 00000E01 7418                <1>     je .wordFound
   197 00000E03 48FFC6              <1>     inc rsi ;Now search up until the end of the line for a NEXT
   198                              <1>     ;"NEXT" found here!
   199 00000E06 EBEE                <1>     jmp short .initialSearch
   200                              <1> .gotoNextLine:
   201 00000E08 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Get pointer to next program line
   202 00000E0C 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Now, when walking if it gives a value of -1, no NEXT found
   203 00000E13 7448                <1>     je .noNext
   204 00000E15 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Load pointer to string rsi
   205 00000E19 EBDB                <1>     jmp short .initialSearch
   206                              <1> .wordFound:
   207                              <1>     ;Here, word found! Huzzah! Now pack edx correctly
   208                              <1>     ;rsi points to the N in "NEXT "
   209 00000E1B E895F9FFFF          <1>     call findOtherExpressionsOnLine 
   210                              <1>     ;make rsi point to next expression on the line or the end of the line
   211 00000E20 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]  ;Get the line number
   212 00000E24 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine]  ;Load ptr to start of string in rsi
   213 00000E28 4829CE              <1>     sub rsi, rcx    ;Compute difference from start of string
   214 00000E2B 89F1                <1>     mov ecx, esi    ;Should just be low byte of si so cl
   215 00000E2D 81E1FF000000        <1>     and ecx, 0FFh   ;Save only bottom byte just in case of garbage
   216 00000E33 C1E110              <1>     shl ecx, 2*8    ;Move to the third byte in the dword
   217 00000E36 09C8                <1>     or eax, ecx     ;Add byte three to eax
   218 00000E38 48C1E010            <1>     shl rax, 8*2    ;Shift three bytes to byte 4 of qword
   219 00000E3C 4809C2              <1>     or rdx, rax     ;Add bytes [4:2] to rdx
   220                              <1>     ;Compute checksum now
   221 00000E3F 31C0                <1>     xor eax, eax
   222 00000E41 B05A                <1>     mov al, FORsig 
   223 00000E43 6689C2              <1>     mov dx, ax  ;Zero checksum byte
   224 00000E46 31C0                <1>     xor eax, eax
   225 00000E48 B908000000          <1>     mov ecx, 8  ;8 times
   226                              <1> .csumLoop:
   227                              <1>     ;Spin rdx 8 times adding each byte to al
   228 00000E4D 00D0                <1>     add al, dl
   229 00000E4F 48C1C208            <1>     rol rdx, 8  ;Rotate left by 8 bits
   230 00000E53 FFC9                <1>     dec ecx
   231 00000E55 75F6                <1>     jnz .csumLoop
   232 00000E57 F6D8                <1>     neg al ;Get twos compliment of sum (FFh - al)
   233 00000E59 88C6                <1>     mov dh, al  ;Save in checksum byte
   234                              <1> .exit:
   235 00000E5B 5E                  <1>     pop rsi
   236 00000E5C C3                  <1>     ret
   237                              <1> .noNext:
   238 00000E5D 488D2D53080000      <1>     lea rbp, noNext
   239 00000E64 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
   239 00000E6D FF                  <1>
   240 00000E6E E9E8FFFFFF          <1>     jmp .exit
   241                              <1> .error:
   242 00000E73 488D2D67080000      <1>     lea rbp, uknowner
   243 00000E7A 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
   243 00000E83 FF                  <1>
   244 00000E84 E9D2FFFFFF          <1>     jmp .exit
   245                              <1> ;=======================================
   246                              <1> ;  ACTUAL CONTROL FLOW FUNCTIONS HERE  :
   247                              <1> ;=======================================
   248                              <1> ;All below functions return the line number in dx and the offset into the line
   249                              <1> ; to start reading at in byte three of edx
   250                              <1> goto:
   251                              <1> ;GOTO, works by replacing the address after the return address on the stack
   252                              <1> ;rsi points to first char AFTER function name
   253 00000E89 E8C1F4FFFF          <1>     call spaceSkip  ;Skip all preceeding spaces
   254 00000E8E E80FF5FFFF          <1>     call handleAlgebraicExpression  ;Turn the expression into a number in ax
   255 00000E93 0FB7D0              <1>     movzx edx, ax   ;Line number into dx, start at beginning of line
   256 00000E96 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   257 00000E9D C3                  <1>     ret
   258                              <1> 
   259                              <1> gosub:
   260 00000E9E E87FFDFFFF          <1>     call retScan
   261 00000EA3 4881FAFFFFFFFF      <1>     cmp rdx, -1
   262 00000EAA 7436                <1>     je .error
   263 00000EAC B901000000          <1>     mov ecx, gosubStruct_size/8
   264                              <1>     makeSpaceOnStack rcx  ;Make four qwords of space on the stack
    96                              <2> 
    97                              <2> 
    98                              <2> 
    99 00000EB1 58                  <2>  pop rax
   100 00000EB2 48C1E103            <2>  shl %1, 3
   101 00000EB6 4829CC              <2>  sub rsp, %1
   102 00000EB9 488D2D(50000000)    <2>  lea rbp, stack
   103 00000EC0 4839EC              <2>  cmp rsp, rbp
   104 00000EC3 770C                <2>  ja .macroNotOverflow
   105 00000EC5 488D2D9D070000      <2>  lea rbp, stkOvflw
   106 00000ECC E906F2FFFF          <2>  jmp criticalError
   107                              <2> .macroNotOverflow:
   108                              <2> 
   109                              <2> 
   110 00000ED1 50                  <2>  push rax
   265 00000ED2 4889E5              <1>     mov rbp, rsp
   266 00000ED5 4881C508000000      <1>     add rbp, 8  ;Make rbp point to the base of the new struc
   267 00000EDC 48895500            <1>     mov qword [rbp + forStruct.specQword], rdx  ;Move rdx into its place on the stack
   268                              <1>     ;rsi points just past the GOSUB
   269 00000EE0 EBA7                <1>     jmp short goto ;Now behave like GOTO
   270                              <1> .error:
   271 00000EE2 E9F0F1FFFF          <1>     jmp criticalError
   272                              <1> 
   273                              <1> return:
   274                              <1> ;First verify the GOSUB struc is on the stack
   275 00000EE7 4889E5              <1>     mov rbp, rsp    ;Dont need to save rbp so trash it
   276 00000EEA 4881C508000000      <1>     add rbp, 8  ;Make it point to the base of the struc past the return address
   277                              <1>     ;Read the qword on stack, verify it is a GOSUBstruc and passes checksum test
   278 00000EF1 488B5500            <1>     mov rdx, qword [rbp + gosubStruct.specQword]
   279 00000EF5 80FAA5              <1>     cmp dl, GOSUBsig
   280 00000EF8 752F                <1>     jne .noReturn
   281                              <1>     ;Now compute checksum to verify its not an accident
   282 00000EFA 30C0                <1>     xor al, al
   283 00000EFC B908000000          <1>     mov ecx, 8
   284                              <1> .checksumTest:
   285 00000F01 00D0                <1>     add al, dl
   286 00000F03 48C1CA08            <1>     ror rdx, 8
   287 00000F07 FFC9                <1>     dec ecx
   288 00000F09 75F6                <1>     jnz .checksumTest
   289 00000F0B 84C0                <1>     test al, al     ;This should be 0
   290 00000F0D 751A                <1>     jnz .noReturn
   291                              <1>  ;Now we are truly in a RETURN
   292 00000F0F 48C1EA28            <1>     shr rdx, 5*8    ;Bring return information down to the lower three bytes
   293                              <1>     ;Clean the struc from the stack
   294 00000F13 B901000000          <1>     mov ecx, gosubStruct_size/8
   295                              <1>     cleanSpaceOnStack rcx
   114                              <2> 
   115 00000F18 58                  <2>  pop rax
   116 00000F19 48C1E103            <2>  shl %1, 3
   117 00000F1D 4801CC              <2>  add rsp, %1
   118 00000F20 50                  <2>  push rax
   296 00000F21 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   297 00000F28 C3                  <1>     ret
   298                              <1> .noReturn:
   299 00000F29 488D2D9A070000      <1>     lea rbp, noReturn
   300 00000F30 E9A2F1FFFF          <1>     jmp criticalError
   301                              <1> forLoop:
   302                              <1> ;This saves the following struc on the stack
   303                              <1> ;------------Hi stack addr-------------
   304                              <1> ;stepValue (qword), default 1
   305                              <1> ;limitValue (qword), to which value do we loop
   306                              <1> ;ptr to counter variable (qword)
   307                              <1> ;Special qword:
   308                              <1> ; Byte 7 = Offset into the line for next instruction
   309                              <1> ; Bytes[6:5] = Line number of portion after FOR (either FOR line or line after FOR)
   310                              <1> ; Byte 4 = Offset into the line for next instruction
   311                              <1> ; Bytes[3:2] = Line number of portion after NEXT (either NEXT line or line after NEXT)
   312                              <1> ; Byte 1 = Parity check sum for the qword, makes the sum of the bytes in qword 0
   313                              <1> ; Byte 0 = FOR signature
   314                              <1> ;------------Low stack addr------------
   315                              <1> ;rsp -> Return address
   316                              <1>     ;First check we have a NEXT following this FOR
   317 00000F35 E87DFEFFFF          <1>     call nextScan
   318 00000F3A 4881FAFFFFFFFF      <1>     cmp rdx, -1
   319 00000F41 0F84F5000000        <1>     je .critError
   320                              <1>     ;Here we make space on the stack.
   321 00000F47 B904000000          <1>     mov ecx, forStruct_size/8
   322                              <1>     makeSpaceOnStack rcx  ;Make four qwords of space on the stack
    96                              <2> 
    97                              <2> 
    98                              <2> 
    99 00000F4C 58                  <2>  pop rax
   100 00000F4D 48C1E103            <2>  shl %1, 3
   101 00000F51 4829CC              <2>  sub rsp, %1
   102 00000F54 488D2D(50000000)    <2>  lea rbp, stack
   103 00000F5B 4839EC              <2>  cmp rsp, rbp
   104 00000F5E 770C                <2>  ja .macroNotOverflow
   105 00000F60 488D2D02070000      <2>  lea rbp, stkOvflw
   106 00000F67 E96BF1FFFF          <2>  jmp criticalError
   107                              <2> .macroNotOverflow:
   108                              <2> 
   109                              <2> 
   110 00000F6C 50                  <2>  push rax
   323 00000F6D 4889E5              <1>     mov rbp, rsp
   324 00000F70 4881C508000000      <1>     add rbp, 8  ;Make rbp point to the base of the new struc
   325 00000F77 48895500            <1>     mov qword [rbp + forStruct.specQword], rdx  ;Move rdx into its place on the stack
   326 00000F7B 56                  <1>     push rsi   ;rsi points to first byte after FOR. The first word should now be a var
   327 00000F7C B820544F20          <1>     mov eax, " TO " ;First find the TO and STEP values
   328                              <1> .flScanTo:
   329 00000F81 803E00              <1>     cmp byte [rsi], 0   ;ASCII null w/o a TO? Syntax Error
   330 00000F84 0F84AB000000        <1>     je .syntaxError
   331 00000F8A 803E3A              <1>     cmp byte [rsi], ":" ;Save for a next statement delimiter
   332 00000F8D 0F84A2000000        <1>     je .syntaxError
   333 00000F93 3906                <1>     cmp dword [rsi], eax
   334 00000F95 7405                <1>     je .flToFound
   335 00000F97 48FFC6              <1>     inc rsi ;Go forwards by a byte
   336 00000F9A EBE5                <1>     jmp short .flScanTo
   337                              <1> .flToFound:
   338                              <1>     ;rsi points to the preceeding space so add 3 to go to trailing space
   339 00000F9C 4881C603000000      <1>     add rsi, 3
   340 00000FA3 E8A7F3FFFF          <1>     call spaceSkip  ;Go to expression to evaluate
   341 00000FA8 E8F5F3FFFF          <1>     call handleAlgebraicExpression  ;Get in rax the limit value
   342 00000FAD 48894510            <1>     mov qword [rbp + forStruct.limitValue], rax
   343                              <1>     ;rsi now points to the next word, this should be step, otherwise ignore the word
   344 00000FB1 AD                  <1>     lodsd   ;Get the word in eax
   345 00000FB2 3D53544550          <1>     cmp eax, "STEP"
   346 00000FB7 754F                <1>     jne .defaultStep
   347                              <1>     ;Check it is a "STEP "
   348 00000FB9 AC                  <1>     lodsb
   349 00000FBA 3C20                <1>     cmp al, " "
   350 00000FBC 754A                <1>     jne .defaultStep
   351                              <1>     ;rsi points to a "STEP "
   352 00000FBE E88CF3FFFF          <1>     call spaceSkip  ;Go to expression to evaluate
   353 00000FC3 E8DAF3FFFF          <1>     call handleAlgebraicExpression  ;Get in rax the step value
   354 00000FC8 48894518            <1>     mov qword [rbp + forStruct.stepValue], rax
   355                              <1> .flVariable:
   356 00000FCC 5E                  <1>     pop rsi ;Get back OG rsi position immediately after FOR
   357 00000FCD E87DF3FFFF          <1>     call spaceSkip ;Skip intermediate spaces
   358 00000FD2 56                  <1>     push rsi
   359 00000FD3 E863F9FFFF          <1>     call variableAssignment ;Make the variable assignment, trashes rsi
   360 00000FD8 5E                  <1>     pop rsi ;rsi points to the start of the variable again
   361 00000FD9 E87CF3FFFF          <1>     call getVarNameLength
   362 00000FDE E88F030000          <1>     call findVariable   ;Get the variable pointer in rbx
   363 00000FE3 48895D08            <1>     mov qword [rbp + forStruct.cntrPtr], rbx    ;Save variable pointer
   364                              <1>     ;Now check whether we should run the loop at all?
   365 00000FE7 488B5D08            <1>     mov rbx, qword [rbp + forStruct.cntrPtr]
   366 00000FEB 488B4B04            <1>     mov rcx, qword [rbx + varBlock.qValue]  ;Get the variable value
   367 00000FEF 488B5D10            <1>     mov rbx, qword [rbp + forStruct.limitValue]
   368                              <1>     ;if rcx >= rbx, branch to after NEXT
   369 00000FF3 4839D9              <1>     cmp rcx, rbx
   370 00000FF6 7D1A                <1>     jge .dontRunFor
   371 00000FF8 488B5500            <1>     mov rdx, qword [rbp + forStruct.specQword]
   372 00000FFC 48C1EA28            <1>     shr rdx, 5*8    ;Upper bytes will be cleared, needed for the "branch"
   373                              <1> .exit:
   374                              <1>     ;Recall edx must have the correct three bytes in it from the special qword
   375 00001000 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   376 00001007 C3                  <1>     ret
   377                              <1> .defaultStep:
   378 00001008 48C7451801000000    <1>     mov qword [rbp + forStruct.stepValue], 1
   379 00001010 EBBA                <1>     jmp short .flVariable
   380                              <1> .dontRunFor:
   381                              <1>     ;Move the bytes from the NEXT to edx 
   382 00001012 488B5500            <1>     mov rdx, qword [rbp + forStruct.specQword]
   383 00001016 48C1EA10            <1>     shr rdx, 2*8    ;Upper bytes will be cleared
   384 0000101A 09D2                <1>     or edx, edx     ;This should zero the upper dword
   385                              <1>     ;Need to also reclaim the stack space
   386 0000101C B904000000          <1>     mov ecx, forStruct_size/8
   387                              <1>     cleanSpaceOnStack rcx
   114                              <2> 
   115 00001021 58                  <2>  pop rax
   116 00001022 48C1E103            <2>  shl %1, 3
   117 00001026 4801CC              <2>  add rsp, %1
   118 00001029 50                  <2>  push rax
   388 0000102A EBD4                <1>     jmp short .exit
   389                              <1> ;Errors
   390                              <1> .unknownError:
   391 0000102C 488D2DAE060000      <1>     lea rbp, uknowner
   392 00001033 EB07                <1>     jmp short .critError
   393                              <1> .syntaxError:
   394 00001035 488D2DEC050000      <1>     lea rbp, syntax
   395                              <1> .critError:
   396                              <1>     ;called with rbp already pointing to error string
   397 0000103C E996F0FFFF          <1>     jmp criticalError
   398                              <1> 
   399                              <1> next:
   400                              <1>     ;Verify that the structure on the stack is a FOR structure
   401 00001041 4889E5              <1>     mov rbp, rsp    ;Dont need to save rbp so trash it
   402 00001044 4881C508000000      <1>     add rbp, 8  ;Make it point to the base of the struc past the return address
   403                              <1>     ;Read the qword on stack, verify it is a FORstruct and passes checksum test
   404 0000104B 488B5500            <1>     mov rdx, qword [rbp + forStruct.specQword]
   405 0000104F 80FA5A              <1>     cmp dl, FORsig
   406 00001052 7555                <1>     jne .noForNext
   407                              <1>     ;Now compute checksum to verify its not an accident
   408 00001054 30C0                <1>     xor al, al
   409 00001056 B908000000          <1>     mov ecx, 8
   410                              <1> .checksumTest:
   411 0000105B 00D0                <1>     add al, dl
   412 0000105D 48C1EA08            <1>     shr rdx, 8
   413 00001061 FFC9                <1>     dec ecx
   414 00001063 75F6                <1>     jnz .checksumTest
   415 00001065 84C0                <1>     test al, al     ;This should be 0
   416 00001067 7540                <1>     jnz .noForNext
   417                              <1>     ;Now we are truly in a FOR loop
   418 00001069 488B5D08            <1>     mov rbx, qword [rbp + forStruct.cntrPtr]    ;Get variable pointer
   419 0000106D 488B4304            <1>     mov rax, qword [rbx + varBlock.qValue]      ;Get variable value
   420 00001071 483B4510            <1>     cmp rax, qword [rbp + forStruct.limitValue] ;Compare current var value to limit
   421 00001075 7D18                <1>     jge .noMoreLooping
   422 00001077 48034518            <1>     add rax, qword [rbp + forStruct.stepValue]  ;Add the step
   423 0000107B 48894304            <1>     mov qword [rbx + varBlock.qValue], rax      ;Update the variable value
   424                              <1>     ;Now go back to line after FOR
   425 0000107F 488B5500            <1>     mov rdx, qword [rbp + forStruct.specQword]
   426 00001083 48C1EA28            <1>     shr rdx, 5*8    ;Move upper three bytes to lower three bytes of edx
   427                              <1> .exit:
   428                              <1>     ;Recall edx must have the correct three bytes in it from the special qword
   429 00001087 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   430 0000108E C3                  <1>     ret
   431                              <1> .noMoreLooping:
   432                              <1>     ;No need to update the variable, it is already above
   433 0000108F 488B5500            <1>     mov rdx, qword [rbp + forStruct.specQword]
   434 00001093 48C1EA10            <1>     shr rdx, 2*8    ;Move bytes 4:2 to lower three bytes of edx
   435 00001097 09D2                <1>     or edx, edx     ;Remove upper bits
   436                              <1>     ;Need to also reclaim the stack space
   437 00001099 B904000000          <1>     mov ecx, forStruct_size/8
   438                              <1>     cleanSpaceOnStack rcx
   114                              <2> 
   115 0000109E 58                  <2>  pop rax
   116 0000109F 48C1E103            <2>  shl %1, 3
   117 000010A3 4801CC              <2>  add rsp, %1
   118 000010A6 50                  <2>  push rax
   439 000010A7 EBDE                <1>     jmp short .exit
   440                              <1> .noForNext:
   441 000010A9 488D2DF4050000      <1>     lea rbp, noFor
   442 000010B0 E922F0FFFF          <1>     jmp criticalError
   443                              <1> 
   444                              <1> while:
   445                              <1>     ;First check we have a WEND following this WHILE
   446 000010B5 E82BFCFFFF          <1>     call wendScan
   447 000010BA 4881FAFFFFFFFF      <1>     cmp rdx, -1
   448 000010C1 7464                <1>     je .critError
   449                              <1>     ;Here we make space on the stack.
   450 000010C3 B901000000          <1>     mov ecx, whileStruct_size/8
   451                              <1>     makeSpaceOnStack rcx  ;Make a qword of space on the stack
    96                              <2> 
    97                              <2> 
    98                              <2> 
    99 000010C8 58                  <2>  pop rax
   100 000010C9 48C1E103            <2>  shl %1, 3
   101 000010CD 4829CC              <2>  sub rsp, %1
   102 000010D0 488D2D(50000000)    <2>  lea rbp, stack
   103 000010D7 4839EC              <2>  cmp rsp, rbp
   104 000010DA 770C                <2>  ja .macroNotOverflow
   105 000010DC 488D2D86050000      <2>  lea rbp, stkOvflw
   106 000010E3 E9EFEFFFFF          <2>  jmp criticalError
   107                              <2> .macroNotOverflow:
   108                              <2> 
   109                              <2> 
   110 000010E8 50                  <2>  push rax
   452 000010E9 4889E5              <1>     mov rbp, rsp
   453 000010EC 4881C508000000      <1>     add rbp, 8  ;Make rbp point to the base of the new struc
   454 000010F3 48895500            <1>     mov qword [rbp + whileStruct.specQword], rdx  ;Move rdx into its place on the stack
   455                              <1>     ;rsi should point after the WHILE
   456 000010F7 E8A6F2FFFF          <1>     call handleAlgebraicExpression  ;Get result of expression in rax
   457 000010FC 488B5500            <1>     mov rdx, qword [rbp + whileStruct.specQword]    ;Get special qword back into rdx
   458 00001100 4885C0              <1>     test rax, rax   ;Zero is FALSE
   459 00001103 740C                <1>     jz .conditionFalse
   460 00001105 48C1EA28            <1>     shr rdx, 5*8    ;Bring the upper three bytes down to eax
   461                              <1> .exit:
   462 00001109 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   463 00001110 C3                  <1>     ret
   464                              <1> .conditionFalse:
   465                              <1>     ;If condition is false, jump to the instruction after WEND
   466                              <1>     ;Here we reclaim the space from the stack.
   467 00001111 B901000000          <1>     mov ecx, whileStruct_size/8
   468                              <1>     cleanSpaceOnStack rcx  ;Clean a qword of space on the stack
   114                              <2> 
   115 00001116 58                  <2>  pop rax
   116 00001117 48C1E103            <2>  shl %1, 3
   117 0000111B 4801CC              <2>  add rsp, %1
   118 0000111E 50                  <2>  push rax
   469 0000111F 48C1EA10            <1>     shr rdx, 2*8    ;Bring bytes 4:2 down to bytes 2:0
   470 00001123 09D2                <1>     or edx, edx     ;Zero the rest of it
   471 00001125 EBE2                <1>     jmp short .exit
   472                              <1> .critError:
   473                              <1>     ;called with rbp already pointing to error string
   474 00001127 E9ABEFFFFF          <1>     jmp criticalError
   475                              <1> wend:
   476                              <1>     ;Find the While on the WHILE line and evaluate the expression
   477                              <1>     ;if true, branch to the WHILE three bytes in specialQword
   478                              <1>     ;if false, branch to WEND three bytes in specialQword and clean stack
   479                              <1>     ;First verify we have a While structure on the stack
   480 0000112C 4889E5              <1>     mov rbp, rsp    ;Dont need to save rbp so trash it
   481 0000112F 4881C508000000      <1>     add rbp, 8  ;Make it point to the base of the struc past the return address
   482 00001136 488B5500            <1>     mov rdx, qword [rbp + whileStruct.specQword]
   483 0000113A 80FA55              <1>     cmp dl, WHILEsig
   484 0000113D 0F858D000000        <1>     jne .noWhile
   485                              <1>     ;Now compute checksum to verify its not an accident
   486 00001143 30C0                <1>     xor al, al
   487 00001145 B908000000          <1>     mov ecx, 8
   488                              <1> .checksumTest:
   489 0000114A 00D0                <1>     add al, dl
   490 0000114C 48C1CA08            <1>     ror rdx, 8
   491 00001150 FFC9                <1>     dec ecx
   492 00001152 75F6                <1>     jnz .checksumTest
   493 00001154 84C0                <1>     test al, al     ;This should be 0
   494 00001156 7578                <1>     jnz .noWhile
   495                              <1>     ;Now we are truly in a WHILE loop
   496                              <1>     ;Search the While line for the WHILE keyword and evaluate the expression after it
   497                              <1>     ;rdx is as normal
   498 00001158 48C1EA28            <1>     shr rdx, 5*8    ;Get upper three bytes down low
   499 0000115C 81E2FFFF0000        <1>     and edx, 0FFFFh ;Save only dx
   500 00001162 E87B020000          <1>     call searchForProgramLine
   501 00001167 4881FBFFFFFFFF      <1>     cmp rbx, -1
   502 0000116E 7454                <1>     je .error
   503 00001170 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Point to start of string
   504                              <1> .whileScan:
   505 00001174 803E00              <1>     cmp byte [rsi], 0   ;Are we at the end of the line
   506 00001177 7457                <1>     je .noWhile ;If so, we have gotten to the end of the line without a while
   507 00001179 488D3DC8F6FFFF      <1>     lea rdi, whileStr   ;Point to the while string in the table, 6 chars long
   508 00001180 B906000000          <1>     mov ecx, 6
   509                              <1> .scanning:
   510 00001185 A6                  <1>     cmpsb
   511 00001186 75EC                <1>     jne .whileScan
   512 00001188 FFC9                <1>     dec ecx
   513 0000118A 75F9                <1>     jnz .scanning
   514                              <1>     ;Here is equal, rsi points past the space in "WHILE "
   515 0000118C 48FFCE              <1>     dec rsi
   516 0000118F E8BBF1FFFF          <1>     call spaceSkip  ;Skip all spaces
   517 00001194 E809F2FFFF          <1>     call handleAlgebraicExpression  ;Get algebraic expression in rax
   518 00001199 488B5500            <1>     mov rdx, qword [rbp + whileStruct.specQword]    ;Get special qword back into rdx
   519 0000119D 4885C0              <1>     test rax, rax
   520 000011A0 740C                <1>     jz .conditionFalse
   521 000011A2 48C1EA28            <1>     shr rdx, 5*8    ;Bring the upper three bytes down to eax
   522                              <1> .exit:
   523 000011A6 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   524 000011AD C3                  <1>     ret
   525                              <1> .conditionFalse:
   526                              <1>     ;If condition is false, go to the instruction after WEND
   527                              <1>     ;Here we reclaim the space from the stack.
   528 000011AE B901000000          <1>     mov ecx, whileStruct_size/8
   529                              <1>     cleanSpaceOnStack rcx  ;Clean a qword of space on the stack
   114                              <2> 
   115 000011B3 58                  <2>  pop rax
   116 000011B4 48C1E103            <2>  shl %1, 3
   117 000011B8 4801CC              <2>  add rsp, %1
   118 000011BB 50                  <2>  push rax
   530 000011BC 48C1EA10            <1>     shr rdx, 2*8    ;Bring bytes 4:2 down to bytes 2:0
   531 000011C0 09D2                <1>     or edx, edx     ;Zero the rest of it
   532 000011C2 EBE2                <1>     jmp short .exit
   533                              <1> .error:
   534 000011C4 488D2D16050000      <1>     lea rbp, uknowner
   535 000011CB E907EFFFFF          <1>     jmp criticalError
   536                              <1> .noWhile:
   537 000011D0 488D2DB8040000      <1>     lea rbp, noWhile
   538 000011D7 E9FBEEFFFF          <1>     jmp criticalError
   539                              <1> 
   540                              <1> handleIf:
   541                              <1> ;Evaluate the string. The IF,THEN/GOTO,ELSE statement must ALL be on one line
   542                              <1> ;IF exp1 THEN statement ELSE statement
   543                              <1> ;IF exp1 GOTO linenumber ELSE statement
   544                              <1> ;rsi points to first char AFTER function name
   545 000011DC E86EF1FFFF          <1>     call spaceSkip
   546 000011E1 E8BCF1FFFF          <1>     call handleAlgebraicExpression
   547 000011E6 4885C0              <1>     test rax, rax  ;If this is 0, go to the else
   548 000011E9 7425                <1>     jz .else
   549 000011EB E85FF1FFFF          <1>     call spaceSkip
   550 000011F0 AD                  <1>     lodsd   ;Get the whole word, must be either "THEN " or "GOTO "
   551 000011F1 3D5448454E          <1>     cmp eax, "THEN"
   552 000011F6 7442                <1>     je .hi0   ; Go past THEN, to process statement
   553 000011F8 3D474F544F          <1>     cmp eax, "GOTO"
   554 000011FD 7569                <1>     jne .error
   555 000011FF 803E20              <1>     cmp byte [rsi], " " ;is the next char a space?
   556 00001202 7564                <1>     jne .error
   557 00001204 E980FCFFFF          <1>     jmp goto
   558                              <1> .candidatethen:
   559 00001209 803E20              <1>     cmp byte [rsi], " " ;is the next char a space?
   560 0000120C 742C                <1>     je .hi0
   561 0000120E EB58                <1>     jmp short .error
   562                              <1> .else:
   563                              <1>     ;Search for the ELSE, it has to be preceeded with a space and have a space after
   564 00001210 803E00              <1>     cmp byte [rsi], 0 ;Are we at end of line?
   565 00001213 7452                <1>     je .noElse
   566 00001215 803E3A              <1>     cmp byte [rsi], ":" ;Are we at end line segment?
   567 00001218 744D                <1>     je .noElse
   568 0000121A 48FFC6              <1>     inc rsi
   569 0000121D 813E20454C53        <1>     cmp dword [rsi], " ELS"
   570 00001223 75EB                <1>     jne .else
   571 00001225 4881C604000000      <1>     add rsi, 4  ;Skip those four chars, we have a candidate
   572 0000122C 66813E4520          <1>     cmp word [rsi], "E "
   573 00001231 75DD                <1>     jne .else   ;If not equal failed to match pattern
   574 00001233 4881C602000000      <1>     add rsi, 2  ;Else its the ELSE we are looking for, move rsi to first space past it
   575                              <1> .hi0:
   576                              <1> ;Now we do the branchy stuff, branch to the same line just further down
   577 0000123A 668B15(F40E0000)    <1>     mov dx, word [currentLine]
   578 00001241 E89C010000          <1>     call searchForProgramLine
   579 00001246 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Does the line not exist somehow?
   580 0000124D 7419                <1>     je .error
   581 0000124F 4889F0              <1>     mov rax, rsi    ;Save pointer in rax
   582 00001252 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine] ;Get the difference in chars
   583 00001256 4829C8              <1>     sub rax, rcx
   584 00001259 24FF                <1>     and al, -1  ;Save only bottom byte as the difference should be less than 255
   585 0000125B C1E010              <1>     shl eax, 10h ;Shift to byte 3
   586 0000125E 09C2                <1>     or edx, eax ;Save the offset into byte 3
   587 00001260 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   588                              <1> .noElse:
   589                              <1> ;If no else, simply return
   590 00001267 C3                  <1>     ret
   591                              <1> .error:
   592 00001268 488D1DB9030000      <1>     lea rbx, syntax
   593 0000126F E963EEFFFF          <1>     jmp criticalError
    16                                  %include "MATH.ASM"
    17                              <1> decimalToHex:
    18                              <1>     ;Takes ASCII encoded decimal number and 
    19                              <1>     ;returns its hex value
    20                              <1>     ;Input: rsi = Start of numeric ONLY string
    21                              <1>     ;Output: rax = Number
    22                              <1>     ;        rsi = First non-numeric char past end of number
    23 00001274 53                  <1>     push rbx
    24 00001275 51                  <1>     push rcx
    25 00001276 52                  <1>     push rdx
    26 00001277 31DB                <1>     xor ebx, ebx    ;Start with rbx = 0
    27                              <1> .processDigits:    
    28 00001279 AC                  <1>     lodsb           ;Get the first digit in al
    29 0000127A 2C30                <1>     sub al, 30h     ;Reduce to value
    30 0000127C 31D2                <1>     xor edx, edx    ;Clear for multiplication
    31 0000127E 3C0A                <1>     cmp al, 10      ;Digit valid? Propagte CF
    32 00001280 480FB6C0            <1>     movzx rax, al   ;Clear upper bits
    33 00001284 4893                <1>     xchg rax, rbx
    34 00001286 730D                <1>     jnc .exit       ;Digit was not valid, exit
    35 00001288 B90A000000          <1>     mov ecx, 10     ;Multiply result by 10
    36 0000128D 48F7E1              <1>     mul rcx
    37 00001290 4801C3              <1>     add rbx, rax    ;Add the new digits
    38 00001293 EBE4                <1>     jmp short .processDigits
    39                              <1> .exit:
    40 00001295 48FFCE              <1>     dec rsi         ;rsi points to first non-digit
    41 00001298 5A                  <1>     pop rdx
    42 00001299 59                  <1>     pop rcx
    43 0000129A 5B                  <1>     pop rbx
    44 0000129B C3                  <1>     ret
    45                              <1> 
    46                              <1> printdecimalword:
    47                              <1> ;Takes the qword in rax and prints its signed decimal representation
    48 0000129C 50                  <1>     push rax
    49 0000129D 53                  <1>     push rbx
    50 0000129E 488D3D(980E0000)    <1>     lea rdi, digitString   ;Use the default line as a buffer
    51                              <1>     ;Sanitise the digit buffer
    52 000012A5 57                  <1>     push rdi
    53 000012A6 51                  <1>     push rcx
    54 000012A7 50                  <1>     push rax
    55                              <1> 
    56 000012A8 B906000000          <1>     mov ecx, digitStringLen/8
    57 000012AD F348AB              <1>     rep stosq
    58 000012B0 58                  <1>     pop rax
    59 000012B1 59                  <1>     pop rcx
    60 000012B2 5F                  <1>     pop rdi
    61                              <1> 
    62 000012B3 50                  <1>     push rax    ;Save rax for the sign bit later
    63 000012B4 48D1C0              <1>     rol rax, 1  ;Test the sign bit
    64 000012B7 A801                <1>     test al, 1
    65 000012B9 48D1C8              <1>     ror rax, 1  ;Undo the roll
    66 000012BC 7403                <1>     jz .noCompliment
    67 000012BE 48F7D8              <1>     neg rax     ;Get the 2's compliment of rax
    68                              <1> ;Clear the sign bit, print the number from bits 62:0
    69                              <1> .noCompliment:
    70 000012C1 48D1E0              <1>     shl rax, 1  ;Go past the edge
    71 000012C4 48D1E8              <1>     shr rax, 1  ;Return zero extended
    72 000012C7 4881C72F000000      <1>     add rdi, digitStringLen - 1 ;Go to the end of the buffer
    73 000012CE FD                  <1>     std ;Reverse string ops
    74 000012CF 50                  <1>     push rax
    75 000012D0 30C0                <1>     xor al, al  ;Place delimiter
    76 000012D2 AA                  <1>     stosb
    77 000012D3 58                  <1>     pop rax
    78 000012D4 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
    78 000012DD 00                  <1>
    79                              <1> .pdw0:
    80 000012DE 31D2                <1>     xor edx, edx
    81 000012E0 48F7F3              <1>     div rbx
    82 000012E3 80C230              <1>     add dl, '0'
    83 000012E6 80FA39              <1>     cmp dl, '9'
    84 000012E9 7603                <1>     jbe .pdw1
    85 000012EB 80C207              <1>     add dl, 'A'-'0'-10
    86                              <1> .pdw1:
    87 000012EE 50                  <1>     push rax
    88 000012EF 88D0                <1>     mov al, dl    ;Save remainder byte
    89 000012F1 AA                  <1>     stosb   ;Store the byte and sub one from rdi
    90 000012F2 58                  <1>     pop rax
    91 000012F3 4885C0              <1>     test rax, rax
    92 000012F6 75E6                <1>     jnz .pdw0
    93                              <1> 
    94                              <1>     ;Now add a minus sign if sign bit set
    95 000012F8 58                  <1>     pop rax ;Get the original for the sign bit
    96 000012F9 48D1C0              <1>     rol rax, 1  ;Bring the sign bit low
    97 000012FC A801                <1>     test al, 1
    98 000012FE 7403                <1>     jz .printString
    99 00001300 B02D                <1>     mov al, "-"
   100 00001302 AA                  <1>     stosb   ;Store minus sign and decrement rdi
   101                              <1> .printString:
   102 00001303 FC                  <1>     cld ;Return string ops to normal
   103 00001304 48FFC7              <1>     inc rdi ;Skip the extra 0 that was inserted
   104 00001307 4889FD              <1>     mov rbp, rdi    ;Point rbp to the head of the string
   105 0000130A E89FEEFFFF          <1>     call ttyOutString
   106 0000130F 5B                  <1>     pop rbx
   107 00001310 58                  <1>     pop rax
   108 00001311 C3                  <1>     ret
    17                                  %include "MEMORY.ASM"
    18                              <1> allocateBlock:
    19                              <1> ;Allocates a program memory block, the caller then fixes the specifics
    20                              <1> ;Output: rbx = Pointer to generic memory block, or -1 if memory full
    21                              <1> ;       Caller needs to fill in, block size, block type and specifics
    22 00001312 52                  <1>     push rdx
    23                              <1> .ab0:
    24 00001313 488B1D(E20E0000)    <1>     mov rbx, qword [lastBlock]    ;Get the last block in the chain
    25 0000131A 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;First allocation?
    26 00001321 742F                <1>     je .firstAllocation
    27 00001323 C60374              <1>     mov byte [rbx + memBlock.bSignature], notLastMemBlock ;Make it not be the last
    28 00001326 480FB75301          <1>     movzx rdx, word [rbx + memBlock.wBlockSize] ;Goto end of block
    29 0000132B 4801D3              <1>     add rbx, rdx    ;Move rbx over the previous last block
    30 0000132E 488B15(D00E0000)    <1>     mov rdx, qword [maxMemAddr]
    31 00001335 4839D3              <1>     cmp rbx, rdx ;rbx above maxmemory? 
    32 00001338 770C                <1>     ja .memoryFull
    33 0000133A 48891D(E20E0000)    <1>     mov qword [lastBlock], rbx  ;New last block
    34 00001341 C60372              <1>     mov byte [rbx + memBlock.bSignature], lastMemBlock
    35                              <1> .exit:
    36 00001344 5A                  <1>     pop rdx
    37 00001345 C3                  <1>     ret
    38                              <1> .memoryFull:
    39 00001346 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    39 0000134F FF                  <1>
    40 00001350 EBF2                <1>     jmp short .exit
    41                              <1> .firstAllocation:
    42                              <1> ;Deal with first allocation
    43 00001352 488D1D(00000000)    <1>     lea rbx, section.programArea.vstart   ;Get this as the head of the chain
    44 00001359 48891D(E20E0000)    <1>     mov qword [lastBlock], rbx
    45 00001360 48891D(DA0E0000)    <1>     mov qword [mcbChain], rbx
    46 00001367 C60372              <1>     mov byte [rbx + memBlock.bSignature], lastMemBlock
    47 0000136A 66C743010000        <1>     mov word [rbx + memBlock.wBlockSize], 0 ;Dummy block
    48 00001370 EBD2                <1>     jmp short .exit
    49                              <1> 
    50                              <1> findVariable:
    51                              <1> ;Input: rsi = Source string for variable name
    52                              <1> ;       ecx = Length of variable name (max 40)
    53                              <1> ;Output: rbx = ptr to varBlock/strBlock OR -1 if doesnt exist
    54 00001372 50                  <1>     push rax
    55 00001373 51                  <1>     push rcx
    56 00001374 52                  <1>     push rdx
    57 00001375 56                  <1>     push rsi
    58 00001376 57                  <1>     push rdi
    59 00001377 488B1D(DA0E0000)    <1>     mov rbx, qword [mcbChain]   ;Start of the chain
    60 0000137E 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Chain empty?
    61 00001385 7446                <1>     je .exit
    62                              <1> .search:
    63 00001387 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
    64 0000138B 7415                <1>     je .varFound    ;We found a numerical variable
    65 0000138D 807B0302            <1>     cmp byte [rbx + memBlock.bBlockType], datBlockType
    66 00001391 741E                <1>     je .datFound    ;We found a string variable
    67                              <1> .invalid:
    68                              <1>     ;Are we at the end of the chain?
    69 00001393 803B72              <1>     cmp byte [rbx + memBlock.bSignature], lastMemBlock
    70 00001396 742B                <1>     je .varNotFound ;At the end of the chain and var not found? Error!
    71 00001398 480FB75301          <1>     movzx rdx, word [rbx + memBlock.wBlockSize]
    72 0000139D 4801D3              <1>     add rbx, rdx    ;Goto next block
    73 000013A0 EBE5                <1>     jmp short .search
    74                              <1> .varFound:
    75                              <1>     ;Compare to see the var is our var
    76 000013A2 488D7B0C            <1>     lea rdi, qword [rbx + varBlock.sVarName] ;point rdi to the name string
    77 000013A6 51                  <1>     push rcx
    78 000013A7 56                  <1>     push rsi
    79 000013A8 F3A6                <1>     repe cmpsb  ;Compare one byte at a time
    80 000013AA 5E                  <1>     pop rsi
    81 000013AB 59                  <1>     pop rcx
    82 000013AC 75E5                <1>     jne .invalid
    83 000013AE F8                  <1>     clc
    84 000013AF EB1C                <1>     jmp short .exit
    85                              <1> .datFound:
    86 000013B1 488DBB04010000      <1>     lea rdi, qword [rbx + stringBlock.sVarName] ;point rdi to the name string
    87 000013B8 51                  <1>     push rcx
    88 000013B9 56                  <1>     push rsi
    89 000013BA F3A6                <1>     repe cmpsb  ;Compare one byte at a time
    90 000013BC 5E                  <1>     pop rsi
    91 000013BD 59                  <1>     pop rcx
    92 000013BE 75D3                <1>     jne .invalid
    93 000013C0 F8                  <1>     clc
    94 000013C1 EB0A                <1>     jmp short .exit
    95                              <1> .varNotFound:
    96 000013C3 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    96 000013CC FF                  <1>
    97                              <1> .exit:
    98 000013CD 5F                  <1>     pop rdi
    99 000013CE 5E                  <1>     pop rsi
   100 000013CF 5A                  <1>     pop rdx
   101 000013D0 59                  <1>     pop rcx
   102 000013D1 58                  <1>     pop rax
   103 000013D2 C3                  <1>     ret
   104                              <1> 
   105                              <1> findFirstLine:
   106                              <1> ;Output: rbx = Pointer to the first program block
   107                              <1> ;         dx = Number of the first line
   108 000013D3 488B1D(EA0E0000)    <1>     mov rbx, qword [firstLinPtr]
   109 000013DA 668B15(F20E0000)    <1>     mov dx, word [firstLinNum]
   110 000013E1 C3                  <1>     ret
   111                              <1> 
   112                              <1> ;FIRST SEARCH FOR A LINE NUMBER BEFORE INSERTING IT INTO THE CHAIN
   113                              <1> ;IF THE LINE NUMBER IS FOUND, REPLACE THE COMMAND STRING
   114                              <1> 
   115                              <1> searchForProgramLine:
   116                              <1> ;Walk the program chain looking to see if a line number exists. If it does,
   117                              <1> ; return a pointer to the block in rbx. If it doesn't, return -1 in rbx
   118                              <1> ;Input: dx = Line number
   119                              <1> ;Output: rbx = Pointer to program block 
   120 000013E2 488B1D(EA0E0000)    <1>     mov rbx, qword [firstLinPtr]
   121 000013E9 4881FBFFFFFFFF      <1>     cmp rbx, -1
   122 000013F0 7413                <1>     je .lineFound
   123                              <1> .search:
   124 000013F2 66395304            <1>     cmp word [rbx + progLineBlock.wLineNum], dx ;Equal line numbers?
   125 000013F6 740D                <1>     je .lineFound
   126 000013F8 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr]   ;Walk chain
   127 000013FC 4881FBFFFFFFFF      <1>     cmp rbx, -1
   128 00001403 75ED                <1>     jne .search ;Not -1? Keep searching
   129                              <1> .lineFound:
   130 00001405 C3                  <1>     ret
   131                              <1> 
   132                              <1> insertProgramLine:
   133                              <1> ;Walk the program chain looking for the biggest number less than our
   134                              <1> ; line number. Once we have reached the end of the chain, insert the block there, or
   135                              <1> ; if there is no block, then we are the last in the chain
   136                              <1> ;Input: rsi = New Program Block to be added
   137 00001406 50                  <1>     push rax
   138 00001407 53                  <1>     push rbx
   139 00001408 51                  <1>     push rcx
   140 00001409 52                  <1>     push rdx
   141 0000140A 57                  <1>     push rdi
   142 0000140B E8C3FFFFFF          <1>     call findFirstLine  ;Get start of program in rbx and line number in dx
   143                              <1> ;First check if we should be the first line
   144                              <1> 
   145 00001410 668B4E04            <1>     mov cx, word [rsi + progLineBlock.wLineNum] ;Save line number in cx
   146 00001414 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Empty program marker
   147 0000141B 744D                <1>     je .first
   148 0000141D 6639D1              <1>     cmp cx, dx  ;If cx is below dx, then our entry is first
   149 00001420 7248                <1>     jb .first    
   150                              <1> ;Use ax as the best line number and rdi as the pointer to that block
   151 00001422 66B8FFFF            <1>     mov ax, -1  ;Marker to indicate no insertion
   152                              <1> .walk:
   153 00001426 48817B06FFFFFFFF    <1>     cmp qword [rbx + progLineBlock.qPtr], -1    ;We are at the end
   154 0000142E 7419                <1>     je .sort
   155 00001430 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Walk chain in rbx
   156 00001434 663B4B04            <1>     cmp cx, word [rbx + progLineBlock.wLineNum]
   157 00001438 77EC                <1>     ja .walk    ;If line number is above my line number, keep walking
   158                              <1> .candidate:
   159                              <1>     ;If the new line number is below the old line number, reject
   160 0000143A 663B4304            <1>     cmp ax, word [rbx + progLineBlock.wLineNum]
   161 0000143E 72E6                <1>     jb .walk
   162 00001440 4889DF              <1>     mov rdi, rbx
   163 00001443 668B4304            <1>     mov ax, word [rbx + progLineBlock.wLineNum]
   164 00001447 EBDD                <1>     jmp short .walk
   165                              <1> .sort:
   166 00001449 66FFC0              <1>     inc ax  ;If no candidates, exit
   167 0000144C 740E                <1>     jz .skipLink
   168                              <1>     ;rdi points to the previous line to link to
   169 0000144E 488B5706            <1>     mov rdx, qword [rdi + progLineBlock.qPtr]
   170 00001452 48897706            <1>     mov qword [rdi + progLineBlock.qPtr], rsi   ;Insert self here
   171 00001456 48895606            <1>     mov qword [rsi + progLineBlock.qPtr], rdx   ;Link new block to next line
   172 0000145A EB20                <1>     jmp short .exit
   173                              <1> .skipLink:
   174 0000145C 48897306            <1>     mov qword [rbx + progLineBlock.qPtr], rsi   ;Link rsi to last element in list
   175 00001460 48C74606FFFFFFFF    <1>     mov qword [rsi + progLineBlock.qPtr], -1    ;End of chain marker
   176 00001468 EB12                <1>     jmp short .exit
   177                              <1> .first:
   178 0000146A 488935(EA0E0000)    <1>     mov qword [firstLinPtr], rsi
   179 00001471 66890D(F20E0000)    <1>     mov word [firstLinNum], cx
   180 00001478 48895E06            <1>     mov qword [rsi + progLineBlock.qPtr], rbx   ;Put the old first line as second line
   181                              <1> .exit:
   182 0000147C 5F                  <1>     pop rdi
   183 0000147D 5A                  <1>     pop rdx
   184 0000147E 59                  <1>     pop rcx
   185 0000147F 5B                  <1>     pop rbx
   186 00001480 58                  <1>     pop rax
   187 00001481 C3                  <1>     ret
   188                              <1> 
   189                              <1> makeEditInteger:
   190                              <1> ;Will make a variable if it is new name, or edit the value if it already exists
   191                              <1> ;Input: rsi = Var name
   192                              <1> ;       (e)cx = Length of varname, max 40 chars
   193                              <1> ;       rax = Value
   194 00001482 E8EBFEFFFF          <1>     call findVariable   ;rbx returned with var block or -1
   195 00001487 4881FBFFFFFFFF      <1>     cmp rbx, -1
   196 0000148E 7405                <1>     je .newVar
   197 00001490 48894304            <1>     mov qword [rbx + varBlock.qValue], rax
   198 00001494 C3                  <1>     ret
   199                              <1> .newVar:
   200 00001495 E878FEFFFF          <1>     call allocateBlock
   201 0000149A 4881FBFFFFFFFF      <1>     cmp rbx, -1
   202 000014A1 741E                <1>     je .error
   203 000014A3 48894304            <1>     mov qword [rbx + varBlock.qValue], rax  ;Save value
   204 000014A7 66894B01            <1>     mov word [rbx + varBlock.wBlockSize], cx    ;Save length of name
   205 000014AB 668143010C00        <1>     add word [rbx + varBlock.wBlockSize], varBlock_size ;Add full block size
   206 000014B1 C6430301            <1>     mov byte [rbx + varBlock.bBlockType], varBlockType  ;Block type
   207 000014B5 57                  <1>     push rdi
   208 000014B6 488D7B0C            <1>     lea rdi, qword [rbx + varBlock.sVarName]
   209 000014BA E87B000000          <1>     call strcpy ;Copy the string name into block buffer
   210 000014BF 5F                  <1>     pop rdi
   211 000014C0 C3                  <1>     ret
   212                              <1> .error:
   213 000014C1 488D2D50010000      <1>     lea rbp, noMem
   214 000014C8 E90AECFFFF          <1>     jmp criticalError
   215                              <1> makeEditString:
   216                              <1> ;Will make a string if it is new name, or replace the string. Strings are null termin
   217                              <1> ;Input: rsi = Var name
   218                              <1> ;       ecx = Length of varname, max 40 chars
   219                              <1> ;       rdx = Ptr to string itself
   220 000014CD 57                  <1>     push rdi
   221 000014CE 56                  <1>     push rsi
   222 000014CF 50                  <1>     push rax
   223 000014D0 53                  <1>     push rbx
   224 000014D1 E89CFEFFFF          <1>     call findVariable   ;rbx returned with string block or -1
   225 000014D6 4881FBFFFFFFFF      <1>     cmp rbx, -1
   226 000014DD 7528                <1>     jne .strcopy
   227 000014DF E82EFEFFFF          <1>     call allocateBlock
   228 000014E4 4881FBFFFFFFFF      <1>     cmp rbx, -1
   229 000014EB 742E                <1>     je .error
   230 000014ED 66894B01            <1>     mov word [rbx + stringBlock.wBlockSize], cx    ;Save length of name
   231 000014F1 668143010401        <1>     add word [rbx + stringBlock.wBlockSize], stringBlock_size ;Add full block size
   232 000014F7 C6430302            <1>     mov byte [rbx + stringBlock.bBlockType], datBlockType  ;Block type
   233 000014FB 488DBB04010000      <1>     lea rdi, qword [rbx + stringBlock.sVarName]
   234 00001502 E833000000          <1>     call strcpy ;Copy the string name into block buffer
   235                              <1> .strcopy:
   236 00001507 488D7B04            <1>     lea rdi, qword [rbx + stringBlock.string]   ;point to string space
   237 0000150B 4889D6              <1>     mov rsi, rdx    ;Point rsi to the string itself
   238 0000150E E814000000          <1>     call terminatedstrcpy
   239 00001513 30C0                <1>     xor al, al
   240 00001515 AA                  <1>     stosb   ;Store the null delimiter
   241 00001516 5B                  <1>     pop rbx
   242 00001517 58                  <1>     pop rax
   243 00001518 5E                  <1>     pop rsi
   244 00001519 5F                  <1>     pop rdi
   245 0000151A C3                  <1>     ret
   246                              <1> .error:
   247 0000151B 488D2DF6000000      <1>     lea rbp, noMem
   248 00001522 E9B0EBFFFF          <1>     jmp criticalError
   249                              <1> ;------------------------------------------------:
   250                              <1> ;  The below are misc memory related functions   :
   251                              <1> ;------------------------------------------------:
   252                              <1> terminatedstrcpy:
   253                              <1> ;rdi = Destination String
   254                              <1> ;rsi = Source String
   255                              <1> ;Copy a terminated string
   256 00001527 50                  <1>     push rax
   257                              <1> .copy:
   258 00001528 AC                  <1>     lodsb   ;Get char in al and inc rsi
   259 00001529 3C00                <1>     cmp al, 0
   260 0000152B 740B                <1>     je .exit
   261 0000152D 3C3A                <1>     cmp al, ":"
   262 0000152F 7407                <1>     je .exit
   263 00001531 3C22                <1>     cmp al, 22h ;Speechmark
   264 00001533 7403                <1>     je .exit
   265 00001535 AA                  <1>     stosb   ;Save char from al and inc rdi
   266 00001536 EBF0                <1>     jmp short .copy 
   267                              <1> .exit:
   268 00001538 58                  <1>     pop rax
   269 00001539 C3                  <1>     ret
   270                              <1> strcpy:
   271                              <1> ;rdi = Destination string
   272                              <1> ;rsi = Source string
   273                              <1> ;rcx = Number of Chars to copy
   274 0000153A 57                  <1>     push rdi
   275 0000153B 56                  <1>     push rsi
   276 0000153C 51                  <1>     push rcx
   277 0000153D F3A4                <1>     rep movsb
   278 0000153F 59                  <1>     pop rcx
   279 00001540 5E                  <1>     pop rsi
   280 00001541 5F                  <1>     pop rdi
   281 00001542 C3                  <1>     ret
   282                              <1> strlen:
   283                              <1> ;Input: rsi = String start
   284                              <1> ;Output: rsi = String start
   285                              <1> ;        ecx = String length, inclusive of NULL char
   286 00001543 50                  <1>     push rax
   287 00001544 56                  <1>     push rsi
   288 00001545 31C9                <1>     xor ecx, ecx    ;Clear counter
   289                              <1> .search:
   290 00001547 AC                  <1>     lodsb
   291 00001548 FFC1                <1>     inc ecx
   292 0000154A 84C0                <1>     test al, al ;Is this a null char?
   293 0000154C 75F9                <1>     jnz .search ;Null not found
   294                              <1> .exit:
   295 0000154E 5E                  <1>     pop rsi
   296 0000154F 58                  <1>     pop rax
   297 00001550 C3                  <1>     ret
   298                              <1> 
   299                              <1> memoryDetection:
   300 00001551 B820E80000          <1>     mov eax, 0E820h
   301 00001556 CD35                <1>     int 35h     ;rax = ptr to start, rsi = ptr to data table, each entry 24 bytes
   302 00001558 EB07                <1>     jmp short .fsa1
   303                              <1> .findStartAddr:
   304 0000155A 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   305                              <1> .fsa1:
   306 00001561 6685C9              <1>     test cx, cx
   307 00001564 742C                <1>     jz .worstCase
   308 00001566 66FFC9              <1>     dec cx
   309 00001569 488B1E              <1>     mov rbx, qword [rsi]    ;Get the address entry into rbx
   310 0000156C 4839C3              <1>     cmp rbx, rax    
   311 0000156F 75E9                <1>     jne .findStartAddr
   312 00001571 488B4608            <1>     mov rax, qword [rsi + 8] ;Get the number of bytes saved into rax
   313                              <1> 
   314 00001575 488D15(00000000)    <1>     lea rdx, section.programArea.vstart
   315 0000157C 4829DA              <1>     sub rdx, rbx    ;Get the size of the interpreter and internal data area
   316 0000157F 4829D0              <1>     sub rax, rdx    ;Remove the number of bytes reserved to the interpreter
   317 00001582 E815FDFFFF          <1>     call printdecimalword
   318 00001587 4801C3              <1>     add rbx, rax    ;Add number of bytes to start address
   319 0000158A 48891D(D00E0000)    <1>     mov qword [maxMemAddr], rbx ;Save this address
   320                              <1> .exit:
   321 00001591 C3                  <1>     ret
   322                              <1> .worstCase:
   323                              <1> ;Assume 2Mb MAX memory, rax has base address
   324 00001592 48BB00002000000000- <1>     mov rbx, 200000h    ;2Mb value
   324 0000159B 00                  <1>
   325 0000159C 4829C3              <1>     sub rbx, rax
   326 0000159F 4889D8              <1>     mov rax, rbx    ;Get value in rax
   327 000015A2 E8F5FCFFFF          <1>     call printdecimalword
   328 000015A7 48C705(D00E0000)00- <1>     mov qword [maxMemAddr], 200000h
   328 000015AF 002000              <1>
   329 000015B2 C3                  <1>     ret
   330                              <1> 
    18                                  %include "BASICDAT.ASM"
    19 000015B3 4F6B0A0D00          <1> prompt  db "Ok",0Ah,0Dh,0
    20 000015B8 53435220494E544241- <1> mainmsg db "SCR INTBASIC/64 v0.1",0Ah,0Dh,0
    20 000015C1 5349432F3634207630- <1>
    20 000015CA 2E310A0D00          <1>
    21 000015CF 204279746573206672- <1> bytemsg db " Bytes free",0Ah,0Dh,0
    21 000015D8 65650A0D00          <1>
    22 000015DD 0A0D00              <1> crlf    db 0Ah,0Dh,0
    23 000015E0 4572726F720A0D00    <1> errmsg  db "Error",0Ah,0Dh,0
    24 000015E8 303132333435363738- <1> numbers db "0123456789"
    24 000015F1 39                  <1>
    25                              <1> ;startVarChars db "ABCDEFGHIJKLMNOPQRSTUVWXYZ" ;Valid starting chars for a var name
    26                              <1> ;numStartVarChars equ $ - startVarChars
    27 000015F2 414243444546474849- <1> varChrs db "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789%$" ;Valid inner chars for var name
    27 000015FB 4A4B4C4D4E4F505152- <1>
    27 00001604 535455565758595A30- <1>
    27 0000160D 313233343536373839- <1>
    27 00001616 2524                <1>
    28                              <1> numVarChars equ $ - varChrs
    29                              <1> ;% => Integer variable (8 bytes)
    30                              <1> ;! => Single-Precision, Unused and ignored
    31                              <1> ;# => Double-Precision, Unused and ignored
    32                              <1> ;$ => String variable
    33                              <1> 
    34                              <1> ;Error Messages
    35 00001618 4F7574206F66206D65- <1> noMem   db "Out of memory",0Ah,0Dh,0
    35 00001621 6D6F72790A0D00      <1>
    36 00001628 53796E746178206572- <1> syntax  db "Syntax error",0Ah,0Dh,0
    36 00001631 726F720A0D00        <1>
    37 00001637 54797065206D69736D- <1> typeError   db "Type mismatch",0Ah,0Dh,0
    37 00001640 617463680A0D00      <1>
    38 00001647 556E646566696E6564- <1> lineNoXist  db "Undefined line number",0Ah,0Dh,0
    38 00001650 206C696E65206E756D- <1>
    38 00001659 6265720A0D00        <1>
    39 0000165F 427265616B20696E20- <1> breakmsg db "Break in ",0
    39 00001668 00                  <1>
    40 00001669 537461636B206F7665- <1> stkOvflw db "Stack overflow",0Ah,0Dh,0
    40 00001672 72666C6F770A0D00    <1>
    41                              <1> 
    42 0000167A 5748494C4520776974- <1> noWend   db "WHILE without WEND", 0Ah, 0Dh, 0
    42 00001683 686F75742057454E44- <1>
    42 0000168C 0A0D00              <1>
    43 0000168F 57454E442077697468- <1> noWhile  db "WEND without WHILE", 0Ah, 0Dh, 0
    43 00001698 6F7574205748494C45- <1>
    43 000016A1 0A0D00              <1>
    44 000016A4 4E4558542077697468- <1> noFor    db "NEXT without FOR", 0Ah, 0Dh, 0
    44 000016AD 6F757420464F520A0D- <1>
    44 000016B6 00                  <1>
    45 000016B7 464F5220776974686F- <1> noNext   db "FOR without NEXT", 0Ah, 0Dh, 0
    45 000016C0 7574204E4558540A0D- <1>
    45 000016C9 00                  <1>
    46 000016CA 52455455524E207769- <1> noReturn db "RETURN without GOSUB", 0Ah, 0Dh, 0
    46 000016D3 74686F757420474F53- <1>
    46 000016DC 55420A0D00          <1>
    47 000016E1 556E7072696E746162- <1> uknowner db "Unprintable error", 0Ah, 0Dh, 0
    47 000016EA 6C65206572726F720A- <1>
    47 000016F3 0D00                <1>
    48                              <1> 
    49 000016F5 4469766973696F6E20- <1> divZer   db "Division by zero", 0Ah, 0Dh, 0
    49 000016FE 6279207A65726F0A0D- <1>
    49 00001707 00                  <1>
    19                                  Segment programArea follows=resSeg align=1 vfollows=resSeg valign=1
    20                                  ENDOFPROGRAM:

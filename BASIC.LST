     1                                      [map all BASIC.MAP]
     2                                      [DEFAULT REL]
     3                                      BITS 64
     4                                  %include "MEM.INC"
     5                              <1> 
     6                              <1> progLineBlockType   equ 0   ;Program Line
     7                              <1> varBlockType        equ 1   ;Variable block
     8                              <1> datBlockType        equ 2   ;Data block (i.e. a string block)
     9                              <1> 
    10                              <1> notLastMemBlock equ "t" ;Used for blocks that are not the last block
    11                              <1> lastMemBlock    equ "r" ;Used by the last block to indicate end of chain
    12                              <1> 
    13                              <1> %macro memBlockM 0 ;Memory block Macro
    14                              <1>     .bSignature resb 1      ;Valid Signature
    15                              <1>     .wBlockSize resw 1      ;Total block size in bytes
    16                              <1>     .bBlockType resb 1      ;Block type, program line, variable or string
    17                              <1> %endmacro
    18                              <1> 
    19                              <1> struc memBlock
    20                              <1>     memBlockM
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    21                              <1> endstruc
    22                              <1> 
    23                              <1> struc progLineBlock
    24                              <1>     memBlockM               ;Common memory block header
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    25 00000004 ????                <1>     .wLineNum   resw 1      ;Line number, up to 65535
    26 00000006 ????????????????    <1>     .qPtr       resq 1      ;Pointer to the next line, or -1 if last line
    27 0000000E <res 100h>          <1>     .sLine      resb maxLineLen  ;Maximum length 255, keep null char but 
    28                              <1>     ;                             NOT LINE NUMBER OR PRECEEDING SPACES
    29                              <1> endstruc
    30                              <1> 
    31                              <1> struc varBlock
    32                              <1>     memBlockM               ;Common memory block header
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    33 00000004 ????????????????    <1>     .qValue     resq 1      ;One value qword
    34                              <1>     .sVarName:              ;Up to 40 chars for the var name
    35                              <1> endstruc
    36                              <1> 
    37                              <1> struc stringBlock
    38                              <1>     memBlockM
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    39 00000004 <res 100h>          <1>     .string     resb maxLineLen    ;Strings allocate 256 chars
    40                              <1>     .sVarName:              ;Up to 40 chars for the var name
    41                              <1> endstruc
    42                              <1> 
    43                              <1> ;Variable equates
    44                              <1> intEquate  equ 0
    45                              <1> strEquate  equ 1
    46                              <1> 
    47                              <1> ;Status Equates
    48                              <1> breakBit    equ 1    ;Set means on
    49                              <1> traceBit    equ 2    ;Set means TRON, Clear means TROFF
    50                              <1> indirectBit equ 4    ;Set means indirect/program mode, Clear means direct/line mode
    51                              <1> ctrlFlow    equ 8    ;Set means do not find other expression on current line
     5                                  Segment .text align=1
     6                                  %include "RELOC.ASM"
     7 00000000 55AA                <1>     dw 0AA55h 
     8                              <1> ;First verify I have Enough RAM for my program and then run
     9 00000002 B801E80000          <1>     mov eax, 0E801h ;Get low memory count in ax
    10 00000007 CD35                <1>     int 35h
    11 00000009 663D0008            <1>     cmp ax, 200000h/400h ;Divide 2Mb into 1Kb chunks.
    12 0000000D 722A                <1>     jb bad
    13 0000000F B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    14 00000014 0F32                <1>     rdmsr
    15 00000016 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    16 00000018 48C1E720            <1>     shl rdi, 20h        ;Shift high
    17 0000001C 89C7                <1>     mov edi, eax        ;Get the low dword in
    18 0000001E 4889F8              <1>     mov rax, rdi
    19 00000021 488D35(00000000)    <1>     lea rsi, section.resSeg.start
    20 00000028 4881C7[F60E0000]    <1>     add rdi, bssLen
    21 0000002F B900100000          <1>     mov ecx, 1000h
    22 00000034 F348A5              <1>     rep movsq
    23 00000037 FFE0                <1>     jmp qword rax
    24                              <1> bad:
    25 00000039 488D2D0D000000      <1>     lea rbp, badmsg
    26 00000040 B804130000          <1>     mov eax, 1304h
    27 00000045 CD30                <1>     int 30h
    28 00000047 30E4                <1>     xor ah, ah
    29 00000049 CD36                <1>     int 36h
    30 0000004B CD38                <1>     int 38h
    31 0000004D 4E6F7420456E6F7567- <1> badmsg: db "Not Enough Memory. Press any key to enter SYSDEBUG...",0
    31 00000056 68204D656D6F72792E- <1>
    31 0000005F 20507265737320616E- <1>
    31 00000068 79206B657920746F20- <1>
    31 00000071 656E74657220535953- <1>
    31 0000007A 44454255472E2E2E00  <1>
     7                                  Segment dSeg nobits align=1 start=0
     8                                  %include "BSS.ASM"
     9 00000000 <res 50h>           <1> oflowbuff   resq 10        ;10 Qwords of overflow buffer
    10                              <1> ;rsp should never get here when operating in a program.
    11                              <1> ;Only acceptable to be used when processing a line
    12 00000050 <res D40h>          <1> stack       resq 200h - 8 - 10*8  ;Save total 4Kb stack space
    13 00000D90 ????????????????    <1> stacktop    resq 1
    14                              <1> 
    15                              <1> maxLineLen  equ 256
    16 00000D98 <res 100h>          <1> inString    resb maxLineLen         ;256 character input string
    17                              <1> 
    18                              <1> ;This string is used for printing long numbers and saving
    19                              <1> ; the variable names for string comparisons
    20                              <1> digitStringLen  equ 48
    21 00000E98 <res 30h>           <1> digitString resb digitStringLen     
    22                              <1> 
    23 00000EC8 ????????????????    <1> minMemAddr  resq 1  ;Pointer from where to start allocating memory blocks
    24 00000ED0 ????????????????    <1> maxMemAddr  resq 1  ;Pointer to the byte past which we cannot allocate anything
    25                              <1> ;==============================================================================
    26                              <1> ;This is the SDA for each program and must be included in the program area
    27                              <1> ; once we add the ability to save the program to disk.
    28                              <1> ;==============================================================================
    29                              <1> 
    30                              <1> ;void* mcbChain, lastBlock, firstLinPtr = -1 => New program, empty entries
    31                              <1> 
    32 00000ED8 ??                  <1> strLen      resb 1  ;Counter for number of chars entered in string
    33 00000ED9 ??                  <1> stateByte   resb 1  ;Bit 0 => Break Set, stop processing after end of current line
    34 00000EDA ????????????????    <1> mcbChain    resq 1  ;Pointer to the start of the chain
    35 00000EE2 ????????????????    <1> lastBlock   resq 1  ;Pointer to the last block
    36 00000EEA ????????????????    <1> firstLinPtr resq 1  ;Pointer to the programs' first line 
    37 00000EF2 ????                <1> firstLinNum resw 1  ;Line number of the first line of the program
    38 00000EF4 ????                <1> currentLine resw 1  ;Currently being executed line number
    39                              <1> 
    40                              <1> bssLen: ;Needed to compute the resident portion load location
     9                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1
    10                                  %include "MAIN.ASM"
    11                              <1> start:
    12 00000000 B801C50000          <1>     mov eax, 0C501h
    13 00000005 CD35                <1>     int 35h         ;Connect the debugger
    14 00000007 E89A010000          <1>     call ttyClear   ;Clear the teletype
    15                              <1>     ;Set the CtrlBreak Handler
    16 0000000C 488D3DC0000000      <1>     lea rdi, ctrlBreakHandler
    17 00000013 B03B                <1>     mov al, 3Bh
    18 00000015 E8C2000000          <1>     call setHandler
    19                              <1> 
    20                              <1>     ;Memory stuff
    21 0000001A 488D2DC60C0000      <1>     lea rbp, mainmsg
    22 00000021 E873010000          <1>     call ttyOutString
    23 00000026 E8550C0000          <1>     call memoryDetection
    24 0000002B 488D2DC90C0000      <1>     lea rbp, bytemsg
    25 00000032 E862010000          <1>     call ttyOutString
    26 00000037 E872060000          <1>     call newProgram         ;Use this to reset program pointers
    27                              <1> mainLoop:
    28 0000003C FC                  <1>     cld                 ;Set default string op direction
    29 0000003D 488D25(900D0000)    <1>     lea rsp, stacktop    ;Reinitialize stack pointer
    30 00000044 488D05F1FFFFFF      <1>     lea rax, mainLoop
    31 0000004B 8025(D90E0000)FE    <1>     and byte [stateByte], 0FEh  ;Clear the break bit
    32 00000052 50                  <1>     push rax    ;Save address on stack
    33 00000053 488D2D880C0000      <1>     lea rbp, prompt
    34 0000005A E83A010000          <1>     call ttyOutString
    35                              <1> .ml0:
    36                              <1> ;This section will execute an input line if it is an interactive expression
    37                              <1> ; or store it in the program if it has a line number.
    38                              <1> ;It will keep accepting lines until a line is entered without a line number
    39 0000005F E898000000          <1>     call getLineInput
    40 00000064 E857090000          <1>     call decimalToHex   ;Check to see if we have a valid line number
    41 00000069 6685C0              <1>     test ax, ax
    42 0000006C 750C                <1>     jnz .saveLine
    43                              <1> ;Here we execute the line, move rsi to the start of the line
    44 0000006E 488D35(980D0000)    <1>     lea rsi, inString
    45 00000075 E9A7010000          <1>     jmp runLine
    46                              <1> .saveLine:
    47                              <1>     ;ax has the line number
    48 0000007A 6689C2              <1>     mov dx, ax
    49 0000007D E88F0A0000          <1>     call searchForProgramLine
    50 00000082 4881FBFFFFFFFF      <1>     cmp rbx, -1
    51 00000089 751D                <1>     jne .commonProc ;If not equal, line must exist, continue
    52 0000008B E8A3020000          <1>     call spaceSkip  ;Skip all the prceeding spaces
    53 00000090 803E00              <1>     cmp byte [rsi], 0  ;Is the first non space char the end of the string?
    54 00000093 742D                <1>     je .lineDoesntExist
    55                              <1>     ;So we have a new line that isn't empty, allocate a new block for this line
    56 00000095 E8A7090000          <1>     call allocateBlock  ;Return a default block in rbx
    57 0000009A C6430300            <1>     mov byte [rbx + progLineBlock.bBlockType], progLineBlockType
    58 0000009E 66894304            <1>     mov word [rbx + progLineBlock.wLineNum], ax
    59 000000A2 66C743010E01        <1>     mov word [rbx + progLineBlock.wBlockSize], progLineBlock_size
    60                              <1> .commonProc:
    61                              <1>     ;If the line already exists, simply override the stored string
    62                              <1>     ;rbx has a pointer to the block
    63 000000A8 E8C50B0000          <1>     call strlen ;Get the string length
    64 000000AD 488D7B0E            <1>     lea rdi, qword [rbx + progLineBlock.sLine]  ;Get address here
    65 000000B1 E8B30B0000          <1>     call strcpy ;Copy the program string to the program block
    66 000000B6 56                  <1>     push rsi
    67 000000B7 4889DE              <1>     mov rsi, rbx    ;Move the block into rsi
    68 000000BA E8760A0000          <1>     call insertProgramLine
    69 000000BF 5E                  <1>     pop rsi
    70 000000C0 EB9D                <1>     jmp short .ml0
    71                              <1> .lineDoesntExist:
    72 000000C2 488D2DAA0C0000      <1>     lea rbp, lineNoXist
    73                              <1> ;For any error, syntax or otherwise, come here
    74                              <1> criticalError:
    75                              <1> ;Called with rbp pointing at error message
    76 000000C9 E8CB000000          <1>     call ttyOutString
    77 000000CE E969FFFFFF          <1>     jmp mainLoop    ;Trash input line, restart line input
    78                              <1> 
    79                              <1> ctrlBreakHandler:
    80 000000D3 800D(D90E0000)01    <1>     or byte [stateByte], 1  ;Set the byte
    81 000000DA 48CF                <1>     iretq
    82                              <1> setHandler:
    83                              <1> ;Called with:
    84                              <1> ;   rdi = Pointer to interrupt handler
    85                              <1> ;   al = Interrupt number
    86 000000DC 89C5                <1>     mov ebp, eax    ;al has interrupt number which we need to save
    87 000000DE 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
    88                              <1> ;First call to get default BIOS segement selector and attribute word
    89 000000E4 88C3                <1>     mov bl, al  ;Set interrupt number 
    90 000000E6 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
    91 000000EB CD35                <1>     int 35h
    92 000000ED 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
    93 000000EF 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
    94                              <1> ;dx preserves the attribute word
    95 000000F1 4889FB              <1>     mov rbx, rdi  ;Pointer passed in rdi
    96 000000F4 B808F00000          <1>     mov eax, 0F008h ;Set descriptor
    97 000000F9 CD35                <1>     int 35h
    98                              <1>     
    99 000000FB C3                  <1>     ret
    11                                  %include "TTY.ASM"
    12                              <1> getLineInput:
    13                              <1>     ;Sets rsi to the inputstring
    14 000000FC 30E4                <1>     xor ah, ah
    15 000000FE 8825(D80E0000)      <1>     mov byte [strLen], ah   ;Zero the char counter
    16 00000104 488D3D(980D0000)    <1>     lea rdi, inString   ;Move to start of line
    17 0000010B 4889FE              <1>     mov rsi, rdi
    18 0000010E 57                  <1>     push rdi
    19 0000010F B900010000          <1>     mov ecx, maxLineLen
    20 00000114 30C0                <1>     xor al, al    ;Ensure the input line is sanitised
    21 00000116 F3AA                <1>     rep stosb
    22 00000118 5F                  <1>     pop rdi
    23                              <1> .getChar:
    24 00000119 E883000000          <1>     call ttyIn
    25 0000011E 3C0D                <1>     cmp al, 0Dh ;Line Feed
    26 00000120 7456                <1>     je .gliExit
    27 00000122 3C08                <1>     cmp al, 08h ;Bspace
    28 00000124 740F                <1>     je .glibspace
    29 00000126 803D(D80E0000)FE    <1>     cmp byte [strLen], -2   ;If at max length (255 chars), simply beep and wait for either bspace or enter
    30 0000012D 7459                <1>     je .gliFull 
    31 0000012F 84C0                <1>     test al, al
    32 00000131 7443                <1>     je .gliExtendedChar
    33 00000133 EB29                <1>     jmp short .gliCheckCase
    34                              <1> .glibspace:
    35 00000135 F605(D80E0000)FF    <1>     test byte [strLen], -1  ;This will only be zero if strLen=0
    36 0000013C 74DB                <1>     jz .getChar
    37 0000013E 48FFCF              <1>     dec rdi ;Go back by one position in the input line
    38 00000141 FE0D(D80E0000)      <1>     dec byte [strLen]
    39 00000147 B008                <1>     mov al, 08h
    40 00000149 E846000000          <1>     call ttyOutChar
    41 0000014E B020                <1>     mov al, 20h  
    42 00000150 E83F000000          <1>     call ttyOutChar
    43 00000155 B008                <1>     mov al, 08h
    44 00000157 E838000000          <1>     call ttyOutChar
    45 0000015C EBBB                <1>     jmp short .getChar
    46                              <1> .gliCheckCase:
    47                              <1>     ;al has char
    48 0000015E E831000000          <1>     call ttyOutChar ;Echo the char as is, but store it uppercase
    49 00000163 3C61                <1>     cmp al, "a"
    50 00000165 7206                <1>     jb .gliccStore
    51 00000167 3C7A                <1>     cmp al, "z"
    52 00000169 7702                <1>     ja .gliccStore
    53 0000016B 2C20                <1>     sub al, 20h
    54                              <1> .gliccStore:
    55 0000016D AA                  <1>     stosb   ;Increment the pointer, add char to buffer
    56 0000016E FE05(D80E0000)      <1>     inc byte [strLen]   ;Inc char count
    57 00000174 EBA3                <1>     jmp short .getChar
    58                              <1> .gliExtendedChar:
    59                              <1>     ;Currently, extended chars do nothing, 
    60                              <1>     ; eventually add F1-F10 functionality
    61                              <1>     ; and arrow key support
    62 00000176 EBA1                <1>     jmp short .getChar
    63                              <1> .gliExit:
    64 00000178 488D2D8A0B0000      <1>     lea rbp, crlf
    65 0000017F E815000000          <1>     call ttyOutString
    66 00000184 C60700              <1>     mov byte [rdi], 0   ;Null terminate string here
    67 00000187 C3                  <1>     ret
    68                              <1> .gliFull:
    69 00000188 B007                <1>     mov al, 07h
    70 0000018A E805000000          <1>     call ttyOutChar
    71 0000018F E985FFFFFF          <1>     jmp .getChar
    72                              <1> 
    73                              <1> ttyOutChar:
    74 00000194 B40E                <1>     mov ah, 0Eh
    75 00000196 CD30                <1>     int 30h
    76 00000198 C3                  <1>     ret
    77                              <1> ttyOutString:
    78                              <1> ;Print 0 terminated strings
    79 00000199 B804130000          <1>     mov eax, 1304h
    80 0000019E CD30                <1>     int 30h
    81 000001A0 C3                  <1>     ret
    82                              <1> ttyIn:
    83 000001A1 30E4                <1>     xor ah, ah
    84 000001A3 CD36                <1>     int 36h
    85 000001A5 C3                  <1>     ret
    86                              <1> ttyClear:
    87 000001A6 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
    88 000001AB CD30                <1>     int 30h
    89 000001AD B402                <1>     mov ah, 02h
    90 000001AF 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
    91 000001B1 88D7                <1>     mov bh, dl      ;Set cursor for page 0
    92 000001B3 CD30                <1>     int 30h
    93 000001B5 B707                <1>     mov bh, 07h     ;Grey/Black attribs
    94 000001B7 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
    95 000001BC CD30                <1>     int 30h
    96 000001BE C3                  <1>     ret
    12                                  %include "PROCESS.ASM"
    13                              <1> keywordParser:
    14                              <1> ;rsi must point to the start of the portion of the line to execute
    15 000001BF E86F010000          <1>     call spaceSkip  ;Skip any leading spaces
    16 000001C4 803E00              <1>     cmp byte [rsi], 0   ;Null terminated line, empty line?
    17 000001C7 7444                <1>     je .exitEmpty
    18                              <1>     ;rsi now points to function
    19 000001C9 488D3D59030000      <1>     lea rdi, funTbl     ;Point rdi to the function table
    20                              <1> .functionFinderLoop:
    21 000001D0 0FB60F              <1>     movzx ecx, byte [rdi]  ;Get the string length  
    22 000001D3 80F9FF              <1>     cmp cl, -1  ;-1 is the end of table marker, either Var assignment or error
    23 000001D6 7440                <1>     je .notLetVarAssignment ;No key word found, consider variable assignment
    24 000001D8 56                  <1>     push rsi    ;Save ptr to start of string on stack 
    25 000001D9 57                  <1>     push rdi
    26 000001DA 48FFC7              <1>     inc rdi             ;Goto first char in function name
    27 000001DD F3A6                <1>     repe cmpsb
    28 000001DF 5F                  <1>     pop rdi
    29 000001E0 5E                  <1>     pop rsi     ;Return ptr to start of string pointer from stack
    30 000001E1 84C9                <1>     test cl, cl ;Did all the chars match?
    31 000001E3 740F                <1>     jz .functionFound
    32 000001E5 480FB607            <1>     movzx rax, byte [rdi]    ;Skip unnecessary function pointer
    33 000001E9 480502000000        <1>     add rax, 2      ;Add 2 to skip relative pointer
    34 000001EF 4801C7              <1>     add rdi, rax
    35 000001F2 EBDC                <1>     jmp short .functionFinderLoop
    36                              <1> .functionFound:
    37                              <1>     ;Function found! Execute!
    38                              <1>     ;rsi points to start of expression to evaluate for function
    39                              <1>     ;rdi points to table entry
    40 000001F4 488D1D2E030000      <1>     lea rbx, funTbl         ;Get table address
    41 000001FB 480FB617            <1>     movzx rdx, byte [rdi]   ;Get pascal string length
    42 000001FF 0FB70C17            <1>     movzx ecx, word [rdi + rdx] ;Add pascal strlen to table entry and get word offset
    43 00000203 4801CB              <1>     add rbx, rcx    ;Add word offset to table base
    44 00000206 48FFCA              <1>     dec rdx         ;Get number of chars in function name
    45 00000209 4801D6              <1>     add rsi, rdx    ;rsi points to first char AFTER function name
    46                              <1> .exit:
    47 0000020C C3                  <1>     ret 
    48                              <1> .exitEmpty:
    49 0000020D 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    49 00000216 FF                  <1>
    50 00000217 C3                  <1>     ret
    51                              <1>     ;rbx has the function pointer, 
    52                              <1>     ;rsi points to the first char after the keyword (e.g. PRINT, INPUT etc)
    53                              <1> .notLetVarAssignment:
    54 00000218 488D1D11040000      <1>     lea rbx, variableAssignment
    55 0000021F EBEB                <1>     jmp short .exit  ;Now call the function as if it was found from the table
    56                              <1> 
    57                              <1> runLine:
    58                              <1> ;New lines begin here, rsi point to the start of the program line
    59 00000221 F605(D90E0000)02    <1>     test byte [stateByte], traceBit ;Are we TRON?
    60 00000228 0F85B0000000        <1>     jnz .tron
    61                              <1> .stringPortionProcess:
    62                              <1>     ;rsi points to string portion to begin processing
    63 0000022E E88CFFFFFF          <1>     call keywordParser
    64                              <1>     ;rbx has the function pointer, if rbx is -1, line was empty
    65                              <1>     ;rsi points to the first char after the keyword (e.g. PRINT, INPUT etc)
    66 00000233 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If the line is empty, rbx has a -1 so skip the line
    67 0000023A 7437                <1>     je .gotoNextLine
    68 0000023C F605(D90E0000)01    <1>     test byte [stateByte], breakBit ;Is break set before exec?
    69 00000243 0F85C1000000        <1>     jnz .break
    70                              <1> ;EXEC   LINE    PORTION
    71                              <1>     ;xchg bx, bx
    72 00000249 FFD3                <1>     call rbx        ;Call the function pointer in rbx
    73                              <1>     ;rsi should be pointing to the next portion of the line or the end of the line
    74                              <1> ;EXEC COMPLETE
    75 0000024B F605(D90E0000)01    <1>     test byte [stateByte], breakBit ;Is break set after exec?
    76 00000252 0F85B2000000        <1>     jnz .break
    77 00000258 F605(D90E0000)04    <1>     test byte [stateByte], indirectBit
    78 0000025F 7448                <1>     jz .exit    ;IF in direct mode, just return to command line
    79 00000261 F605(D90E0000)08    <1>     test byte [stateByte], ctrlFlow ;Ctrl Flow =>ignore other expressions temporarily
    80 00000268 7540                <1>     jnz .ctrlFlowHandler
    81                              <1> 
    82 0000026A E8B0020000          <1>     call findOtherExpressionsOnLine ;See if there are any other expressions
    83 0000026F 84C0                <1>     test al, al ;If al is null, no more expressions on the line
    84                              <1>     ;If not null, keep executing expressions on same line
    85                              <1>     ;rsi points to first char after :
    86 00000271 75BB                <1>     jnz .stringPortionProcess ;If a : found, keep processing
    87                              <1> .gotoNextLine:
    88 00000273 668B15(F40E0000)    <1>     mov dx, word [currentLine]  ;Get in rbx the ptr to current line
    89 0000027A E892080000          <1>     call searchForProgramLine
    90 0000027F 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Does the line not exist somehow?
    91 00000286 7421                <1>     je .exit
    92 00000288 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Walk chain
    93 0000028C 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Are we at the end of the chain?
    94 00000293 7414                <1>     je .exit
    95 00000295 668B5304            <1>     mov dx, word [rbx + progLineBlock.wLineNum] ;Save the new line number
    96 00000299 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Point rsi to the start of the next line
    97                              <1> .gotoNextLineCommon:
    98 0000029D 668915(F40E0000)    <1>     mov word [currentLine], dx
    99 000002A4 E978FFFFFF          <1>     jmp runLine
   100                              <1> .exit:
   101 000002A9 C3                  <1>     ret
   102                              <1> .ctrlFlowHandler:
   103                              <1>     ;The stack pointer should be pointing now at the block
   104                              <1>     ; control flow data block. 
   105                              <1>     ;The functions which return with this bit set, also have placed
   106                              <1>     ; the next line number in dx, offset into line in byte three of edx
   107 000002AA 8025(D90E0000)F7    <1>     and byte [stateByte], ~ctrlFlow ;First clear the ctrlflow bit
   108 000002B1 E85B080000          <1>     call searchForProgramLine   ;Get pointer to line
   109 000002B6 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Does the line not exist?
   110 000002BD 74DE                <1>     je .gotoNextLineCommon
   111 000002BF 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Point rsi to the start of the next line
   112 000002C3 89D0                <1>     mov eax, edx    ;Isolate the offset into the line
   113 000002C5 C1E810              <1>     shr eax, 10h    ;Get byte three into byte 1
   114 000002C8 25FF000000          <1>     and eax, 0FFh   ;Save only the bottom byte
   115 000002CD 4801C6              <1>     add rsi, rax    ;Add the offset into the string to rsi
   116 000002D0 EBCB                <1>     jmp short .gotoNextLineCommon
   117                              <1> .badLineNumber:
   118 000002D2 488D2D9A0A0000      <1>     lea rbp, lineNoXist
   119 000002D9 E9EBFDFFFF          <1>     jmp criticalError
   120                              <1> 
   121                              <1> .tron:
   122                              <1> ;Print the line number about to be executed
   123 000002DE F605(D90E0000)04    <1>     test byte [stateByte], indirectBit  ;Tron should only work in indirect mode
   124 000002E5 0F8443FFFFFF        <1>     jz .stringPortionProcess
   125 000002EB B05B                <1>     mov al, "["
   126 000002ED E8A2FEFFFF          <1>     call ttyOutChar
   127 000002F2 0FB705(F40E0000)    <1>     movzx eax, word [currentLine]
   128 000002F9 E8EA060000          <1>     call printdecimalword
   129 000002FE B05D                <1>     mov al, "]"
   130 00000300 E88FFEFFFF          <1>     call ttyOutChar
   131 00000305 E924FFFFFF          <1>     jmp .stringPortionProcess
   132                              <1> .break:
   133 0000030A 488D2D7A0A0000      <1>     lea rbp, breakmsg
   134 00000311 E883FEFFFF          <1>     call ttyOutString
   135 00000316 0FB705(F40E0000)    <1>     movzx eax, word [currentLine]
   136 0000031D E8C6060000          <1>     call printdecimalword
   137 00000322 488D2DE0090000      <1>     lea rbp, crlf
   138 00000329 E86BFEFFFF          <1>     call ttyOutString
   139 0000032E E909FDFFFF          <1>     jmp mainLoop    ;Exit processing
    13                                  %include "PARSE.ASM"
    14                              <1> ;Main Parsing Routines go here
    15                              <1> 
    16                              <1> spaceSkip:
    17                              <1> ;Allows us to skip spaces that might have been placed for
    18                              <1> ; ease of reading by the user without modifying any registers
    19                              <1> ; except for rsi.
    20                              <1> ;Input: rsi = Pointer to string
    21                              <1> ;Output: rsi = First non space character encountered
    22 00000333 803E20              <1>     cmp byte [rsi], " "
    23 00000336 7505                <1>     jne .exit
    24 00000338 48FFC6              <1>     inc rsi
    25 0000033B EBF6                <1>     jmp short spaceSkip
    26                              <1> .exit:
    27 0000033D C3                  <1>     ret
    28                              <1> 
    29                              <1> getVarNameLength:
    30                              <1> ;Called pointing to the buffer with the var name in it
    31                              <1> ;Input: rsi = Start of var name
    32                              <1> ;Output: ecx = Length of varname
    33 0000033E 50                  <1>     push rax
    34 0000033F 56                  <1>     push rsi
    35 00000340 57                  <1>     push rdi
    36 00000341 53                  <1>     push rbx
    37 00000342 52                  <1>     push rdx
    38 00000343 31D2                <1>     xor edx, edx    ;Clear counter of chars
    39 00000345 488D1DD2090000      <1>     lea rbx, varChrs    ;Get the list of valid variable name chars
    40                              <1> .search:
    41 0000034C 4889DF              <1>     mov rdi, rbx    ;Save pointer in rbx
    42 0000034F AC                  <1>     lodsb       ;Get the first char into al
    43 00000350 B926000000          <1>     mov ecx, numVarChars
    44 00000355 F2AE                <1>     repne scasb       ;Look for char in the valid chars list
    45 00000357 750A                <1>     jne .exit   ;Char not found, drop it
    46 00000359 FFC2                <1>     inc edx     ;Add one to number of chars found
    47 0000035B 81FA28000000        <1>     cmp edx, 40 ;At position for char 40?
    48 00000361 72E9                <1>     jb .search  ;Whilst below, keep going
    49                              <1> .exit:
    50 00000363 89D1                <1>     mov ecx, edx
    51 00000365 5A                  <1>     pop rdx
    52 00000366 5B                  <1>     pop rbx
    53 00000367 5F                  <1>     pop rdi
    54 00000368 5E                  <1>     pop rsi
    55 00000369 58                  <1>     pop rax
    56 0000036A C3                  <1>     ret
    57                              <1> 
    58                              <1> getVarType:
    59                              <1> ;Input: rsi = Start of var name
    60                              <1> ;       rcx = Length of varname
    61                              <1> ;Output: ebx = 0 => Integer
    62                              <1> ;        ebx = 1 => String
    63                              <1> ;        ebx = -1 => Var doesnt exist, caller handles
    64 0000036B 50                  <1>     push rax
    65 0000036C 51                  <1>     push rcx
    66 0000036D 56                  <1>     push rsi
    67 0000036E E82E070000          <1>     call findVariable
    68 00000373 4881FBFFFFFFFF      <1>     cmp rbx, -1
    69 0000037A 7406                <1>     je .exit
    70 0000037C 0FB65B03            <1>     movzx ebx, byte [rbx + memBlock.bBlockType]
    71 00000380 FFCB                <1>     dec ebx
    72                              <1> .exit:
    73 00000382 5E                  <1>     pop rsi
    74 00000383 59                  <1>     pop rcx
    75 00000384 58                  <1>     pop rax
    76 00000385 C3                  <1>     ret
    77                              <1> 
    78                              <1> handleAlgebraicExpression:
    79                              <1> ;Input: rsi = Points to a mathematical expression
    80                              <1> ;Output: rax = Result of said expression
    81                              <1> ;Declares a syntax error if weird chars found
    82                              <1> ;Declares a type error if a string variable found
    83                              <1>     ;Handle Logical Connectives here
    84                              <1>     ;call .handleThirdLevel
    85 00000386 66813E4E4F          <1>     cmp word [rsi], "NO"
    86 0000038B 7504                <1>     jne .hae0
    87 0000038D 807E0254            <1>     cmp byte [rsi + 2], "T"
    88                              <1> ;    je .not
    89                              <1> .hae0:
    90 00000391 66813E414E          <1>     cmp word [rsi], "AN"
    91 00000396 7504                <1>     jne .hae1
    92 00000398 807E0244            <1>     cmp byte [rsi + 2], "D"
    93                              <1> ;    je .and
    94                              <1> .hae1:
    95 0000039C 66813E4F52          <1>     cmp word [rsi], "OR"
    96                              <1> ;    je .or
    97 000003A1 66813E584F          <1>     cmp word [rsi], "XO"
    98 000003A6 7504                <1>     jne .hae2
    99 000003A8 807E0252            <1>     cmp byte [rsi + 2], "R"
   100                              <1> ;    je .xor
   101                              <1> .hae2:
   102 000003AC 66813E494D          <1>     cmp word [rsi], "IM"
   103 000003B1 7504                <1>     jne .relationals
   104 000003B3 807E0250            <1>     cmp byte [rsi + 2], "P"
   105                              <1> ;    je .implicaton
   106                              <1> ;Level 3, Relational Connectives
   107                              <1> ;.handleThirdLevel:
   108                              <1> ;   call .handleSecondLevel
   109                              <1> .relationals:
   110                              <1>     ;Handle Relational connectives
   111 000003B7 803E3D              <1>     cmp byte [rsi], "="
   112                              <1> ;    je .equivalence
   113 000003BA 66813E3C3E          <1>     cmp word [rsi], "<>"
   114                              <1> ;    je .neq
   115 000003BF 66813E3E3C          <1>     cmp word [rsi], "><"
   116                              <1> ;    je .neq
   117 000003C4 803E3C              <1>     cmp byte [rsi], "<"
   118                              <1> ;    je .less
   119 000003C7 803E3E              <1>     cmp byte [rsi], ">"
   120                              <1> ;    je .greater
   121 000003CA 66813E3C3D          <1>     cmp word [rsi], "<="
   122                              <1> ;    je .leq
   123 000003CF 66813E3E3D          <1>     cmp word [rsi], ">="
   124                              <1> ;    je .geq
   125                              <1> ;Level 2, Addition and Subtraction
   126                              <1> .handleSecondLevel:
   127 000003D4 E828000000          <1>     call .handleFirstLevel
   128                              <1> .parseAdditiveOperators:    
   129 000003D9 803E2D              <1>     cmp byte [rsi], '-'
   130 000003DC 7415                <1>     je .processMinus
   131 000003DE 803E2B              <1>     cmp byte [rsi], '+'
   132 000003E1 0F8592000000        <1>     jne .exit              ;No operators, expression evaluated, exit
   133 000003E7 50                  <1>     push rax
   134 000003E8 E811000000          <1>     call .handleFirstLevelSkip   ;Parse first level
   135                              <1> .processAdd:    
   136 000003ED 59                  <1>     pop rcx
   137 000003EE 4801C8              <1>     add rax, rcx           ;Add the two numbers
   138 000003F1 EBE6                <1>     jmp short .parseAdditiveOperators  ;Search again for + or -
   139                              <1> .processMinus:
   140 000003F3 50                  <1>     push rax
   141 000003F4 E805000000          <1>     call .handleFirstLevelSkip   ;Parse first level
   142 000003F9 48F7D8              <1>     neg rax              ;Change a - b to a + -b
   143 000003FC EBEF                <1>     jmp short .processAdd
   144                              <1> 
   145                              <1> ;Level 1, Division and multiplication
   146                              <1> 
   147                              <1> .handleFirstLevelSkip:
   148 000003FE 48FFC6              <1>     inc rsi              ;Skip the op symbol
   149                              <1> .handleFirstLevel:
   150 00000401 E82C000000          <1>     call .handleZerothLevel      ;Call third level
   151                              <1> .parseProductOperators:   
   152 00000406 803E2F              <1>     cmp byte [rsi], '/'
   153 00000409 7411                <1>     je .processDiv
   154 0000040B 803E2A              <1>     cmp byte [rsi], '*'
   155 0000040E 7569                <1>     jne .exit           ;Neither multiplication or division, return up a level
   156                              <1> 
   157 00000410 50                  <1>     push rax
   158 00000411 E819000000          <1>     call .handleZerothLevelSkip   ;Call zeroth level
   159 00000416 59                  <1>     pop rcx
   160 00000417 48F7E9              <1>     imul rcx             ; Multiplication
   161 0000041A EBEA                <1>     jmp short .parseProductOperators   ;Search again for * or /
   162                              <1> 
   163                              <1> .processDiv:
   164 0000041C 50                  <1>     push rax
   165 0000041D E80D000000          <1>     call .handleZerothLevelSkip   ;Call zeroth level
   166 00000422 59                  <1>     pop rcx
   167 00000423 4891                <1>     xchg rax, rcx
   168 00000425 31D2                <1>     xor edx, edx         ;Clear rdx for rdx:rax
   169 00000427 48F7F9              <1>     idiv rcx             ;Signed division
   170 0000042A E9D7FFFFFF          <1>     jmp .parseProductOperators         ;Search again for * or /
   171                              <1> 
   172                              <1> ;Level 0, Brackets, numbers and vars.
   173                              <1> 
   174                              <1> .handleZerothLevelSkip:
   175 0000042F 48FFC6              <1>     inc rsi             ;Skip the op symbol
   176                              <1> .handleZerothLevel:
   177 00000432 E8FCFEFFFF          <1>     call spaceSkip
   178 00000437 AC                  <1>     lodsb               ;Read char and adv rsi
   179 00000438 3C28                <1>     cmp al, '('
   180 0000043A 750C                <1>     jne .notBracket
   181 0000043C E845FFFFFF          <1>     call handleAlgebraicExpression  ;Parse the inner expression
   182 00000441 803E29              <1>     cmp byte [rsi], ')'   
   183 00000444 744D                <1>     je .closeBracket     ;If close bracket, goto skip spaces
   184 00000446 EB53                <1>     jmp short .error     ;Otherwise, error
   185                              <1> 
   186                              <1> .notBracket:    
   187 00000448 3C5E                <1>     cmp al, "^"
   188 0000044A 742E                <1>     je .exponentFound
   189                              <1> .varConstCheck:
   190 0000044C 3C41                <1>     cmp al, "A"       ;Alphabetical first char?
   191 0000044E 730D                <1>     jae .varOrRNDFound      ;Yes, variable found or rnd function or error
   192 00000450 48FFCE              <1>     dec rsi            ;Else back one symbol 
   193 00000453 E868050000          <1>     call decimalToHex  ;to read number into rax
   194 00000458 E9D6FEFFFF          <1>     jmp spaceSkip
   195                              <1> 
   196                              <1> .varOrRNDFound:
   197 0000045D 3C5A                <1>     cmp al, "Z"  
   198 0000045F 773A                <1>     ja .error   ;Syntax error if char not between A-Z  
   199 00000461 3C52                <1>     cmp al, "R"
   200 00000463 7517                <1>     jne .varFound
   201 00000465 803E4E              <1>     cmp byte [rsi], "N" ;rsi was advanced by 1, check 
   202 00000468 7512                <1>     jne .varFound
   203 0000046A 807E0144            <1>     cmp byte [rsi+1], "D"
   204 0000046E 750C                <1>     jne .varFound
   205 00000470 66AD                <1>     lodsw               ;Advance rsi by 3
   206 00000472 AC                  <1>     lodsb
   207 00000473 E440                <1>     in al, 40h         ;Read timer counter 0
   208 00000475 480FB6C0            <1>     movzx rax, al
   209                              <1> .exit:
   210 00000479 C3                  <1>     ret                ;Return
   211                              <1> .exponentFound:
   212 0000047A EBD0                <1>    jmp short .varConstCheck
   213                              <1> .varFound:    
   214 0000047C 48FFCE              <1>     dec rsi ;Back a char
   215 0000047F 51                  <1>     push rcx
   216 00000480 E8B9FEFFFF          <1>     call getVarNameLength
   217 00000485 E81D000000          <1>     call getNumericVariable ;Get variable value in rax
   218 0000048A 4801CE              <1>     add rsi, rcx    ;Go past the edge of the name
   219 0000048D 59                  <1>     pop rcx
   220 0000048E E9A0FEFFFF          <1>     jmp spaceSkip
   221                              <1> 
   222                              <1> .closeBracket:
   223 00000493 48FFC6              <1>     inc rsi
   224 00000496 E998FEFFFF          <1>     jmp spaceSkip
   225                              <1> .error:
   226 0000049B 488D2DB2080000      <1>     lea rbp, syntax
   227 000004A2 E922FCFFFF          <1>     jmp criticalError
   228                              <1> 
   229                              <1> 
   230                              <1> getNumericVariable:
   231                              <1> ;Gets the value stored in a variable into rax 
   232                              <1> ;Input: rsi = Pointer to first char of a variable name
   233                              <1> ;Output: rax = Variable Value
   234                              <1> ;        rsi = Pointer to first char of a variable name
   235 000004A7 56                  <1>     push rsi
   236 000004A8 51                  <1>     push rcx
   237 000004A9 53                  <1>     push rbx
   238 000004AA E88FFEFFFF          <1>     call getVarNameLength   ;Returns the length of the var name in cx
   239 000004AF E8ED050000          <1>     call findVariable       ;Returns a pointer to the variable block in rbx
   240 000004B4 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Variable doesnt exist? Pretend it is 0
   241 000004BB 740E                <1>     je .noVar
   242 000004BD 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
   243 000004C1 750C                <1>     jne .stringFoundError
   244 000004C3 488B4304            <1>     mov rax, qword [rbx + varBlock.qValue]
   245                              <1> .exit:
   246 000004C7 5B                  <1>     pop rbx
   247 000004C8 59                  <1>     pop rcx
   248 000004C9 5E                  <1>     pop rsi
   249 000004CA C3                  <1>     ret
   250                              <1> .noVar:
   251 000004CB 31C0                <1>     xor eax, eax
   252 000004CD EBF8                <1>     jmp short .exit
   253                              <1> .stringFoundError:
   254 000004CF 488D2D8D080000      <1>     lea rbp, typeError
   255 000004D6 E9EEFBFFFF          <1>     jmp criticalError
   256                              <1> 
   257                              <1> setNumericVariable:
   258                              <1> ;Sets the value stored in a variable
   259                              <1> ;Input: rsi = Pointer to first char of a variable name
   260                              <1> ;       rax = Variable value
   261                              <1> ;Output: rsi = Pointer to first char of variable name
   262 000004DB 56                  <1>     push rsi
   263 000004DC 51                  <1>     push rcx
   264 000004DD 53                  <1>     push rbx
   265                              <1> 
   266 000004DE E85BFEFFFF          <1>     call getVarNameLength   ;Returns the length of the var name in cx
   267 000004E3 E8B9050000          <1>     call findVariable       ;Returns a pointer to the variable block in rbx
   268 000004E8 4881FBFFFFFFFF      <1>     cmp rbx, -1             ;Variable doesnt exit?
   269 000004EF 740E                <1>     je .makeEditInteger      ;Make one!
   270 000004F1 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
   271 000004F5 750F                <1>     jne .stringFoundError
   272 000004F7 48894304            <1>     mov qword [rbx + varBlock.qValue], rax  ;Save value
   273                              <1> .exit:
   274 000004FB 5B                  <1>     pop rbx
   275 000004FC 59                  <1>     pop rcx
   276 000004FD 5E                  <1>     pop rsi
   277 000004FE C3                  <1>     ret
   278                              <1> .makeEditInteger:
   279 000004FF E8AD060000          <1>     call makeEditInteger
   280 00000504 EBF5                <1>     jmp short .exit
   281                              <1> .stringFoundError:
   282 00000506 488D2D56080000      <1>     lea rbp, typeError
   283 0000050D E9B7FBFFFF          <1>     jmp criticalError
   284                              <1> 
   285                              <1> setStringVariable:
   286                              <1> ;Sets the string pointed to by rdx
   287                              <1> ;Input: rsi = Pointer to first char of a variable name
   288                              <1> ;       rdx = Start of string
   289                              <1> ;Output: rsi = Pointer to first char of variable name
   290                              <1> ;Keeps adding characters until a 0, : or " encountered
   291                              <1> ;Adds a 0 to the end
   292 00000512 51                  <1>     push rcx
   293 00000513 E826FEFFFF          <1>     call getVarNameLength   ;Gets the length of the var name in cx
   294 00000518 E8DF060000          <1>     call makeEditString     ;Returns a ptr to the var block in rbx
   295 0000051D 59                  <1>     pop rcx
   296 0000051E C3                  <1>     ret
   297                              <1> 
   298                              <1> findOtherExpressionsOnLine:
   299                              <1> ;Input: rsi = start of line portion
   300                              <1> ;Output: rsi = points to first char after first ":" found
   301                              <1> ;         al = : if it was found or 00 if not
   302 0000051F AC                  <1>     lodsb
   303 00000520 3C00                <1>     cmp al, 0   ;Null hit, RIP procedure
   304 00000522 7404                <1>     je .exit
   305 00000524 3C3A                <1>     cmp al, ":" ;Strings can be terminated with a :
   306 00000526 75F7                <1>     jne findOtherExpressionsOnLine
   307                              <1> .exit:
   308 00000528 C3                  <1>     ret
    14                                  %include "COMMANDS.ASM"
    15                              <1> 
    16                              <1> funTbl:
    17                              <1> ;Use PASCAL strings to know how long the comparisons need to be
    18                              <1> ;All function pointers are saved as distances from the head
    19                              <1> ; of the function table
    20 00000529 044C4554            <1>     db 4, "LET"     ;DONE
    21 0000052D 0201                <1>     dw oldSchoolAssignemnt - funTbl
    22                              <1> 
    23 0000052F 044E4557            <1>     db 4, "NEW"     ;DONE
    24 00000533 8501                <1>     dw newProgram - funTbl 
    25                              <1> 
    26 00000535 06434C454152        <1>     db 6, "CLEAR"   ;DONE
    27 0000053B 8501                <1>     dw newProgram - funTbl 
    28                              <1> 
    29 0000053D 054C495354          <1>     db 5, "LIST"    ;DONE
    30 00000542 E701                <1>     dw listProgram - funTbl 
    31                              <1> 
    32 00000544 0452554E            <1>     db 4, "RUN"     ;DONE
    33 00000548 2302                <1>     dw runProgram - funTbl
    34                              <1> 
    35 0000054A 075052494E5424      <1>     db 7, "PRINT$"    ;Not implemented yet
    36 00000551 5002                <1>     dw printStatement - funTbl
    37                              <1> 
    38 00000553 065052494E54        <1>     db 6, "PRINT"    ;DONE
    39 00000559 5002                <1>     dw printStatement - funTbl
    40                              <1> 
    41 0000055B 023F                <1>     db 2, "?"        ;DONE, alias Print
    42 0000055D 5002                <1>     dw printStatement - funTbl
    43                              <1> 
    44 0000055F 06494E505554        <1>     db 6, "INPUT"
    45 00000565 EB02                <1>     dw getInput - funTbl
    46                              <1> 
    47 00000567 034946              <1>     db 3, "IF"      ;DONE, needs to be tested
    48 0000056A FF03                <1>     dw handleIf - funTbl
    49                              <1> 
    50 0000056C 05474F544F          <1>     db 5, "GOTO"    ;DONE
    51 00000571 E403                <1>     dw goto - funTbl
    52                              <1> 
    53 00000573 06474F535542        <1>     db 6, "GOSUB"
    54 00000579 FB03                <1>     dw gosub - funTbl
    55                              <1> 
    56 0000057B 0752455455524E      <1>     db 7, "RETURN"
    57 00000582 FC03                <1>     dw return - funTbl
    58                              <1> 
    59 00000584 04464F52            <1>     db 4, "FOR"
    60 00000588 F903                <1>     dw forLoop - funTbl
    61                              <1> 
    62 0000058A 054E455854          <1>     db 5, "NEXT"
    63 0000058F FA03                <1>     dw next - funTbl
    64                              <1> 
    65 00000591 065748494C45        <1>     db 6, "WHILE"
    66 00000597 FD03                <1>     dw while - funTbl
    67                              <1> 
    68 00000599 0557454E44          <1>     db 5, "WEND"
    69 0000059E FE03                <1>     dw wend - funTbl    
    70                              <1> thenStr:
    71 000005A0 055448454E          <1>     db 5, "THEN"    ;DONE
    72 000005A5 E000                <1>     dw badCmd - funTbl
    73                              <1> elseStr:
    74 000005A7 05454C5345          <1>     db 5, "ELSE"    ;DONE
    75 000005AC E000                <1>     dw badCmd - funTbl
    76                              <1> 
    77                              <1>     
    78 000005AE 0753595354454D      <1>     db 7, "SYSTEM"  ;DONE
    79 000005B5 8A03                <1>     dw returnToDOS - funTbl
    80                              <1> 
    81 000005B7 04434C53            <1>     db 4, "CLS"     ;DONE
    82 000005BB 9603                <1>     dw cls - funTbl
    83                              <1> 
    84 000005BD 064445425547        <1>     db 6, "DEBUG"   ;DONE
    85 000005C3 9B03                <1>     dw dbgr - funTbl
    86                              <1> 
    87 000005C5 0554524F4E          <1>     db 5, "TRON"    ;DONE
    88 000005CA F100                <1>     dw tron - funTbl
    89                              <1> 
    90 000005CC 0654524F4646        <1>     db 6, "TROFF"   ;DONE
    91 000005D2 F900                <1>     dw troff - funTbl
    92                              <1> 
    93 000005D4 04454E44            <1>     db 4, "END"     ;DONE
    94 000005D8 EC00                <1>     dw endProg - funTbl
    95                              <1> 
    96 000005DA 0553544F50          <1>     db 5, "STOP"    ;DONE
    97 000005DF EC00                <1>     dw endProg - funTbl
    98                              <1> 
    99 000005E1 07455343415045      <1>     db 7, "ESCAPE"  ;DONE
   100 000005E8 EC00                <1>     dw endProg - funTbl
   101                              <1> 
   102 000005EA 06455045454B        <1>     db 6, "EPEEK"
   103 000005F0 0101                <1>     dw memRead - funTbl
   104                              <1> 
   105 000005F2 0645504F4B45        <1>     db 6, "EPOKE"
   106 000005F8 0101                <1>     dw memWrite - funTbl
   107                              <1> 
   108 000005FA 055045454B          <1>     db 5, "PEEK"
   109 000005FF 0101                <1>     dw byteRead - funTbl
   110                              <1> 
   111 00000601 05504F4B45          <1>     db 5, "POKE"
   112 00000606 0101                <1>     dw byteWrite - funTbl
   113                              <1> 
   114 00000608 FF                  <1>     db -1    ;Demarkate the end of the table
   115                              <1> ;End of Table
   116                              <1> badCmd:
   117 00000609 488D2D44070000      <1>     lea rbp, syntax
   118 00000610 E8B4FAFFFF          <1>     call criticalError 
   119                              <1> endProg:
   120 00000615 E922FAFFFF          <1>     jmp mainLoop
   121                              <1> tron:
   122 0000061A 800D(D90E0000)02    <1>     or byte [stateByte], traceBit   ;Set the traceBit
   123 00000621 C3                  <1>     ret
   124                              <1> troff:
   125 00000622 8025(D90E0000)FD    <1>     and byte [stateByte], ~traceBit ;Clear the traceBit
   126 00000629 C3                  <1>     ret
   127                              <1> memRead:
   128                              <1> memWrite:
   129                              <1> byteRead:
   130                              <1> byteWrite:
   131 0000062A C3                  <1>     ret
   132                              <1> 
   133                              <1> oldSchoolAssignemnt:
   134                              <1> ;Assign with a LET directive
   135                              <1> ;rsi points to first char AFTER function name
   136 0000062B E803FDFFFF          <1>     call spaceSkip  ;Goto var assignment as if at start of line
   137                              <1> variableAssignment: ;Assignment without a LET directive
   138                              <1>     ;Establish if the string is a variable assignment or not
   139                              <1>     ;rsi points to start of string
   140 00000630 E809FDFFFF          <1>     call getVarNameLength   ;Get the variable name length
   141 00000635 4889F7              <1>     mov rdi, rsi    ;Save ptr to start of string in rdi
   142 00000638 4801CE              <1>     add rsi, rcx    ;Go to end of string
   143 0000063B E8F3FCFFFF          <1>     call spaceSkip  ;Skip spaces after the end of the var name
   144 00000640 AC                  <1>     lodsb   ;Get the first char after the spaces. This must be a =
   145 00000641 3C3D                <1>     cmp al, "="
   146 00000643 7551                <1>     jne .syntaxError
   147 00000645 4889FE              <1>     mov rsi, rdi    ;Return rsi to the start of the string name
   148 00000648 4801CE              <1>     add rsi, rcx    ;Go to end of var name
   149 0000064B 48FFCE              <1>     dec rsi
   150 0000064E AC                  <1>     lodsb   ;Get last char into al and inc rsi
   151 0000064F 3C24                <1>     cmp al, "$"
   152 00000651 7420                <1>     je .stringAssignment
   153 00000653 E8DBFCFFFF          <1>     call spaceSkip  ;Skip any spaces
   154 00000658 48FFC6              <1>     inc rsi         ;Go past the equality sign
   155 0000065B E8D3FCFFFF          <1>     call spaceSkip  ;Skip any spaces
   156 00000660 803E22              <1>     cmp byte [rsi], 22h ;Open speech mark
   157 00000663 743D                <1>     je .typError    ;Integers cant have speechmarks
   158 00000665 E81CFDFFFF          <1>     call handleAlgebraicExpression  ;Get the result of the expression into rax
   159 0000066A 4889FE              <1>     mov rsi, rdi    ;Return the start of the string into rsi
   160 0000066D E869FEFFFF          <1>     call setNumericVariable
   161 00000672 C3                  <1>     ret
   162                              <1> .stringAssignment:
   163                              <1> ;This simply copies the string which is either speech mark, 0 or : terminated
   164                              <1> ;First allocate a string
   165                              <1> ;rsi = First char after the end of the variable name
   166                              <1> ;rdi = start of variable name 
   167                              <1> ;rcx = char count for var name
   168 00000673 E8BBFCFFFF          <1>     call spaceSkip  ;Skip any spaces
   169 00000678 48FFC6              <1>     inc rsi         ;Go past the equality sign
   170 0000067B E8B3FCFFFF          <1>     call spaceSkip  ;Skip any spaces
   171 00000680 803E22              <1>     cmp byte [rsi], 22h ;Open speechmark check again
   172 00000683 751D                <1>     jne .typError    ;Assigning a number to a string is a type error
   173                              <1>     ;rsi now points to the start of the string to save
   174 00000685 48FFC6              <1>     inc rsi ;Go past the speech mark
   175 00000688 4889F2              <1>     mov rdx, rsi    ;save start of string data in rdx
   176 0000068B 4889FE              <1>     mov rsi, rdi
   177 0000068E 57                  <1>     push rdi
   178 0000068F E87EFEFFFF          <1>     call setStringVariable
   179 00000694 5E                  <1>     pop rsi ;Save the start of the assignment in rsi
   180 00000695 C3                  <1>     ret
   181                              <1> 
   182                              <1> .syntaxError:
   183 00000696 488D2DB7060000      <1>     lea rbp, syntax ;Syntax error, keyword a bit confused
   184 0000069D E927FAFFFF          <1>     jmp criticalError
   185                              <1> .typError:
   186 000006A2 488D2DBA060000      <1>     lea rbp, typeError
   187 000006A9 E91BFAFFFF          <1>     jmp criticalError
   188                              <1> 
   189                              <1> 
   190                              <1> newProgram: 
   191                              <1> ;Simply reset the program pointers
   192 000006AE 488D05(00000000)    <1>     lea rax, section.programArea.vstart
   193 000006B5 488905(C80E0000)    <1>     mov qword [minMemAddr], rax
   194 000006BC 488905(E20E0000)    <1>     mov qword [lastBlock], rax  ;Start writing at this location
   195 000006C3 488905(DA0E0000)    <1>     mov qword [mcbChain], rax   ;Create a mock MCB here
   196                              <1> 
   197 000006CA 4889C2              <1>     mov rdx, rax
   198 000006CD 668B4801            <1>     mov cx, word [rax + memBlock.wBlockSize]
   199 000006D1 4889C7              <1>     mov rdi, rax
   200 000006D4 30C0                <1>     xor al, al
   201 000006D6 F3AA                <1>     rep stosb   ;Sanitise the old first allocation
   202                              <1> 
   203 000006D8 C60272              <1>     mov byte [rdx + memBlock.bSignature], lastMemBlock
   204 000006DB 66C742010000        <1>     mov word [rdx + memBlock.wBlockSize], 0 ;Dummy block, no size, gets overwritten
   205 000006E1 31C0                <1>     xor eax, eax
   206 000006E3 8805(D80E0000)      <1>     mov byte [strLen], al
   207 000006E9 488D3D(980D0000)    <1>     lea rdi, inString
   208 000006F0 B900010000          <1>     mov ecx, maxLineLen
   209 000006F5 F3AA                <1>     rep stosb
   210 000006F7 C605(F40E0000)0A    <1>     mov byte [currentLine], 10  ;Default to line 10
   211 000006FE 48FFC8              <1>     dec rax ;rax = -1
   212 00000701 488905(EA0E0000)    <1>     mov qword [firstLinPtr], rax ;No program in memory
   213 00000708 668905(F20E0000)    <1>     mov word [firstLinNum], ax
   214 0000070F C3                  <1>     ret
   215                              <1> listProgram:
   216                              <1> ;Go line by line and echo the program lines, inserting a crlf after each
   217                              <1> ;First print the line number, then add a space
   218 00000710 488B1D(EA0E0000)    <1>     mov rbx, qword [firstLinPtr]    ;Get a pointer to the first program line
   219                              <1> .printLines:
   220 00000717 488D2DEB050000      <1>     lea rbp, crlf           ;New line
   221 0000071E E876FAFFFF          <1>     call ttyOutString
   222 00000723 4881FBFFFFFFFF      <1>     cmp rbx, -1
   223 0000072A 741F                <1>     je .exit
   224 0000072C 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]
   225 00000730 E8B3020000          <1>     call printdecimalword
   226 00000735 B020                <1>     mov al, " "
   227 00000737 E858FAFFFF          <1>     call ttyOutChar ;Print a space
   228 0000073C 488D6B0E            <1>     lea rbp, qword [rbx + progLineBlock.sLine]  ;Null terminated string
   229 00000740 E854FAFFFF          <1>     call ttyOutString
   230 00000745 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr]   ;Walk list of program lines
   231 00000749 EBCC                <1>     jmp short .printLines
   232                              <1> .exit:
   233 0000074B C3                  <1>     ret
   234                              <1> runProgram:
   235                              <1>     ;Runs the machine in indirect mode
   236 0000074C 800D(D90E0000)04    <1>     or byte [stateByte], indirectBit    ;Entering indirect mode
   237                              <1>     ;rsi must point to the first line
   238 00000753 668B15(F20E0000)    <1>     mov dx, word [firstLinNum]
   239 0000075A 668915(F40E0000)    <1>     mov word [currentLine], dx
   240 00000761 488B1D(EA0E0000)    <1>     mov rbx, qword [firstLinPtr]
   241 00000768 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine]
   242 0000076C E8B0FAFFFF          <1>     call runLine
   243 00000771 8025(D90E0000)FB    <1>     and byte [stateByte], ~indirectBit  ;Exit indirect mode
   244 00000778 C3                  <1>     ret
   245                              <1> 
   246                              <1> printStatement:
   247                              <1> ;Strings must be "" delimited or a string variable must be used
   248                              <1> ;rsi points to first char AFTER function name
   249                              <1> .printStart:
   250 00000779 E8B5FBFFFF          <1>     call spaceSkip  ;move rsi to the start of the expression
   251 0000077E AC                  <1>     lodsb
   252                              <1> 
   253 0000077F 84C0                <1>     test al, al     ;Is this a null string?
   254 00000781 746B                <1>     jz .psvexit
   255                              <1> 
   256 00000783 3C22                <1>     cmp al, 022h    ;22h = ASCII Speechmarks
   257 00000785 7449                <1>     je .stringPrint
   258                              <1>     ;Here we check if the first char is ASCII, if it is, check if its a string var
   259 00000787 3C41                <1>     cmp al, "A"
   260 00000789 7204                <1>     jb .printExpr
   261 0000078B 3C5A                <1>     cmp al, "Z"
   262 0000078D 7214                <1>     jb .printStringVar
   263                              <1> .printExpr:
   264 0000078F 48FFCE              <1>     dec rsi ;Return to the start of the string
   265                              <1> .printExpr1:    ;Return without dec rsi
   266 00000792 E8EFFBFFFF          <1>     call handleAlgebraicExpression ;Gets value of a var and/or algebraic operation
   267 00000797 E84C020000          <1>     call printdecimalword
   268 0000079C E892FBFFFF          <1>     call spaceSkip
   269 000007A1 EB2D                <1>     jmp short .stringPrint
   270                              <1> .printStringVar:
   271                              <1>     ;Check if it is a string var
   272 000007A3 48FFCE              <1>     dec rsi
   273 000007A6 E893FBFFFF          <1>     call getVarNameLength
   274 000007AB E8BBFBFFFF          <1>     call getVarType
   275 000007B0 81FB01000000        <1>     cmp ebx, strEquate
   276 000007B6 75DA                <1>     jne .printExpr1  ;rsi points to the same point as initially
   277 000007B8 E8E4020000          <1>     call findVariable   ;ecx has string length, get block ptr in rbx
   278 000007BD 55                  <1>     push rbp
   279 000007BE 488D6B04            <1>     lea rbp, qword [rbx + stringBlock.string]
   280 000007C2 E8D2F9FFFF          <1>     call ttyOutString
   281 000007C7 5D                  <1>     pop rbp
   282 000007C8 4801CE              <1>     add rsi, rcx    ;Go past variable
   283 000007CB E863FBFFFF          <1>     call spaceSkip
   284                              <1> .stringPrint:
   285 000007D0 AC                  <1>     lodsb
   286 000007D1 3C00                <1>     cmp al, 0
   287 000007D3 7419                <1>     je .psvexit
   288 000007D5 3C3A                <1>     cmp al, ":"
   289 000007D7 7412                <1>     je .psvexitColon
   290 000007D9 3C22                <1>     cmp al, 022h    ;Close Speech marks, check next char
   291 000007DB 741E                <1>     je .closespeechmarks
   292 000007DD 3C3B                <1>     cmp al, ";"     ;Semicolon means print next section on same line
   293 000007DF 7429                <1>     je .continue
   294 000007E1 E8AEF9FFFF          <1>     call ttyOutChar
   295 000007E6 EBE8                <1>     jmp short .stringPrint
   296                              <1> .openSpeechMark:
   297 000007E8 48FFC6              <1>     inc rsi ;Go back a char
   298                              <1> .psvexitColon:
   299 000007EB 48FFCE              <1>     dec rsi ;Go back a char
   300                              <1> .psvexit:
   301 000007EE 488D2D14050000      <1>     lea rbp, crlf
   302 000007F5 E89FF9FFFF          <1>     call ttyOutString
   303 000007FA C3                  <1>     ret
   304                              <1> .closespeechmarks:
   305 000007FB E833FBFFFF          <1>     call spaceSkip
   306 00000800 AC                  <1>     lodsb
   307 00000801 3C3B                <1>     cmp al, ";" ;only exception to exiting if next non space char is a semicolon
   308 00000803 74CB                <1>     je .stringPrint
   309 00000805 48FFCE              <1>     dec rsi ;Go back a step
   310 00000808 EBE4                <1>     jmp short .psvexit
   311                              <1> .continue:
   312 0000080A E824FBFFFF          <1>     call spaceSkip
   313 0000080F E965FFFFFF          <1>     jmp .printStart
   314                              <1> getInput:
   315                              <1> ;Take a string as a prompt
   316                              <1> ;rdi points just past the end of the command line
   317                              <1> ;rsi points to first char AFTER function name
   318                              <1> ;Input prompt strings must be speech mark delimited on both sides!
   319 00000814 E81AFBFFFF          <1>     call spaceSkip
   320                              <1>     ;Now check to see if the user has specified a custom prompt
   321 00000819 AC                  <1>     lodsb   ;Get first symbol and go past it
   322 0000081A 3C22                <1>     cmp al, 22h ;Speechmark?
   323 0000081C 7535                <1>     jne .defaultPrompt ;If no speechmark, print default prompt
   324                              <1> .customPrompt:
   325 0000081E 4889F7              <1>     mov rdi, rsi    ;Save start of string in rdi
   326                              <1> .cp0:
   327 00000821 AC                  <1>     lodsb           ;Now search for end of string speech marks or null terminator
   328 00000822 3C22                <1>     cmp al, 22h     ;Is al a speech mark?
   329 00000824 7410                <1>     je .printCustomPrompt
   330 00000826 84C0                <1>     test al, al     ;Is al null?
   331 00000828 75F7                <1>     jnz .cp0        ;No, keep searching for terminator
   332                              <1> .error:
   333 0000082A 488D2D23050000      <1>     lea rbp, syntax
   334 00000831 E993F8FFFF          <1>     jmp criticalError
   335                              <1> .printCustomPrompt:
   336 00000836 4889FE              <1>     mov rsi, rdi    ;rsi points to the first char of the string
   337                              <1> .pcp0:
   338 00000839 AC                  <1>     lodsb
   339 0000083A 3C22                <1>     cmp al, 22h     ;Speechmark?
   340 0000083C 7407                <1>     je .stopPrompt
   341 0000083E E851F9FFFF          <1>     call ttyOutChar
   342 00000843 EBF4                <1>     jmp short .pcp0
   343                              <1> .stopPrompt:
   344 00000845 E8E9FAFFFF          <1>     call spaceSkip  ;Skip spaces
   345 0000084A AC                  <1>     lodsb   ;Get first non space char after closing speechmark
   346 0000084B 3C3B                <1>     cmp al, ";" ;Semicolon means no default prompt
   347 0000084D 740E                <1>     je .noDefaultPrompt
   348 0000084F 3C2C                <1>     cmp al, "," ;Comma also means no default prompt
   349 00000851 740A                <1>     je .noDefaultPrompt
   350                              <1> .defaultPrompt:
   351 00000853 48FFCE              <1>     dec rsi
   352 00000856 B03F                <1>     mov al, "?"
   353 00000858 E837F9FFFF          <1>     call ttyOutChar
   354                              <1> .noDefaultPrompt:
   355 0000085D B020                <1>     mov al, " " ;space
   356 0000085F E830F9FFFF          <1>     call ttyOutChar
   357 00000864 E8CAFAFFFF          <1>     call spaceSkip  ;Skip spaces after default supressor to get to var name
   358 00000869 E8D0FAFFFF          <1>     call getVarNameLength   ;Get var name length in ecx
   359 0000086E 488D3D(980E0000)    <1>     lea rdi, digitString    ;Buffer has 48 chars, string names are max 40
   360 00000875 E8EF030000          <1>     call strcpy     ;rsi points to var name
   361 0000087A 57                  <1>     push rdi    ;rdi points to first char of variable
   362 0000087B 51                  <1>     push rcx
   363 0000087C E87BF8FFFF          <1>     call getLineInput   ;Get input from the user in inString, null terminated
   364                              <1>     ;This will sanitise in direct mode meaning input cannot have any more statements
   365                              <1>     ; after it.
   366 00000881 59                  <1>     pop rcx
   367 00000882 5F                  <1>     pop rdi 
   368 00000883 4889FE              <1>     mov rsi, rdi    ;Save the start of the var name in rsi
   369 00000886 4801CE              <1>     add rsi, rcx    ;Go to end of var
   370 00000889 48FFCE              <1>     dec rsi
   371 0000088C AC                  <1>     lodsb   ;Are we a string variable?
   372 0000088D 488D35(980D0000)    <1>     lea rsi, inString   ;Move rsi to start of user input
   373 00000894 3C24                <1>     cmp al, "$"
   374 00000896 740F                <1>     je .handleString
   375                              <1> .handleNumeric:
   376 00000898 E8E9FAFFFF          <1>     call handleAlgebraicExpression  ;Get the result of the expression into rax
   377 0000089D 4889FE              <1>     mov rsi, rdi    ;Return the start of the string into rsi
   378 000008A0 E836FCFFFF          <1>     call setNumericVariable
   379 000008A5 EB0B                <1>     jmp short .commonExit
   380                              <1> .handleString:
   381                              <1>     ;IF a string variable, come here
   382                              <1>     ;rdi has the start of the variable name
   383                              <1> 
   384                              <1>     ;rdx must point to the start of the string
   385                              <1>     ;rsi must point to the start of the variable name
   386 000008A7 4889F2              <1>     mov rdx, rsi
   387 000008AA 4889FE              <1>     mov rsi, rdi    ;Return start of user name in rsi
   388 000008AD E860FCFFFF          <1>     call setStringVariable
   389                              <1> .commonExit:
   390 000008B2 C3                  <1>     ret
   391                              <1> 
   392                              <1> ;==========================================================:
   393                              <1> ;==========================================================:
   394                              <1> ;==========================================================:
   395                              <1> ;          Functions Related to Program Management         :
   396                              <1> ;==========================================================:
   397                              <1> ;==========================================================:
   398                              <1> ;==========================================================:
   399                              <1> returnToDOS:
   400 000008B3 B007                <1>     mov al, 07h
   401 000008B5 E8DAF8FFFF          <1>     call ttyOutChar
   402 000008BA E941F7FFFF          <1>     jmp start   ;Reset the interpreter
   403                              <1> cls:
   404 000008BF E9E2F8FFFF          <1>     jmp ttyClear
   405                              <1> dbgr:
   406                              <1>     ;Hook int 40h to main prog EP to allow returning 
   407                              <1> ;First call to get default BIOS segement selector and attribute word
   408 000008C4 B340                <1>     mov bl, 40h
   409 000008C6 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   410 000008CB CD35                <1>     int 35h
   411 000008CD 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   412 000008CF B940000000          <1>     mov ecx, 40h    ;Interrupt number
   413                              <1> ;dx preserves the attribute word
   414 000008D4 488D1D09000000      <1>     lea rbx, .farReturn  ;Pointer passed in
   415 000008DB B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   416 000008E0 CD35                <1>     int 35h
   417 000008E2 CD38                <1>     int 38h ;Call debugger
   418                              <1> .farReturn:
   419                              <1>     ;Reconnect CTRL+BREAK handler
   420 000008E4 48BC-               <1>     mov rsp, stacktop   ;Immediately reset stack
   420 000008E6 [900D000000000000]  <1>
   421 000008EE 488D3DDEF7FFFF      <1>     lea rdi, ctrlBreakHandler
   422 000008F5 B03B                <1>     mov al, 3Bh
   423 000008F7 E8E0F7FFFF          <1>     call setHandler
   424                              <1>     
   425 000008FC 488D2D06040000      <1>     lea rbp, crlf
   426 00000903 E891F8FFFF          <1>     call ttyOutString
   427 00000908 E92FF7FFFF          <1>     jmp mainLoop
    15                                  %include "CTRLFLOW.ASM"
    16                              <1> ;Handles all the specific functions related to control flow such as scanning 
    17                              <1> ; lines for WEND, RETURN, NEXT
    18                              <1> 
    19                              <1> retScan:
    20                              <1>     
    21                              <1> wendScan:
    22                              <1> nextScan:
    23                              <1> ;=======================================
    24                              <1> ;  ACTUAL CONTROL FLOW FUNCTIONS HERE  :
    25                              <1> ;=======================================
    26                              <1> goto:
    27                              <1> ;GOTO, works by replacing the address after the return address on the stack
    28                              <1> ;rsi points to first char AFTER function name
    29 0000090D E821FAFFFF          <1>     call spaceSkip  ;Skip all preceeding spaces
    30 00000912 E86FFAFFFF          <1>     call handleAlgebraicExpression  ;Turn the expression into a number in ax
    31 00000917 0FB7D0              <1>     movzx edx, ax   ;Line number into dx, start at beginning of line
    32 0000091A 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
    33 00000921 C3                  <1>     ret
    34                              <1> 
    35                              <1> forLoop:
    36 00000922 C3                  <1>     ret
    37                              <1> next:
    38 00000923 C3                  <1>     ret
    39                              <1> gosub:
    40 00000924 C3                  <1>     ret
    41                              <1> return:
    42 00000925 C3                  <1>     ret
    43                              <1> while:
    44 00000926 C3                  <1>     ret
    45                              <1> wend:
    46 00000927 C3                  <1>     ret
    47                              <1> 
    48                              <1> 
    49                              <1> handleIf:
    50                              <1> ;Evaluate the string. The IF,THEN/GOTO,ELSE statement must ALL be on one line
    51                              <1> ;IF exp1 THEN statement ELSE statement
    52                              <1> ;IF exp1 GOTO linenumber ELSE statement
    53                              <1> ;rsi points to first char AFTER function name
    54 00000928 E806FAFFFF          <1>     call spaceSkip
    55 0000092D E854FAFFFF          <1>     call handleAlgebraicExpression
    56                              <1> ;THIS WORKS ON CONTRALOGIC. If the algebraic expression evaluates to 0,
    57                              <1> ; it is currently taken to be true (as that is a condition I can test for
    58                              <1> ; easily). Once Proper logical operators are introduced, then I will have to
    59                              <1> ; switch it so that test rax, rax -> jz .else
    60 00000932 4885C0              <1>     test rax, rax  ;If this is NOT 0, go to the else
    61 00000935 7525                <1>     jnz .else   ;CONTRALOGIC, TO BE SWITCHED IN LATER VERSIONS TO JZ 
    62 00000937 E8F7F9FFFF          <1>     call spaceSkip
    63 0000093C AD                  <1>     lodsd   ;Get the whole word, must be either "THEN " or "GOTO "
    64 0000093D 3D5448454E          <1>     cmp eax, "THEN"
    65 00000942 7442                <1>     je .hi0   ; Go past THEN, to process statement
    66 00000944 3D474F544F          <1>     cmp eax, "GOTO"
    67 00000949 7569                <1>     jne .error
    68 0000094B 803E20              <1>     cmp byte [rsi], " " ;is the next char a space?
    69 0000094E 7564                <1>     jne .error
    70 00000950 E9B8FFFFFF          <1>     jmp goto
    71                              <1> .candidatethen:
    72 00000955 803E20              <1>     cmp byte [rsi], " " ;is the next char a space?
    73 00000958 742C                <1>     je .hi0
    74 0000095A EB58                <1>     jmp short .error
    75                              <1> .else:
    76                              <1>     ;Search for the ELSE, it has to be preceeded with a space and have a space after
    77 0000095C 803E00              <1>     cmp byte [rsi], 0 ;Are we at end of line?
    78 0000095F 7452                <1>     je .noElse
    79 00000961 803E3A              <1>     cmp byte [rsi], ":" ;Are we at end line segment?
    80 00000964 744D                <1>     je .noElse
    81 00000966 48FFC6              <1>     inc rsi
    82 00000969 813E20454C53        <1>     cmp dword [rsi], " ELS"
    83 0000096F 75EB                <1>     jne .else
    84 00000971 4881C604000000      <1>     add rsi, 4  ;Skip those four chars, we have a candidate
    85 00000978 66813E4520          <1>     cmp word [rsi], "E "
    86 0000097D 75DD                <1>     jne .else   ;If not equal failed to match pattern
    87 0000097F 4881C602000000      <1>     add rsi, 2  ;Else its the ELSE we are looking for, move rsi to first space past it
    88                              <1> .hi0:
    89                              <1> ;Now we do the branchy stuff, branch to the same line just further down
    90 00000986 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
    91 0000098D 668B15(F40E0000)    <1>     mov dx, word [currentLine]
    92 00000994 E878010000          <1>     call searchForProgramLine
    93 00000999 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Does the line not exist somehow?
    94 000009A0 7412                <1>     je .error
    95 000009A2 4889F0              <1>     mov rax, rsi    ;Save pointer in rax
    96 000009A5 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine] ;Get the difference in chars
    97 000009A9 4829C8              <1>     sub rax, rcx
    98 000009AC 24FF                <1>     and al, -1  ;Save only bottom byte as the difference should be less than 255
    99 000009AE C1E010              <1>     shl eax, 10h ;Shift to byte 3
   100 000009B1 09C2                <1>     or edx, eax ;Save the offset into byte 3
   101                              <1> .noElse:
   102                              <1> ;If no else, simply return
   103 000009B3 C3                  <1>     ret
   104                              <1> .error:
   105 000009B4 488D1D99030000      <1>     lea rbx, syntax
   106 000009BB E909F7FFFF          <1>     jmp criticalError
    16                                  %include "MATH.ASM"
    17                              <1> decimalToHex:
    18                              <1>     ;Takes ASCII encoded decimal number and 
    19                              <1>     ;returns its hex value
    20                              <1>     ;Input: rsi = Start of numeric ONLY string
    21                              <1>     ;Output: rax = Number
    22                              <1>     ;        rsi = First non-numeric char past end of number
    23 000009C0 53                  <1>     push rbx
    24 000009C1 51                  <1>     push rcx
    25 000009C2 52                  <1>     push rdx
    26 000009C3 31DB                <1>     xor ebx, ebx    ;Start with rbx = 0
    27                              <1> .processDigits:    
    28 000009C5 AC                  <1>     lodsb           ;Get the first digit in al
    29 000009C6 2C30                <1>     sub al, 30h     ;Reduce to value
    30 000009C8 31D2                <1>     xor edx, edx    ;Clear for multiplication
    31 000009CA 3C0A                <1>     cmp al, 10      ;Digit valid? Propagte CF
    32 000009CC 480FB6C0            <1>     movzx rax, al   ;Clear upper bits
    33 000009D0 4893                <1>     xchg rax, rbx
    34 000009D2 730D                <1>     jnc .exit       ;Digit was not valid, exit
    35 000009D4 B90A000000          <1>     mov ecx, 10     ;Multiply result by 10
    36 000009D9 48F7E1              <1>     mul rcx
    37 000009DC 4801C3              <1>     add rbx, rax    ;Add the new digits
    38 000009DF EBE4                <1>     jmp short .processDigits
    39                              <1> .exit:
    40 000009E1 48FFCE              <1>     dec rsi         ;rsi points to first non-digit
    41 000009E4 5A                  <1>     pop rdx
    42 000009E5 59                  <1>     pop rcx
    43 000009E6 5B                  <1>     pop rbx
    44 000009E7 C3                  <1>     ret
    45                              <1> 
    46                              <1> printdecimalword:
    47                              <1> ;Takes the qword in rax and prints its decimal representation
    48 000009E8 50                  <1>     push rax
    49 000009E9 53                  <1>     push rbx
    50 000009EA 488D3D(980E0000)    <1>     lea rdi, digitString   ;Use the default line as a buffer
    51                              <1>     ;Sanitise the digit buffer
    52 000009F1 57                  <1>     push rdi
    53 000009F2 51                  <1>     push rcx
    54 000009F3 50                  <1>     push rax
    55 000009F4 31C0                <1>     xor eax, eax
    56 000009F6 B906000000          <1>     mov ecx, digitStringLen/8
    57 000009FB F348AB              <1>     rep stosq
    58 000009FE 58                  <1>     pop rax
    59 000009FF 59                  <1>     pop rcx
    60 00000A00 5F                  <1>     pop rdi
    61                              <1> 
    62 00000A01 4881C72F000000      <1>     add rdi, digitStringLen - 1 ;Go to the end of the buffer
    63 00000A08 FD                  <1>     std ;Reverse string ops
    64 00000A09 50                  <1>     push rax
    65 00000A0A 30C0                <1>     xor al, al  ;Place delimiter
    66 00000A0C AA                  <1>     stosb
    67 00000A0D 58                  <1>     pop rax
    68 00000A0E 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
    68 00000A17 00                  <1>
    69                              <1> .pdw0:
    70 00000A18 31D2                <1>     xor edx, edx
    71 00000A1A 48F7F3              <1>     div rbx
    72 00000A1D 80C230              <1>     add dl, '0'
    73 00000A20 80FA39              <1>     cmp dl, '9'
    74 00000A23 7603                <1>     jbe .pdw1
    75 00000A25 80C207              <1>     add dl, 'A'-'0'-10
    76                              <1> .pdw1:
    77 00000A28 50                  <1>     push rax
    78 00000A29 88D0                <1>     mov al, dl    ;Save remainder byte
    79 00000A2B AA                  <1>     stosb   ;Store the byte and add one to rdi
    80 00000A2C 58                  <1>     pop rax
    81 00000A2D 4885C0              <1>     test rax, rax
    82 00000A30 75E6                <1>     jnz .pdw0
    83 00000A32 FC                  <1>     cld ;Return string ops to normal
    84 00000A33 48FFC7              <1>     inc rdi ;Skip the extra 0 that was inserted
    85 00000A36 4889FD              <1>     mov rbp, rdi    ;Point rbp to the head of the string
    86 00000A39 E85BF7FFFF          <1>     call ttyOutString
    87 00000A3E 5B                  <1>     pop rbx
    88 00000A3F 58                  <1>     pop rax
    89 00000A40 C3                  <1>     ret
    17                                  %include "MEMORY.ASM"
    18                              <1> allocateBlock:
    19                              <1> ;Allocates a program memory block, the caller then fixes the specifics
    20                              <1> ;Output: rbx = Pointer to generic memory block, or -1 if memory full
    21                              <1> ;       Caller needs to fill in, block size, block type and specifics
    22 00000A41 52                  <1>     push rdx
    23                              <1> .ab0:
    24 00000A42 488B1D(E20E0000)    <1>     mov rbx, qword [lastBlock]    ;Get the last block in the chain
    25 00000A49 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;First allocation?
    26 00000A50 742F                <1>     je .firstAllocation
    27 00000A52 C60374              <1>     mov byte [rbx + memBlock.bSignature], notLastMemBlock ;Make it not be the last
    28 00000A55 480FB75301          <1>     movzx rdx, word [rbx + memBlock.wBlockSize] ;Goto end of block
    29 00000A5A 4801D3              <1>     add rbx, rdx    ;Move rbx over the previous last block
    30 00000A5D 488B15(D00E0000)    <1>     mov rdx, qword [maxMemAddr]
    31 00000A64 4839D3              <1>     cmp rbx, rdx ;rbx above maxmemory? 
    32 00000A67 770C                <1>     ja .memoryFull
    33 00000A69 48891D(E20E0000)    <1>     mov qword [lastBlock], rbx  ;New last block
    34 00000A70 C60372              <1>     mov byte [rbx + memBlock.bSignature], lastMemBlock
    35                              <1> .exit:
    36 00000A73 5A                  <1>     pop rdx
    37 00000A74 C3                  <1>     ret
    38                              <1> .memoryFull:
    39 00000A75 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    39 00000A7E FF                  <1>
    40 00000A7F EBF2                <1>     jmp short .exit
    41                              <1> .firstAllocation:
    42                              <1> ;Deal with first allocation
    43 00000A81 488D1D(00000000)    <1>     lea rbx, section.programArea.vstart   ;Get this as the head of the chain
    44 00000A88 48891D(E20E0000)    <1>     mov qword [lastBlock], rbx
    45 00000A8F 48891D(DA0E0000)    <1>     mov qword [mcbChain], rbx
    46 00000A96 C60372              <1>     mov byte [rbx + memBlock.bSignature], lastMemBlock
    47 00000A99 66C743010000        <1>     mov word [rbx + memBlock.wBlockSize], 0 ;Dummy block
    48 00000A9F EBD2                <1>     jmp short .exit
    49                              <1> 
    50                              <1> findVariable:
    51                              <1> ;Input: rsi = Source string for variable name
    52                              <1> ;       ecx = Length of variable name (max 40)
    53                              <1> ;Output: rbx = ptr to varBlock/strBlock OR -1 if doesnt exist
    54 00000AA1 50                  <1>     push rax
    55 00000AA2 51                  <1>     push rcx
    56 00000AA3 52                  <1>     push rdx
    57 00000AA4 56                  <1>     push rsi
    58 00000AA5 57                  <1>     push rdi
    59 00000AA6 488B1D(DA0E0000)    <1>     mov rbx, qword [mcbChain]   ;Start of the chain
    60 00000AAD 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Chain empty?
    61 00000AB4 7446                <1>     je .exit
    62                              <1> .search:
    63 00000AB6 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
    64 00000ABA 7415                <1>     je .varFound    ;We found a numerical variable
    65 00000ABC 807B0302            <1>     cmp byte [rbx + memBlock.bBlockType], datBlockType
    66 00000AC0 741E                <1>     je .datFound    ;We found a string variable
    67                              <1> .invalid:
    68                              <1>     ;Are we at the end of the chain?
    69 00000AC2 803B72              <1>     cmp byte [rbx + memBlock.bSignature], lastMemBlock
    70 00000AC5 742B                <1>     je .varNotFound ;At the end of the chain and var not found? Error!
    71 00000AC7 480FB75301          <1>     movzx rdx, word [rbx + memBlock.wBlockSize]
    72 00000ACC 4801D3              <1>     add rbx, rdx    ;Goto next block
    73 00000ACF EBE5                <1>     jmp short .search
    74                              <1> .varFound:
    75                              <1>     ;Compare to see the var is our var
    76 00000AD1 488D7B0C            <1>     lea rdi, qword [rbx + varBlock.sVarName] ;point rdi to the name string
    77 00000AD5 51                  <1>     push rcx
    78 00000AD6 56                  <1>     push rsi
    79 00000AD7 F3A6                <1>     repe cmpsb  ;Compare one byte at a time
    80 00000AD9 5E                  <1>     pop rsi
    81 00000ADA 59                  <1>     pop rcx
    82 00000ADB 75E5                <1>     jne .invalid
    83 00000ADD F8                  <1>     clc
    84 00000ADE EB1C                <1>     jmp short .exit
    85                              <1> .datFound:
    86 00000AE0 488DBB04010000      <1>     lea rdi, qword [rbx + stringBlock.sVarName] ;point rdi to the name string
    87 00000AE7 51                  <1>     push rcx
    88 00000AE8 56                  <1>     push rsi
    89 00000AE9 F3A6                <1>     repe cmpsb  ;Compare one byte at a time
    90 00000AEB 5E                  <1>     pop rsi
    91 00000AEC 59                  <1>     pop rcx
    92 00000AED 75D3                <1>     jne .invalid
    93 00000AEF F8                  <1>     clc
    94 00000AF0 EB0A                <1>     jmp short .exit
    95                              <1> .varNotFound:
    96 00000AF2 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    96 00000AFB FF                  <1>
    97                              <1> .exit:
    98 00000AFC 5F                  <1>     pop rdi
    99 00000AFD 5E                  <1>     pop rsi
   100 00000AFE 5A                  <1>     pop rdx
   101 00000AFF 59                  <1>     pop rcx
   102 00000B00 58                  <1>     pop rax
   103 00000B01 C3                  <1>     ret
   104                              <1> 
   105                              <1> findFirstLine:
   106                              <1> ;Output: rbx = Pointer to the first program block
   107                              <1> ;         dx = Number of the first line
   108 00000B02 488B1D(EA0E0000)    <1>     mov rbx, qword [firstLinPtr]
   109 00000B09 668B15(F20E0000)    <1>     mov dx, word [firstLinNum]
   110 00000B10 C3                  <1>     ret
   111                              <1> 
   112                              <1> ;FIRST SEARCH FOR A LINE NUMBER BEFORE INSERTING IT INTO THE CHAIN
   113                              <1> ;IF THE LINE NUMBER IS FOUND, REPLACE THE COMMAND STRING
   114                              <1> 
   115                              <1> searchForProgramLine:
   116                              <1> ;Walk the program chain looking to see if a line number exists. If it does,
   117                              <1> ; return a pointer to the block in rbx. If it doesn't, return -1 in rbx
   118                              <1> ;Input: dx = Line number
   119                              <1> ;Output: rbx = Pointer to program block 
   120 00000B11 488B1D(EA0E0000)    <1>     mov rbx, qword [firstLinPtr]
   121 00000B18 4881FBFFFFFFFF      <1>     cmp rbx, -1
   122 00000B1F 7413                <1>     je .lineFound
   123                              <1> .search:
   124 00000B21 66395304            <1>     cmp word [rbx + progLineBlock.wLineNum], dx ;Equal line numbers?
   125 00000B25 740D                <1>     je .lineFound
   126 00000B27 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr]   ;Walk chain
   127 00000B2B 4881FBFFFFFFFF      <1>     cmp rbx, -1
   128 00000B32 75ED                <1>     jne .search ;Not -1? Keep searching
   129                              <1> .lineFound:
   130 00000B34 C3                  <1>     ret
   131                              <1> 
   132                              <1> insertProgramLine:
   133                              <1> ;Walk the program chain looking for the biggest number less than our
   134                              <1> ; line number. Once we have reached the end of the chain, insert the block there, or
   135                              <1> ; if there is no block, then we are the last in the chain
   136                              <1> ;Input: rsi = New Program Block to be added
   137 00000B35 50                  <1>     push rax
   138 00000B36 53                  <1>     push rbx
   139 00000B37 51                  <1>     push rcx
   140 00000B38 52                  <1>     push rdx
   141 00000B39 57                  <1>     push rdi
   142 00000B3A E8C3FFFFFF          <1>     call findFirstLine  ;Get start of program in rbx and line number in dx
   143                              <1> ;First check if we should be the first line
   144                              <1> 
   145 00000B3F 668B4E04            <1>     mov cx, word [rsi + progLineBlock.wLineNum] ;Save line number in cx
   146 00000B43 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Empty program marker
   147 00000B4A 744D                <1>     je .first
   148 00000B4C 6639D1              <1>     cmp cx, dx  ;If cx is below dx, then our entry is first
   149 00000B4F 7248                <1>     jb .first    
   150                              <1> ;Use ax as the best line number and rdi as the pointer to that block
   151 00000B51 66B8FFFF            <1>     mov ax, -1  ;Marker to indicate no insertion
   152                              <1> .walk:
   153 00000B55 48817B06FFFFFFFF    <1>     cmp qword [rbx + progLineBlock.qPtr], -1    ;We are at the end
   154 00000B5D 7419                <1>     je .sort
   155 00000B5F 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Walk chain in rbx
   156 00000B63 663B4B04            <1>     cmp cx, word [rbx + progLineBlock.wLineNum]
   157 00000B67 77EC                <1>     ja .walk    ;If line number is above my line number, keep walking
   158                              <1> .candidate:
   159                              <1>     ;If the new line number is below the old line number, reject
   160 00000B69 663B4304            <1>     cmp ax, word [rbx + progLineBlock.wLineNum]
   161 00000B6D 72E6                <1>     jb .walk
   162 00000B6F 4889DF              <1>     mov rdi, rbx
   163 00000B72 668B4304            <1>     mov ax, word [rbx + progLineBlock.wLineNum]
   164 00000B76 EBDD                <1>     jmp short .walk
   165                              <1> .sort:
   166 00000B78 66FFC0              <1>     inc ax  ;If no candidates, exit
   167 00000B7B 740E                <1>     jz .skipLink
   168                              <1>     ;rdi points to the previous line to link to
   169 00000B7D 488B5706            <1>     mov rdx, qword [rdi + progLineBlock.qPtr]
   170 00000B81 48897706            <1>     mov qword [rdi + progLineBlock.qPtr], rsi   ;Insert self here
   171 00000B85 48895606            <1>     mov qword [rsi + progLineBlock.qPtr], rdx   ;Link new block to next line
   172 00000B89 EB20                <1>     jmp short .exit
   173                              <1> .skipLink:
   174 00000B8B 48897306            <1>     mov qword [rbx + progLineBlock.qPtr], rsi   ;Link rsi to last element in list
   175 00000B8F 48C74606FFFFFFFF    <1>     mov qword [rsi + progLineBlock.qPtr], -1    ;End of chain marker
   176 00000B97 EB12                <1>     jmp short .exit
   177                              <1> .first:
   178 00000B99 488935(EA0E0000)    <1>     mov qword [firstLinPtr], rsi
   179 00000BA0 66890D(F20E0000)    <1>     mov word [firstLinNum], cx
   180 00000BA7 48895E06            <1>     mov qword [rsi + progLineBlock.qPtr], rbx   ;Put the old first line as second line
   181                              <1> .exit:
   182 00000BAB 5F                  <1>     pop rdi
   183 00000BAC 5A                  <1>     pop rdx
   184 00000BAD 59                  <1>     pop rcx
   185 00000BAE 5B                  <1>     pop rbx
   186 00000BAF 58                  <1>     pop rax
   187 00000BB0 C3                  <1>     ret
   188                              <1> 
   189                              <1> makeEditInteger:
   190                              <1> ;Will make a variable if it is new name, or edit the value if it already exists
   191                              <1> ;Input: rsi = Var name
   192                              <1> ;       (e)cx = Length of varname, max 40 chars
   193                              <1> ;       rax = Value
   194 00000BB1 E8EBFEFFFF          <1>     call findVariable   ;rbx returned with var block or -1
   195 00000BB6 4881FBFFFFFFFF      <1>     cmp rbx, -1
   196 00000BBD 7405                <1>     je .newVar
   197 00000BBF 48894304            <1>     mov qword [rbx + varBlock.qValue], rax
   198 00000BC3 C3                  <1>     ret
   199                              <1> .newVar:
   200 00000BC4 E878FEFFFF          <1>     call allocateBlock
   201 00000BC9 4881FBFFFFFFFF      <1>     cmp rbx, -1
   202 00000BD0 741E                <1>     je .error
   203 00000BD2 48894304            <1>     mov qword [rbx + varBlock.qValue], rax  ;Save value
   204 00000BD6 66894B01            <1>     mov word [rbx + varBlock.wBlockSize], cx    ;Save length of name
   205 00000BDA 668143010C00        <1>     add word [rbx + varBlock.wBlockSize], varBlock_size ;Add full block size
   206 00000BE0 C6430301            <1>     mov byte [rbx + varBlock.bBlockType], varBlockType  ;Block type
   207 00000BE4 57                  <1>     push rdi
   208 00000BE5 488D7B0C            <1>     lea rdi, qword [rbx + varBlock.sVarName]
   209 00000BE9 E87B000000          <1>     call strcpy ;Copy the string name into block buffer
   210 00000BEE 5F                  <1>     pop rdi
   211 00000BEF C3                  <1>     ret
   212                              <1> .error:
   213 00000BF0 488D2D4D010000      <1>     lea rbp, noMem
   214 00000BF7 E9CDF4FFFF          <1>     jmp criticalError
   215                              <1> makeEditString:
   216                              <1> ;Will make a string if it is new name, or replace the string. Strings are null termin
   217                              <1> ;Input: rsi = Var name
   218                              <1> ;       ecx = Length of varname, max 40 chars
   219                              <1> ;       rdx = Ptr to string itself
   220 00000BFC 57                  <1>     push rdi
   221 00000BFD 56                  <1>     push rsi
   222 00000BFE 50                  <1>     push rax
   223 00000BFF 53                  <1>     push rbx
   224 00000C00 E89CFEFFFF          <1>     call findVariable   ;rbx returned with string block or -1
   225 00000C05 4881FBFFFFFFFF      <1>     cmp rbx, -1
   226 00000C0C 7528                <1>     jne .strcopy
   227 00000C0E E82EFEFFFF          <1>     call allocateBlock
   228 00000C13 4881FBFFFFFFFF      <1>     cmp rbx, -1
   229 00000C1A 742E                <1>     je .error
   230 00000C1C 66894B01            <1>     mov word [rbx + stringBlock.wBlockSize], cx    ;Save length of name
   231 00000C20 668143010401        <1>     add word [rbx + stringBlock.wBlockSize], stringBlock_size ;Add full block size
   232 00000C26 C6430302            <1>     mov byte [rbx + stringBlock.bBlockType], datBlockType  ;Block type
   233 00000C2A 488DBB04010000      <1>     lea rdi, qword [rbx + stringBlock.sVarName]
   234 00000C31 E833000000          <1>     call strcpy ;Copy the string name into block buffer
   235                              <1> .strcopy:
   236 00000C36 488D7B04            <1>     lea rdi, qword [rbx + stringBlock.string]   ;point to string space
   237 00000C3A 4889D6              <1>     mov rsi, rdx    ;Point rsi to the string itself
   238 00000C3D E814000000          <1>     call terminatedstrcpy
   239 00000C42 30C0                <1>     xor al, al
   240 00000C44 AA                  <1>     stosb   ;Store the null delimiter
   241 00000C45 5B                  <1>     pop rbx
   242 00000C46 58                  <1>     pop rax
   243 00000C47 5E                  <1>     pop rsi
   244 00000C48 5F                  <1>     pop rdi
   245 00000C49 C3                  <1>     ret
   246                              <1> .error:
   247 00000C4A 488D2DF3000000      <1>     lea rbp, noMem
   248 00000C51 E973F4FFFF          <1>     jmp criticalError
   249                              <1> ;------------------------------------------------:
   250                              <1> ;  The below are misc memory related functions   :
   251                              <1> ;------------------------------------------------:
   252                              <1> terminatedstrcpy:
   253                              <1> ;rdi = Destination String
   254                              <1> ;rsi = Source String
   255                              <1> ;Copy a terminated string
   256 00000C56 50                  <1>     push rax
   257                              <1> .copy:
   258 00000C57 AC                  <1>     lodsb   ;Get char in al and inc rsi
   259 00000C58 3C00                <1>     cmp al, 0
   260 00000C5A 740B                <1>     je .exit
   261 00000C5C 3C3A                <1>     cmp al, ":"
   262 00000C5E 7407                <1>     je .exit
   263 00000C60 3C22                <1>     cmp al, 22h ;Speechmark
   264 00000C62 7403                <1>     je .exit
   265 00000C64 AA                  <1>     stosb   ;Save char from al and inc rdi
   266 00000C65 EBF0                <1>     jmp short .copy 
   267                              <1> .exit:
   268 00000C67 58                  <1>     pop rax
   269 00000C68 C3                  <1>     ret
   270                              <1> strcpy:
   271                              <1> ;rdi = Destination string
   272                              <1> ;rsi = Source string
   273                              <1> ;rcx = Number of Chars to copy
   274 00000C69 57                  <1>     push rdi
   275 00000C6A 56                  <1>     push rsi
   276 00000C6B 51                  <1>     push rcx
   277 00000C6C F3A4                <1>     rep movsb
   278 00000C6E 59                  <1>     pop rcx
   279 00000C6F 5E                  <1>     pop rsi
   280 00000C70 5F                  <1>     pop rdi
   281 00000C71 C3                  <1>     ret
   282                              <1> strlen:
   283                              <1> ;Input: rsi = String start
   284                              <1> ;Output: rsi = String start
   285                              <1> ;        ecx = String length, inclusive of NULL char
   286 00000C72 50                  <1>     push rax
   287 00000C73 56                  <1>     push rsi
   288 00000C74 31C9                <1>     xor ecx, ecx    ;Clear counter
   289                              <1> .search:
   290 00000C76 AC                  <1>     lodsb
   291 00000C77 FFC1                <1>     inc ecx
   292 00000C79 84C0                <1>     test al, al ;Is this a null char?
   293 00000C7B 75F9                <1>     jnz .search ;Null not found
   294                              <1> .exit:
   295 00000C7D 5E                  <1>     pop rsi
   296 00000C7E 58                  <1>     pop rax
   297 00000C7F C3                  <1>     ret
   298                              <1> 
   299                              <1> memoryDetection:
   300 00000C80 B820E80000          <1>     mov eax, 0E820h
   301 00000C85 CD35                <1>     int 35h     ;rax = ptr to start, rsi = ptr to data table, each entry 24 bytes
   302 00000C87 EB07                <1>     jmp short .fsa1
   303                              <1> .findStartAddr:
   304 00000C89 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   305                              <1> .fsa1:
   306 00000C90 6685C9              <1>     test cx, cx
   307 00000C93 742C                <1>     jz .worstCase
   308 00000C95 66FFC9              <1>     dec cx
   309 00000C98 488B1E              <1>     mov rbx, qword [rsi]    ;Get the address entry into rbx
   310 00000C9B 4839C3              <1>     cmp rbx, rax    
   311 00000C9E 75E9                <1>     jne .findStartAddr
   312 00000CA0 488B4608            <1>     mov rax, qword [rsi + 8] ;Get the number of bytes saved into rax
   313                              <1> 
   314 00000CA4 488D15(00000000)    <1>     lea rdx, section.programArea.vstart
   315 00000CAB 4829DA              <1>     sub rdx, rbx    ;Get the size of the interpreter and internal data area
   316 00000CAE 4829D0              <1>     sub rax, rdx    ;Remove the number of bytes reserved to the interpreter
   317 00000CB1 E832FDFFFF          <1>     call printdecimalword
   318 00000CB6 4801C3              <1>     add rbx, rax    ;Add number of bytes to start address
   319 00000CB9 48891D(D00E0000)    <1>     mov qword [maxMemAddr], rbx ;Save this address
   320                              <1> .exit:
   321 00000CC0 C3                  <1>     ret
   322                              <1> .worstCase:
   323                              <1> ;Assume 2Mb MAX memory, rax has base address
   324 00000CC1 48BB00002000000000- <1>     mov rbx, 200000h    ;2Mb value
   324 00000CCA 00                  <1>
   325 00000CCB 4829C3              <1>     sub rbx, rax
   326 00000CCE 4889D8              <1>     mov rax, rbx    ;Get value in rax
   327 00000CD1 E812FDFFFF          <1>     call printdecimalword
   328 00000CD6 48C705(D00E0000)00- <1>     mov qword [maxMemAddr], 200000h
   328 00000CDE 002000              <1>
   329 00000CE1 C3                  <1>     ret
   330                              <1> 
    18                                  %include "BASICDAT.ASM"
    19 00000CE2 4F6B0A0D00          <1> prompt  db "Ok",0Ah,0Dh,0
    20 00000CE7 5343522036342D4241- <1> mainmsg db "SCR 64-BASIC v0.1",0Ah,0Dh,0
    20 00000CF0 5349432076302E310A- <1>
    20 00000CF9 0D00                <1>
    21 00000CFB 204279746573206672- <1> bytemsg db " Bytes free",0Ah,0Dh,0
    21 00000D04 65650A0D00          <1>
    22 00000D09 0A0D00              <1> crlf    db 0Ah,0Dh,0
    23 00000D0C 4572726F720A0D00    <1> errmsg  db "Error",0Ah,0Dh,0
    24 00000D14 303132333435363738- <1> numbers db "0123456789"
    24 00000D1D 39                  <1>
    25                              <1> ;startVarChars db "ABCDEFGHIJKLMNOPQRSTUVWXYZ" ;Valid starting chars for a var name
    26                              <1> ;numStartVarChars equ $ - startVarChars
    27 00000D1E 414243444546474849- <1> varChrs db "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789%$" ;Valid inner chars for var name
    27 00000D27 4A4B4C4D4E4F505152- <1>
    27 00000D30 535455565758595A30- <1>
    27 00000D39 313233343536373839- <1>
    27 00000D42 2524                <1>
    28                              <1> numVarChars equ $ - varChrs
    29                              <1> ;% => Integer variable (8 bytes)
    30                              <1> ;! => Single-Precision, Unused and ignored
    31                              <1> ;# => Double-Precision, Unused and ignored
    32                              <1> ;$ => String variable
    33                              <1> 
    34                              <1> ;Error Messages
    35 00000D44 4F7574206F66206D65- <1> noMem   db "Out of memory",0Ah,0Dh,0
    35 00000D4D 6D6F72790A0D00      <1>
    36 00000D54 53796E746178206572- <1> syntax  db "Syntax error",0Ah,0Dh,0
    36 00000D5D 726F720A0D00        <1>
    37 00000D63 54797065206D69736D- <1> typeError   db "Type mismatch",0Ah,0Dh,0
    37 00000D6C 617463680A0D00      <1>
    38 00000D73 556E646566696E6564- <1> lineNoXist  db "Undefined line number",0Ah,0Dh,0
    38 00000D7C 206C696E65206E756D- <1>
    38 00000D85 6265720A0D00        <1>
    39 00000D8B 427265616B20696E20- <1> breakmsg db "Break in ",0
    39 00000D94 00                  <1>
    40 00000D95 537461636B206F7665- <1> stkOvflw db "Stack overflow",0Ah,0Dh,0
    40 00000D9E 72666C6F770A0D00    <1>
    41                              <1> 
    42 00000DA6 5748494C4520776974- <1> nowend   db "WHILE without WEND", 0Ah, 0Dh, 0
    42 00000DAF 686F75742057454E44- <1>
    42 00000DB8 0A0D00              <1>
    43 00000DBB 57454E442077697468- <1> noWhile  db "WEND without WHILE", 0Ah, 0Dh, 0
    43 00000DC4 6F7574205748494C45- <1>
    43 00000DCD 0A0D00              <1>
    44 00000DD0 4E4558542077697468- <1> noFor    db "NEXT without FOR", 0Ah, 0Dh, 0
    44 00000DD9 6F757420464F520A0D- <1>
    44 00000DE2 00                  <1>
    45 00000DE3 464F5220776974686F- <1> noNext   db "FOR without NEXT", 0Ah, 0Dh, 0
    45 00000DEC 7574204E4558540A0D- <1>
    45 00000DF5 00                  <1>
    46 00000DF6 52455455524E207769- <1> noReturn db "RETURN without GOSUB", 0Ah, 0Dh, 0
    46 00000DFF 74686F757420474F53- <1>
    46 00000E08 55420A0D00          <1>
    19                                  Segment programArea follows=resSeg align=1 vfollows=resSeg valign=1
    20                                  ENDOFPROGRAM:

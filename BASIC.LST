     1                                      [map all BASIC.MAP]
     2                                      [DEFAULT REL]
     3                                      BITS 64
     4                                  %include "MEM.INC"
     5                              <1> 
     6                              <1> progLineBlockType   equ 0   ;Program Line
     7                              <1> varBlockType        equ 1   ;Variable block
     8                              <1> datBlockType        equ 2   ;Data block (i.e. a string block)
     9                              <1> 
    10                              <1> notLastMemBlock equ "t" ;Used for blocks that are not the last block
    11                              <1> lastMemBlock    equ "r" ;Used by the last block to indicate end of chain
    12                              <1> 
    13                              <1> %macro memBlockM 0 ;Memory block Macro
    14                              <1>     .bSignature resb 1      ;Valid Signature
    15                              <1>     .wBlockSize resw 1      ;Total block size in bytes
    16                              <1>     .bBlockType resb 1      ;Block type, program line, variable or string
    17                              <1> %endmacro
    18                              <1> 
    19                              <1> struc memBlock
    20                              <1>     memBlockM
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    21                              <1> endstruc
    22                              <1> 
    23                              <1> struc progLineBlock
    24                              <1>     memBlockM               ;Common memory block header
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    25 00000004 ????                <1>     .wLineNum   resw 1      ;Line number, up to 65535
    26 00000006 ????????????????    <1>     .qPtr       resq 1      ;Pointer to the next line, or -1 if last line
    27 0000000E <res 100h>          <1>     .sLine      resb maxLineLen  ;Maximum length 255, keep null char but 
    28                              <1>     ;                             NOT LINE NUMBER OR PRECEEDING SPACES
    29                              <1> endstruc
    30                              <1> 
    31                              <1> struc varBlock
    32                              <1>     memBlockM               ;Common memory block header
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    33 00000004 ????????????????    <1>     .qValue     resq 1      ;One value qword
    34                              <1>     .sVarName:              ;Up to 40 chars for the var name
    35                              <1> endstruc
    36                              <1> 
    37                              <1> struc stringBlock
    38                              <1>     memBlockM
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    39 00000004 <res 100h>          <1>     .string     resb maxLineLen    ;Strings allocate 256 chars
    40                              <1>     .sVarName:              ;Up to 40 chars for the var name
    41                              <1> endstruc
    42                              <1> 
    43                              <1> ;Variable equates
    44                              <1> intEquate   equ 0
    45                              <1> strEquate   equ 1
    46                              <1> 
    47                              <1> ;State byte equates
    48                              <1> breakBit    equ 1    ;Set means on
    49                              <1> traceBit    equ 2    ;Set means TRON, Clear means TROFF
    50                              <1> indirectBit equ 4    ;Set means indirect/program mode, Clear means direct/line mode
    51                              <1> ctrlFlow    equ 8    ;Set means do not find other expression on current line
    52                              <1> 
    53                              <1> ;Control Instruction Signatures
    54                              <1> WHILEsig    equ 055h
    55                              <1> FORsig      equ 05Ah
    56                              <1> GOSUBsig    equ 0A5h
    57                              <1> ;Control stack data structures
    58                              <1> 
    59                              <1> struc forStruct
    60 00000000 ????????????????    <1>     .specQword  resq 1  ;Special qword (see function description)
    61 00000008 ????????????????    <1>     .cntrPtr    resq 1  ;Pointer to counter variable
    62 00000010 ????????????????    <1>     .limitValue resq 1  ;At what value, or after, do we stop the loop 
    63 00000018 ????????????????    <1>     .stepValue  resq 1  ;By how much do we increase on each iteration
    64                              <1> ;Special qword:
    65                              <1> ; Byte 7 = Offset into the line for next instruction after FOR
    66                              <1> ; Bytes[6:5] = Line number of portion after FOR (either FOR line or line after FOR)
    67                              <1> ; Byte 4 = Offset into the line for next instruction after NEXT
    68                              <1> ; Bytes[3:2] = Line number of portion after NEXT (either NEXT line or line after NEXT)
    69                              <1> ; Byte 1 = Parity check sum for the qword, makes the sum of the bytes in qword 0
    70                              <1> ; Byte 0 = FOR signature
    71                              <1> endstruc
    72                              <1> 
    73                              <1> struc whileStruct
    74 00000000 ????????????????    <1>     .specQword  resq 1  ;Special qword
    75                              <1> ;Special qword:
    76                              <1> ; Byte 7 = Offset into the line for the condition to evaluate
    77                              <1> ; Bytes[6:5] = Line number of WHILE 
    78                              <1> ; Byte 4 = Offset in line for either first : after WEND or ASCII NULL (end of line)
    79                              <1> ; Bytes[3:2] = Line number of WEND
    80                              <1> ; Byte 1 = Parity check sum for the qword, makes the sum of the bytes in qword 0
    81                              <1> ; Byte 0 = WHILE signature
    82                              <1> endstruc
    83                              <1> 
    84                              <1> struc gosubStruct
    85 00000000 ????????????????    <1>     .specQword  resq 1  ;Special qword
    86                              <1> ;Special qword:
    87                              <1> ; Byte 7 =  Offset in line for either first : after GOSUB or ASCII NULL (end of line)
    88                              <1> ; Bytes[6:5] = Line number of GOSUB 
    89                              <1> ; Bytes[4:2] = 055AA55h space filler signature
    90                              <1> ; Byte 1 = Parity check sum for the qword, makes the sum of the bytes in qword 0
    91                              <1> ; Byte 0 = GOSUB signature
    92                              <1> endstruc
    93                              <1> 
    94                              <1> ;Stack based macros
    95                              <1> %macro makeSpaceOnStack 1
    96                              <1>     ;The argument is to specify how much space to make on the stack
    97                              <1>     ;It will check to ensure that we dont go past the stack minimum.
    98                              <1>     ;If we do, call stack overflow!
    99                              <1>     pop rax    ;Get the return address qword into rax
   100                              <1>     shl %1, 3  ;Multiply argument register by 8
   101                              <1>     sub rsp, %1 ;Clear space on the stack plus one qword for ret addr
   102                              <1>     lea rbp, stack
   103                              <1>     cmp rsp, rbp
   104                              <1>     ja .macroNotOverflow ;If rsp above overflow buffer, its oki
   105                              <1>     lea rbp, stkOvflw
   106                              <1>     jmp criticalError
   107                              <1> .macroNotOverflow:
   108                              <1>     ;rsp now points to the start of the cleared space
   109                              <1>     ;Put the return address back on the stack
   110                              <1>     push rax
   111                              <1> %endmacro
   112                              <1> 
   113                              <1> %macro cleanSpaceOnStack 1
   114                              <1>     ;The argument is to specify how much space to reclaim from the stack
   115                              <1>     pop rax
   116                              <1>     shl %1, 3   ;Multiply argument register by 8
   117                              <1>     add rsp, %1
   118                              <1>     push rax
   119                              <1> %endmacro
     5                                  Segment .text align=1
     6                                  %include "RELOC.ASM"
     7 00000000 55AA                <1>     dw 0AA55h 
     8                              <1> ;First verify I have Enough RAM for my program and then run
     9 00000002 B801E80000          <1>     mov eax, 0E801h ;Get low memory count in ax
    10 00000007 CD35                <1>     int 35h
    11 00000009 663D0008            <1>     cmp ax, 200000h/400h ;Divide 2Mb into 1Kb chunks.
    12 0000000D 722A                <1>     jb bad
    13 0000000F B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    14 00000014 0F32                <1>     rdmsr
    15 00000016 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    16 00000018 48C1E720            <1>     shl rdi, 20h        ;Shift high
    17 0000001C 89C7                <1>     mov edi, eax        ;Get the low dword in
    18 0000001E 4889F8              <1>     mov rax, rdi
    19 00000021 488D35(00000000)    <1>     lea rsi, section.resSeg.start
    20 00000028 4881C7[F60E0000]    <1>     add rdi, bssLen
    21 0000002F B900100000          <1>     mov ecx, 1000h
    22 00000034 F348A5              <1>     rep movsq
    23 00000037 FFE0                <1>     jmp qword rax
    24                              <1> bad:
    25 00000039 488D2D0D000000      <1>     lea rbp, badmsg
    26 00000040 B804130000          <1>     mov eax, 1304h
    27 00000045 CD30                <1>     int 30h
    28 00000047 30E4                <1>     xor ah, ah
    29 00000049 CD36                <1>     int 36h
    30 0000004B CD38                <1>     int 38h
    31 0000004D 4E6F7420456E6F7567- <1> badmsg: db "Not Enough Memory. Press any key to enter SYSDEBUG...",0
    31 00000056 68204D656D6F72792E- <1>
    31 0000005F 20507265737320616E- <1>
    31 00000068 79206B657920746F20- <1>
    31 00000071 656E74657220535953- <1>
    31 0000007A 44454255472E2E2E00  <1>
     7                                  Segment dSeg nobits align=1 start=0
     8                                  %include "BSS.ASM"
     9 00000000 <res 50h>           <1> oflowbuff   resq 10        ;10 Qwords of overflow buffer
    10                              <1> ;rsp should never get here when operating in a program.
    11                              <1> ;Only acceptable to be used when processing a line
    12 00000050 <res D40h>          <1> stack       resq 200h - 8 - 10*8  ;Save total 4Kb stack space
    13 00000D90 ????????????????    <1> stacktop    resq 1
    14                              <1> 
    15                              <1> maxLineLen  equ 256
    16 00000D98 <res 100h>          <1> inString    resb maxLineLen         ;256 character input string
    17                              <1> 
    18                              <1> ;This string is used for printing long numbers and saving
    19                              <1> ; the variable names for string comparisons
    20                              <1> digitStringLen  equ 48
    21 00000E98 <res 30h>           <1> digitString resb digitStringLen     
    22                              <1> 
    23 00000EC8 ????????????????    <1> minMemAddr  resq 1  ;Pointer from where to start allocating memory blocks
    24 00000ED0 ????????????????    <1> maxMemAddr  resq 1  ;Pointer to the byte past which we cannot allocate anything
    25                              <1> ;==============================================================================
    26                              <1> ;This is the SDA for each program and must be included in the program area
    27                              <1> ; once we add the ability to save the program to disk.
    28                              <1> ;==============================================================================
    29                              <1> 
    30                              <1> ;void* mcbChain, lastBlock, firstLinPtr = -1 => New program, empty entries
    31                              <1> 
    32 00000ED8 ??                  <1> strLen      resb 1  ;Counter for number of chars entered in string
    33 00000ED9 ??                  <1> stateByte   resb 1  ;Bit 0 => Break Set, stop processing after end of current line
    34 00000EDA ????????????????    <1> mcbChain    resq 1  ;Pointer to the start of the chain
    35 00000EE2 ????????????????    <1> lastBlock   resq 1  ;Pointer to the last block
    36 00000EEA ????????????????    <1> firstLinPtr resq 1  ;Pointer to the programs' first line 
    37 00000EF2 ????                <1> firstLinNum resw 1  ;Line number of the first line of the program
    38 00000EF4 ????                <1> currentLine resw 1  ;Currently being executed line number
    39                              <1> 
    40                              <1> bssLen: ;Needed to compute the resident portion load location
     9                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1
    10                                  %include "MAIN.ASM"
    11                              <1> start:
    12 00000000 B801C50000          <1>     mov eax, 0C501h
    13 00000005 CD35                <1>     int 35h         ;Connect the debugger
    14 00000007 E8A1010000          <1>     call ttyClear   ;Clear the teletype
    15                              <1>     ;Set the CtrlBreak Handler
    16 0000000C 488D3DC7000000      <1>     lea rdi, ctrlBreakHandler
    17 00000013 B03B                <1>     mov al, 3Bh
    18 00000015 E8C9000000          <1>     call setHandler
    19                              <1> 
    20                              <1>     ;Memory stuff
    21 0000001A 488D2DE0140000      <1>     lea rbp, mainmsg
    22 00000021 E87A010000          <1>     call ttyOutString
    23 00000026 E86F140000          <1>     call memoryDetection
    24 0000002B 488D2DE3140000      <1>     lea rbp, bytemsg
    25 00000032 E869010000          <1>     call ttyOutString
    26 00000037 E8CC080000          <1>     call newProgram         ;Use this to reset program pointers
    27                              <1> mainLoop:
    28 0000003C FC                  <1>     cld                 ;Set default string op direction
    29 0000003D 488D25(900D0000)    <1>     lea rsp, stacktop    ;Reinitialize stack pointer
    30 00000044 488D05F1FFFFFF      <1>     lea rax, mainLoop
    31 0000004B 8025(D90E0000)FE    <1>     and byte [stateByte], 0FEh  ;Clear the break bit
    32 00000052 50                  <1>     push rax    ;Save address on stack
    33 00000053 488D2DA2140000      <1>     lea rbp, prompt
    34 0000005A E841010000          <1>     call ttyOutString
    35                              <1> .ml0:
    36                              <1> ;This section will execute an input line if it is an interactive expression
    37                              <1> ; or store it in the program if it has a line number.
    38                              <1> ;It will keep accepting lines until a line is entered without a line number
    39 0000005F E89F000000          <1>     call getLineInput
    40 00000064 E854110000          <1>     call decimalToHex   ;Check to see if we have a valid line number
    41 00000069 6685C0              <1>     test ax, ax
    42 0000006C 750C                <1>     jnz .saveLine
    43                              <1> ;Here we execute the line, move rsi to the start of the line
    44 0000006E 488D35(980D0000)    <1>     lea rsi, inString
    45 00000075 E9AE010000          <1>     jmp runLine
    46                              <1> .saveLine:
    47                              <1>     ;ax has the line number
    48 0000007A 6689C2              <1>     mov dx, ax
    49 0000007D E8A9120000          <1>     call searchForProgramLine
    50 00000082 4881FBFFFFFFFF      <1>     cmp rbx, -1
    51 00000089 751D                <1>     jne .commonProc ;If not equal, line must exist, continue
    52 0000008B E8B1020000          <1>     call spaceSkip  ;Skip all the prceeding spaces
    53 00000090 803E00              <1>     cmp byte [rsi], 0  ;Is the first non space char the end of the string?
    54 00000093 742D                <1>     je .lineDoesntExist
    55                              <1>     ;So we have a new line that isn't empty, allocate a new block for this line
    56 00000095 E8C1110000          <1>     call allocateBlock  ;Return a default block in rbx
    57 0000009A C6430300            <1>     mov byte [rbx + progLineBlock.bBlockType], progLineBlockType
    58 0000009E 66894304            <1>     mov word [rbx + progLineBlock.wLineNum], ax
    59 000000A2 66C743010E01        <1>     mov word [rbx + progLineBlock.wBlockSize], progLineBlock_size
    60                              <1> .commonProc:
    61                              <1>     ;If the line already exists, simply override the stored string
    62                              <1>     ;rbx has a pointer to the block
    63 000000A8 E8DF130000          <1>     call strlen ;Get the string length
    64 000000AD 488D7B0E            <1>     lea rdi, qword [rbx + progLineBlock.sLine]  ;Get address here
    65 000000B1 E8CD130000          <1>     call strcpy ;Copy the program string to the program block
    66 000000B6 56                  <1>     push rsi
    67 000000B7 4889DE              <1>     mov rsi, rbx    ;Move the block into rsi
    68 000000BA E890120000          <1>     call insertProgramLine
    69 000000BF 5E                  <1>     pop rsi
    70 000000C0 EB9D                <1>     jmp short .ml0
    71                              <1> .lineDoesntExist:
    72 000000C2 488D2DC4140000      <1>     lea rbp, lineNoXist
    73                              <1> ;For any error, syntax or otherwise, come here
    74                              <1> criticalError:
    75                              <1> ;Called with rbp pointing at error message
    76 000000C9 E8D2000000          <1>     call ttyOutString
    77 000000CE C605(D90E0000)00    <1>     mov byte [stateByte], 0 ;Reset the state byte
    78 000000D5 E962FFFFFF          <1>     jmp mainLoop    ;Trash input line, restart line input
    79                              <1> 
    80                              <1> ctrlBreakHandler:
    81 000000DA 800D(D90E0000)01    <1>     or byte [stateByte], 1  ;Set the byte
    82 000000E1 48CF                <1>     iretq
    83                              <1> setHandler:
    84                              <1> ;Called with:
    85                              <1> ;   rdi = Pointer to interrupt handler
    86                              <1> ;   al = Interrupt number
    87 000000E3 89C5                <1>     mov ebp, eax    ;al has interrupt number which we need to save
    88 000000E5 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
    89                              <1> ;First call to get default BIOS segement selector and attribute word
    90 000000EB 88C3                <1>     mov bl, al  ;Set interrupt number 
    91 000000ED B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
    92 000000F2 CD35                <1>     int 35h
    93 000000F4 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
    94 000000F6 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
    95                              <1> ;dx preserves the attribute word
    96 000000F8 4889FB              <1>     mov rbx, rdi  ;Pointer passed in rdi
    97 000000FB B808F00000          <1>     mov eax, 0F008h ;Set descriptor
    98 00000100 CD35                <1>     int 35h
    99                              <1>     
   100 00000102 C3                  <1>     ret
    11                                  %include "TTY.ASM"
    12                              <1> getLineInput:
    13                              <1>     ;Sets rsi to the inputstring
    14 00000103 30E4                <1>     xor ah, ah
    15 00000105 8825(D80E0000)      <1>     mov byte [strLen], ah   ;Zero the char counter
    16 0000010B 488D3D(980D0000)    <1>     lea rdi, inString   ;Move to start of line
    17 00000112 4889FE              <1>     mov rsi, rdi
    18 00000115 57                  <1>     push rdi
    19 00000116 B900010000          <1>     mov ecx, maxLineLen
    20 0000011B 30C0                <1>     xor al, al    ;Ensure the input line is sanitised
    21 0000011D F3AA                <1>     rep stosb
    22 0000011F 5F                  <1>     pop rdi
    23                              <1> .getChar:
    24 00000120 E883000000          <1>     call ttyIn
    25 00000125 3C0D                <1>     cmp al, 0Dh ;Line Feed
    26 00000127 7456                <1>     je .gliExit
    27 00000129 3C08                <1>     cmp al, 08h ;Bspace
    28 0000012B 740F                <1>     je .glibspace
    29 0000012D 803D(D80E0000)FE    <1>     cmp byte [strLen], -2   ;If at max length (255 chars), simply beep and wait for either bspace or enter
    30 00000134 7459                <1>     je .gliFull 
    31 00000136 84C0                <1>     test al, al
    32 00000138 7443                <1>     je .gliExtendedChar
    33 0000013A EB29                <1>     jmp short .gliCheckCase
    34                              <1> .glibspace:
    35 0000013C F605(D80E0000)FF    <1>     test byte [strLen], -1  ;This will only be zero if strLen=0
    36 00000143 74DB                <1>     jz .getChar
    37 00000145 48FFCF              <1>     dec rdi ;Go back by one position in the input line
    38 00000148 FE0D(D80E0000)      <1>     dec byte [strLen]
    39 0000014E B008                <1>     mov al, 08h
    40 00000150 E846000000          <1>     call ttyOutChar
    41 00000155 B020                <1>     mov al, 20h  
    42 00000157 E83F000000          <1>     call ttyOutChar
    43 0000015C B008                <1>     mov al, 08h
    44 0000015E E838000000          <1>     call ttyOutChar
    45 00000163 EBBB                <1>     jmp short .getChar
    46                              <1> .gliCheckCase:
    47                              <1>     ;al has char
    48 00000165 E831000000          <1>     call ttyOutChar ;Echo the char as is, but store it uppercase
    49 0000016A 3C61                <1>     cmp al, "a"
    50 0000016C 7206                <1>     jb .gliccStore
    51 0000016E 3C7A                <1>     cmp al, "z"
    52 00000170 7702                <1>     ja .gliccStore
    53 00000172 2C20                <1>     sub al, 20h
    54                              <1> .gliccStore:
    55 00000174 AA                  <1>     stosb   ;Increment the pointer, add char to buffer
    56 00000175 FE05(D80E0000)      <1>     inc byte [strLen]   ;Inc char count
    57 0000017B EBA3                <1>     jmp short .getChar
    58                              <1> .gliExtendedChar:
    59                              <1>     ;Currently, extended chars do nothing, 
    60                              <1>     ; eventually add F1-F10 functionality
    61                              <1>     ; and arrow key support
    62 0000017D EBA1                <1>     jmp short .getChar
    63                              <1> .gliExit:
    64 0000017F 488D2D9D130000      <1>     lea rbp, crlf
    65 00000186 E815000000          <1>     call ttyOutString
    66 0000018B C60700              <1>     mov byte [rdi], 0   ;Null terminate string here
    67 0000018E C3                  <1>     ret
    68                              <1> .gliFull:
    69 0000018F B007                <1>     mov al, 07h
    70 00000191 E805000000          <1>     call ttyOutChar
    71 00000196 E985FFFFFF          <1>     jmp .getChar
    72                              <1> 
    73                              <1> ttyOutChar:
    74 0000019B B40E                <1>     mov ah, 0Eh
    75 0000019D CD30                <1>     int 30h
    76 0000019F C3                  <1>     ret
    77                              <1> ttyOutString:
    78                              <1> ;Print 0 terminated strings
    79 000001A0 B804130000          <1>     mov eax, 1304h
    80 000001A5 CD30                <1>     int 30h
    81 000001A7 C3                  <1>     ret
    82                              <1> ttyIn:
    83 000001A8 30E4                <1>     xor ah, ah
    84 000001AA CD36                <1>     int 36h
    85 000001AC C3                  <1>     ret
    86                              <1> ttyClear:
    87 000001AD B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
    88 000001B2 CD30                <1>     int 30h
    89 000001B4 B402                <1>     mov ah, 02h
    90 000001B6 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
    91 000001B8 88D7                <1>     mov bh, dl      ;Set cursor for page 0
    92 000001BA CD30                <1>     int 30h
    93 000001BC B707                <1>     mov bh, 07h     ;Grey/Black attribs
    94 000001BE B800060000          <1>     mov eax, 0600h  ;Clear whole screen
    95 000001C3 CD30                <1>     int 30h
    96 000001C5 C3                  <1>     ret
    12                                  %include "PROCESS.ASM"
    13                              <1> keywordParser:
    14                              <1> ;rsi must point to the start of the portion of the line to execute
    15 000001C6 E876010000          <1>     call spaceSkip  ;Skip any leading spaces
    16 000001CB 803E00              <1>     cmp byte [rsi], 0   ;Null terminated line, empty line?
    17 000001CE 7444                <1>     je .exitEmpty
    18                              <1>     ;rsi now points to function
    19 000001D0 488D3D3E050000      <1>     lea rdi, funTbl     ;Point rdi to the function table
    20                              <1> .functionFinderLoop:
    21 000001D7 0FB60F              <1>     movzx ecx, byte [rdi]  ;Get the string length  
    22 000001DA 80F9FF              <1>     cmp cl, -1  ;-1 is the end of table marker, either Var assignment or error
    23 000001DD 7440                <1>     je .notLetVarAssignment ;No key word found, consider variable assignment
    24 000001DF 56                  <1>     push rsi    ;Save ptr to start of string on stack 
    25 000001E0 57                  <1>     push rdi
    26 000001E1 48FFC7              <1>     inc rdi             ;Goto first char in function name
    27 000001E4 F3A6                <1>     repe cmpsb
    28 000001E6 5F                  <1>     pop rdi
    29 000001E7 5E                  <1>     pop rsi     ;Return ptr to start of string pointer from stack
    30 000001E8 84C9                <1>     test cl, cl ;Did all the chars match?
    31 000001EA 740F                <1>     jz .functionFound
    32 000001EC 480FB607            <1>     movzx rax, byte [rdi]    ;Skip unnecessary function pointer
    33 000001F0 480502000000        <1>     add rax, 2      ;Add 2 to skip relative pointer
    34 000001F6 4801C7              <1>     add rdi, rax
    35 000001F9 EBDC                <1>     jmp short .functionFinderLoop
    36                              <1> .functionFound:
    37                              <1>     ;Function found! Execute!
    38                              <1>     ;rsi points to start of expression to evaluate for function
    39                              <1>     ;rdi points to table entry
    40 000001FB 488D1D13050000      <1>     lea rbx, funTbl         ;Get table address
    41 00000202 480FB617            <1>     movzx rdx, byte [rdi]   ;Get pascal string length
    42 00000206 0FB70C17            <1>     movzx ecx, word [rdi + rdx] ;Add pascal strlen to table entry and get word offset
    43 0000020A 4801CB              <1>     add rbx, rcx    ;Add word offset to table base
    44 0000020D 48FFCA              <1>     dec rdx         ;Get number of chars in function name
    45 00000210 4801D6              <1>     add rsi, rdx    ;rsi points to first char AFTER function name
    46                              <1> .exit:
    47 00000213 C3                  <1>     ret 
    48                              <1> .exitEmpty:
    49 00000214 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    49 0000021D FF                  <1>
    50 0000021E C3                  <1>     ret
    51                              <1>     ;rbx has the function pointer, 
    52                              <1>     ;rsi points to the first char after the keyword (e.g. PRINT, INPUT etc)
    53                              <1> .notLetVarAssignment:
    54 0000021F 488D1D64060000      <1>     lea rbx, variableAssignment
    55 00000226 EBEB                <1>     jmp short .exit  ;Now call the function as if it was found from the table
    56                              <1> 
    57                              <1> runLine:
    58                              <1> ;New lines begin here, rsi point to the start of the program line
    59 00000228 F605(D90E0000)02    <1>     test byte [stateByte], traceBit ;Are we TRON?
    60 0000022F 0F85B0000000        <1>     jnz .tron
    61                              <1> .stringPortionProcess:
    62                              <1>     ;rsi points to string portion to begin processing
    63 00000235 E88CFFFFFF          <1>     call keywordParser
    64                              <1>     ;rbx has the function pointer, if rbx is -1, line was empty
    65                              <1>     ;rsi points to the first char after the keyword (e.g. PRINT, INPUT etc)
    66 0000023A 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If the line is empty, rbx has a -1 so skip the line
    67 00000241 7437                <1>     je .gotoNextLine
    68 00000243 F605(D90E0000)01    <1>     test byte [stateByte], breakBit ;Is break set before exec?
    69 0000024A 0F85C1000000        <1>     jnz .break
    70                              <1> ;EXEC   LINE    PORTION
    71 00000250 FFD3                <1>     call rbx        ;Call the function pointer in rbx
    72                              <1>     ;rsi should be pointing to the next portion of the line or the end of the line
    73                              <1> ;EXEC COMPLETE
    74 00000252 F605(D90E0000)01    <1>     test byte [stateByte], breakBit ;Is break set after exec?
    75 00000259 0F85B2000000        <1>     jnz .break
    76 0000025F F605(D90E0000)04    <1>     test byte [stateByte], indirectBit
    77 00000266 7448                <1>     jz .exit    ;IF in direct mode, just return to command line
    78 00000268 F605(D90E0000)08    <1>     test byte [stateByte], ctrlFlow ;Ctrl Flow =>ignore other expressions temporarily
    79 0000026F 7540                <1>     jnz .ctrlFlowHandler
    80                              <1> 
    81 00000271 E895040000          <1>     call findOtherExpressionsOnLine ;See if there are any other expressions
    82 00000276 84C0                <1>     test al, al ;If al is null, no more expressions on the line
    83                              <1>     ;If not null, keep executing expressions on same line
    84                              <1>     ;rsi points to first char after :
    85 00000278 75BB                <1>     jnz .stringPortionProcess ;If a : found, keep processing
    86                              <1> .gotoNextLine:
    87 0000027A 668B15(F40E0000)    <1>     mov dx, word [currentLine]  ;Get in rbx the ptr to current line
    88 00000281 E8A5100000          <1>     call searchForProgramLine
    89 00000286 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Does the line not exist somehow?
    90 0000028D 7421                <1>     je .exit
    91 0000028F 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Walk chain
    92 00000293 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Are we at the end of the chain?
    93 0000029A 7414                <1>     je .exit
    94 0000029C 668B5304            <1>     mov dx, word [rbx + progLineBlock.wLineNum] ;Save the new line number
    95 000002A0 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Point rsi to the start of the next line
    96                              <1> .gotoNextLineCommon:
    97 000002A4 668915(F40E0000)    <1>     mov word [currentLine], dx
    98 000002AB E978FFFFFF          <1>     jmp runLine
    99                              <1> .exit:
   100 000002B0 C3                  <1>     ret
   101                              <1> .ctrlFlowHandler:
   102                              <1>     ;The stack pointer should be pointing now at the block
   103                              <1>     ; control flow data block. 
   104                              <1>     ;The functions which return with this bit set, also have placed
   105                              <1>     ; the next line number in dx, offset into line in byte three of edx
   106 000002B1 8025(D90E0000)F7    <1>     and byte [stateByte], ~ctrlFlow ;First clear the ctrlflow bit
   107 000002B8 E86E100000          <1>     call searchForProgramLine   ;Get pointer to line
   108 000002BD 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Does the line not exist?
   109 000002C4 74DE                <1>     je .gotoNextLineCommon
   110 000002C6 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Point rsi to the start of the next line
   111 000002CA 89D0                <1>     mov eax, edx    ;Isolate the offset into the line
   112 000002CC C1E810              <1>     shr eax, 10h    ;Get byte three into byte 1
   113 000002CF 25FF000000          <1>     and eax, 0FFh   ;Save only the bottom byte
   114 000002D4 4801C6              <1>     add rsi, rax    ;Add the offset into the string to rsi
   115 000002D7 EBCB                <1>     jmp short .gotoNextLineCommon
   116                              <1> .badLineNumber:
   117 000002D9 488D2DAD120000      <1>     lea rbp, lineNoXist
   118 000002E0 E9E4FDFFFF          <1>     jmp criticalError
   119                              <1> 
   120                              <1> .tron:
   121                              <1> ;Print the line number about to be executed
   122 000002E5 F605(D90E0000)04    <1>     test byte [stateByte], indirectBit  ;Tron should only work in indirect mode
   123 000002EC 0F8443FFFFFF        <1>     jz .stringPortionProcess
   124 000002F2 B05B                <1>     mov al, "["
   125 000002F4 E8A2FEFFFF          <1>     call ttyOutChar
   126 000002F9 0FB705(F40E0000)    <1>     movzx eax, word [currentLine]
   127 00000300 E8E00E0000          <1>     call printdecimalword
   128 00000305 B05D                <1>     mov al, "]"
   129 00000307 E88FFEFFFF          <1>     call ttyOutChar
   130 0000030C E924FFFFFF          <1>     jmp .stringPortionProcess
   131                              <1> .break:
   132 00000311 488D2D8D120000      <1>     lea rbp, breakmsg
   133 00000318 E883FEFFFF          <1>     call ttyOutString
   134 0000031D 0FB705(F40E0000)    <1>     movzx eax, word [currentLine]
   135 00000324 E8BC0E0000          <1>     call printdecimalword
   136 00000329 488D2DF3110000      <1>     lea rbp, crlf
   137 00000330 E86BFEFFFF          <1>     call ttyOutString
   138                              <1>     ;Preserve only bit 2 of the state byte
   139 00000335 8025(D90E0000)02    <1>     and byte [stateByte], traceBit
   140 0000033C E9FBFCFFFF          <1>     jmp mainLoop    ;Exit processing
    13                                  %include "PARSE.ASM"
    14                              <1> ;Main Parsing Routines go here
    15                              <1> 
    16                              <1> spaceSkip:
    17                              <1> ;Allows us to skip spaces that might have been placed for
    18                              <1> ; ease of reading by the user without modifying any registers
    19                              <1> ; except for rsi.
    20                              <1> ;Input: rsi = Pointer to string
    21                              <1> ;Output: rsi = First non space character encountered
    22 00000341 803E20              <1>     cmp byte [rsi], " "
    23 00000344 7505                <1>     jne .exit
    24 00000346 48FFC6              <1>     inc rsi
    25 00000349 EBF6                <1>     jmp short spaceSkip
    26                              <1> .exit:
    27 0000034B C3                  <1>     ret
    28                              <1> 
    29                              <1> getVarNameLength:
    30                              <1> ;Called pointing to the buffer with the var name in it
    31                              <1> ;Input: rsi = Start of var name
    32                              <1> ;Output: ecx = Length of varname
    33 0000034C 50                  <1>     push rax
    34 0000034D 56                  <1>     push rsi
    35 0000034E 57                  <1>     push rdi
    36 0000034F 53                  <1>     push rbx
    37 00000350 52                  <1>     push rdx
    38 00000351 31D2                <1>     xor edx, edx    ;Clear counter of chars
    39 00000353 488D1DDE110000      <1>     lea rbx, varChrs    ;Get the list of valid variable name chars
    40                              <1> .search:
    41 0000035A 4889DF              <1>     mov rdi, rbx    ;Save pointer in rbx
    42 0000035D AC                  <1>     lodsb       ;Get the first char into al
    43 0000035E B926000000          <1>     mov ecx, numVarChars
    44 00000363 F2AE                <1>     repne scasb       ;Look for char in the valid chars list
    45 00000365 750A                <1>     jne .exit   ;Char not found, drop it
    46 00000367 FFC2                <1>     inc edx     ;Add one to number of chars found
    47 00000369 81FA28000000        <1>     cmp edx, 40 ;At position for char 40?
    48 0000036F 72E9                <1>     jb .search  ;Whilst below, keep going
    49                              <1> .exit:
    50 00000371 89D1                <1>     mov ecx, edx
    51 00000373 5A                  <1>     pop rdx
    52 00000374 5B                  <1>     pop rbx
    53 00000375 5F                  <1>     pop rdi
    54 00000376 5E                  <1>     pop rsi
    55 00000377 58                  <1>     pop rax
    56 00000378 C3                  <1>     ret
    57                              <1> 
    58                              <1> getVarType:
    59                              <1> ;Input: rsi = Start of var name
    60                              <1> ;       rcx = Length of varname
    61                              <1> ;Output: ebx = 0 => Integer
    62                              <1> ;        ebx = 1 => String
    63                              <1> ;        ebx = -1 => Var doesnt exist, caller handles
    64 00000379 50                  <1>     push rax
    65 0000037A 51                  <1>     push rcx
    66 0000037B 56                  <1>     push rsi
    67 0000037C E83A0F0000          <1>     call findVariable
    68 00000381 4881FBFFFFFFFF      <1>     cmp rbx, -1
    69 00000388 7406                <1>     je .exit
    70 0000038A 0FB65B03            <1>     movzx ebx, byte [rbx + memBlock.bBlockType]
    71 0000038E FFCB                <1>     dec ebx
    72                              <1> .exit:
    73 00000390 5E                  <1>     pop rsi
    74 00000391 59                  <1>     pop rcx
    75 00000392 58                  <1>     pop rax
    76 00000393 C3                  <1>     ret
    77                              <1> 
    78                              <1> handleAlgebraicExpression:
    79                              <1> ;Input: rsi = Points to a mathematical expression
    80                              <1> ;Output: rax = Result of said expression
    81                              <1> ;Declares a syntax error if weird chars found
    82                              <1> ;Declares a type error if a string variable found
    83                              <1>     ;Handle Logical Connectives here
    84                              <1> .handleFourthLevel:
    85 00000394 E805010000          <1>     call .handleThirdLevel
    86                              <1> .parseLogicals:
    87 00000399 66813E414E          <1>     cmp word [rsi], "AN"
    88 0000039E 750A                <1>     jne .hae1
    89 000003A0 807E0244            <1>     cmp byte [rsi + 2], "D"
    90 000003A4 0F84AB000000        <1>     je .and
    91                              <1> .hae1:
    92 000003AA 66813E4F52          <1>     cmp word [rsi], "OR"
    93 000003AF 0F84AF000000        <1>     je .or
    94                              <1> 
    95 000003B5 66813E584F          <1>     cmp word [rsi], "XO"
    96 000003BA 750A                <1>     jne .hae2
    97 000003BC 807E0252            <1>     cmp byte [rsi + 2], "R"
    98 000003C0 0F84B0000000        <1>     je .xor
    99                              <1> .hae2:
   100 000003C6 813E494D5020        <1>     cmp dword [rsi], "IMP "
   101 000003CC 7468                <1>     je .imp
   102 000003CE 813E524F4C20        <1>     cmp dword [rsi], "ROL "
   103 000003D4 744F                <1>     je .leftRoll
   104 000003D6 813E524F5220        <1>     cmp dword [rsi], "ROR "
   105 000003DC 7436                <1>     je .rightRoll
   106 000003DE 813E53484C20        <1>     cmp dword [rsi], "SHL "
   107 000003E4 741D                <1>     je .leftShift
   108 000003E6 813E53485220        <1>     cmp dword [rsi], "SHR "
   109 000003EC 0F8573020000        <1>     jne .exit
   110                              <1> .rightShift:
   111                              <1> ;Shift count is truncated to between 1 and 255 for shift and Roll
   112 000003F2 50                  <1>     push rax
   113 000003F3 E89F000000          <1>     call .handleThirdLevelSkip
   114 000003F8 59                  <1>     pop rcx
   115 000003F9 4891                <1>     xchg rax, rcx   ;Move count into rcx, and shift target to rax
   116 000003FB 48D3E8              <1>     shr rax, cl
   117 000003FE E996FFFFFF          <1>     jmp .parseLogicals
   118                              <1> 
   119                              <1> .leftShift:
   120 00000403 50                  <1>     push rax
   121 00000404 E88E000000          <1>     call .handleThirdLevelSkip
   122 00000409 59                  <1>     pop rcx
   123 0000040A 4891                <1>     xchg rax, rcx   ;Move count into rcx, and shift target to rax
   124 0000040C 48D3E0              <1>     shl rax, cl
   125 0000040F E985FFFFFF          <1>     jmp .parseLogicals
   126                              <1> 
   127                              <1> .rightRoll:
   128 00000414 50                  <1>     push rax
   129 00000415 E87D000000          <1>     call .handleThirdLevelSkip
   130 0000041A 59                  <1>     pop rcx
   131 0000041B 4891                <1>     xchg rax, rcx   ;Move count into rcx, and shift target to rax
   132 0000041D 48D3C8              <1>     ror rax, cl
   133 00000420 E974FFFFFF          <1>     jmp .parseLogicals
   134                              <1> 
   135                              <1> .leftRoll:
   136 00000425 50                  <1>     push rax
   137 00000426 E86C000000          <1>     call .handleThirdLevelSkip
   138 0000042B 59                  <1>     pop rcx
   139 0000042C 4891                <1>     xchg rax, rcx   ;Move count into rcx, and shift target to rax
   140 0000042E 48D3C0              <1>     rol rax, cl
   141 00000431 E963FFFFFF          <1>     jmp .parseLogicals
   142                              <1> 
   143                              <1> .imp:
   144                              <1>     ;A => B == ¬A OR B
   145 00000436 50                  <1>     push rax
   146 00000437 E85B000000          <1>     call .handleThirdLevelSkip
   147 0000043C 59                  <1>     pop rcx ;rcx has A
   148 0000043D 48F7D1              <1>     not rcx
   149 00000440 4809C8              <1>     or rax, rcx
   150 00000443 E951FFFFFF          <1>     jmp .parseLogicals
   151                              <1> 
   152                              <1> .not:
   153                              <1>     ;xor rax, rax    ;Zero rax
   154 00000448 E84A000000          <1>     call .handleThirdLevelSkip  ;Get result in rax
   155 0000044D 48F7D0              <1>     not rax ;Save 1's compliment in rax
   156 00000450 E944FFFFFF          <1>     jmp .parseLogicals
   157                              <1> .and:
   158 00000455 50                  <1>     push rax
   159 00000456 E83C000000          <1>     call .handleThirdLevelSkip
   160 0000045B 59                  <1>     pop rcx
   161 0000045C 4821C8              <1>     and rax, rcx
   162 0000045F E935FFFFFF          <1>     jmp .parseLogicals
   163                              <1> .or:
   164 00000464 48FFCE              <1>     dec rsi ;handle third level skips skips one too many for or
   165 00000467 50                  <1>     push rax
   166 00000468 E82A000000          <1>     call .handleThirdLevelSkip
   167 0000046D 59                  <1>     pop rcx
   168 0000046E 4809C8              <1>     or rax, rcx
   169 00000471 E923FFFFFF          <1>     jmp .parseLogicals
   170                              <1> .xor:
   171 00000476 50                  <1>     push rax
   172 00000477 E81B000000          <1>     call .handleThirdLevelSkip
   173 0000047C 59                  <1>     pop rcx
   174 0000047D 4831C8              <1>     xor rax, rcx
   175 00000480 E914FFFFFF          <1>     jmp .parseLogicals
   176                              <1> .eqv:
   177                              <1> ;Not XOR, ie only if the two bits are equal do we set it
   178 00000485 50                  <1>     push rax
   179 00000486 E80C000000          <1>     call .handleThirdLevelSkip
   180 0000048B 59                  <1>     pop rcx
   181 0000048C 4831C8              <1>     xor rax, rcx
   182 0000048F 48F7D0              <1>     not rax
   183 00000492 E902FFFFFF          <1>     jmp .parseLogicals
   184                              <1> 
   185                              <1> ;Level 3, Relational Connectives
   186                              <1> .handleThirdLevelSkip:
   187 00000497 4881C603000000      <1>     add rsi, 3  ;Go past the end of the word
   188                              <1> .handleThirdLevel:
   189 0000049E E80B010000          <1>    call .handleSecondLevel
   190                              <1> .parseRelationals:
   191                              <1>     ;Handle Relational connectives
   192 000004A3 803E3D              <1>     cmp byte [rsi], "="
   193 000004A6 0F84BA000000        <1>     je .processEq
   194 000004AC 66813E3C3E          <1>     cmp word [rsi], "<>"
   195 000004B1 0F84D0000000        <1>     je .processNeq
   196 000004B7 66813E3E3C          <1>     cmp word [rsi], "><"
   197 000004BC 0F84C5000000        <1>     je .processNeq
   198 000004C2 803E3C              <1>     cmp byte [rsi], "<"
   199 000004C5 7430                <1>     je .processLess
   200 000004C7 803E3E              <1>     cmp byte [rsi], ">"
   201 000004CA 0F8595010000        <1>     jne .exit
   202                              <1> .processGreater:
   203 000004D0 807E013D            <1>     cmp byte [rsi + 1], "=" ;Is this a GEQ
   204 000004D4 7448                <1>     je .processGeq
   205 000004D6 50                  <1>     push rax
   206 000004D7 E8CF000000          <1>     call .handleSecondLevelSkip
   207 000004DC 59                  <1>     pop rcx ;lhs, rax has rhs of >
   208                              <1> 
   209 000004DD 53                  <1>     push rbx
   210 000004DE 31DB                <1>     xor ebx, ebx
   211 000004E0 4839C1              <1>     cmp rcx, rax
   212 000004E3 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1 ;Default to true
   212 000004EC FF                  <1>
   213 000004ED 480F4EC3            <1>     cmovle rax, rbx  ;Move the false value if less than
   214 000004F1 5B                  <1>     pop rbx
   215 000004F2 E9ACFFFFFF          <1>     jmp .parseRelationals
   216                              <1> .processLess:
   217 000004F7 807E013D            <1>     cmp byte [rsi + 1], "=" ;Is this a LEQ
   218 000004FB 7445                <1>     je .processLeq
   219 000004FD 50                  <1>     push rax
   220 000004FE E8A8000000          <1>     call .handleSecondLevelSkip
   221 00000503 59                  <1>     pop rcx ;lhs, rax has rhs of <
   222                              <1> 
   223 00000504 53                  <1>     push rbx
   224 00000505 31DB                <1>     xor ebx, ebx
   225 00000507 4839C1              <1>     cmp rcx, rax
   226 0000050A 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1 ;Default to true
   226 00000513 FF                  <1>
   227 00000514 480F4DC3            <1>     cmovge rax, rbx  ;Move the false value if greater than or equal to
   228 00000518 5B                  <1>     pop rbx
   229 00000519 E985FFFFFF          <1>     jmp .parseRelationals
   230                              <1> 
   231                              <1> .processGeq:
   232                              <1> ;Symbol has two chars so skip second char
   233 0000051E 48FFC6              <1>     inc rsi ;Skip first symbol
   234 00000521 50                  <1>     push rax
   235 00000522 E884000000          <1>     call .handleSecondLevelSkip
   236 00000527 59                  <1>     pop rcx ;lhs, rax has rhs of >=
   237                              <1> 
   238 00000528 53                  <1>     push rbx
   239 00000529 31DB                <1>     xor ebx, ebx
   240 0000052B 4839C1              <1>     cmp rcx, rax
   241 0000052E 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1 ;Default to true
   241 00000537 FF                  <1>
   242 00000538 480F4CC3            <1>     cmovl rax, rbx  ;Move the false value if less than
   243 0000053C 5B                  <1>     pop rbx
   244 0000053D E961FFFFFF          <1>     jmp .parseRelationals
   245                              <1> 
   246                              <1> .processLeq:
   247                              <1> ;Symbol has two chars so skip second char
   248 00000542 48FFC6              <1>     inc rsi
   249 00000545 50                  <1>     push rax
   250 00000546 E860000000          <1>     call .handleSecondLevelSkip
   251 0000054B 59                  <1>     pop rcx ;lhs, rax has rhs of <=
   252                              <1> 
   253 0000054C 53                  <1>     push rbx
   254 0000054D 31DB                <1>     xor ebx, ebx
   255 0000054F 4839C1              <1>     cmp rcx, rax
   256 00000552 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1 ;Default to true
   256 0000055B FF                  <1>
   257 0000055C 480F4FC3            <1>     cmovg rax, rbx  ;Move the false value if greater than
   258 00000560 5B                  <1>     pop rbx
   259 00000561 E93DFFFFFF          <1>     jmp .parseRelationals
   260                              <1> 
   261                              <1> .processEq:
   262 00000566 50                  <1>     push rax
   263 00000567 E83F000000          <1>     call .handleSecondLevelSkip
   264 0000056C 59                  <1>     pop rcx ;lhs, rax has rhs of =
   265                              <1> 
   266 0000056D 53                  <1>     push rbx 
   267 0000056E 31DB                <1>     xor ebx, ebx
   268 00000570 4839C1              <1>     cmp rcx, rax
   269 00000573 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1
   269 0000057C FF                  <1>
   270 0000057D 480F45C3            <1>     cmovne rax, rbx ;Only set rax to 0 if not equal
   271 00000581 5B                  <1>     pop rbx
   272 00000582 E91CFFFFFF          <1>     jmp .parseRelationals
   273                              <1> 
   274                              <1> .processNeq:
   275                              <1> ;Symbol has two chars so skip second char
   276 00000587 48FFC6              <1>     inc rsi
   277 0000058A 50                  <1>     push rax
   278 0000058B E81B000000          <1>     call .handleSecondLevelSkip
   279 00000590 59                  <1>     pop rcx ;lhs, rax has rhs of <>
   280                              <1> 
   281 00000591 53                  <1>     push rbx 
   282 00000592 31DB                <1>     xor ebx, ebx
   283 00000594 4839C1              <1>     cmp rcx, rax
   284 00000597 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1 ;Assume true, not equal
   284 000005A0 FF                  <1>
   285 000005A1 480F44C3            <1>     cmove rax, rbx ;Only set rax to 0 if equal
   286 000005A5 5B                  <1>     pop rbx
   287 000005A6 E9F8FEFFFF          <1>     jmp .parseRelationals
   288                              <1> 
   289                              <1> ;Level 2, Addition and Subtraction
   290                              <1> .handleSecondLevelSkip:
   291 000005AB 48FFC6              <1>     inc rsi
   292                              <1> .handleSecondLevel:
   293 000005AE E828000000          <1>     call .handleFirstLevel
   294                              <1> .parseAdditiveOperators:    
   295 000005B3 803E2D              <1>     cmp byte [rsi], '-'
   296 000005B6 7415                <1>     je .processMinus
   297 000005B8 803E2B              <1>     cmp byte [rsi], '+'
   298 000005BB 0F85A4000000        <1>     jne .exit              ;No operators, expression evaluated, exit
   299 000005C1 50                  <1>     push rax
   300 000005C2 E811000000          <1>     call .handleFirstLevelSkip   ;Parse first level
   301                              <1> .processAdd:    
   302 000005C7 59                  <1>     pop rcx
   303 000005C8 4801C8              <1>     add rax, rcx           ;Add the two numbers
   304 000005CB EBE6                <1>     jmp short .parseAdditiveOperators  ;Search again for + or -
   305                              <1> .processMinus:
   306 000005CD 50                  <1>     push rax
   307 000005CE E805000000          <1>     call .handleFirstLevelSkip   ;Parse first level
   308 000005D3 48F7D8              <1>     neg rax              ;Change a - b to a + -b
   309 000005D6 EBEF                <1>     jmp short .processAdd
   310                              <1> 
   311                              <1> ;Level 1, Division and multiplication
   312                              <1> 
   313                              <1> .handleFirstLevelSkip:
   314 000005D8 48FFC6              <1>     inc rsi              ;Skip the op symbol
   315                              <1> .handleFirstLevel:
   316 000005DB E82C000000          <1>     call .handleZerothLevel      ;Call third level
   317                              <1> .parseProductOperators:   
   318 000005E0 803E2F              <1>     cmp byte [rsi], '/'
   319 000005E3 7411                <1>     je .processDiv
   320 000005E5 803E2A              <1>     cmp byte [rsi], '*'
   321 000005E8 757B                <1>     jne .exit           ;Neither multiplication or division, return up a level
   322                              <1> 
   323 000005EA 50                  <1>     push rax
   324 000005EB E819000000          <1>     call .handleZerothLevelSkip   ;Call zeroth level
   325 000005F0 59                  <1>     pop rcx
   326 000005F1 48F7E9              <1>     imul rcx             ; Multiplication
   327 000005F4 EBEA                <1>     jmp short .parseProductOperators   ;Search again for * or /
   328                              <1> 
   329                              <1> .processDiv:
   330 000005F6 50                  <1>     push rax
   331 000005F7 E80D000000          <1>     call .handleZerothLevelSkip   ;Call zeroth level
   332 000005FC 59                  <1>     pop rcx
   333 000005FD 4891                <1>     xchg rax, rcx
   334 000005FF 31D2                <1>     xor edx, edx         ;Clear rdx for rdx:rax
   335 00000601 48F7F9              <1>     idiv rcx             ;Signed division
   336 00000604 E9D7FFFFFF          <1>     jmp .parseProductOperators         ;Search again for * or /
   337                              <1> 
   338                              <1> ;Level 0, Brackets, numbers and vars.
   339                              <1> 
   340                              <1> .handleZerothLevelSkip:
   341 00000609 48FFC6              <1>     inc rsi             ;Skip the op symbol
   342                              <1> .handleZerothLevel:
   343 0000060C E830FDFFFF          <1>     call spaceSkip
   344 00000611 AC                  <1>     lodsb               ;Read char and adv rsi
   345 00000612 3C28                <1>     cmp al, '('
   346 00000614 750C                <1>     jne .notBracket
   347 00000616 E879FDFFFF          <1>     call handleAlgebraicExpression  ;Parse the inner expression
   348 0000061B 803E29              <1>     cmp byte [rsi], ')'   
   349 0000061E 745F                <1>     je .closeBracket     ;If close bracket, goto skip spaces
   350 00000620 EB65                <1>     jmp short .error     ;Otherwise, error
   351                              <1> 
   352                              <1> .notBracket:    
   353 00000622 3C5E                <1>     cmp al, "^"
   354 00000624 7440                <1>     je .exponentFound
   355                              <1> .varConstCheck:
   356 00000626 3C41                <1>     cmp al, "A"       ;Alphabetical first char?
   357 00000628 730D                <1>     jae .varOrRNDFound      ;Yes, variable found or rnd function or error
   358 0000062A 48FFCE              <1>     dec rsi            ;Else back one symbol 
   359 0000062D E88B0B0000          <1>     call decimalToHex  ;to read number into rax
   360 00000632 E90AFDFFFF          <1>     jmp spaceSkip
   361                              <1> 
   362                              <1> .varOrRNDFound:
   363 00000637 48FFCE              <1>     dec rsi
   364                              <1> ;Evaluate UNARY operators here in reverse stack order of importance
   365 0000063A 813E4E4F5420        <1>     cmp dword [rsi], "NOT "
   366 00000640 0F8402FEFFFF        <1>     je .not
   367 00000646 48FFC6              <1>     inc rsi
   368 00000649 3C5A                <1>     cmp al, "Z"  
   369 0000064B 773A                <1>     ja .error   ;Syntax error if char not between A-Z  
   370 0000064D 3C52                <1>     cmp al, "R"
   371 0000064F 7517                <1>     jne .varFound
   372 00000651 803E4E              <1>     cmp byte [rsi], "N" ;rsi was advanced by 1, check 
   373 00000654 7512                <1>     jne .varFound
   374 00000656 807E0144            <1>     cmp byte [rsi+1], "D"
   375 0000065A 750C                <1>     jne .varFound
   376 0000065C 66AD                <1>     lodsw               ;Advance rsi by 3
   377 0000065E AC                  <1>     lodsb
   378 0000065F E440                <1>     in al, 40h         ;Read timer counter 0
   379 00000661 480FB6C0            <1>     movzx rax, al
   380                              <1> .exit:
   381 00000665 C3                  <1>     ret                ;Return
   382                              <1> .exponentFound:
   383 00000666 EBBE                <1>    jmp short .varConstCheck
   384                              <1> .varFound:    
   385 00000668 48FFCE              <1>     dec rsi ;Back a char
   386 0000066B 51                  <1>     push rcx
   387 0000066C E8DBFCFFFF          <1>     call getVarNameLength
   388 00000671 E81D000000          <1>     call getNumericVariable ;Get variable value in rax
   389 00000676 4801CE              <1>     add rsi, rcx    ;Go past the edge of the name
   390 00000679 59                  <1>     pop rcx
   391 0000067A E9C2FCFFFF          <1>     jmp spaceSkip
   392                              <1> 
   393                              <1> .closeBracket:
   394 0000067F 48FFC6              <1>     inc rsi
   395 00000682 E9BAFCFFFF          <1>     jmp spaceSkip
   396                              <1> .error:
   397 00000687 488D2DE00E0000      <1>     lea rbp, syntax
   398 0000068E E936FAFFFF          <1>     jmp criticalError
   399                              <1> 
   400                              <1> 
   401                              <1> getNumericVariable:
   402                              <1> ;Gets the value stored in a variable into rax 
   403                              <1> ;Input: rsi = Pointer to first char of a variable name
   404                              <1> ;Output: rax = Variable Value
   405                              <1> ;        rsi = Pointer to first char of a variable name
   406 00000693 56                  <1>     push rsi
   407 00000694 51                  <1>     push rcx
   408 00000695 53                  <1>     push rbx
   409 00000696 E8B1FCFFFF          <1>     call getVarNameLength   ;Returns the length of the var name in cx
   410 0000069B E81B0C0000          <1>     call findVariable       ;Returns a pointer to the variable block in rbx
   411 000006A0 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Variable doesnt exist? Pretend it is 0
   412 000006A7 740E                <1>     je .noVar
   413 000006A9 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
   414 000006AD 750C                <1>     jne .stringFoundError
   415 000006AF 488B4304            <1>     mov rax, qword [rbx + varBlock.qValue]
   416                              <1> .exit:
   417 000006B3 5B                  <1>     pop rbx
   418 000006B4 59                  <1>     pop rcx
   419 000006B5 5E                  <1>     pop rsi
   420 000006B6 C3                  <1>     ret
   421                              <1> .noVar:
   422 000006B7 31C0                <1>     xor eax, eax
   423 000006B9 EBF8                <1>     jmp short .exit
   424                              <1> .stringFoundError:
   425 000006BB 488D2DBB0E0000      <1>     lea rbp, typeError
   426 000006C2 E902FAFFFF          <1>     jmp criticalError
   427                              <1> 
   428                              <1> setNumericVariable:
   429                              <1> ;Sets the value stored in a variable
   430                              <1> ;Input: rsi = Pointer to first char of a variable name
   431                              <1> ;       rax = Variable value
   432                              <1> ;Output: rsi = Pointer to first char of variable name
   433 000006C7 56                  <1>     push rsi
   434 000006C8 51                  <1>     push rcx
   435 000006C9 53                  <1>     push rbx
   436                              <1> 
   437 000006CA E87DFCFFFF          <1>     call getVarNameLength   ;Returns the length of the var name in cx
   438 000006CF E8E70B0000          <1>     call findVariable       ;Returns a pointer to the variable block in rbx
   439 000006D4 4881FBFFFFFFFF      <1>     cmp rbx, -1             ;Variable doesnt exit?
   440 000006DB 740E                <1>     je .makeEditInteger      ;Make one!
   441 000006DD 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
   442 000006E1 750F                <1>     jne .stringFoundError
   443 000006E3 48894304            <1>     mov qword [rbx + varBlock.qValue], rax  ;Save value
   444                              <1> .exit:
   445 000006E7 5B                  <1>     pop rbx
   446 000006E8 59                  <1>     pop rcx
   447 000006E9 5E                  <1>     pop rsi
   448 000006EA C3                  <1>     ret
   449                              <1> .makeEditInteger:
   450 000006EB E8DB0C0000          <1>     call makeEditInteger
   451 000006F0 EBF5                <1>     jmp short .exit
   452                              <1> .stringFoundError:
   453 000006F2 488D2D840E0000      <1>     lea rbp, typeError
   454 000006F9 E9CBF9FFFF          <1>     jmp criticalError
   455                              <1> 
   456                              <1> setStringVariable:
   457                              <1> ;Sets the string pointed to by rdx
   458                              <1> ;Input: rsi = Pointer to first char of a variable name
   459                              <1> ;       rdx = Start of string
   460                              <1> ;Output: rsi = Pointer to first char of variable name
   461                              <1> ;Keeps adding characters until a 0, : or " encountered
   462                              <1> ;Adds a 0 to the end
   463 000006FE 51                  <1>     push rcx
   464 000006FF E848FCFFFF          <1>     call getVarNameLength   ;Gets the length of the var name in cx
   465 00000704 E80D0D0000          <1>     call makeEditString     ;Returns a ptr to the var block in rbx
   466 00000709 59                  <1>     pop rcx
   467 0000070A C3                  <1>     ret
   468                              <1> 
   469                              <1> findOtherExpressionsOnLine:
   470                              <1> ;Input: rsi = start of line portion
   471                              <1> ;Output: rsi = points to first char after first ":" found
   472                              <1> ;         al = : if it was found or 00 if not
   473 0000070B AC                  <1>     lodsb
   474 0000070C 3C00                <1>     cmp al, 0   ;Null hit, RIP procedure
   475 0000070E 7404                <1>     je .exit
   476 00000710 3C3A                <1>     cmp al, ":" ;Strings can be terminated with a :
   477 00000712 75F7                <1>     jne findOtherExpressionsOnLine
   478                              <1> .exit:
   479 00000714 C3                  <1>     ret
    14                                  %include "COMMANDS.ASM"
    15                              <1> 
    16                              <1> funTbl:
    17                              <1> ;Use PASCAL strings to know how long the comparisons need to be
    18                              <1> ;All function pointers are saved as distances from the head
    19                              <1> ; of the function table
    20                              <1> ;BASIC instructions are space terminated
    21                              <1> ;Interpreter instructions are null terminated
    22 00000715 044C4554            <1>     db 4, "LET"     ;DONE
    23 00000719 7001                <1>     dw oldSchoolAssignemnt - funTbl
    24                              <1> 
    25 0000071B 054E455700          <1>     db 5, "NEW",0     ;DONE
    26 00000720 F301                <1>     dw newProgram - funTbl 
    27                              <1> 
    28 00000722 07434C45415200      <1>     db 7, "CLEAR",0   ;DONE
    29 00000729 F301                <1>     dw newProgram - funTbl 
    30                              <1> 
    31 0000072B 064C49535400        <1>     db 6, "LIST",0    ;DONE
    32 00000731 5502                <1>     dw listProgram - funTbl 
    33                              <1> 
    34 00000733 0552554E00          <1>     db 5, "RUN",0     ;DONE
    35 00000738 9102                <1>     dw runProgram - funTbl
    36                              <1> 
    37 0000073A 085052494E542420    <1>     db 8, "PRINT$ "    ;Not implemented yet
    38 00000742 C202                <1>     dw printStatement - funTbl
    39                              <1> 
    40 00000744 075052494E5420      <1>     db 7, "PRINT "    ;DONE
    41 0000074B C202                <1>     dw printStatement - funTbl
    42                              <1> 
    43 0000074D 033F20              <1>     db 3, "? "        ;DONE, alias Print
    44 00000750 C202                <1>     dw printStatement - funTbl
    45                              <1> 
    46 00000752 07494E50555420      <1>     db 7, "INPUT "
    47 00000759 5D03                <1>     dw getInput - funTbl
    48                              <1> 
    49 0000075B 04494620            <1>     db 4, "IF "      ;DONE, needs to be tested
    50 0000075F 100A                <1>     dw handleIf - funTbl
    51                              <1> 
    52 00000761 06474F544F20        <1>     db 6, "GOTO "    ;DONE
    53 00000767 BD06                <1>     dw goto - funTbl
    54                              <1> 
    55 00000769 07474F53554220      <1>     db 7, "GOSUB "
    56 00000770 D206                <1>     dw gosub - funTbl
    57                              <1> 
    58 00000772 0852455455524E20    <1>     db 8, "RETURN "
    59 0000077A 1B07                <1>     dw return - funTbl
    60                              <1> 
    61 0000077C 0852455455524E00    <1>     db 8, "RETURN",0
    62 00000784 1B07                <1>     dw return - funTbl
    63                              <1> 
    64 00000786 05464F5220          <1>     db 5, "FOR "
    65 0000078B 6907                <1>     dw forLoop - funTbl
    66                              <1> 
    67 0000078D 064E45585400        <1>     db 6, "NEXT",0
    68 00000793 7508                <1>     dw next - funTbl
    69                              <1> 
    70 00000795 064E45585420        <1>     db 6, "NEXT "
    71 0000079B 7508                <1>     dw next - funTbl
    72                              <1> 
    73 0000079D 07                  <1>     db 7
    74                              <1> whileStr:
    75 0000079E 5748494C4520        <1>     db "WHILE "
    76 000007A4 E908                <1>     dw while - funTbl
    77                              <1> 
    78 000007A6 0657454E4420        <1>     db 6, "WEND "
    79 000007AC 6009                <1>     dw wend - funTbl    
    80 000007AE 0657454E4400        <1>     db 6, "WEND",0
    81 000007B4 6009                <1>     dw wend - funTbl   
    82                              <1> thenStr:
    83 000007B6 065448454E20        <1>     db 6, "THEN "    ;DONE
    84 000007BC 3D01                <1>     dw badCmd - funTbl
    85                              <1> elseStr:
    86 000007BE 06454C534520        <1>     db 6, "ELSE "    ;DONE
    87 000007C4 3D01                <1>     dw badCmd - funTbl
    88                              <1> 
    89 000007C6 0853595354454D00    <1>     db 8, "SYSTEM",0  ;DONE
    90 000007CE FC03                <1>     dw returnToDOS - funTbl
    91                              <1> 
    92 000007D0 05434C5300          <1>     db 5, "CLS",0     ;DONE
    93 000007D5 0804                <1>     dw cls - funTbl
    94                              <1> 
    95 000007D7 07444542554700      <1>     db 7, "DEBUG",0   ;DONE
    96 000007DE 0D04                <1>     dw dbgr - funTbl
    97                              <1> 
    98 000007E0 0654524F4E00        <1>     db 6, "TRON",0    ;DONE
    99 000007E6 4E01                <1>     dw tron - funTbl
   100                              <1> 
   101 000007E8 0754524F464600      <1>     db 7, "TROFF",0   ;DONE
   102 000007EF 5601                <1>     dw troff - funTbl
   103                              <1> 
   104 000007F1 05454E4420          <1>     db 5, "END "     ;DONE
   105 000007F6 4901                <1>     dw endProg - funTbl
   106 000007F8 05454E4400          <1>     db 5, "END",0     ;DONE
   107 000007FD 4901                <1>     dw endProg - funTbl
   108                              <1> 
   109 000007FF 0653544F5020        <1>     db 6, "STOP "    ;DONE
   110 00000805 4901                <1>     dw endProg - funTbl
   111 00000807 0653544F5000        <1>     db 6, "STOP",0    ;DONE
   112 0000080D 4901                <1>     dw endProg - funTbl
   113                              <1> 
   114 0000080F 0845534341504520    <1>     db 8, "ESCAPE "  ;DONE
   115 00000817 4901                <1>     dw endProg - funTbl
   116 00000819 0845534341504500    <1>     db 8, "ESCAPE",0  ;DONE
   117 00000821 4901                <1>     dw endProg - funTbl
   118                              <1> 
   119 00000823 07455045454B20      <1>     db 7, "EPEEK "
   120 0000082A 6601                <1>     dw memRead - funTbl
   121                              <1> 
   122 0000082C 0745504F4B4520      <1>     db 7, "EPOKE "
   123 00000833 6601                <1>     dw memWrite - funTbl
   124                              <1> 
   125 00000835 065045454B20        <1>     db 6, "PEEK "
   126 0000083B 6601                <1>     dw byteRead - funTbl
   127                              <1> 
   128 0000083D 06504F4B4520        <1>     db 6, "POKE "
   129 00000843 6601                <1>     dw byteWrite - funTbl
   130                              <1> 
   131 00000845 0552454D20          <1>     db 5, "REM "
   132 0000084A 6701                <1>     dw remark - funTbl
   133 0000084C 032720              <1>     db 3, "' "
   134 0000084F 6701                <1>     dw remark - funTbl
   135                              <1> 
   136 00000851 FF                  <1>     db -1    ;Demarkate the end of the table
   137                              <1> ;End of Table
   138                              <1> badCmd:
   139 00000852 488D2D150D0000      <1>     lea rbp, syntax
   140 00000859 E86BF8FFFF          <1>     call criticalError 
   141                              <1> endProg:
   142 0000085E E968010000          <1>     jmp runProgram.endProgramPoint
   143                              <1> tron:
   144 00000863 800D(D90E0000)02    <1>     or byte [stateByte], traceBit   ;Set the traceBit
   145 0000086A C3                  <1>     ret
   146                              <1> troff:
   147 0000086B 8025(D90E0000)FD    <1>     and byte [stateByte], ~traceBit ;Clear the traceBit
   148 00000872 C3                  <1>     ret
   149                              <1> notWrapper:
   150 00000873 6687DB              <1>     xchg bx, bx
   151 00000876 E9CDFBFFFF          <1>     jmp handleAlgebraicExpression.not
   152                              <1> memRead:
   153                              <1> memWrite:
   154                              <1> byteRead:
   155                              <1> byteWrite:
   156 0000087B C3                  <1>     ret
   157                              <1> remark:
   158                              <1> ;Comment code, keep looping until end of line
   159 0000087C AC                  <1>     lodsb
   160 0000087D 84C0                <1>     test al, al 
   161 0000087F 75FB                <1>     jnz remark
   162 00000881 48FFCE              <1>     dec rsi ;When al = 0, rsi points past it, move it back by one
   163 00000884 C3                  <1>     ret
   164                              <1> 
   165                              <1> oldSchoolAssignemnt:
   166                              <1> ;Assign with a LET directive
   167                              <1> ;rsi points to first char AFTER function name
   168 00000885 E8B7FAFFFF          <1>     call spaceSkip  ;Goto var assignment as if at start of line
   169                              <1> variableAssignment: ;Assignment without a LET directive
   170                              <1>     ;Establish if the string is a variable assignment or not
   171                              <1>     ;rsi points to start of string
   172 0000088A E8BDFAFFFF          <1>     call getVarNameLength   ;Get the variable name length
   173 0000088F 4889F7              <1>     mov rdi, rsi    ;Save ptr to start of string in rdi
   174 00000892 4801CE              <1>     add rsi, rcx    ;Go to end of string
   175 00000895 E8A7FAFFFF          <1>     call spaceSkip  ;Skip spaces after the end of the var name
   176 0000089A AC                  <1>     lodsb   ;Get the first char after the spaces. This must be a =
   177 0000089B 3C3D                <1>     cmp al, "="
   178 0000089D 7551                <1>     jne .syntaxError
   179 0000089F 4889FE              <1>     mov rsi, rdi    ;Return rsi to the start of the string name
   180 000008A2 4801CE              <1>     add rsi, rcx    ;Go to end of var name
   181 000008A5 48FFCE              <1>     dec rsi
   182 000008A8 AC                  <1>     lodsb   ;Get last char into al and inc rsi
   183 000008A9 3C24                <1>     cmp al, "$"
   184 000008AB 7420                <1>     je .stringAssignment
   185 000008AD E88FFAFFFF          <1>     call spaceSkip  ;Skip any spaces
   186 000008B2 48FFC6              <1>     inc rsi         ;Go past the equality sign
   187 000008B5 E887FAFFFF          <1>     call spaceSkip  ;Skip any spaces
   188 000008BA 803E22              <1>     cmp byte [rsi], 22h ;Open speech mark
   189 000008BD 743D                <1>     je .typError    ;Integers cant have speechmarks
   190 000008BF E8D0FAFFFF          <1>     call handleAlgebraicExpression  ;Get the result of the expression into rax
   191 000008C4 4889FE              <1>     mov rsi, rdi    ;Return the start of the string into rsi
   192 000008C7 E8FBFDFFFF          <1>     call setNumericVariable
   193 000008CC C3                  <1>     ret
   194                              <1> .stringAssignment:
   195                              <1> ;This simply copies the string which is either speech mark, 0 or : terminated
   196                              <1> ;First allocate a string
   197                              <1> ;rsi = First char after the end of the variable name
   198                              <1> ;rdi = start of variable name 
   199                              <1> ;rcx = char count for var name
   200 000008CD E86FFAFFFF          <1>     call spaceSkip  ;Skip any spaces
   201 000008D2 48FFC6              <1>     inc rsi         ;Go past the equality sign
   202 000008D5 E867FAFFFF          <1>     call spaceSkip  ;Skip any spaces
   203 000008DA 803E22              <1>     cmp byte [rsi], 22h ;Open speechmark check again
   204 000008DD 751D                <1>     jne .typError    ;Assigning a number to a string is a type error
   205                              <1>     ;rsi now points to the start of the string to save
   206 000008DF 48FFC6              <1>     inc rsi ;Go past the speech mark
   207 000008E2 4889F2              <1>     mov rdx, rsi    ;save start of string data in rdx
   208 000008E5 4889FE              <1>     mov rsi, rdi
   209 000008E8 57                  <1>     push rdi
   210 000008E9 E810FEFFFF          <1>     call setStringVariable
   211 000008EE 5E                  <1>     pop rsi ;Save the start of the assignment in rsi
   212 000008EF C3                  <1>     ret
   213                              <1> 
   214                              <1> .syntaxError:
   215 000008F0 488D2D770C0000      <1>     lea rbp, syntax ;Syntax error, keyword a bit confused
   216 000008F7 E9CDF7FFFF          <1>     jmp criticalError
   217                              <1> .typError:
   218 000008FC 488D2D7A0C0000      <1>     lea rbp, typeError
   219 00000903 E9C1F7FFFF          <1>     jmp criticalError
   220                              <1> 
   221                              <1> 
   222                              <1> newProgram: 
   223                              <1> ;Simply reset the program pointers
   224 00000908 488D05(00000000)    <1>     lea rax, section.programArea.vstart
   225 0000090F 488905(C80E0000)    <1>     mov qword [minMemAddr], rax
   226 00000916 488905(E20E0000)    <1>     mov qword [lastBlock], rax  ;Start writing at this location
   227 0000091D 488905(DA0E0000)    <1>     mov qword [mcbChain], rax   ;Create a mock MCB here
   228                              <1> 
   229 00000924 4889C2              <1>     mov rdx, rax
   230 00000927 668B4801            <1>     mov cx, word [rax + memBlock.wBlockSize]
   231 0000092B 4889C7              <1>     mov rdi, rax
   232 0000092E 30C0                <1>     xor al, al
   233 00000930 F3AA                <1>     rep stosb   ;Sanitise the old first allocation
   234                              <1> 
   235 00000932 C60272              <1>     mov byte [rdx + memBlock.bSignature], lastMemBlock
   236 00000935 66C742010000        <1>     mov word [rdx + memBlock.wBlockSize], 0 ;Dummy block, no size, gets overwritten
   237 0000093B 31C0                <1>     xor eax, eax
   238 0000093D 8805(D80E0000)      <1>     mov byte [strLen], al
   239 00000943 488D3D(980D0000)    <1>     lea rdi, inString
   240 0000094A B900010000          <1>     mov ecx, maxLineLen
   241 0000094F F3AA                <1>     rep stosb
   242 00000951 C605(F40E0000)0A    <1>     mov byte [currentLine], 10  ;Default to line 10
   243 00000958 48FFC8              <1>     dec rax ;rax = -1
   244 0000095B 488905(EA0E0000)    <1>     mov qword [firstLinPtr], rax ;No program in memory
   245 00000962 668905(F20E0000)    <1>     mov word [firstLinNum], ax
   246 00000969 C3                  <1>     ret
   247                              <1> listProgram:
   248                              <1> ;Go line by line and echo the program lines, inserting a crlf after each
   249                              <1> ;First print the line number, then add a space
   250 0000096A 488B1D(EA0E0000)    <1>     mov rbx, qword [firstLinPtr]    ;Get a pointer to the first program line
   251                              <1> .printLines:
   252 00000971 488D2DAB0B0000      <1>     lea rbp, crlf           ;New line
   253 00000978 E823F8FFFF          <1>     call ttyOutString
   254 0000097D 4881FBFFFFFFFF      <1>     cmp rbx, -1
   255 00000984 741F                <1>     je .exit
   256 00000986 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]
   257 0000098A E856080000          <1>     call printdecimalword
   258 0000098F B020                <1>     mov al, " "
   259 00000991 E805F8FFFF          <1>     call ttyOutChar ;Print a space
   260 00000996 488D6B0E            <1>     lea rbp, qword [rbx + progLineBlock.sLine]  ;Null terminated string
   261 0000099A E801F8FFFF          <1>     call ttyOutString
   262 0000099F 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr]   ;Walk list of program lines
   263 000009A3 EBCC                <1>     jmp short .printLines
   264                              <1> .exit:
   265 000009A5 C3                  <1>     ret
   266                              <1> runProgram:
   267                              <1>     ;Runs the machine in indirect mode
   268 000009A6 800D(D90E0000)04    <1>     or byte [stateByte], indirectBit    ;Entering indirect mode
   269                              <1>     ;rsi must point to the first line
   270 000009AD 668B15(F20E0000)    <1>     mov dx, word [firstLinNum]
   271 000009B4 668915(F40E0000)    <1>     mov word [currentLine], dx ;Reset the current line back to the start
   272 000009BB 488B1D(EA0E0000)    <1>     mov rbx, qword [firstLinPtr]
   273 000009C2 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine]
   274 000009C6 E85DF8FFFF          <1>     call runLine
   275                              <1> .endProgramPoint:
   276 000009CB 8025(D90E0000)FB    <1>     and byte [stateByte], ~indirectBit  ;Exit indirect mode
   277 000009D2 E965F6FFFF          <1>     jmp mainLoop    ;Resets the stack if exit mid loop to avoid stkoverflow
   278                              <1> 
   279                              <1> printStatement:
   280                              <1> ;Strings must be "" delimited or a string variable must be used
   281                              <1> ;rsi points to first char AFTER function name
   282                              <1> .printStart:
   283 000009D7 E865F9FFFF          <1>     call spaceSkip  ;move rsi to the start of the expression
   284 000009DC AC                  <1>     lodsb
   285                              <1> 
   286 000009DD 84C0                <1>     test al, al     ;Is this a null string?
   287 000009DF 746B                <1>     jz .psvexit
   288 000009E1 3C22                <1>     cmp al, 022h    ;22h = ASCII Speechmarks
   289 000009E3 7449                <1>     je .stringPrint
   290                              <1>     ;Here we check if the first char is ASCII, if it is, check if its a string var
   291 000009E5 3C41                <1>     cmp al, "A"
   292 000009E7 7204                <1>     jb .printExpr
   293 000009E9 3C5A                <1>     cmp al, "Z"
   294 000009EB 7214                <1>     jb .printStringVar
   295                              <1> .printExpr:
   296 000009ED 48FFCE              <1>     dec rsi ;Return to the start of the string
   297                              <1> .printExpr1:    ;Return without dec rsi
   298 000009F0 E89FF9FFFF          <1>     call handleAlgebraicExpression ;Gets value of a var and/or algebraic operation
   299 000009F5 E8EB070000          <1>     call printdecimalword
   300 000009FA E842F9FFFF          <1>     call spaceSkip
   301 000009FF EB2D                <1>     jmp short .stringPrint
   302                              <1> .printStringVar:
   303                              <1>     ;Check if it is a string var or a unary function
   304 00000A01 48FFCE              <1>     dec rsi
   305 00000A04 E843F9FFFF          <1>     call getVarNameLength
   306 00000A09 E86BF9FFFF          <1>     call getVarType
   307 00000A0E 81FB01000000        <1>     cmp ebx, strEquate
   308 00000A14 75DA                <1>     jne .printExpr1  ;rsi points to the same point as initially
   309 00000A16 E8A0080000          <1>     call findVariable   ;ecx has string length, get block ptr in rbx
   310 00000A1B 55                  <1>     push rbp
   311 00000A1C 488D6B04            <1>     lea rbp, qword [rbx + stringBlock.string]
   312 00000A20 E87BF7FFFF          <1>     call ttyOutString
   313 00000A25 5D                  <1>     pop rbp
   314 00000A26 4801CE              <1>     add rsi, rcx    ;Go past variable
   315 00000A29 E813F9FFFF          <1>     call spaceSkip
   316                              <1> .stringPrint:
   317 00000A2E AC                  <1>     lodsb
   318 00000A2F 3C00                <1>     cmp al, 0
   319 00000A31 7419                <1>     je .psvexit
   320 00000A33 3C3A                <1>     cmp al, ":"
   321 00000A35 7412                <1>     je .psvexitColon
   322 00000A37 3C22                <1>     cmp al, 022h    ;Close Speech marks, check next char
   323 00000A39 741E                <1>     je .closespeechmarks
   324 00000A3B 3C3B                <1>     cmp al, ";"     ;Semicolon means print next section on same line
   325 00000A3D 7429                <1>     je .continue
   326 00000A3F E857F7FFFF          <1>     call ttyOutChar
   327 00000A44 EBE8                <1>     jmp short .stringPrint
   328                              <1> .openSpeechMark:
   329 00000A46 48FFC6              <1>     inc rsi ;Go back a char
   330                              <1> .psvexitColon:
   331 00000A49 48FFCE              <1>     dec rsi ;Go back a char
   332                              <1> .psvexit:
   333 00000A4C 488D2DD00A0000      <1>     lea rbp, crlf
   334 00000A53 E848F7FFFF          <1>     call ttyOutString
   335 00000A58 C3                  <1>     ret
   336                              <1> .closespeechmarks:
   337 00000A59 E8E3F8FFFF          <1>     call spaceSkip
   338 00000A5E AC                  <1>     lodsb
   339 00000A5F 3C3B                <1>     cmp al, ";" ;only exception to exiting if next non space char is a semicolon
   340 00000A61 74CB                <1>     je .stringPrint
   341 00000A63 48FFCE              <1>     dec rsi ;Go back a step
   342 00000A66 EBE4                <1>     jmp short .psvexit
   343                              <1> .continue:
   344 00000A68 E8D4F8FFFF          <1>     call spaceSkip
   345 00000A6D E965FFFFFF          <1>     jmp .printStart
   346                              <1> getInput:
   347                              <1> ;Take a string as a prompt
   348                              <1> ;rdi points just past the end of the command line
   349                              <1> ;rsi points to first char AFTER function name
   350                              <1> ;Input prompt strings must be speech mark delimited on both sides!
   351 00000A72 E8CAF8FFFF          <1>     call spaceSkip
   352                              <1>     ;Now check to see if the user has specified a custom prompt
   353 00000A77 AC                  <1>     lodsb   ;Get first symbol and go past it
   354 00000A78 3C22                <1>     cmp al, 22h ;Speechmark?
   355 00000A7A 7535                <1>     jne .defaultPrompt ;If no speechmark, print default prompt
   356                              <1> .customPrompt:
   357 00000A7C 4889F7              <1>     mov rdi, rsi    ;Save start of string in rdi
   358                              <1> .cp0:
   359 00000A7F AC                  <1>     lodsb           ;Now search for end of string speech marks or null terminator
   360 00000A80 3C22                <1>     cmp al, 22h     ;Is al a speech mark?
   361 00000A82 7410                <1>     je .printCustomPrompt
   362 00000A84 84C0                <1>     test al, al     ;Is al null?
   363 00000A86 75F7                <1>     jnz .cp0        ;No, keep searching for terminator
   364                              <1> .error:
   365 00000A88 488D2DDF0A0000      <1>     lea rbp, syntax
   366 00000A8F E935F6FFFF          <1>     jmp criticalError
   367                              <1> .printCustomPrompt:
   368 00000A94 4889FE              <1>     mov rsi, rdi    ;rsi points to the first char of the string
   369                              <1> .pcp0:
   370 00000A97 AC                  <1>     lodsb
   371 00000A98 3C22                <1>     cmp al, 22h     ;Speechmark?
   372 00000A9A 7407                <1>     je .stopPrompt
   373 00000A9C E8FAF6FFFF          <1>     call ttyOutChar
   374 00000AA1 EBF4                <1>     jmp short .pcp0
   375                              <1> .stopPrompt:
   376 00000AA3 E899F8FFFF          <1>     call spaceSkip  ;Skip spaces
   377 00000AA8 AC                  <1>     lodsb   ;Get first non space char after closing speechmark
   378 00000AA9 3C3B                <1>     cmp al, ";" ;Semicolon means no default prompt
   379 00000AAB 740E                <1>     je .noDefaultPrompt
   380 00000AAD 3C2C                <1>     cmp al, "," ;Comma also means no default prompt
   381 00000AAF 740A                <1>     je .noDefaultPrompt
   382                              <1> .defaultPrompt:
   383 00000AB1 48FFCE              <1>     dec rsi
   384 00000AB4 B03F                <1>     mov al, "?"
   385 00000AB6 E8E0F6FFFF          <1>     call ttyOutChar
   386                              <1> .noDefaultPrompt:
   387 00000ABB B020                <1>     mov al, " " ;space
   388 00000ABD E8D9F6FFFF          <1>     call ttyOutChar
   389 00000AC2 E87AF8FFFF          <1>     call spaceSkip  ;Skip spaces after default supressor to get to var name
   390 00000AC7 E880F8FFFF          <1>     call getVarNameLength   ;Get var name length in ecx
   391 00000ACC 488D3D(980E0000)    <1>     lea rdi, digitString    ;Buffer has 48 chars, string names are max 40
   392 00000AD3 E8AB090000          <1>     call strcpy     ;rsi points to var name
   393 00000AD8 57                  <1>     push rdi    ;rdi points to first char of variable
   394 00000AD9 51                  <1>     push rcx
   395 00000ADA E824F6FFFF          <1>     call getLineInput   ;Get input from the user in inString, null terminated
   396                              <1>     ;This will sanitise in direct mode meaning input cannot have any more statements
   397                              <1>     ; after it.
   398 00000ADF 59                  <1>     pop rcx
   399 00000AE0 5F                  <1>     pop rdi 
   400 00000AE1 4889FE              <1>     mov rsi, rdi    ;Save the start of the var name in rsi
   401 00000AE4 4801CE              <1>     add rsi, rcx    ;Go to end of var
   402 00000AE7 48FFCE              <1>     dec rsi
   403 00000AEA AC                  <1>     lodsb   ;Are we a string variable?
   404 00000AEB 488D35(980D0000)    <1>     lea rsi, inString   ;Move rsi to start of user input
   405 00000AF2 3C24                <1>     cmp al, "$"
   406 00000AF4 740F                <1>     je .handleString
   407                              <1> .handleNumeric:
   408 00000AF6 E899F8FFFF          <1>     call handleAlgebraicExpression  ;Get the result of the expression into rax
   409 00000AFB 4889FE              <1>     mov rsi, rdi    ;Return the start of the string into rsi
   410 00000AFE E8C4FBFFFF          <1>     call setNumericVariable
   411 00000B03 EB0B                <1>     jmp short .commonExit
   412                              <1> .handleString:
   413                              <1>     ;IF a string variable, come here
   414                              <1>     ;rdi has the start of the variable name
   415                              <1> 
   416                              <1>     ;rdx must point to the start of the string
   417                              <1>     ;rsi must point to the start of the variable name
   418 00000B05 4889F2              <1>     mov rdx, rsi
   419 00000B08 4889FE              <1>     mov rsi, rdi    ;Return start of user name in rsi
   420 00000B0B E8EEFBFFFF          <1>     call setStringVariable
   421                              <1> .commonExit:
   422 00000B10 C3                  <1>     ret
   423                              <1> 
   424                              <1> ;==========================================================:
   425                              <1> ;==========================================================:
   426                              <1> ;==========================================================:
   427                              <1> ;          Functions Related to Program Management         :
   428                              <1> ;==========================================================:
   429                              <1> ;==========================================================:
   430                              <1> ;==========================================================:
   431                              <1> returnToDOS:
   432 00000B11 B007                <1>     mov al, 07h
   433 00000B13 E883F6FFFF          <1>     call ttyOutChar
   434 00000B18 E9E3F4FFFF          <1>     jmp start   ;Reset the interpreter
   435                              <1> cls:
   436 00000B1D E98BF6FFFF          <1>     jmp ttyClear
   437                              <1> dbgr:
   438                              <1>     ;Hook int 40h to main prog EP to allow returning 
   439                              <1> ;First call to get default BIOS segement selector and attribute word
   440 00000B22 B340                <1>     mov bl, 40h
   441 00000B24 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   442 00000B29 CD35                <1>     int 35h
   443 00000B2B 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   444 00000B2D B940000000          <1>     mov ecx, 40h    ;Interrupt number
   445                              <1> ;dx preserves the attribute word
   446 00000B32 488D1D09000000      <1>     lea rbx, .farReturn  ;Pointer passed in
   447 00000B39 B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   448 00000B3E CD35                <1>     int 35h
   449 00000B40 CD38                <1>     int 38h ;Call debugger
   450                              <1> .farReturn:
   451                              <1>     ;Reconnect CTRL+BREAK handler
   452 00000B42 48BC-               <1>     mov rsp, stacktop   ;Immediately reset stack
   452 00000B44 [900D000000000000]  <1>
   453 00000B4C 488D3D87F5FFFF      <1>     lea rdi, ctrlBreakHandler
   454 00000B53 B03B                <1>     mov al, 3Bh
   455 00000B55 E889F5FFFF          <1>     call setHandler
   456                              <1>     
   457 00000B5A 488D2DC2090000      <1>     lea rbp, crlf
   458 00000B61 E83AF6FFFF          <1>     call ttyOutString
   459 00000B66 E9D1F4FFFF          <1>     jmp mainLoop
    15                                  %include "CTRLFLOW.ASM"
    16                              <1> 
    17                              <1> ;Handles all the specific functions related to control flow such as scanning 
    18                              <1> ; lines for WEND, RETURN, NEXT
    19                              <1> retScan:
    20                              <1> ;Gets the current line address and starts searching program from current prog line
    21                              <1> ; for a return
    22 00000B6B 56                  <1>     push rsi
    23 00000B6C 668B15(F40E0000)    <1>     mov dx, word [currentLine]  ;pre-load dx with the current line number
    24 00000B73 E8B3070000          <1>     call searchForProgramLine   ;Get program block pointer into rbx
    25 00000B78 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If for some reason line doesnt exist?
    26 00000B7F 0F8493000000        <1>     je .error   ;Unknown Error
    27                              <1> ;Now pack for the first portion/line after the GOSUB
    28                              <1> ;rsi points just after the GOSUB itself
    29 00000B85 56                  <1>     push rsi    ;Save the first point after the WHILE itself
    30 00000B86 E880FBFFFF          <1>     call findOtherExpressionsOnLine     ;Get the first : or ASCII NUL
    31 00000B8B 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]  ;Get the line number
    32 00000B8F 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine]  ;Load ptr to start of string in rsi
    33 00000B93 4829CE              <1>     sub rsi, rcx    ;Compute difference from start of string
    34 00000B96 89F1                <1>     mov ecx, esi    ;Should just be low byte of si so cl
    35 00000B98 81E1FF000000        <1>     and ecx, 0FFh   ;Save only bottom byte just in case of garbage
    36 00000B9E C1E110              <1>     shl ecx, 2*8    ;Move to the third byte in the dword
    37 00000BA1 09C8                <1>     or eax, ecx     ;Add byte three to eax
    38 00000BA3 89C2                <1>     mov edx, eax    ;Save in edx
    39 00000BA5 48C1E228            <1>     shl rdx, 5*8    ;Shift three bytes to top of qword
    40 00000BA9 5E                  <1>     pop rsi
    41                              <1> .initialSearch:
    42                              <1>     ;First look for a ASCII NUL or RETURN
    43 00000BAA 803E00              <1>     cmp byte [rsi], 0
    44 00000BAD 7415                <1>     je .gotoNextLine
    45 00000BAF 813E52455455        <1>     cmp dword [rsi], "RETU"
    46 00000BB5 7508                <1>     jne .notCandidate
    47 00000BB7 66817E04524E        <1>     cmp word [rsi + 4], "RN"
    48 00000BBD 7418                <1>     je .wordFound
    49                              <1> .notCandidate:
    50 00000BBF 48FFC6              <1>     inc rsi ;Now search up until the end of the line for a RETURN
    51 00000BC2 EBE6                <1>     jmp short .initialSearch
    52                              <1> .gotoNextLine:
    53 00000BC4 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Get pointer to next program line
    54 00000BC8 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Now, when walking if it gives a value of -1, no NEXT found
    55 00000BCF 7431                <1>     je .noRet
    56 00000BD1 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Load pointer to string rsi
    57 00000BD5 EBD3                <1>     jmp short .initialSearch
    58                              <1> .wordFound:
    59                              <1>     ;Here, RETURN found! Huzzah! Now pack edx correctly
    60                              <1>     ;Add 055AA55h in bytes 4:2
    61 00000BD7 48B8000055AA550000- <1>     mov rax, 055AA550000h
    61 00000BE0 00                  <1>
    62 00000BE1 4809C2              <1>     or rdx, rax
    63                              <1>     ;Compute checksum now
    64 00000BE4 31C0                <1>     xor eax, eax
    65 00000BE6 B0A5                <1>     mov al, GOSUBsig 
    66 00000BE8 6689C2              <1>     mov dx, ax  ;Zero checksum byte
    67 00000BEB 31C0                <1>     xor eax, eax
    68 00000BED B908000000          <1>     mov ecx, 8  ;8 times
    69                              <1> .csumLoop:
    70                              <1>     ;Spin rdx 8 times adding each byte to al
    71 00000BF2 00D0                <1>     add al, dl
    72 00000BF4 48C1C208            <1>     rol rdx, 8  ;Rotate left by 8 bits
    73 00000BF8 FFC9                <1>     dec ecx
    74 00000BFA 75F6                <1>     jnz .csumLoop
    75 00000BFC F6D8                <1>     neg al ;Get twos compliment of sum (FFh - al)
    76 00000BFE 88C6                <1>     mov dh, al  ;Save in checksum byte
    77                              <1> .exit:
    78 00000C00 5E                  <1>     pop rsi
    79 00000C01 C3                  <1>     ret
    80                              <1> .noRet:
    81 00000C02 488D2D070A0000      <1>     lea rbp, noReturn
    82 00000C09 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
    82 00000C12 FF                  <1>
    83 00000C13 E9E8FFFFFF          <1>     jmp .exit
    84                              <1> .error:
    85 00000C18 488D2D080A0000      <1>     lea rbp, uknowner
    86 00000C1F 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
    86 00000C28 FF                  <1>
    87 00000C29 E9D2FFFFFF          <1>     jmp .exit
    88                              <1> 
    89                              <1> wendScan:
    90                              <1> ; Gets the current line address and starts searching program from the current line
    91                              <1> ; for a WEND
    92                              <1> ; Puts the packed specialQword into rdx if a WEND is found
    93                              <1> ; Returns rdx = -1 if an error occured with rbp pointing to the error string
    94 00000C2E 56                  <1>     push rsi
    95 00000C2F 668B15(F40E0000)    <1>     mov dx, word [currentLine]  ;pre-load dx with the current line number
    96 00000C36 E8F0060000          <1>     call searchForProgramLine   ;Get program block pointer into rbx
    97 00000C3B 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If for some reason line doesnt exist?
    98 00000C42 0F84A2000000        <1>     je .error   ;Unknown Error
    99                              <1> ;Now pack for the first portion/line after the for loop
   100                              <1> ;rsi points just after the FOR itself
   101 00000C48 56                  <1>     push rsi    ;Save the first point after the WHILE itself
   102 00000C49 E8BDFAFFFF          <1>     call findOtherExpressionsOnLine     ;Get the first : or ASCII NUL
   103 00000C4E 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]  ;Get the line number
   104 00000C52 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine]  ;Load ptr to start of string in rsi
   105 00000C56 4829CE              <1>     sub rsi, rcx    ;Compute difference from start of string
   106 00000C59 89F1                <1>     mov ecx, esi    ;Should just be low byte of si so cl
   107 00000C5B 81E1FF000000        <1>     and ecx, 0FFh   ;Save only bottom byte just in case of garbage
   108 00000C61 C1E110              <1>     shl ecx, 2*8    ;Move to the third byte in the dword
   109 00000C64 09C8                <1>     or eax, ecx     ;Add byte three to eax
   110 00000C66 89C2                <1>     mov edx, eax    ;Save in edx
   111 00000C68 48C1E228            <1>     shl rdx, 5*8    ;Shift three bytes to top of qword
   112 00000C6C 5E                  <1>     pop rsi
   113                              <1> .initialSearch:
   114                              <1>     ;First look for a : or a ASCII NUL to leave the WHILE part of the line
   115 00000C6D 803E00              <1>     cmp byte [rsi], 0
   116 00000C70 740D                <1>     je .gotoNextLine
   117 00000C72 813E57454E44        <1>     cmp dword [rsi], "WEND"
   118 00000C78 7418                <1>     je .wordFound
   119 00000C7A 48FFC6              <1>     inc rsi ;Now search up until the end of the line for a WEND
   120                              <1>     ;"WEND" found here!
   121 00000C7D EBEE                <1>     jmp short .initialSearch
   122                              <1> .gotoNextLine:
   123 00000C7F 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Get pointer to next program line
   124 00000C83 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Now, when walking if it gives a value of -1, no NEXT found
   125 00000C8A 7448                <1>     je .noWend
   126 00000C8C 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Load pointer to string rsi
   127 00000C90 EBDB                <1>     jmp short .initialSearch
   128                              <1> .wordFound:
   129                              <1>     ;Here, word found! Huzzah! Now pack edx correctly
   130                              <1>     ;rsi points to the N in "WEND "
   131 00000C92 E874FAFFFF          <1>     call findOtherExpressionsOnLine 
   132                              <1>     ;make rsi point to next expression on the line or the end of the line
   133 00000C97 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]  ;Get the line number
   134 00000C9B 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine]  ;Load ptr to start of string in rsi
   135 00000C9F 4829CE              <1>     sub rsi, rcx    ;Compute difference from start of string
   136 00000CA2 89F1                <1>     mov ecx, esi    ;Should just be low byte of si so cl
   137 00000CA4 81E1FF000000        <1>     and ecx, 0FFh   ;Save only bottom byte just in case of garbage
   138 00000CAA C1E110              <1>     shl ecx, 2*8    ;Move to the third byte in the dword
   139 00000CAD 09C8                <1>     or eax, ecx     ;Add byte three to eax
   140 00000CAF 48C1E010            <1>     shl rax, 8*2    ;Shift three bytes to byte 4 of qword
   141 00000CB3 4809C2              <1>     or rdx, rax     ;Add bytes [4:2] to rdx
   142                              <1>     ;Compute checksum now
   143 00000CB6 31C0                <1>     xor eax, eax
   144 00000CB8 B055                <1>     mov al, WHILEsig 
   145 00000CBA 6689C2              <1>     mov dx, ax  ;Zero checksum byte
   146 00000CBD 31C0                <1>     xor eax, eax
   147 00000CBF B908000000          <1>     mov ecx, 8  ;8 times
   148                              <1> .csumLoop:
   149                              <1>     ;Spin rdx 8 times adding each byte to al
   150 00000CC4 00D0                <1>     add al, dl
   151 00000CC6 48C1C208            <1>     rol rdx, 8  ;Rotate left by 8 bits
   152 00000CCA FFC9                <1>     dec ecx
   153 00000CCC 75F6                <1>     jnz .csumLoop
   154 00000CCE F6D8                <1>     neg al ;Get twos compliment of sum (FFh - al)
   155 00000CD0 88C6                <1>     mov dh, al  ;Save in checksum byte
   156                              <1> .exit:
   157 00000CD2 5E                  <1>     pop rsi
   158 00000CD3 C3                  <1>     ret
   159                              <1> .noWend:
   160 00000CD4 488D2DE5080000      <1>     lea rbp, noWend
   161 00000CDB 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
   161 00000CE4 FF                  <1>
   162 00000CE5 E9E8FFFFFF          <1>     jmp .exit
   163                              <1> .error:
   164 00000CEA 488D2D36090000      <1>     lea rbp, uknowner
   165 00000CF1 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
   165 00000CFA FF                  <1>
   166 00000CFB E9D2FFFFFF          <1>     jmp .exit
   167                              <1> nextScan:
   168                              <1> ; Gets the current line address and starts searching program from the current line
   169                              <1> ; for a NEXT
   170                              <1> ; Puts the packed specialQword into rdx if a NEXT is found
   171                              <1> ; Returns rdx = -1 if an error occured with rbp pointing to the error string
   172 00000D00 56                  <1>     push rsi
   173 00000D01 668B15(F40E0000)    <1>     mov dx, word [currentLine]  ;pre-load dx with the current line number
   174 00000D08 E81E060000          <1>     call searchForProgramLine   ;Get program block pointer into rbx
   175 00000D0D 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If for some reason line doesnt exist?
   176 00000D14 0F84A2000000        <1>     je .error   ;Unknown Error
   177                              <1> ;Now pack for the first portion/line after the for loop
   178                              <1> ;rsi points just after the FOR itself
   179 00000D1A 56                  <1>     push rsi    ;Save the first point after the FOR itself
   180 00000D1B E8EBF9FFFF          <1>     call findOtherExpressionsOnLine     ;Get the first : or ASCII NUL
   181 00000D20 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]  ;Get the line number
   182 00000D24 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine]  ;Load ptr to start of string in rsi
   183 00000D28 4829CE              <1>     sub rsi, rcx    ;Compute difference from start of string
   184 00000D2B 89F1                <1>     mov ecx, esi    ;Should just be low byte of si so cl
   185 00000D2D 81E1FF000000        <1>     and ecx, 0FFh   ;Save only bottom byte just in case of garbage
   186 00000D33 C1E110              <1>     shl ecx, 2*8    ;Move to the third byte in the dword
   187 00000D36 09C8                <1>     or eax, ecx     ;Add byte three to eax
   188 00000D38 89C2                <1>     mov edx, eax    ;Save in edx
   189 00000D3A 48C1E228            <1>     shl rdx, 5*8    ;Shift three bytes to top of qword
   190 00000D3E 5E                  <1>     pop rsi
   191                              <1> .initialSearch:
   192                              <1>     ;First look for a : or a ASCII NUL to leave the FOR part of the line
   193 00000D3F 803E00              <1>     cmp byte [rsi], 0
   194 00000D42 740D                <1>     je .gotoNextLine
   195 00000D44 813E4E455854        <1>     cmp dword [rsi], "NEXT"
   196 00000D4A 7418                <1>     je .wordFound
   197 00000D4C 48FFC6              <1>     inc rsi ;Now search up until the end of the line for a NEXT
   198                              <1>     ;"NEXT" found here!
   199 00000D4F EBEE                <1>     jmp short .initialSearch
   200                              <1> .gotoNextLine:
   201 00000D51 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Get pointer to next program line
   202 00000D55 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Now, when walking if it gives a value of -1, no NEXT found
   203 00000D5C 7448                <1>     je .noNext
   204 00000D5E 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Load pointer to string rsi
   205 00000D62 EBDB                <1>     jmp short .initialSearch
   206                              <1> .wordFound:
   207                              <1>     ;Here, word found! Huzzah! Now pack edx correctly
   208                              <1>     ;rsi points to the N in "NEXT "
   209 00000D64 E8A2F9FFFF          <1>     call findOtherExpressionsOnLine 
   210                              <1>     ;make rsi point to next expression on the line or the end of the line
   211 00000D69 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]  ;Get the line number
   212 00000D6D 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine]  ;Load ptr to start of string in rsi
   213 00000D71 4829CE              <1>     sub rsi, rcx    ;Compute difference from start of string
   214 00000D74 89F1                <1>     mov ecx, esi    ;Should just be low byte of si so cl
   215 00000D76 81E1FF000000        <1>     and ecx, 0FFh   ;Save only bottom byte just in case of garbage
   216 00000D7C C1E110              <1>     shl ecx, 2*8    ;Move to the third byte in the dword
   217 00000D7F 09C8                <1>     or eax, ecx     ;Add byte three to eax
   218 00000D81 48C1E010            <1>     shl rax, 8*2    ;Shift three bytes to byte 4 of qword
   219 00000D85 4809C2              <1>     or rdx, rax     ;Add bytes [4:2] to rdx
   220                              <1>     ;Compute checksum now
   221 00000D88 31C0                <1>     xor eax, eax
   222 00000D8A B05A                <1>     mov al, FORsig 
   223 00000D8C 6689C2              <1>     mov dx, ax  ;Zero checksum byte
   224 00000D8F 31C0                <1>     xor eax, eax
   225 00000D91 B908000000          <1>     mov ecx, 8  ;8 times
   226                              <1> .csumLoop:
   227                              <1>     ;Spin rdx 8 times adding each byte to al
   228 00000D96 00D0                <1>     add al, dl
   229 00000D98 48C1C208            <1>     rol rdx, 8  ;Rotate left by 8 bits
   230 00000D9C FFC9                <1>     dec ecx
   231 00000D9E 75F6                <1>     jnz .csumLoop
   232 00000DA0 F6D8                <1>     neg al ;Get twos compliment of sum (FFh - al)
   233 00000DA2 88C6                <1>     mov dh, al  ;Save in checksum byte
   234                              <1> .exit:
   235 00000DA4 5E                  <1>     pop rsi
   236 00000DA5 C3                  <1>     ret
   237                              <1> .noNext:
   238 00000DA6 488D2D50080000      <1>     lea rbp, noNext
   239 00000DAD 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
   239 00000DB6 FF                  <1>
   240 00000DB7 E9E8FFFFFF          <1>     jmp .exit
   241                              <1> .error:
   242 00000DBC 488D2D64080000      <1>     lea rbp, uknowner
   243 00000DC3 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
   243 00000DCC FF                  <1>
   244 00000DCD E9D2FFFFFF          <1>     jmp .exit
   245                              <1> ;=======================================
   246                              <1> ;  ACTUAL CONTROL FLOW FUNCTIONS HERE  :
   247                              <1> ;=======================================
   248                              <1> ;All below functions return the line number in dx and the offset into the line
   249                              <1> ; to start reading at in byte three of edx
   250                              <1> goto:
   251                              <1> ;GOTO, works by replacing the address after the return address on the stack
   252                              <1> ;rsi points to first char AFTER function name
   253 00000DD2 E86AF5FFFF          <1>     call spaceSkip  ;Skip all preceeding spaces
   254 00000DD7 E8B8F5FFFF          <1>     call handleAlgebraicExpression  ;Turn the expression into a number in ax
   255 00000DDC 0FB7D0              <1>     movzx edx, ax   ;Line number into dx, start at beginning of line
   256 00000DDF 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   257 00000DE6 C3                  <1>     ret
   258                              <1> 
   259                              <1> gosub:
   260 00000DE7 E87FFDFFFF          <1>     call retScan
   261 00000DEC 4881FAFFFFFFFF      <1>     cmp rdx, -1
   262 00000DF3 7436                <1>     je .error
   263 00000DF5 B901000000          <1>     mov ecx, gosubStruct_size/8
   264                              <1>     makeSpaceOnStack rcx  ;Make four qwords of space on the stack
    96                              <2> 
    97                              <2> 
    98                              <2> 
    99 00000DFA 58                  <2>  pop rax
   100 00000DFB 48C1E103            <2>  shl %1, 3
   101 00000DFF 4829CC              <2>  sub rsp, %1
   102 00000E02 488D2D(50000000)    <2>  lea rbp, stack
   103 00000E09 4839EC              <2>  cmp rsp, rbp
   104 00000E0C 770C                <2>  ja .macroNotOverflow
   105 00000E0E 488D2D9A070000      <2>  lea rbp, stkOvflw
   106 00000E15 E9AFF2FFFF          <2>  jmp criticalError
   107                              <2> .macroNotOverflow:
   108                              <2> 
   109                              <2> 
   110 00000E1A 50                  <2>  push rax
   265 00000E1B 4889E5              <1>     mov rbp, rsp
   266 00000E1E 4881C508000000      <1>     add rbp, 8  ;Make rbp point to the base of the new struc
   267 00000E25 48895500            <1>     mov qword [rbp + forStruct.specQword], rdx  ;Move rdx into its place on the stack
   268                              <1>     ;rsi points just past the GOSUB
   269 00000E29 EBA7                <1>     jmp short goto ;Now behave like GOTO
   270                              <1> .error:
   271 00000E2B E999F2FFFF          <1>     jmp criticalError
   272                              <1> 
   273                              <1> return:
   274                              <1> ;First verify the GOSUB struc is on the stack
   275 00000E30 4889E5              <1>     mov rbp, rsp    ;Dont need to save rbp so trash it
   276 00000E33 4881C508000000      <1>     add rbp, 8  ;Make it point to the base of the struc past the return address
   277                              <1>     ;Read the qword on stack, verify it is a GOSUBstruc and passes checksum test
   278 00000E3A 488B5500            <1>     mov rdx, qword [rbp + gosubStruct.specQword]
   279 00000E3E 80FAA5              <1>     cmp dl, GOSUBsig
   280 00000E41 752F                <1>     jne .noReturn
   281                              <1>     ;Now compute checksum to verify its not an accident
   282 00000E43 30C0                <1>     xor al, al
   283 00000E45 B908000000          <1>     mov ecx, 8
   284                              <1> .checksumTest:
   285 00000E4A 00D0                <1>     add al, dl
   286 00000E4C 48C1CA08            <1>     ror rdx, 8
   287 00000E50 FFC9                <1>     dec ecx
   288 00000E52 75F6                <1>     jnz .checksumTest
   289 00000E54 84C0                <1>     test al, al     ;This should be 0
   290 00000E56 751A                <1>     jnz .noReturn
   291                              <1>  ;Now we are truly in a RETURN
   292 00000E58 48C1EA28            <1>     shr rdx, 5*8    ;Bring return information down to the lower three bytes
   293                              <1>     ;Clean the struc from the stack
   294 00000E5C B901000000          <1>     mov ecx, gosubStruct_size/8
   295                              <1>     cleanSpaceOnStack rcx
   114                              <2> 
   115 00000E61 58                  <2>  pop rax
   116 00000E62 48C1E103            <2>  shl %1, 3
   117 00000E66 4801CC              <2>  add rsp, %1
   118 00000E69 50                  <2>  push rax
   296 00000E6A 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   297 00000E71 C3                  <1>     ret
   298                              <1> .noReturn:
   299 00000E72 488D2D97070000      <1>     lea rbp, noReturn
   300 00000E79 E94BF2FFFF          <1>     jmp criticalError
   301                              <1> forLoop:
   302                              <1> ;This saves the following struc on the stack
   303                              <1> ;------------Hi stack addr-------------
   304                              <1> ;stepValue (qword), default 1
   305                              <1> ;limitValue (qword), to which value do we loop
   306                              <1> ;ptr to counter variable (qword)
   307                              <1> ;Special qword:
   308                              <1> ; Byte 7 = Offset into the line for next instruction
   309                              <1> ; Bytes[6:5] = Line number of portion after FOR (either FOR line or line after FOR)
   310                              <1> ; Byte 4 = Offset into the line for next instruction
   311                              <1> ; Bytes[3:2] = Line number of portion after NEXT (either NEXT line or line after NEXT)
   312                              <1> ; Byte 1 = Parity check sum for the qword, makes the sum of the bytes in qword 0
   313                              <1> ; Byte 0 = FOR signature
   314                              <1> ;------------Low stack addr------------
   315                              <1> ;rsp -> Return address
   316                              <1>     ;First check we have a NEXT following this FOR
   317 00000E7E E87DFEFFFF          <1>     call nextScan
   318 00000E83 4881FAFFFFFFFF      <1>     cmp rdx, -1
   319 00000E8A 0F84F5000000        <1>     je .critError
   320                              <1>     ;Here we make space on the stack.
   321 00000E90 B904000000          <1>     mov ecx, forStruct_size/8
   322                              <1>     makeSpaceOnStack rcx  ;Make four qwords of space on the stack
    96                              <2> 
    97                              <2> 
    98                              <2> 
    99 00000E95 58                  <2>  pop rax
   100 00000E96 48C1E103            <2>  shl %1, 3
   101 00000E9A 4829CC              <2>  sub rsp, %1
   102 00000E9D 488D2D(50000000)    <2>  lea rbp, stack
   103 00000EA4 4839EC              <2>  cmp rsp, rbp
   104 00000EA7 770C                <2>  ja .macroNotOverflow
   105 00000EA9 488D2DFF060000      <2>  lea rbp, stkOvflw
   106 00000EB0 E914F2FFFF          <2>  jmp criticalError
   107                              <2> .macroNotOverflow:
   108                              <2> 
   109                              <2> 
   110 00000EB5 50                  <2>  push rax
   323 00000EB6 4889E5              <1>     mov rbp, rsp
   324 00000EB9 4881C508000000      <1>     add rbp, 8  ;Make rbp point to the base of the new struc
   325 00000EC0 48895500            <1>     mov qword [rbp + forStruct.specQword], rdx  ;Move rdx into its place on the stack
   326 00000EC4 56                  <1>     push rsi   ;rsi points to first byte after FOR. The first word should now be a var
   327 00000EC5 B820544F20          <1>     mov eax, " TO " ;First find the TO and STEP values
   328                              <1> .flScanTo:
   329 00000ECA 803E00              <1>     cmp byte [rsi], 0   ;ASCII null w/o a TO? Syntax Error
   330 00000ECD 0F84AB000000        <1>     je .syntaxError
   331 00000ED3 803E3A              <1>     cmp byte [rsi], ":" ;Save for a next statement delimiter
   332 00000ED6 0F84A2000000        <1>     je .syntaxError
   333 00000EDC 3906                <1>     cmp dword [rsi], eax
   334 00000EDE 7405                <1>     je .flToFound
   335 00000EE0 48FFC6              <1>     inc rsi ;Go forwards by a byte
   336 00000EE3 EBE5                <1>     jmp short .flScanTo
   337                              <1> .flToFound:
   338                              <1>     ;rsi points to the preceeding space so add 3 to go to trailing space
   339 00000EE5 4881C603000000      <1>     add rsi, 3
   340 00000EEC E850F4FFFF          <1>     call spaceSkip  ;Go to expression to evaluate
   341 00000EF1 E89EF4FFFF          <1>     call handleAlgebraicExpression  ;Get in rax the limit value
   342 00000EF6 48894510            <1>     mov qword [rbp + forStruct.limitValue], rax
   343                              <1>     ;rsi now points to the next word, this should be step, otherwise ignore the word
   344 00000EFA AD                  <1>     lodsd   ;Get the word in eax
   345 00000EFB 3D53544550          <1>     cmp eax, "STEP"
   346 00000F00 754F                <1>     jne .defaultStep
   347                              <1>     ;Check it is a "STEP "
   348 00000F02 AC                  <1>     lodsb
   349 00000F03 3C20                <1>     cmp al, " "
   350 00000F05 754A                <1>     jne .defaultStep
   351                              <1>     ;rsi points to a "STEP "
   352 00000F07 E835F4FFFF          <1>     call spaceSkip  ;Go to expression to evaluate
   353 00000F0C E883F4FFFF          <1>     call handleAlgebraicExpression  ;Get in rax the step value
   354 00000F11 48894518            <1>     mov qword [rbp + forStruct.stepValue], rax
   355                              <1> .flVariable:
   356 00000F15 5E                  <1>     pop rsi ;Get back OG rsi position immediately after FOR
   357 00000F16 E826F4FFFF          <1>     call spaceSkip ;Skip intermediate spaces
   358 00000F1B 56                  <1>     push rsi
   359 00000F1C E869F9FFFF          <1>     call variableAssignment ;Make the variable assignment, trashes rsi
   360 00000F21 5E                  <1>     pop rsi ;rsi points to the start of the variable again
   361 00000F22 E825F4FFFF          <1>     call getVarNameLength
   362 00000F27 E88F030000          <1>     call findVariable   ;Get the variable pointer in rbx
   363 00000F2C 48895D08            <1>     mov qword [rbp + forStruct.cntrPtr], rbx    ;Save variable pointer
   364                              <1>     ;Now check whether we should run the loop at all?
   365 00000F30 488B5D08            <1>     mov rbx, qword [rbp + forStruct.cntrPtr]
   366 00000F34 488B4B04            <1>     mov rcx, qword [rbx + varBlock.qValue]  ;Get the variable value
   367 00000F38 488B5D10            <1>     mov rbx, qword [rbp + forStruct.limitValue]
   368                              <1>     ;if rcx >= rbx, branch to after NEXT
   369 00000F3C 4839D9              <1>     cmp rcx, rbx
   370 00000F3F 7D1A                <1>     jge .dontRunFor
   371 00000F41 488B5500            <1>     mov rdx, qword [rbp + forStruct.specQword]
   372 00000F45 48C1EA28            <1>     shr rdx, 5*8    ;Upper bytes will be cleared, needed for the "branch"
   373                              <1> .exit:
   374                              <1>     ;Recall edx must have the correct three bytes in it from the special qword
   375 00000F49 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   376 00000F50 C3                  <1>     ret
   377                              <1> .defaultStep:
   378 00000F51 48C7451801000000    <1>     mov qword [rbp + forStruct.stepValue], 1
   379 00000F59 EBBA                <1>     jmp short .flVariable
   380                              <1> .dontRunFor:
   381                              <1>     ;Move the bytes from the NEXT to edx 
   382 00000F5B 488B5500            <1>     mov rdx, qword [rbp + forStruct.specQword]
   383 00000F5F 48C1EA10            <1>     shr rdx, 2*8    ;Upper bytes will be cleared
   384 00000F63 09D2                <1>     or edx, edx     ;This should zero the upper dword
   385                              <1>     ;Need to also reclaim the stack space
   386 00000F65 B904000000          <1>     mov ecx, forStruct_size/8
   387                              <1>     cleanSpaceOnStack rcx
   114                              <2> 
   115 00000F6A 58                  <2>  pop rax
   116 00000F6B 48C1E103            <2>  shl %1, 3
   117 00000F6F 4801CC              <2>  add rsp, %1
   118 00000F72 50                  <2>  push rax
   388 00000F73 EBD4                <1>     jmp short .exit
   389                              <1> ;Errors
   390                              <1> .unknownError:
   391 00000F75 488D2DAB060000      <1>     lea rbp, uknowner
   392 00000F7C EB07                <1>     jmp short .critError
   393                              <1> .syntaxError:
   394 00000F7E 488D2DE9050000      <1>     lea rbp, syntax
   395                              <1> .critError:
   396                              <1>     ;called with rbp already pointing to error string
   397 00000F85 E93FF1FFFF          <1>     jmp criticalError
   398                              <1> 
   399                              <1> next:
   400                              <1>     ;Verify that the structure on the stack is a FOR structure
   401 00000F8A 4889E5              <1>     mov rbp, rsp    ;Dont need to save rbp so trash it
   402 00000F8D 4881C508000000      <1>     add rbp, 8  ;Make it point to the base of the struc past the return address
   403                              <1>     ;Read the qword on stack, verify it is a FORstruct and passes checksum test
   404 00000F94 488B5500            <1>     mov rdx, qword [rbp + forStruct.specQword]
   405 00000F98 80FA5A              <1>     cmp dl, FORsig
   406 00000F9B 7555                <1>     jne .noForNext
   407                              <1>     ;Now compute checksum to verify its not an accident
   408 00000F9D 30C0                <1>     xor al, al
   409 00000F9F B908000000          <1>     mov ecx, 8
   410                              <1> .checksumTest:
   411 00000FA4 00D0                <1>     add al, dl
   412 00000FA6 48C1EA08            <1>     shr rdx, 8
   413 00000FAA FFC9                <1>     dec ecx
   414 00000FAC 75F6                <1>     jnz .checksumTest
   415 00000FAE 84C0                <1>     test al, al     ;This should be 0
   416 00000FB0 7540                <1>     jnz .noForNext
   417                              <1>     ;Now we are truly in a FOR loop
   418 00000FB2 488B5D08            <1>     mov rbx, qword [rbp + forStruct.cntrPtr]    ;Get variable pointer
   419 00000FB6 488B4304            <1>     mov rax, qword [rbx + varBlock.qValue]      ;Get variable value
   420 00000FBA 483B4510            <1>     cmp rax, qword [rbp + forStruct.limitValue] ;Compare current var value to limit
   421 00000FBE 7D18                <1>     jge .noMoreLooping
   422 00000FC0 48034518            <1>     add rax, qword [rbp + forStruct.stepValue]  ;Add the step
   423 00000FC4 48894304            <1>     mov qword [rbx + varBlock.qValue], rax      ;Update the variable value
   424                              <1>     ;Now go back to line after FOR
   425 00000FC8 488B5500            <1>     mov rdx, qword [rbp + forStruct.specQword]
   426 00000FCC 48C1EA28            <1>     shr rdx, 5*8    ;Move upper three bytes to lower three bytes of edx
   427                              <1> .exit:
   428                              <1>     ;Recall edx must have the correct three bytes in it from the special qword
   429 00000FD0 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   430 00000FD7 C3                  <1>     ret
   431                              <1> .noMoreLooping:
   432                              <1>     ;No need to update the variable, it is already above
   433 00000FD8 488B5500            <1>     mov rdx, qword [rbp + forStruct.specQword]
   434 00000FDC 48C1EA10            <1>     shr rdx, 2*8    ;Move bytes 4:2 to lower three bytes of edx
   435 00000FE0 09D2                <1>     or edx, edx     ;Remove upper bits
   436                              <1>     ;Need to also reclaim the stack space
   437 00000FE2 B904000000          <1>     mov ecx, forStruct_size/8
   438                              <1>     cleanSpaceOnStack rcx
   114                              <2> 
   115 00000FE7 58                  <2>  pop rax
   116 00000FE8 48C1E103            <2>  shl %1, 3
   117 00000FEC 4801CC              <2>  add rsp, %1
   118 00000FEF 50                  <2>  push rax
   439 00000FF0 EBDE                <1>     jmp short .exit
   440                              <1> .noForNext:
   441 00000FF2 488D2DF1050000      <1>     lea rbp, noFor
   442 00000FF9 E9CBF0FFFF          <1>     jmp criticalError
   443                              <1> 
   444                              <1> while:
   445                              <1>     ;First check we have a WEND following this WHILE
   446 00000FFE E82BFCFFFF          <1>     call wendScan
   447 00001003 4881FAFFFFFFFF      <1>     cmp rdx, -1
   448 0000100A 7464                <1>     je .critError
   449                              <1>     ;Here we make space on the stack.
   450 0000100C B901000000          <1>     mov ecx, whileStruct_size/8
   451                              <1>     makeSpaceOnStack rcx  ;Make a qword of space on the stack
    96                              <2> 
    97                              <2> 
    98                              <2> 
    99 00001011 58                  <2>  pop rax
   100 00001012 48C1E103            <2>  shl %1, 3
   101 00001016 4829CC              <2>  sub rsp, %1
   102 00001019 488D2D(50000000)    <2>  lea rbp, stack
   103 00001020 4839EC              <2>  cmp rsp, rbp
   104 00001023 770C                <2>  ja .macroNotOverflow
   105 00001025 488D2D83050000      <2>  lea rbp, stkOvflw
   106 0000102C E998F0FFFF          <2>  jmp criticalError
   107                              <2> .macroNotOverflow:
   108                              <2> 
   109                              <2> 
   110 00001031 50                  <2>  push rax
   452 00001032 4889E5              <1>     mov rbp, rsp
   453 00001035 4881C508000000      <1>     add rbp, 8  ;Make rbp point to the base of the new struc
   454 0000103C 48895500            <1>     mov qword [rbp + whileStruct.specQword], rdx  ;Move rdx into its place on the stack
   455                              <1>     ;rsi should point after the WHILE
   456 00001040 E84FF3FFFF          <1>     call handleAlgebraicExpression  ;Get result of expression in rax
   457 00001045 488B5500            <1>     mov rdx, qword [rbp + whileStruct.specQword]    ;Get special qword back into rdx
   458 00001049 4885C0              <1>     test rax, rax   ;Zero is FALSE
   459 0000104C 740C                <1>     jz .conditionFalse
   460 0000104E 48C1EA28            <1>     shr rdx, 5*8    ;Bring the upper three bytes down to eax
   461                              <1> .exit:
   462 00001052 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   463 00001059 C3                  <1>     ret
   464                              <1> .conditionFalse:
   465                              <1>     ;If condition is false, jump to the instruction after WEND
   466                              <1>     ;Here we reclaim the space from the stack.
   467 0000105A B901000000          <1>     mov ecx, whileStruct_size/8
   468                              <1>     cleanSpaceOnStack rcx  ;Clean a qword of space on the stack
   114                              <2> 
   115 0000105F 58                  <2>  pop rax
   116 00001060 48C1E103            <2>  shl %1, 3
   117 00001064 4801CC              <2>  add rsp, %1
   118 00001067 50                  <2>  push rax
   469 00001068 48C1EA10            <1>     shr rdx, 2*8    ;Bring bytes 4:2 down to bytes 2:0
   470 0000106C 09D2                <1>     or edx, edx     ;Zero the rest of it
   471 0000106E EBE2                <1>     jmp short .exit
   472                              <1> .critError:
   473                              <1>     ;called with rbp already pointing to error string
   474 00001070 E954F0FFFF          <1>     jmp criticalError
   475                              <1> wend:
   476                              <1>     ;Find the While on the WHILE line and evaluate the expression
   477                              <1>     ;if true, branch to the WHILE three bytes in specialQword
   478                              <1>     ;if false, branch to WEND three bytes in specialQword and clean stack
   479                              <1>     ;First verify we have a While structure on the stack
   480 00001075 4889E5              <1>     mov rbp, rsp    ;Dont need to save rbp so trash it
   481 00001078 4881C508000000      <1>     add rbp, 8  ;Make it point to the base of the struc past the return address
   482 0000107F 488B5500            <1>     mov rdx, qword [rbp + whileStruct.specQword]
   483 00001083 80FA55              <1>     cmp dl, WHILEsig
   484 00001086 0F858D000000        <1>     jne .noWhile
   485                              <1>     ;Now compute checksum to verify its not an accident
   486 0000108C 30C0                <1>     xor al, al
   487 0000108E B908000000          <1>     mov ecx, 8
   488                              <1> .checksumTest:
   489 00001093 00D0                <1>     add al, dl
   490 00001095 48C1CA08            <1>     ror rdx, 8
   491 00001099 FFC9                <1>     dec ecx
   492 0000109B 75F6                <1>     jnz .checksumTest
   493 0000109D 84C0                <1>     test al, al     ;This should be 0
   494 0000109F 7578                <1>     jnz .noWhile
   495                              <1>     ;Now we are truly in a WHILE loop
   496                              <1>     ;Search the While line for the WHILE keyword and evaluate the expression after it
   497                              <1>     ;rdx is as normal
   498 000010A1 48C1EA28            <1>     shr rdx, 5*8    ;Get upper three bytes down low
   499 000010A5 81E2FFFF0000        <1>     and edx, 0FFFFh ;Save only dx
   500 000010AB E87B020000          <1>     call searchForProgramLine
   501 000010B0 4881FBFFFFFFFF      <1>     cmp rbx, -1
   502 000010B7 7454                <1>     je .error
   503 000010B9 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Point to start of string
   504                              <1> .whileScan:
   505 000010BD 803E00              <1>     cmp byte [rsi], 0   ;Are we at the end of the line
   506 000010C0 7457                <1>     je .noWhile ;If so, we have gotten to the end of the line without a while
   507 000010C2 488D3DD5F6FFFF      <1>     lea rdi, whileStr   ;Point to the while string in the table, 6 chars long
   508 000010C9 B906000000          <1>     mov ecx, 6
   509                              <1> .scanning:
   510 000010CE A6                  <1>     cmpsb
   511 000010CF 75EC                <1>     jne .whileScan
   512 000010D1 FFC9                <1>     dec ecx
   513 000010D3 75F9                <1>     jnz .scanning
   514                              <1>     ;Here is equal, rsi points past the space in "WHILE "
   515 000010D5 48FFCE              <1>     dec rsi
   516 000010D8 E864F2FFFF          <1>     call spaceSkip  ;Skip all spaces
   517 000010DD E8B2F2FFFF          <1>     call handleAlgebraicExpression  ;Get algebraic expression in rax
   518 000010E2 488B5500            <1>     mov rdx, qword [rbp + whileStruct.specQword]    ;Get special qword back into rdx
   519 000010E6 4885C0              <1>     test rax, rax
   520 000010E9 740C                <1>     jz .conditionFalse
   521 000010EB 48C1EA28            <1>     shr rdx, 5*8    ;Bring the upper three bytes down to eax
   522                              <1> .exit:
   523 000010EF 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   524 000010F6 C3                  <1>     ret
   525                              <1> .conditionFalse:
   526                              <1>     ;If condition is false, go to the instruction after WEND
   527                              <1>     ;Here we reclaim the space from the stack.
   528 000010F7 B901000000          <1>     mov ecx, whileStruct_size/8
   529                              <1>     cleanSpaceOnStack rcx  ;Clean a qword of space on the stack
   114                              <2> 
   115 000010FC 58                  <2>  pop rax
   116 000010FD 48C1E103            <2>  shl %1, 3
   117 00001101 4801CC              <2>  add rsp, %1
   118 00001104 50                  <2>  push rax
   530 00001105 48C1EA10            <1>     shr rdx, 2*8    ;Bring bytes 4:2 down to bytes 2:0
   531 00001109 09D2                <1>     or edx, edx     ;Zero the rest of it
   532 0000110B EBE2                <1>     jmp short .exit
   533                              <1> .error:
   534 0000110D 488D2D13050000      <1>     lea rbp, uknowner
   535 00001114 E9B0EFFFFF          <1>     jmp criticalError
   536                              <1> .noWhile:
   537 00001119 488D2DB5040000      <1>     lea rbp, noWhile
   538 00001120 E9A4EFFFFF          <1>     jmp criticalError
   539                              <1> 
   540                              <1> handleIf:
   541                              <1> ;Evaluate the string. The IF,THEN/GOTO,ELSE statement must ALL be on one line
   542                              <1> ;IF exp1 THEN statement ELSE statement
   543                              <1> ;IF exp1 GOTO linenumber ELSE statement
   544                              <1> ;rsi points to first char AFTER function name
   545 00001125 E817F2FFFF          <1>     call spaceSkip
   546 0000112A E865F2FFFF          <1>     call handleAlgebraicExpression
   547                              <1> ;THIS WORKS ON CONTRALOGIC. If the algebraic expression evaluates to 0,
   548                              <1> ; it is currently taken to be true (as that is a condition I can test for
   549                              <1> ; easily). Once Proper logical operators are introduced, then I will have to
   550                              <1> ; switch it so that test rax, rax -> jz .else
   551 0000112F 4885C0              <1>     test rax, rax  ;If this is NOT 0, go to the else
   552 00001132 7525                <1>     jnz .else   ;CONTRALOGIC, TO BE SWITCHED IN LATER VERSIONS TO JZ 
   553 00001134 E808F2FFFF          <1>     call spaceSkip
   554 00001139 AD                  <1>     lodsd   ;Get the whole word, must be either "THEN " or "GOTO "
   555 0000113A 3D5448454E          <1>     cmp eax, "THEN"
   556 0000113F 7442                <1>     je .hi0   ; Go past THEN, to process statement
   557 00001141 3D474F544F          <1>     cmp eax, "GOTO"
   558 00001146 7569                <1>     jne .error
   559 00001148 803E20              <1>     cmp byte [rsi], " " ;is the next char a space?
   560 0000114B 7564                <1>     jne .error
   561 0000114D E980FCFFFF          <1>     jmp goto
   562                              <1> .candidatethen:
   563 00001152 803E20              <1>     cmp byte [rsi], " " ;is the next char a space?
   564 00001155 742C                <1>     je .hi0
   565 00001157 EB58                <1>     jmp short .error
   566                              <1> .else:
   567                              <1>     ;Search for the ELSE, it has to be preceeded with a space and have a space after
   568 00001159 803E00              <1>     cmp byte [rsi], 0 ;Are we at end of line?
   569 0000115C 7452                <1>     je .noElse
   570 0000115E 803E3A              <1>     cmp byte [rsi], ":" ;Are we at end line segment?
   571 00001161 744D                <1>     je .noElse
   572 00001163 48FFC6              <1>     inc rsi
   573 00001166 813E20454C53        <1>     cmp dword [rsi], " ELS"
   574 0000116C 75EB                <1>     jne .else
   575 0000116E 4881C604000000      <1>     add rsi, 4  ;Skip those four chars, we have a candidate
   576 00001175 66813E4520          <1>     cmp word [rsi], "E "
   577 0000117A 75DD                <1>     jne .else   ;If not equal failed to match pattern
   578 0000117C 4881C602000000      <1>     add rsi, 2  ;Else its the ELSE we are looking for, move rsi to first space past it
   579                              <1> .hi0:
   580                              <1> ;Now we do the branchy stuff, branch to the same line just further down
   581 00001183 668B15(F40E0000)    <1>     mov dx, word [currentLine]
   582 0000118A E89C010000          <1>     call searchForProgramLine
   583 0000118F 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Does the line not exist somehow?
   584 00001196 7419                <1>     je .error
   585 00001198 4889F0              <1>     mov rax, rsi    ;Save pointer in rax
   586 0000119B 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine] ;Get the difference in chars
   587 0000119F 4829C8              <1>     sub rax, rcx
   588 000011A2 24FF                <1>     and al, -1  ;Save only bottom byte as the difference should be less than 255
   589 000011A4 C1E010              <1>     shl eax, 10h ;Shift to byte 3
   590 000011A7 09C2                <1>     or edx, eax ;Save the offset into byte 3
   591 000011A9 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   592                              <1> .noElse:
   593                              <1> ;If no else, simply return
   594 000011B0 C3                  <1>     ret
   595                              <1> .error:
   596 000011B1 488D1DB6030000      <1>     lea rbx, syntax
   597 000011B8 E90CEFFFFF          <1>     jmp criticalError
    16                                  %include "MATH.ASM"
    17                              <1> decimalToHex:
    18                              <1>     ;Takes ASCII encoded decimal number and 
    19                              <1>     ;returns its hex value
    20                              <1>     ;Input: rsi = Start of numeric ONLY string
    21                              <1>     ;Output: rax = Number
    22                              <1>     ;        rsi = First non-numeric char past end of number
    23 000011BD 53                  <1>     push rbx
    24 000011BE 51                  <1>     push rcx
    25 000011BF 52                  <1>     push rdx
    26 000011C0 31DB                <1>     xor ebx, ebx    ;Start with rbx = 0
    27                              <1> .processDigits:    
    28 000011C2 AC                  <1>     lodsb           ;Get the first digit in al
    29 000011C3 2C30                <1>     sub al, 30h     ;Reduce to value
    30 000011C5 31D2                <1>     xor edx, edx    ;Clear for multiplication
    31 000011C7 3C0A                <1>     cmp al, 10      ;Digit valid? Propagte CF
    32 000011C9 480FB6C0            <1>     movzx rax, al   ;Clear upper bits
    33 000011CD 4893                <1>     xchg rax, rbx
    34 000011CF 730D                <1>     jnc .exit       ;Digit was not valid, exit
    35 000011D1 B90A000000          <1>     mov ecx, 10     ;Multiply result by 10
    36 000011D6 48F7E1              <1>     mul rcx
    37 000011D9 4801C3              <1>     add rbx, rax    ;Add the new digits
    38 000011DC EBE4                <1>     jmp short .processDigits
    39                              <1> .exit:
    40 000011DE 48FFCE              <1>     dec rsi         ;rsi points to first non-digit
    41 000011E1 5A                  <1>     pop rdx
    42 000011E2 59                  <1>     pop rcx
    43 000011E3 5B                  <1>     pop rbx
    44 000011E4 C3                  <1>     ret
    45                              <1> 
    46                              <1> printdecimalword:
    47                              <1> ;Takes the qword in rax and prints its signed decimal representation
    48 000011E5 50                  <1>     push rax
    49 000011E6 53                  <1>     push rbx
    50 000011E7 488D3D(980E0000)    <1>     lea rdi, digitString   ;Use the default line as a buffer
    51                              <1>     ;Sanitise the digit buffer
    52 000011EE 57                  <1>     push rdi
    53 000011EF 51                  <1>     push rcx
    54 000011F0 50                  <1>     push rax
    55                              <1> 
    56 000011F1 B906000000          <1>     mov ecx, digitStringLen/8
    57 000011F6 F348AB              <1>     rep stosq
    58 000011F9 58                  <1>     pop rax
    59 000011FA 59                  <1>     pop rcx
    60 000011FB 5F                  <1>     pop rdi
    61                              <1> 
    62 000011FC 50                  <1>     push rax    ;Save rax for the sign bit later
    63 000011FD 48D1C0              <1>     rol rax, 1  ;Test the sign bit
    64 00001200 A801                <1>     test al, 1
    65 00001202 48D1C8              <1>     ror rax, 1  ;Undo the roll
    66 00001205 7403                <1>     jz .noCompliment
    67 00001207 48F7D8              <1>     neg rax     ;Get the 2's compliment of rax
    68                              <1> ;Clear the sign bit, print the number from bits 62:0
    69                              <1> .noCompliment:
    70 0000120A 48D1E0              <1>     shl rax, 1  ;Go past the edge
    71 0000120D 48D1E8              <1>     shr rax, 1  ;Return zero extended
    72 00001210 4881C72F000000      <1>     add rdi, digitStringLen - 1 ;Go to the end of the buffer
    73 00001217 FD                  <1>     std ;Reverse string ops
    74 00001218 50                  <1>     push rax
    75 00001219 30C0                <1>     xor al, al  ;Place delimiter
    76 0000121B AA                  <1>     stosb
    77 0000121C 58                  <1>     pop rax
    78 0000121D 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
    78 00001226 00                  <1>
    79                              <1> .pdw0:
    80 00001227 31D2                <1>     xor edx, edx
    81 00001229 48F7F3              <1>     div rbx
    82 0000122C 80C230              <1>     add dl, '0'
    83 0000122F 80FA39              <1>     cmp dl, '9'
    84 00001232 7603                <1>     jbe .pdw1
    85 00001234 80C207              <1>     add dl, 'A'-'0'-10
    86                              <1> .pdw1:
    87 00001237 50                  <1>     push rax
    88 00001238 88D0                <1>     mov al, dl    ;Save remainder byte
    89 0000123A AA                  <1>     stosb   ;Store the byte and sub one from rdi
    90 0000123B 58                  <1>     pop rax
    91 0000123C 4885C0              <1>     test rax, rax
    92 0000123F 75E6                <1>     jnz .pdw0
    93                              <1> 
    94                              <1>     ;Now add a minus sign if sign bit set
    95 00001241 58                  <1>     pop rax ;Get the original for the sign bit
    96 00001242 48D1C0              <1>     rol rax, 1  ;Bring the sign bit low
    97 00001245 A801                <1>     test al, 1
    98 00001247 7403                <1>     jz .printString
    99 00001249 B02D                <1>     mov al, "-"
   100 0000124B AA                  <1>     stosb   ;Store minus sign and decrement rdi
   101                              <1> .printString:
   102 0000124C FC                  <1>     cld ;Return string ops to normal
   103 0000124D 48FFC7              <1>     inc rdi ;Skip the extra 0 that was inserted
   104 00001250 4889FD              <1>     mov rbp, rdi    ;Point rbp to the head of the string
   105 00001253 E848EFFFFF          <1>     call ttyOutString
   106 00001258 5B                  <1>     pop rbx
   107 00001259 58                  <1>     pop rax
   108 0000125A C3                  <1>     ret
    17                                  %include "MEMORY.ASM"
    18                              <1> allocateBlock:
    19                              <1> ;Allocates a program memory block, the caller then fixes the specifics
    20                              <1> ;Output: rbx = Pointer to generic memory block, or -1 if memory full
    21                              <1> ;       Caller needs to fill in, block size, block type and specifics
    22 0000125B 52                  <1>     push rdx
    23                              <1> .ab0:
    24 0000125C 488B1D(E20E0000)    <1>     mov rbx, qword [lastBlock]    ;Get the last block in the chain
    25 00001263 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;First allocation?
    26 0000126A 742F                <1>     je .firstAllocation
    27 0000126C C60374              <1>     mov byte [rbx + memBlock.bSignature], notLastMemBlock ;Make it not be the last
    28 0000126F 480FB75301          <1>     movzx rdx, word [rbx + memBlock.wBlockSize] ;Goto end of block
    29 00001274 4801D3              <1>     add rbx, rdx    ;Move rbx over the previous last block
    30 00001277 488B15(D00E0000)    <1>     mov rdx, qword [maxMemAddr]
    31 0000127E 4839D3              <1>     cmp rbx, rdx ;rbx above maxmemory? 
    32 00001281 770C                <1>     ja .memoryFull
    33 00001283 48891D(E20E0000)    <1>     mov qword [lastBlock], rbx  ;New last block
    34 0000128A C60372              <1>     mov byte [rbx + memBlock.bSignature], lastMemBlock
    35                              <1> .exit:
    36 0000128D 5A                  <1>     pop rdx
    37 0000128E C3                  <1>     ret
    38                              <1> .memoryFull:
    39 0000128F 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    39 00001298 FF                  <1>
    40 00001299 EBF2                <1>     jmp short .exit
    41                              <1> .firstAllocation:
    42                              <1> ;Deal with first allocation
    43 0000129B 488D1D(00000000)    <1>     lea rbx, section.programArea.vstart   ;Get this as the head of the chain
    44 000012A2 48891D(E20E0000)    <1>     mov qword [lastBlock], rbx
    45 000012A9 48891D(DA0E0000)    <1>     mov qword [mcbChain], rbx
    46 000012B0 C60372              <1>     mov byte [rbx + memBlock.bSignature], lastMemBlock
    47 000012B3 66C743010000        <1>     mov word [rbx + memBlock.wBlockSize], 0 ;Dummy block
    48 000012B9 EBD2                <1>     jmp short .exit
    49                              <1> 
    50                              <1> findVariable:
    51                              <1> ;Input: rsi = Source string for variable name
    52                              <1> ;       ecx = Length of variable name (max 40)
    53                              <1> ;Output: rbx = ptr to varBlock/strBlock OR -1 if doesnt exist
    54 000012BB 50                  <1>     push rax
    55 000012BC 51                  <1>     push rcx
    56 000012BD 52                  <1>     push rdx
    57 000012BE 56                  <1>     push rsi
    58 000012BF 57                  <1>     push rdi
    59 000012C0 488B1D(DA0E0000)    <1>     mov rbx, qword [mcbChain]   ;Start of the chain
    60 000012C7 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Chain empty?
    61 000012CE 7446                <1>     je .exit
    62                              <1> .search:
    63 000012D0 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
    64 000012D4 7415                <1>     je .varFound    ;We found a numerical variable
    65 000012D6 807B0302            <1>     cmp byte [rbx + memBlock.bBlockType], datBlockType
    66 000012DA 741E                <1>     je .datFound    ;We found a string variable
    67                              <1> .invalid:
    68                              <1>     ;Are we at the end of the chain?
    69 000012DC 803B72              <1>     cmp byte [rbx + memBlock.bSignature], lastMemBlock
    70 000012DF 742B                <1>     je .varNotFound ;At the end of the chain and var not found? Error!
    71 000012E1 480FB75301          <1>     movzx rdx, word [rbx + memBlock.wBlockSize]
    72 000012E6 4801D3              <1>     add rbx, rdx    ;Goto next block
    73 000012E9 EBE5                <1>     jmp short .search
    74                              <1> .varFound:
    75                              <1>     ;Compare to see the var is our var
    76 000012EB 488D7B0C            <1>     lea rdi, qword [rbx + varBlock.sVarName] ;point rdi to the name string
    77 000012EF 51                  <1>     push rcx
    78 000012F0 56                  <1>     push rsi
    79 000012F1 F3A6                <1>     repe cmpsb  ;Compare one byte at a time
    80 000012F3 5E                  <1>     pop rsi
    81 000012F4 59                  <1>     pop rcx
    82 000012F5 75E5                <1>     jne .invalid
    83 000012F7 F8                  <1>     clc
    84 000012F8 EB1C                <1>     jmp short .exit
    85                              <1> .datFound:
    86 000012FA 488DBB04010000      <1>     lea rdi, qword [rbx + stringBlock.sVarName] ;point rdi to the name string
    87 00001301 51                  <1>     push rcx
    88 00001302 56                  <1>     push rsi
    89 00001303 F3A6                <1>     repe cmpsb  ;Compare one byte at a time
    90 00001305 5E                  <1>     pop rsi
    91 00001306 59                  <1>     pop rcx
    92 00001307 75D3                <1>     jne .invalid
    93 00001309 F8                  <1>     clc
    94 0000130A EB0A                <1>     jmp short .exit
    95                              <1> .varNotFound:
    96 0000130C 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    96 00001315 FF                  <1>
    97                              <1> .exit:
    98 00001316 5F                  <1>     pop rdi
    99 00001317 5E                  <1>     pop rsi
   100 00001318 5A                  <1>     pop rdx
   101 00001319 59                  <1>     pop rcx
   102 0000131A 58                  <1>     pop rax
   103 0000131B C3                  <1>     ret
   104                              <1> 
   105                              <1> findFirstLine:
   106                              <1> ;Output: rbx = Pointer to the first program block
   107                              <1> ;         dx = Number of the first line
   108 0000131C 488B1D(EA0E0000)    <1>     mov rbx, qword [firstLinPtr]
   109 00001323 668B15(F20E0000)    <1>     mov dx, word [firstLinNum]
   110 0000132A C3                  <1>     ret
   111                              <1> 
   112                              <1> ;FIRST SEARCH FOR A LINE NUMBER BEFORE INSERTING IT INTO THE CHAIN
   113                              <1> ;IF THE LINE NUMBER IS FOUND, REPLACE THE COMMAND STRING
   114                              <1> 
   115                              <1> searchForProgramLine:
   116                              <1> ;Walk the program chain looking to see if a line number exists. If it does,
   117                              <1> ; return a pointer to the block in rbx. If it doesn't, return -1 in rbx
   118                              <1> ;Input: dx = Line number
   119                              <1> ;Output: rbx = Pointer to program block 
   120 0000132B 488B1D(EA0E0000)    <1>     mov rbx, qword [firstLinPtr]
   121 00001332 4881FBFFFFFFFF      <1>     cmp rbx, -1
   122 00001339 7413                <1>     je .lineFound
   123                              <1> .search:
   124 0000133B 66395304            <1>     cmp word [rbx + progLineBlock.wLineNum], dx ;Equal line numbers?
   125 0000133F 740D                <1>     je .lineFound
   126 00001341 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr]   ;Walk chain
   127 00001345 4881FBFFFFFFFF      <1>     cmp rbx, -1
   128 0000134C 75ED                <1>     jne .search ;Not -1? Keep searching
   129                              <1> .lineFound:
   130 0000134E C3                  <1>     ret
   131                              <1> 
   132                              <1> insertProgramLine:
   133                              <1> ;Walk the program chain looking for the biggest number less than our
   134                              <1> ; line number. Once we have reached the end of the chain, insert the block there, or
   135                              <1> ; if there is no block, then we are the last in the chain
   136                              <1> ;Input: rsi = New Program Block to be added
   137 0000134F 50                  <1>     push rax
   138 00001350 53                  <1>     push rbx
   139 00001351 51                  <1>     push rcx
   140 00001352 52                  <1>     push rdx
   141 00001353 57                  <1>     push rdi
   142 00001354 E8C3FFFFFF          <1>     call findFirstLine  ;Get start of program in rbx and line number in dx
   143                              <1> ;First check if we should be the first line
   144                              <1> 
   145 00001359 668B4E04            <1>     mov cx, word [rsi + progLineBlock.wLineNum] ;Save line number in cx
   146 0000135D 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Empty program marker
   147 00001364 744D                <1>     je .first
   148 00001366 6639D1              <1>     cmp cx, dx  ;If cx is below dx, then our entry is first
   149 00001369 7248                <1>     jb .first    
   150                              <1> ;Use ax as the best line number and rdi as the pointer to that block
   151 0000136B 66B8FFFF            <1>     mov ax, -1  ;Marker to indicate no insertion
   152                              <1> .walk:
   153 0000136F 48817B06FFFFFFFF    <1>     cmp qword [rbx + progLineBlock.qPtr], -1    ;We are at the end
   154 00001377 7419                <1>     je .sort
   155 00001379 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Walk chain in rbx
   156 0000137D 663B4B04            <1>     cmp cx, word [rbx + progLineBlock.wLineNum]
   157 00001381 77EC                <1>     ja .walk    ;If line number is above my line number, keep walking
   158                              <1> .candidate:
   159                              <1>     ;If the new line number is below the old line number, reject
   160 00001383 663B4304            <1>     cmp ax, word [rbx + progLineBlock.wLineNum]
   161 00001387 72E6                <1>     jb .walk
   162 00001389 4889DF              <1>     mov rdi, rbx
   163 0000138C 668B4304            <1>     mov ax, word [rbx + progLineBlock.wLineNum]
   164 00001390 EBDD                <1>     jmp short .walk
   165                              <1> .sort:
   166 00001392 66FFC0              <1>     inc ax  ;If no candidates, exit
   167 00001395 740E                <1>     jz .skipLink
   168                              <1>     ;rdi points to the previous line to link to
   169 00001397 488B5706            <1>     mov rdx, qword [rdi + progLineBlock.qPtr]
   170 0000139B 48897706            <1>     mov qword [rdi + progLineBlock.qPtr], rsi   ;Insert self here
   171 0000139F 48895606            <1>     mov qword [rsi + progLineBlock.qPtr], rdx   ;Link new block to next line
   172 000013A3 EB20                <1>     jmp short .exit
   173                              <1> .skipLink:
   174 000013A5 48897306            <1>     mov qword [rbx + progLineBlock.qPtr], rsi   ;Link rsi to last element in list
   175 000013A9 48C74606FFFFFFFF    <1>     mov qword [rsi + progLineBlock.qPtr], -1    ;End of chain marker
   176 000013B1 EB12                <1>     jmp short .exit
   177                              <1> .first:
   178 000013B3 488935(EA0E0000)    <1>     mov qword [firstLinPtr], rsi
   179 000013BA 66890D(F20E0000)    <1>     mov word [firstLinNum], cx
   180 000013C1 48895E06            <1>     mov qword [rsi + progLineBlock.qPtr], rbx   ;Put the old first line as second line
   181                              <1> .exit:
   182 000013C5 5F                  <1>     pop rdi
   183 000013C6 5A                  <1>     pop rdx
   184 000013C7 59                  <1>     pop rcx
   185 000013C8 5B                  <1>     pop rbx
   186 000013C9 58                  <1>     pop rax
   187 000013CA C3                  <1>     ret
   188                              <1> 
   189                              <1> makeEditInteger:
   190                              <1> ;Will make a variable if it is new name, or edit the value if it already exists
   191                              <1> ;Input: rsi = Var name
   192                              <1> ;       (e)cx = Length of varname, max 40 chars
   193                              <1> ;       rax = Value
   194 000013CB E8EBFEFFFF          <1>     call findVariable   ;rbx returned with var block or -1
   195 000013D0 4881FBFFFFFFFF      <1>     cmp rbx, -1
   196 000013D7 7405                <1>     je .newVar
   197 000013D9 48894304            <1>     mov qword [rbx + varBlock.qValue], rax
   198 000013DD C3                  <1>     ret
   199                              <1> .newVar:
   200 000013DE E878FEFFFF          <1>     call allocateBlock
   201 000013E3 4881FBFFFFFFFF      <1>     cmp rbx, -1
   202 000013EA 741E                <1>     je .error
   203 000013EC 48894304            <1>     mov qword [rbx + varBlock.qValue], rax  ;Save value
   204 000013F0 66894B01            <1>     mov word [rbx + varBlock.wBlockSize], cx    ;Save length of name
   205 000013F4 668143010C00        <1>     add word [rbx + varBlock.wBlockSize], varBlock_size ;Add full block size
   206 000013FA C6430301            <1>     mov byte [rbx + varBlock.bBlockType], varBlockType  ;Block type
   207 000013FE 57                  <1>     push rdi
   208 000013FF 488D7B0C            <1>     lea rdi, qword [rbx + varBlock.sVarName]
   209 00001403 E87B000000          <1>     call strcpy ;Copy the string name into block buffer
   210 00001408 5F                  <1>     pop rdi
   211 00001409 C3                  <1>     ret
   212                              <1> .error:
   213 0000140A 488D2D4D010000      <1>     lea rbp, noMem
   214 00001411 E9B3ECFFFF          <1>     jmp criticalError
   215                              <1> makeEditString:
   216                              <1> ;Will make a string if it is new name, or replace the string. Strings are null termin
   217                              <1> ;Input: rsi = Var name
   218                              <1> ;       ecx = Length of varname, max 40 chars
   219                              <1> ;       rdx = Ptr to string itself
   220 00001416 57                  <1>     push rdi
   221 00001417 56                  <1>     push rsi
   222 00001418 50                  <1>     push rax
   223 00001419 53                  <1>     push rbx
   224 0000141A E89CFEFFFF          <1>     call findVariable   ;rbx returned with string block or -1
   225 0000141F 4881FBFFFFFFFF      <1>     cmp rbx, -1
   226 00001426 7528                <1>     jne .strcopy
   227 00001428 E82EFEFFFF          <1>     call allocateBlock
   228 0000142D 4881FBFFFFFFFF      <1>     cmp rbx, -1
   229 00001434 742E                <1>     je .error
   230 00001436 66894B01            <1>     mov word [rbx + stringBlock.wBlockSize], cx    ;Save length of name
   231 0000143A 668143010401        <1>     add word [rbx + stringBlock.wBlockSize], stringBlock_size ;Add full block size
   232 00001440 C6430302            <1>     mov byte [rbx + stringBlock.bBlockType], datBlockType  ;Block type
   233 00001444 488DBB04010000      <1>     lea rdi, qword [rbx + stringBlock.sVarName]
   234 0000144B E833000000          <1>     call strcpy ;Copy the string name into block buffer
   235                              <1> .strcopy:
   236 00001450 488D7B04            <1>     lea rdi, qword [rbx + stringBlock.string]   ;point to string space
   237 00001454 4889D6              <1>     mov rsi, rdx    ;Point rsi to the string itself
   238 00001457 E814000000          <1>     call terminatedstrcpy
   239 0000145C 30C0                <1>     xor al, al
   240 0000145E AA                  <1>     stosb   ;Store the null delimiter
   241 0000145F 5B                  <1>     pop rbx
   242 00001460 58                  <1>     pop rax
   243 00001461 5E                  <1>     pop rsi
   244 00001462 5F                  <1>     pop rdi
   245 00001463 C3                  <1>     ret
   246                              <1> .error:
   247 00001464 488D2DF3000000      <1>     lea rbp, noMem
   248 0000146B E959ECFFFF          <1>     jmp criticalError
   249                              <1> ;------------------------------------------------:
   250                              <1> ;  The below are misc memory related functions   :
   251                              <1> ;------------------------------------------------:
   252                              <1> terminatedstrcpy:
   253                              <1> ;rdi = Destination String
   254                              <1> ;rsi = Source String
   255                              <1> ;Copy a terminated string
   256 00001470 50                  <1>     push rax
   257                              <1> .copy:
   258 00001471 AC                  <1>     lodsb   ;Get char in al and inc rsi
   259 00001472 3C00                <1>     cmp al, 0
   260 00001474 740B                <1>     je .exit
   261 00001476 3C3A                <1>     cmp al, ":"
   262 00001478 7407                <1>     je .exit
   263 0000147A 3C22                <1>     cmp al, 22h ;Speechmark
   264 0000147C 7403                <1>     je .exit
   265 0000147E AA                  <1>     stosb   ;Save char from al and inc rdi
   266 0000147F EBF0                <1>     jmp short .copy 
   267                              <1> .exit:
   268 00001481 58                  <1>     pop rax
   269 00001482 C3                  <1>     ret
   270                              <1> strcpy:
   271                              <1> ;rdi = Destination string
   272                              <1> ;rsi = Source string
   273                              <1> ;rcx = Number of Chars to copy
   274 00001483 57                  <1>     push rdi
   275 00001484 56                  <1>     push rsi
   276 00001485 51                  <1>     push rcx
   277 00001486 F3A4                <1>     rep movsb
   278 00001488 59                  <1>     pop rcx
   279 00001489 5E                  <1>     pop rsi
   280 0000148A 5F                  <1>     pop rdi
   281 0000148B C3                  <1>     ret
   282                              <1> strlen:
   283                              <1> ;Input: rsi = String start
   284                              <1> ;Output: rsi = String start
   285                              <1> ;        ecx = String length, inclusive of NULL char
   286 0000148C 50                  <1>     push rax
   287 0000148D 56                  <1>     push rsi
   288 0000148E 31C9                <1>     xor ecx, ecx    ;Clear counter
   289                              <1> .search:
   290 00001490 AC                  <1>     lodsb
   291 00001491 FFC1                <1>     inc ecx
   292 00001493 84C0                <1>     test al, al ;Is this a null char?
   293 00001495 75F9                <1>     jnz .search ;Null not found
   294                              <1> .exit:
   295 00001497 5E                  <1>     pop rsi
   296 00001498 58                  <1>     pop rax
   297 00001499 C3                  <1>     ret
   298                              <1> 
   299                              <1> memoryDetection:
   300 0000149A B820E80000          <1>     mov eax, 0E820h
   301 0000149F CD35                <1>     int 35h     ;rax = ptr to start, rsi = ptr to data table, each entry 24 bytes
   302 000014A1 EB07                <1>     jmp short .fsa1
   303                              <1> .findStartAddr:
   304 000014A3 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   305                              <1> .fsa1:
   306 000014AA 6685C9              <1>     test cx, cx
   307 000014AD 742C                <1>     jz .worstCase
   308 000014AF 66FFC9              <1>     dec cx
   309 000014B2 488B1E              <1>     mov rbx, qword [rsi]    ;Get the address entry into rbx
   310 000014B5 4839C3              <1>     cmp rbx, rax    
   311 000014B8 75E9                <1>     jne .findStartAddr
   312 000014BA 488B4608            <1>     mov rax, qword [rsi + 8] ;Get the number of bytes saved into rax
   313                              <1> 
   314 000014BE 488D15(00000000)    <1>     lea rdx, section.programArea.vstart
   315 000014C5 4829DA              <1>     sub rdx, rbx    ;Get the size of the interpreter and internal data area
   316 000014C8 4829D0              <1>     sub rax, rdx    ;Remove the number of bytes reserved to the interpreter
   317 000014CB E815FDFFFF          <1>     call printdecimalword
   318 000014D0 4801C3              <1>     add rbx, rax    ;Add number of bytes to start address
   319 000014D3 48891D(D00E0000)    <1>     mov qword [maxMemAddr], rbx ;Save this address
   320                              <1> .exit:
   321 000014DA C3                  <1>     ret
   322                              <1> .worstCase:
   323                              <1> ;Assume 2Mb MAX memory, rax has base address
   324 000014DB 48BB00002000000000- <1>     mov rbx, 200000h    ;2Mb value
   324 000014E4 00                  <1>
   325 000014E5 4829C3              <1>     sub rbx, rax
   326 000014E8 4889D8              <1>     mov rax, rbx    ;Get value in rax
   327 000014EB E8F5FCFFFF          <1>     call printdecimalword
   328 000014F0 48C705(D00E0000)00- <1>     mov qword [maxMemAddr], 200000h
   328 000014F8 002000              <1>
   329 000014FB C3                  <1>     ret
   330                              <1> 
    18                                  %include "BASICDAT.ASM"
    19 000014FC 4F6B0A0D00          <1> prompt  db "Ok",0Ah,0Dh,0
    20 00001501 5343522036342D4241- <1> mainmsg db "SCR 64-BASIC v0.1",0Ah,0Dh,0
    20 0000150A 5349432076302E310A- <1>
    20 00001513 0D00                <1>
    21 00001515 204279746573206672- <1> bytemsg db " Bytes free",0Ah,0Dh,0
    21 0000151E 65650A0D00          <1>
    22 00001523 0A0D00              <1> crlf    db 0Ah,0Dh,0
    23 00001526 4572726F720A0D00    <1> errmsg  db "Error",0Ah,0Dh,0
    24 0000152E 303132333435363738- <1> numbers db "0123456789"
    24 00001537 39                  <1>
    25                              <1> ;startVarChars db "ABCDEFGHIJKLMNOPQRSTUVWXYZ" ;Valid starting chars for a var name
    26                              <1> ;numStartVarChars equ $ - startVarChars
    27 00001538 414243444546474849- <1> varChrs db "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789%$" ;Valid inner chars for var name
    27 00001541 4A4B4C4D4E4F505152- <1>
    27 0000154A 535455565758595A30- <1>
    27 00001553 313233343536373839- <1>
    27 0000155C 2524                <1>
    28                              <1> numVarChars equ $ - varChrs
    29                              <1> ;% => Integer variable (8 bytes)
    30                              <1> ;! => Single-Precision, Unused and ignored
    31                              <1> ;# => Double-Precision, Unused and ignored
    32                              <1> ;$ => String variable
    33                              <1> 
    34                              <1> ;Error Messages
    35 0000155E 4F7574206F66206D65- <1> noMem   db "Out of memory",0Ah,0Dh,0
    35 00001567 6D6F72790A0D00      <1>
    36 0000156E 53796E746178206572- <1> syntax  db "Syntax error",0Ah,0Dh,0
    36 00001577 726F720A0D00        <1>
    37 0000157D 54797065206D69736D- <1> typeError   db "Type mismatch",0Ah,0Dh,0
    37 00001586 617463680A0D00      <1>
    38 0000158D 556E646566696E6564- <1> lineNoXist  db "Undefined line number",0Ah,0Dh,0
    38 00001596 206C696E65206E756D- <1>
    38 0000159F 6265720A0D00        <1>
    39 000015A5 427265616B20696E20- <1> breakmsg db "Break in ",0
    39 000015AE 00                  <1>
    40 000015AF 537461636B206F7665- <1> stkOvflw db "Stack overflow",0Ah,0Dh,0
    40 000015B8 72666C6F770A0D00    <1>
    41                              <1> 
    42 000015C0 5748494C4520776974- <1> noWend   db "WHILE without WEND", 0Ah, 0Dh, 0
    42 000015C9 686F75742057454E44- <1>
    42 000015D2 0A0D00              <1>
    43 000015D5 57454E442077697468- <1> noWhile  db "WEND without WHILE", 0Ah, 0Dh, 0
    43 000015DE 6F7574205748494C45- <1>
    43 000015E7 0A0D00              <1>
    44 000015EA 4E4558542077697468- <1> noFor    db "NEXT without FOR", 0Ah, 0Dh, 0
    44 000015F3 6F757420464F520A0D- <1>
    44 000015FC 00                  <1>
    45 000015FD 464F5220776974686F- <1> noNext   db "FOR without NEXT", 0Ah, 0Dh, 0
    45 00001606 7574204E4558540A0D- <1>
    45 0000160F 00                  <1>
    46 00001610 52455455524E207769- <1> noReturn db "RETURN without GOSUB", 0Ah, 0Dh, 0
    46 00001619 74686F757420474F53- <1>
    46 00001622 55420A0D00          <1>
    47 00001627 556E7072696E746162- <1> uknowner db "Unprintable error", 0Ah, 0Dh, 0
    47 00001630 6C65206572726F720A- <1>
    47 00001639 0D00                <1>
    19                                  Segment programArea follows=resSeg align=1 vfollows=resSeg valign=1
    20                                  ENDOFPROGRAM:

     1                                      [map all BASIC.MAP]
     2                                      [DEFAULT REL]
     3                                      BITS 64
     4                                  %include "MEM.INC"
     5                              <1> 
     6                              <1> progLineBlockType   equ 0   ;Program Line
     7                              <1> varBlockType        equ 1   ;Variable block
     8                              <1> datBlockType        equ 2   ;Data block (i.e. a string block)
     9                              <1> 
    10                              <1> notLastMemBlock equ "t" ;Used for blocks that are not the last block
    11                              <1> lastMemBlock    equ "r" ;Used by the last block to indicate end of chain
    12                              <1> 
    13                              <1> %macro memBlockM 0 ;Memory block Macro
    14                              <1>     .bSignature resb 1      ;Valid Signature
    15                              <1>     .wBlockSize resw 1      ;Total block size in bytes
    16                              <1>     .bBlockType resb 1      ;Block type, program line, variable or string
    17                              <1> %endmacro
    18                              <1> 
    19                              <1> struc memBlock
    20                              <1>     memBlockM
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    21                              <1> endstruc
    22                              <1> 
    23                              <1> struc progLineBlock
    24                              <1>     memBlockM               ;Common memory block header
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    25 00000004 ????                <1>     .wLineNum   resw 1      ;Line number, up to 65535
    26 00000006 ????????????????    <1>     .qPtr       resq 1      ;Pointer to the next line, or -1 if last line
    27 0000000E <res 100h>          <1>     .sLine      resb maxLineLen  ;Maximum length 255, keep null char but 
    28                              <1>     ;                             NOT LINE NUMBER OR PRECEEDING SPACES
    29                              <1> endstruc
    30                              <1> 
    31                              <1> struc varBlock
    32                              <1>     memBlockM               ;Common memory block header
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    33 00000004 ????????????????    <1>     .qValue     resq 1      ;One value qword
    34                              <1>     .sVarName:              ;Up to 40 chars for the var name
    35                              <1> endstruc
    36                              <1> 
    37                              <1> struc stringBlock
    38                              <1>     memBlockM
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    39 00000004 <res 100h>          <1>     .string     resb maxLineLen    ;Strings allocate 256 chars
    40                              <1>     .sVarName:              ;Up to 40 chars for the var name
    41                              <1> endstruc
    42                              <1> 
    43                              <1> ;Variable equates
    44                              <1> intEquate   equ 0
    45                              <1> strEquate   equ 1
    46                              <1> 
    47                              <1> ;State byte equates
    48                              <1> breakBit    equ 1    ;Set means on
    49                              <1> traceBit    equ 2    ;Set means TRON, Clear means TROFF
    50                              <1> indirectBit equ 4    ;Set means indirect/program mode, Clear means direct/line mode
    51                              <1> ctrlFlow    equ 8    ;Set means do not find other expression on current line
    52                              <1> 
    53                              <1> ;Control Instruction Signatures
    54                              <1> WHILEsig    equ 055h
    55                              <1> FORsig      equ 05Ah
    56                              <1> GOSUBsig    equ 0A5h
    57                              <1> ;Control stack data structures
    58                              <1> 
    59                              <1> struc forStruct
    60 00000000 ????????????????    <1>     .specQword  resq 1  ;Special qword (see function description)
    61 00000008 ????????????????    <1>     .cntrPtr    resq 1  ;Pointer to counter variable
    62 00000010 ????????????????    <1>     .limitValue resq 1  ;At what value, or after, do we stop the loop 
    63 00000018 ????????????????    <1>     .stepValue  resq 1  ;By how much do we increase on each iteration
    64                              <1> ;Special qword:
    65                              <1> ; Byte 7 = Offset into the line for next instruction after FOR
    66                              <1> ; Bytes[6:5] = Line number of portion after FOR (either FOR line or line after FOR)
    67                              <1> ; Byte 4 = Offset into the line for next instruction after NEXT
    68                              <1> ; Bytes[3:2] = Line number of portion after NEXT (either NEXT line or line after NEXT)
    69                              <1> ; Byte 1 = Parity check sum for the qword, makes the sum of the bytes in qword 0
    70                              <1> ; Byte 0 = FOR signature
    71                              <1> endstruc
    72                              <1> 
    73                              <1> struc whileStruct
    74 00000000 ????????????????    <1>     .specQword  resq 1  ;Special qword
    75                              <1> ;Special qword:
    76                              <1> ; Byte 7 = Offset into the line for the condition to evaluate
    77                              <1> ; Bytes[6:5] = Line number of WHILE 
    78                              <1> ; Byte 4 = Offset in line for either first : after WEND or ASCII NULL (end of line)
    79                              <1> ; Bytes[3:2] = Line number of WEND
    80                              <1> ; Byte 1 = Parity check sum for the qword, makes the sum of the bytes in qword 0
    81                              <1> ; Byte 0 = WHILE signature
    82                              <1> endstruc
    83                              <1> 
    84                              <1> struc gosubStruct
    85 00000000 ????????????????    <1>     .specQword  resq 1  ;Special qword
    86                              <1> ;Special qword:
    87                              <1> ; Byte 7 =  Offset in line for either first : after GOSUB or ASCII NULL (end of line)
    88                              <1> ; Bytes[6:5] = Line number of GOSUB 
    89                              <1> ; Bytes[4:2] = 055AA55h space filler signature
    90                              <1> ; Byte 1 = Parity check sum for the qword, makes the sum of the bytes in qword 0
    91                              <1> ; Byte 0 = GOSUB signature
    92                              <1> endstruc
    93                              <1> 
    94                              <1> ;Stack based macros
    95                              <1> %macro makeSpaceOnStack 1
    96                              <1>     ;The argument is to specify how much space to make on the stack
    97                              <1>     ;It will check to ensure that we dont go past the stack minimum.
    98                              <1>     ;If we do, call stack overflow!
    99                              <1>     pop rax    ;Get the return address qword into rax
   100                              <1>     shl %1, 3  ;Multiply argument register by 8
   101                              <1>     sub rsp, %1 ;Clear space on the stack plus one qword for ret addr
   102                              <1>     lea rbp, stack
   103                              <1>     cmp rsp, rbp
   104                              <1>     ja .macroNotOverflow ;If rsp above overflow buffer, its oki
   105                              <1>     lea rbp, stkOvflw
   106                              <1>     jmp criticalError
   107                              <1> .macroNotOverflow:
   108                              <1>     ;rsp now points to the start of the cleared space
   109                              <1>     ;Put the return address back on the stack
   110                              <1>     push rax
   111                              <1> %endmacro
   112                              <1> 
   113                              <1> %macro cleanSpaceOnStack 1
   114                              <1>     ;The argument is to specify how much space to reclaim from the stack
   115                              <1>     pop rax
   116                              <1>     shl %1, 3   ;Multiply argument register by 8
   117                              <1>     add rsp, %1
   118                              <1>     push rax
   119                              <1> %endmacro
     5                                  Segment .text align=1
     6                                  %include "RELOC.ASM"
     7 00000000 55AA                <1>     dw 0AA55h 
     8                              <1> ;First verify I have Enough RAM for my program and then run
     9 00000002 B801E80000          <1>     mov eax, 0E801h ;Get low memory count in ax
    10 00000007 CD35                <1>     int 35h
    11 00000009 663D0008            <1>     cmp ax, 200000h/400h ;Divide 2Mb into 1Kb chunks.
    12 0000000D 722A                <1>     jb bad
    13 0000000F B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    14 00000014 0F32                <1>     rdmsr
    15 00000016 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    16 00000018 48C1E720            <1>     shl rdi, 20h        ;Shift high
    17 0000001C 89C7                <1>     mov edi, eax        ;Get the low dword in
    18 0000001E 4889F8              <1>     mov rax, rdi
    19 00000021 488D35(00000000)    <1>     lea rsi, section.resSeg.start
    20 00000028 4881C7[F60E0000]    <1>     add rdi, bssLen
    21 0000002F B900100000          <1>     mov ecx, 1000h
    22 00000034 F348A5              <1>     rep movsq
    23 00000037 FFE0                <1>     jmp qword rax
    24                              <1> bad:
    25 00000039 488D2D0D000000      <1>     lea rbp, badmsg
    26 00000040 B804130000          <1>     mov eax, 1304h
    27 00000045 CD30                <1>     int 30h
    28 00000047 30E4                <1>     xor ah, ah
    29 00000049 CD36                <1>     int 36h
    30 0000004B CD38                <1>     int 38h
    31 0000004D 4E6F7420456E6F7567- <1> badmsg: db "Not Enough Memory. Press any key to enter SYSDEBUG...",0
    31 00000056 68204D656D6F72792E- <1>
    31 0000005F 20507265737320616E- <1>
    31 00000068 79206B657920746F20- <1>
    31 00000071 656E74657220535953- <1>
    31 0000007A 44454255472E2E2E00  <1>
     7                                  Segment dSeg nobits align=1 start=0
     8                                  %include "BSS.ASM"
     9 00000000 <res 50h>           <1> oflowbuff   resq 10        ;10 Qwords of overflow buffer
    10                              <1> ;rsp should never get here when operating in a program.
    11                              <1> ;Only acceptable to be used when processing a line
    12 00000050 <res D40h>          <1> stack       resq 200h - 8 - 10*8  ;Save total 4Kb stack space
    13 00000D90 ????????????????    <1> stacktop    resq 1
    14                              <1> 
    15                              <1> maxLineLen  equ 256
    16 00000D98 <res 100h>          <1> inString    resb maxLineLen         ;256 character input string
    17                              <1> 
    18                              <1> ;This string is used for printing long numbers and saving
    19                              <1> ; the variable names for string comparisons
    20                              <1> digitStringLen  equ 48
    21 00000E98 <res 30h>           <1> digitString resb digitStringLen     
    22                              <1> 
    23 00000EC8 ????????????????    <1> minMemAddr  resq 1  ;Pointer from where to start allocating memory blocks
    24 00000ED0 ????????????????    <1> maxMemAddr  resq 1  ;Pointer to the byte past which we cannot allocate anything
    25                              <1> ;==============================================================================
    26                              <1> ;This is the SDA for each program and must be included in the program area
    27                              <1> ; once we add the ability to save the program to disk.
    28                              <1> ;==============================================================================
    29                              <1> 
    30                              <1> ;void* mcbChain, lastBlock, firstLinPtr = -1 => New program, empty entries
    31                              <1> 
    32 00000ED8 ??                  <1> strLen      resb 1  ;Counter for number of chars entered in string
    33 00000ED9 ??                  <1> stateByte   resb 1  ;Bit 0 => Break Set, stop processing after end of current line
    34 00000EDA ????????????????    <1> mcbChain    resq 1  ;Pointer to the start of the chain
    35 00000EE2 ????????????????    <1> lastBlock   resq 1  ;Pointer to the last block
    36 00000EEA ????????????????    <1> firstLinPtr resq 1  ;Pointer to the programs' first line 
    37 00000EF2 ????                <1> firstLinNum resw 1  ;Line number of the first line of the program
    38 00000EF4 ????                <1> currentLine resw 1  ;Currently being executed line number
    39                              <1> 
    40                              <1> bssLen: ;Needed to compute the resident portion load location
     9                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1
    10                                  %include "MAIN.ASM"
    11                              <1> start:
    12 00000000 B801C50000          <1>     mov eax, 0C501h
    13 00000005 CD35                <1>     int 35h         ;Connect the debugger
    14 00000007 E8A1010000          <1>     call ttyClear   ;Clear the teletype
    15                              <1>     ;Set the CtrlBreak Handler
    16 0000000C 488D3DC7000000      <1>     lea rdi, ctrlBreakHandler
    17 00000013 B03B                <1>     mov al, 3Bh
    18 00000015 E8C9000000          <1>     call setHandler
    19                              <1> 
    20                              <1>     ;Memory stuff
    21 0000001A 488D2DDD120000      <1>     lea rbp, mainmsg
    22 00000021 E87A010000          <1>     call ttyOutString
    23 00000026 E86C120000          <1>     call memoryDetection
    24 0000002B 488D2DE0120000      <1>     lea rbp, bytemsg
    25 00000032 E869010000          <1>     call ttyOutString
    26 00000037 E8E6060000          <1>     call newProgram         ;Use this to reset program pointers
    27                              <1> mainLoop:
    28 0000003C FC                  <1>     cld                 ;Set default string op direction
    29 0000003D 488D25(900D0000)    <1>     lea rsp, stacktop    ;Reinitialize stack pointer
    30 00000044 488D05F1FFFFFF      <1>     lea rax, mainLoop
    31 0000004B 8025(D90E0000)FE    <1>     and byte [stateByte], 0FEh  ;Clear the break bit
    32 00000052 50                  <1>     push rax    ;Save address on stack
    33 00000053 488D2D9F120000      <1>     lea rbp, prompt
    34 0000005A E841010000          <1>     call ttyOutString
    35                              <1> .ml0:
    36                              <1> ;This section will execute an input line if it is an interactive expression
    37                              <1> ; or store it in the program if it has a line number.
    38                              <1> ;It will keep accepting lines until a line is entered without a line number
    39 0000005F E89F000000          <1>     call getLineInput
    40 00000064 E86E0F0000          <1>     call decimalToHex   ;Check to see if we have a valid line number
    41 00000069 6685C0              <1>     test ax, ax
    42 0000006C 750C                <1>     jnz .saveLine
    43                              <1> ;Here we execute the line, move rsi to the start of the line
    44 0000006E 488D35(980D0000)    <1>     lea rsi, inString
    45 00000075 E9AE010000          <1>     jmp runLine
    46                              <1> .saveLine:
    47                              <1>     ;ax has the line number
    48 0000007A 6689C2              <1>     mov dx, ax
    49 0000007D E8A6100000          <1>     call searchForProgramLine
    50 00000082 4881FBFFFFFFFF      <1>     cmp rbx, -1
    51 00000089 751D                <1>     jne .commonProc ;If not equal, line must exist, continue
    52 0000008B E8B1020000          <1>     call spaceSkip  ;Skip all the prceeding spaces
    53 00000090 803E00              <1>     cmp byte [rsi], 0  ;Is the first non space char the end of the string?
    54 00000093 742D                <1>     je .lineDoesntExist
    55                              <1>     ;So we have a new line that isn't empty, allocate a new block for this line
    56 00000095 E8BE0F0000          <1>     call allocateBlock  ;Return a default block in rbx
    57 0000009A C6430300            <1>     mov byte [rbx + progLineBlock.bBlockType], progLineBlockType
    58 0000009E 66894304            <1>     mov word [rbx + progLineBlock.wLineNum], ax
    59 000000A2 66C743010E01        <1>     mov word [rbx + progLineBlock.wBlockSize], progLineBlock_size
    60                              <1> .commonProc:
    61                              <1>     ;If the line already exists, simply override the stored string
    62                              <1>     ;rbx has a pointer to the block
    63 000000A8 E8DC110000          <1>     call strlen ;Get the string length
    64 000000AD 488D7B0E            <1>     lea rdi, qword [rbx + progLineBlock.sLine]  ;Get address here
    65 000000B1 E8CA110000          <1>     call strcpy ;Copy the program string to the program block
    66 000000B6 56                  <1>     push rsi
    67 000000B7 4889DE              <1>     mov rsi, rbx    ;Move the block into rsi
    68 000000BA E88D100000          <1>     call insertProgramLine
    69 000000BF 5E                  <1>     pop rsi
    70 000000C0 EB9D                <1>     jmp short .ml0
    71                              <1> .lineDoesntExist:
    72 000000C2 488D2DC1120000      <1>     lea rbp, lineNoXist
    73                              <1> ;For any error, syntax or otherwise, come here
    74                              <1> criticalError:
    75                              <1> ;Called with rbp pointing at error message
    76 000000C9 E8D2000000          <1>     call ttyOutString
    77 000000CE C605(D90E0000)00    <1>     mov byte [stateByte], 0 ;Reset the state byte
    78 000000D5 E962FFFFFF          <1>     jmp mainLoop    ;Trash input line, restart line input
    79                              <1> 
    80                              <1> ctrlBreakHandler:
    81 000000DA 800D(D90E0000)01    <1>     or byte [stateByte], 1  ;Set the byte
    82 000000E1 48CF                <1>     iretq
    83                              <1> setHandler:
    84                              <1> ;Called with:
    85                              <1> ;   rdi = Pointer to interrupt handler
    86                              <1> ;   al = Interrupt number
    87 000000E3 89C5                <1>     mov ebp, eax    ;al has interrupt number which we need to save
    88 000000E5 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
    89                              <1> ;First call to get default BIOS segement selector and attribute word
    90 000000EB 88C3                <1>     mov bl, al  ;Set interrupt number 
    91 000000ED B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
    92 000000F2 CD35                <1>     int 35h
    93 000000F4 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
    94 000000F6 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
    95                              <1> ;dx preserves the attribute word
    96 000000F8 4889FB              <1>     mov rbx, rdi  ;Pointer passed in rdi
    97 000000FB B808F00000          <1>     mov eax, 0F008h ;Set descriptor
    98 00000100 CD35                <1>     int 35h
    99                              <1>     
   100 00000102 C3                  <1>     ret
    11                                  %include "TTY.ASM"
    12                              <1> getLineInput:
    13                              <1>     ;Sets rsi to the inputstring
    14 00000103 30E4                <1>     xor ah, ah
    15 00000105 8825(D80E0000)      <1>     mov byte [strLen], ah   ;Zero the char counter
    16 0000010B 488D3D(980D0000)    <1>     lea rdi, inString   ;Move to start of line
    17 00000112 4889FE              <1>     mov rsi, rdi
    18 00000115 57                  <1>     push rdi
    19 00000116 B900010000          <1>     mov ecx, maxLineLen
    20 0000011B 30C0                <1>     xor al, al    ;Ensure the input line is sanitised
    21 0000011D F3AA                <1>     rep stosb
    22 0000011F 5F                  <1>     pop rdi
    23                              <1> .getChar:
    24 00000120 E883000000          <1>     call ttyIn
    25 00000125 3C0D                <1>     cmp al, 0Dh ;Line Feed
    26 00000127 7456                <1>     je .gliExit
    27 00000129 3C08                <1>     cmp al, 08h ;Bspace
    28 0000012B 740F                <1>     je .glibspace
    29 0000012D 803D(D80E0000)FE    <1>     cmp byte [strLen], -2   ;If at max length (255 chars), simply beep and wait for either bspace or enter
    30 00000134 7459                <1>     je .gliFull 
    31 00000136 84C0                <1>     test al, al
    32 00000138 7443                <1>     je .gliExtendedChar
    33 0000013A EB29                <1>     jmp short .gliCheckCase
    34                              <1> .glibspace:
    35 0000013C F605(D80E0000)FF    <1>     test byte [strLen], -1  ;This will only be zero if strLen=0
    36 00000143 74DB                <1>     jz .getChar
    37 00000145 48FFCF              <1>     dec rdi ;Go back by one position in the input line
    38 00000148 FE0D(D80E0000)      <1>     dec byte [strLen]
    39 0000014E B008                <1>     mov al, 08h
    40 00000150 E846000000          <1>     call ttyOutChar
    41 00000155 B020                <1>     mov al, 20h  
    42 00000157 E83F000000          <1>     call ttyOutChar
    43 0000015C B008                <1>     mov al, 08h
    44 0000015E E838000000          <1>     call ttyOutChar
    45 00000163 EBBB                <1>     jmp short .getChar
    46                              <1> .gliCheckCase:
    47                              <1>     ;al has char
    48 00000165 E831000000          <1>     call ttyOutChar ;Echo the char as is, but store it uppercase
    49 0000016A 3C61                <1>     cmp al, "a"
    50 0000016C 7206                <1>     jb .gliccStore
    51 0000016E 3C7A                <1>     cmp al, "z"
    52 00000170 7702                <1>     ja .gliccStore
    53 00000172 2C20                <1>     sub al, 20h
    54                              <1> .gliccStore:
    55 00000174 AA                  <1>     stosb   ;Increment the pointer, add char to buffer
    56 00000175 FE05(D80E0000)      <1>     inc byte [strLen]   ;Inc char count
    57 0000017B EBA3                <1>     jmp short .getChar
    58                              <1> .gliExtendedChar:
    59                              <1>     ;Currently, extended chars do nothing, 
    60                              <1>     ; eventually add F1-F10 functionality
    61                              <1>     ; and arrow key support
    62 0000017D EBA1                <1>     jmp short .getChar
    63                              <1> .gliExit:
    64 0000017F 488D2D9A110000      <1>     lea rbp, crlf
    65 00000186 E815000000          <1>     call ttyOutString
    66 0000018B C60700              <1>     mov byte [rdi], 0   ;Null terminate string here
    67 0000018E C3                  <1>     ret
    68                              <1> .gliFull:
    69 0000018F B007                <1>     mov al, 07h
    70 00000191 E805000000          <1>     call ttyOutChar
    71 00000196 E985FFFFFF          <1>     jmp .getChar
    72                              <1> 
    73                              <1> ttyOutChar:
    74 0000019B B40E                <1>     mov ah, 0Eh
    75 0000019D CD30                <1>     int 30h
    76 0000019F C3                  <1>     ret
    77                              <1> ttyOutString:
    78                              <1> ;Print 0 terminated strings
    79 000001A0 B804130000          <1>     mov eax, 1304h
    80 000001A5 CD30                <1>     int 30h
    81 000001A7 C3                  <1>     ret
    82                              <1> ttyIn:
    83 000001A8 30E4                <1>     xor ah, ah
    84 000001AA CD36                <1>     int 36h
    85 000001AC C3                  <1>     ret
    86                              <1> ttyClear:
    87 000001AD B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
    88 000001B2 CD30                <1>     int 30h
    89 000001B4 B402                <1>     mov ah, 02h
    90 000001B6 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
    91 000001B8 88D7                <1>     mov bh, dl      ;Set cursor for page 0
    92 000001BA CD30                <1>     int 30h
    93 000001BC B707                <1>     mov bh, 07h     ;Grey/Black attribs
    94 000001BE B800060000          <1>     mov eax, 0600h  ;Clear whole screen
    95 000001C3 CD30                <1>     int 30h
    96 000001C5 C3                  <1>     ret
    12                                  %include "PROCESS.ASM"
    13                              <1> keywordParser:
    14                              <1> ;rsi must point to the start of the portion of the line to execute
    15 000001C6 E876010000          <1>     call spaceSkip  ;Skip any leading spaces
    16 000001CB 803E00              <1>     cmp byte [rsi], 0   ;Null terminated line, empty line?
    17 000001CE 7444                <1>     je .exitEmpty
    18                              <1>     ;rsi now points to function
    19 000001D0 488D3D60030000      <1>     lea rdi, funTbl     ;Point rdi to the function table
    20                              <1> .functionFinderLoop:
    21 000001D7 0FB60F              <1>     movzx ecx, byte [rdi]  ;Get the string length  
    22 000001DA 80F9FF              <1>     cmp cl, -1  ;-1 is the end of table marker, either Var assignment or error
    23 000001DD 7440                <1>     je .notLetVarAssignment ;No key word found, consider variable assignment
    24 000001DF 56                  <1>     push rsi    ;Save ptr to start of string on stack 
    25 000001E0 57                  <1>     push rdi
    26 000001E1 48FFC7              <1>     inc rdi             ;Goto first char in function name
    27 000001E4 F3A6                <1>     repe cmpsb
    28 000001E6 5F                  <1>     pop rdi
    29 000001E7 5E                  <1>     pop rsi     ;Return ptr to start of string pointer from stack
    30 000001E8 84C9                <1>     test cl, cl ;Did all the chars match?
    31 000001EA 740F                <1>     jz .functionFound
    32 000001EC 480FB607            <1>     movzx rax, byte [rdi]    ;Skip unnecessary function pointer
    33 000001F0 480502000000        <1>     add rax, 2      ;Add 2 to skip relative pointer
    34 000001F6 4801C7              <1>     add rdi, rax
    35 000001F9 EBDC                <1>     jmp short .functionFinderLoop
    36                              <1> .functionFound:
    37                              <1>     ;Function found! Execute!
    38                              <1>     ;rsi points to start of expression to evaluate for function
    39                              <1>     ;rdi points to table entry
    40 000001FB 488D1D35030000      <1>     lea rbx, funTbl         ;Get table address
    41 00000202 480FB617            <1>     movzx rdx, byte [rdi]   ;Get pascal string length
    42 00000206 0FB70C17            <1>     movzx ecx, word [rdi + rdx] ;Add pascal strlen to table entry and get word offset
    43 0000020A 4801CB              <1>     add rbx, rcx    ;Add word offset to table base
    44 0000020D 48FFCA              <1>     dec rdx         ;Get number of chars in function name
    45 00000210 4801D6              <1>     add rsi, rdx    ;rsi points to first char AFTER function name
    46                              <1> .exit:
    47 00000213 C3                  <1>     ret 
    48                              <1> .exitEmpty:
    49 00000214 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    49 0000021D FF                  <1>
    50 0000021E C3                  <1>     ret
    51                              <1>     ;rbx has the function pointer, 
    52                              <1>     ;rsi points to the first char after the keyword (e.g. PRINT, INPUT etc)
    53                              <1> .notLetVarAssignment:
    54 0000021F 488D1D7E040000      <1>     lea rbx, variableAssignment
    55 00000226 EBEB                <1>     jmp short .exit  ;Now call the function as if it was found from the table
    56                              <1> 
    57                              <1> runLine:
    58                              <1> ;New lines begin here, rsi point to the start of the program line
    59 00000228 F605(D90E0000)02    <1>     test byte [stateByte], traceBit ;Are we TRON?
    60 0000022F 0F85B0000000        <1>     jnz .tron
    61                              <1> .stringPortionProcess:
    62                              <1>     ;rsi points to string portion to begin processing
    63 00000235 E88CFFFFFF          <1>     call keywordParser
    64                              <1>     ;rbx has the function pointer, if rbx is -1, line was empty
    65                              <1>     ;rsi points to the first char after the keyword (e.g. PRINT, INPUT etc)
    66 0000023A 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If the line is empty, rbx has a -1 so skip the line
    67 00000241 7437                <1>     je .gotoNextLine
    68 00000243 F605(D90E0000)01    <1>     test byte [stateByte], breakBit ;Is break set before exec?
    69 0000024A 0F85C1000000        <1>     jnz .break
    70                              <1> ;EXEC   LINE    PORTION
    71 00000250 FFD3                <1>     call rbx        ;Call the function pointer in rbx
    72                              <1>     ;rsi should be pointing to the next portion of the line or the end of the line
    73                              <1> ;EXEC COMPLETE
    74 00000252 F605(D90E0000)01    <1>     test byte [stateByte], breakBit ;Is break set after exec?
    75 00000259 0F85B2000000        <1>     jnz .break
    76 0000025F F605(D90E0000)04    <1>     test byte [stateByte], indirectBit
    77 00000266 7448                <1>     jz .exit    ;IF in direct mode, just return to command line
    78 00000268 F605(D90E0000)08    <1>     test byte [stateByte], ctrlFlow ;Ctrl Flow =>ignore other expressions temporarily
    79 0000026F 7540                <1>     jnz .ctrlFlowHandler
    80                              <1> 
    81 00000271 E8B7020000          <1>     call findOtherExpressionsOnLine ;See if there are any other expressions
    82 00000276 84C0                <1>     test al, al ;If al is null, no more expressions on the line
    83                              <1>     ;If not null, keep executing expressions on same line
    84                              <1>     ;rsi points to first char after :
    85 00000278 75BB                <1>     jnz .stringPortionProcess ;If a : found, keep processing
    86                              <1> .gotoNextLine:
    87 0000027A 668B15(F40E0000)    <1>     mov dx, word [currentLine]  ;Get in rbx the ptr to current line
    88 00000281 E8A20E0000          <1>     call searchForProgramLine
    89 00000286 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Does the line not exist somehow?
    90 0000028D 7421                <1>     je .exit
    91 0000028F 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Walk chain
    92 00000293 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Are we at the end of the chain?
    93 0000029A 7414                <1>     je .exit
    94 0000029C 668B5304            <1>     mov dx, word [rbx + progLineBlock.wLineNum] ;Save the new line number
    95 000002A0 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Point rsi to the start of the next line
    96                              <1> .gotoNextLineCommon:
    97 000002A4 668915(F40E0000)    <1>     mov word [currentLine], dx
    98 000002AB E978FFFFFF          <1>     jmp runLine
    99                              <1> .exit:
   100 000002B0 C3                  <1>     ret
   101                              <1> .ctrlFlowHandler:
   102                              <1>     ;The stack pointer should be pointing now at the block
   103                              <1>     ; control flow data block. 
   104                              <1>     ;The functions which return with this bit set, also have placed
   105                              <1>     ; the next line number in dx, offset into line in byte three of edx
   106 000002B1 8025(D90E0000)F7    <1>     and byte [stateByte], ~ctrlFlow ;First clear the ctrlflow bit
   107 000002B8 E86B0E0000          <1>     call searchForProgramLine   ;Get pointer to line
   108 000002BD 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Does the line not exist?
   109 000002C4 74DE                <1>     je .gotoNextLineCommon
   110 000002C6 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Point rsi to the start of the next line
   111 000002CA 89D0                <1>     mov eax, edx    ;Isolate the offset into the line
   112 000002CC C1E810              <1>     shr eax, 10h    ;Get byte three into byte 1
   113 000002CF 25FF000000          <1>     and eax, 0FFh   ;Save only the bottom byte
   114 000002D4 4801C6              <1>     add rsi, rax    ;Add the offset into the string to rsi
   115 000002D7 EBCB                <1>     jmp short .gotoNextLineCommon
   116                              <1> .badLineNumber:
   117 000002D9 488D2DAA100000      <1>     lea rbp, lineNoXist
   118 000002E0 E9E4FDFFFF          <1>     jmp criticalError
   119                              <1> 
   120                              <1> .tron:
   121                              <1> ;Print the line number about to be executed
   122 000002E5 F605(D90E0000)04    <1>     test byte [stateByte], indirectBit  ;Tron should only work in indirect mode
   123 000002EC 0F8443FFFFFF        <1>     jz .stringPortionProcess
   124 000002F2 B05B                <1>     mov al, "["
   125 000002F4 E8A2FEFFFF          <1>     call ttyOutChar
   126 000002F9 0FB705(F40E0000)    <1>     movzx eax, word [currentLine]
   127 00000300 E8FA0C0000          <1>     call printdecimalword
   128 00000305 B05D                <1>     mov al, "]"
   129 00000307 E88FFEFFFF          <1>     call ttyOutChar
   130 0000030C E924FFFFFF          <1>     jmp .stringPortionProcess
   131                              <1> .break:
   132 00000311 488D2D8A100000      <1>     lea rbp, breakmsg
   133 00000318 E883FEFFFF          <1>     call ttyOutString
   134 0000031D 0FB705(F40E0000)    <1>     movzx eax, word [currentLine]
   135 00000324 E8D60C0000          <1>     call printdecimalword
   136 00000329 488D2DF00F0000      <1>     lea rbp, crlf
   137 00000330 E86BFEFFFF          <1>     call ttyOutString
   138                              <1>     ;Preserve only bit 2 of the state byte
   139 00000335 8025(D90E0000)02    <1>     and byte [stateByte], traceBit
   140 0000033C E9FBFCFFFF          <1>     jmp mainLoop    ;Exit processing
    13                                  %include "PARSE.ASM"
    14                              <1> ;Main Parsing Routines go here
    15                              <1> 
    16                              <1> spaceSkip:
    17                              <1> ;Allows us to skip spaces that might have been placed for
    18                              <1> ; ease of reading by the user without modifying any registers
    19                              <1> ; except for rsi.
    20                              <1> ;Input: rsi = Pointer to string
    21                              <1> ;Output: rsi = First non space character encountered
    22 00000341 803E20              <1>     cmp byte [rsi], " "
    23 00000344 7505                <1>     jne .exit
    24 00000346 48FFC6              <1>     inc rsi
    25 00000349 EBF6                <1>     jmp short spaceSkip
    26                              <1> .exit:
    27 0000034B C3                  <1>     ret
    28                              <1> 
    29                              <1> getVarNameLength:
    30                              <1> ;Called pointing to the buffer with the var name in it
    31                              <1> ;Input: rsi = Start of var name
    32                              <1> ;Output: ecx = Length of varname
    33 0000034C 50                  <1>     push rax
    34 0000034D 56                  <1>     push rsi
    35 0000034E 57                  <1>     push rdi
    36 0000034F 53                  <1>     push rbx
    37 00000350 52                  <1>     push rdx
    38 00000351 31D2                <1>     xor edx, edx    ;Clear counter of chars
    39 00000353 488D1DDB0F0000      <1>     lea rbx, varChrs    ;Get the list of valid variable name chars
    40                              <1> .search:
    41 0000035A 4889DF              <1>     mov rdi, rbx    ;Save pointer in rbx
    42 0000035D AC                  <1>     lodsb       ;Get the first char into al
    43 0000035E B926000000          <1>     mov ecx, numVarChars
    44 00000363 F2AE                <1>     repne scasb       ;Look for char in the valid chars list
    45 00000365 750A                <1>     jne .exit   ;Char not found, drop it
    46 00000367 FFC2                <1>     inc edx     ;Add one to number of chars found
    47 00000369 81FA28000000        <1>     cmp edx, 40 ;At position for char 40?
    48 0000036F 72E9                <1>     jb .search  ;Whilst below, keep going
    49                              <1> .exit:
    50 00000371 89D1                <1>     mov ecx, edx
    51 00000373 5A                  <1>     pop rdx
    52 00000374 5B                  <1>     pop rbx
    53 00000375 5F                  <1>     pop rdi
    54 00000376 5E                  <1>     pop rsi
    55 00000377 58                  <1>     pop rax
    56 00000378 C3                  <1>     ret
    57                              <1> 
    58                              <1> getVarType:
    59                              <1> ;Input: rsi = Start of var name
    60                              <1> ;       rcx = Length of varname
    61                              <1> ;Output: ebx = 0 => Integer
    62                              <1> ;        ebx = 1 => String
    63                              <1> ;        ebx = -1 => Var doesnt exist, caller handles
    64 00000379 50                  <1>     push rax
    65 0000037A 51                  <1>     push rcx
    66 0000037B 56                  <1>     push rsi
    67 0000037C E8370D0000          <1>     call findVariable
    68 00000381 4881FBFFFFFFFF      <1>     cmp rbx, -1
    69 00000388 7406                <1>     je .exit
    70 0000038A 0FB65B03            <1>     movzx ebx, byte [rbx + memBlock.bBlockType]
    71 0000038E FFCB                <1>     dec ebx
    72                              <1> .exit:
    73 00000390 5E                  <1>     pop rsi
    74 00000391 59                  <1>     pop rcx
    75 00000392 58                  <1>     pop rax
    76 00000393 C3                  <1>     ret
    77                              <1> 
    78                              <1> handleAlgebraicExpression:
    79                              <1> ;Input: rsi = Points to a mathematical expression
    80                              <1> ;Output: rax = Result of said expression
    81                              <1> ;Declares a syntax error if weird chars found
    82                              <1> ;Declares a type error if a string variable found
    83                              <1>     ;Handle Logical Connectives here
    84                              <1>     ;call .handleThirdLevel
    85 00000394 66813E4E4F          <1>     cmp word [rsi], "NO"
    86 00000399 7504                <1>     jne .hae0
    87 0000039B 807E0254            <1>     cmp byte [rsi + 2], "T"
    88                              <1> ;    je .not
    89                              <1> .hae0:
    90 0000039F 66813E414E          <1>     cmp word [rsi], "AN"
    91 000003A4 7504                <1>     jne .hae1
    92 000003A6 807E0244            <1>     cmp byte [rsi + 2], "D"
    93                              <1> ;    je .and
    94                              <1> .hae1:
    95 000003AA 66813E4F52          <1>     cmp word [rsi], "OR"
    96                              <1> ;    je .or
    97 000003AF 66813E584F          <1>     cmp word [rsi], "XO"
    98 000003B4 7504                <1>     jne .hae2
    99 000003B6 807E0252            <1>     cmp byte [rsi + 2], "R"
   100                              <1> ;    je .xor
   101                              <1> .hae2:
   102 000003BA 66813E494D          <1>     cmp word [rsi], "IM"
   103 000003BF 7504                <1>     jne .relationals
   104 000003C1 807E0250            <1>     cmp byte [rsi + 2], "P"
   105                              <1> ;    je .implicaton
   106                              <1> ;Level 3, Relational Connectives
   107                              <1> ;.handleThirdLevel:
   108                              <1> ;   call .handleSecondLevel
   109                              <1> .relationals:
   110                              <1>     ;Handle Relational connectives
   111 000003C5 803E3D              <1>     cmp byte [rsi], "="
   112                              <1> ;    je .equivalence
   113 000003C8 66813E3C3E          <1>     cmp word [rsi], "<>"
   114                              <1> ;    je .neq
   115 000003CD 66813E3E3C          <1>     cmp word [rsi], "><"
   116                              <1> ;    je .neq
   117 000003D2 803E3C              <1>     cmp byte [rsi], "<"
   118                              <1> ;    je .less
   119 000003D5 803E3E              <1>     cmp byte [rsi], ">"
   120                              <1> ;    je .greater
   121 000003D8 66813E3C3D          <1>     cmp word [rsi], "<="
   122                              <1> ;    je .leq
   123 000003DD 66813E3E3D          <1>     cmp word [rsi], ">="
   124                              <1> ;    je .geq
   125                              <1> ;Level 2, Addition and Subtraction
   126                              <1> .handleSecondLevel:
   127 000003E2 E828000000          <1>     call .handleFirstLevel
   128                              <1> .parseAdditiveOperators:    
   129 000003E7 803E2D              <1>     cmp byte [rsi], '-'
   130 000003EA 7415                <1>     je .processMinus
   131 000003EC 803E2B              <1>     cmp byte [rsi], '+'
   132 000003EF 0F8592000000        <1>     jne .exit              ;No operators, expression evaluated, exit
   133 000003F5 50                  <1>     push rax
   134 000003F6 E811000000          <1>     call .handleFirstLevelSkip   ;Parse first level
   135                              <1> .processAdd:    
   136 000003FB 59                  <1>     pop rcx
   137 000003FC 4801C8              <1>     add rax, rcx           ;Add the two numbers
   138 000003FF EBE6                <1>     jmp short .parseAdditiveOperators  ;Search again for + or -
   139                              <1> .processMinus:
   140 00000401 50                  <1>     push rax
   141 00000402 E805000000          <1>     call .handleFirstLevelSkip   ;Parse first level
   142 00000407 48F7D8              <1>     neg rax              ;Change a - b to a + -b
   143 0000040A EBEF                <1>     jmp short .processAdd
   144                              <1> 
   145                              <1> ;Level 1, Division and multiplication
   146                              <1> 
   147                              <1> .handleFirstLevelSkip:
   148 0000040C 48FFC6              <1>     inc rsi              ;Skip the op symbol
   149                              <1> .handleFirstLevel:
   150 0000040F E82C000000          <1>     call .handleZerothLevel      ;Call third level
   151                              <1> .parseProductOperators:   
   152 00000414 803E2F              <1>     cmp byte [rsi], '/'
   153 00000417 7411                <1>     je .processDiv
   154 00000419 803E2A              <1>     cmp byte [rsi], '*'
   155 0000041C 7569                <1>     jne .exit           ;Neither multiplication or division, return up a level
   156                              <1> 
   157 0000041E 50                  <1>     push rax
   158 0000041F E819000000          <1>     call .handleZerothLevelSkip   ;Call zeroth level
   159 00000424 59                  <1>     pop rcx
   160 00000425 48F7E9              <1>     imul rcx             ; Multiplication
   161 00000428 EBEA                <1>     jmp short .parseProductOperators   ;Search again for * or /
   162                              <1> 
   163                              <1> .processDiv:
   164 0000042A 50                  <1>     push rax
   165 0000042B E80D000000          <1>     call .handleZerothLevelSkip   ;Call zeroth level
   166 00000430 59                  <1>     pop rcx
   167 00000431 4891                <1>     xchg rax, rcx
   168 00000433 31D2                <1>     xor edx, edx         ;Clear rdx for rdx:rax
   169 00000435 48F7F9              <1>     idiv rcx             ;Signed division
   170 00000438 E9D7FFFFFF          <1>     jmp .parseProductOperators         ;Search again for * or /
   171                              <1> 
   172                              <1> ;Level 0, Brackets, numbers and vars.
   173                              <1> 
   174                              <1> .handleZerothLevelSkip:
   175 0000043D 48FFC6              <1>     inc rsi             ;Skip the op symbol
   176                              <1> .handleZerothLevel:
   177 00000440 E8FCFEFFFF          <1>     call spaceSkip
   178 00000445 AC                  <1>     lodsb               ;Read char and adv rsi
   179 00000446 3C28                <1>     cmp al, '('
   180 00000448 750C                <1>     jne .notBracket
   181 0000044A E845FFFFFF          <1>     call handleAlgebraicExpression  ;Parse the inner expression
   182 0000044F 803E29              <1>     cmp byte [rsi], ')'   
   183 00000452 744D                <1>     je .closeBracket     ;If close bracket, goto skip spaces
   184 00000454 EB53                <1>     jmp short .error     ;Otherwise, error
   185                              <1> 
   186                              <1> .notBracket:    
   187 00000456 3C5E                <1>     cmp al, "^"
   188 00000458 742E                <1>     je .exponentFound
   189                              <1> .varConstCheck:
   190 0000045A 3C41                <1>     cmp al, "A"       ;Alphabetical first char?
   191 0000045C 730D                <1>     jae .varOrRNDFound      ;Yes, variable found or rnd function or error
   192 0000045E 48FFCE              <1>     dec rsi            ;Else back one symbol 
   193 00000461 E8710B0000          <1>     call decimalToHex  ;to read number into rax
   194 00000466 E9D6FEFFFF          <1>     jmp spaceSkip
   195                              <1> 
   196                              <1> .varOrRNDFound:
   197 0000046B 3C5A                <1>     cmp al, "Z"  
   198 0000046D 773A                <1>     ja .error   ;Syntax error if char not between A-Z  
   199 0000046F 3C52                <1>     cmp al, "R"
   200 00000471 7517                <1>     jne .varFound
   201 00000473 803E4E              <1>     cmp byte [rsi], "N" ;rsi was advanced by 1, check 
   202 00000476 7512                <1>     jne .varFound
   203 00000478 807E0144            <1>     cmp byte [rsi+1], "D"
   204 0000047C 750C                <1>     jne .varFound
   205 0000047E 66AD                <1>     lodsw               ;Advance rsi by 3
   206 00000480 AC                  <1>     lodsb
   207 00000481 E440                <1>     in al, 40h         ;Read timer counter 0
   208 00000483 480FB6C0            <1>     movzx rax, al
   209                              <1> .exit:
   210 00000487 C3                  <1>     ret                ;Return
   211                              <1> .exponentFound:
   212 00000488 EBD0                <1>    jmp short .varConstCheck
   213                              <1> .varFound:    
   214 0000048A 48FFCE              <1>     dec rsi ;Back a char
   215 0000048D 51                  <1>     push rcx
   216 0000048E E8B9FEFFFF          <1>     call getVarNameLength
   217 00000493 E81D000000          <1>     call getNumericVariable ;Get variable value in rax
   218 00000498 4801CE              <1>     add rsi, rcx    ;Go past the edge of the name
   219 0000049B 59                  <1>     pop rcx
   220 0000049C E9A0FEFFFF          <1>     jmp spaceSkip
   221                              <1> 
   222                              <1> .closeBracket:
   223 000004A1 48FFC6              <1>     inc rsi
   224 000004A4 E998FEFFFF          <1>     jmp spaceSkip
   225                              <1> .error:
   226 000004A9 488D2DBB0E0000      <1>     lea rbp, syntax
   227 000004B0 E914FCFFFF          <1>     jmp criticalError
   228                              <1> 
   229                              <1> 
   230                              <1> getNumericVariable:
   231                              <1> ;Gets the value stored in a variable into rax 
   232                              <1> ;Input: rsi = Pointer to first char of a variable name
   233                              <1> ;Output: rax = Variable Value
   234                              <1> ;        rsi = Pointer to first char of a variable name
   235 000004B5 56                  <1>     push rsi
   236 000004B6 51                  <1>     push rcx
   237 000004B7 53                  <1>     push rbx
   238 000004B8 E88FFEFFFF          <1>     call getVarNameLength   ;Returns the length of the var name in cx
   239 000004BD E8F60B0000          <1>     call findVariable       ;Returns a pointer to the variable block in rbx
   240 000004C2 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Variable doesnt exist? Pretend it is 0
   241 000004C9 740E                <1>     je .noVar
   242 000004CB 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
   243 000004CF 750C                <1>     jne .stringFoundError
   244 000004D1 488B4304            <1>     mov rax, qword [rbx + varBlock.qValue]
   245                              <1> .exit:
   246 000004D5 5B                  <1>     pop rbx
   247 000004D6 59                  <1>     pop rcx
   248 000004D7 5E                  <1>     pop rsi
   249 000004D8 C3                  <1>     ret
   250                              <1> .noVar:
   251 000004D9 31C0                <1>     xor eax, eax
   252 000004DB EBF8                <1>     jmp short .exit
   253                              <1> .stringFoundError:
   254 000004DD 488D2D960E0000      <1>     lea rbp, typeError
   255 000004E4 E9E0FBFFFF          <1>     jmp criticalError
   256                              <1> 
   257                              <1> setNumericVariable:
   258                              <1> ;Sets the value stored in a variable
   259                              <1> ;Input: rsi = Pointer to first char of a variable name
   260                              <1> ;       rax = Variable value
   261                              <1> ;Output: rsi = Pointer to first char of variable name
   262 000004E9 56                  <1>     push rsi
   263 000004EA 51                  <1>     push rcx
   264 000004EB 53                  <1>     push rbx
   265                              <1> 
   266 000004EC E85BFEFFFF          <1>     call getVarNameLength   ;Returns the length of the var name in cx
   267 000004F1 E8C20B0000          <1>     call findVariable       ;Returns a pointer to the variable block in rbx
   268 000004F6 4881FBFFFFFFFF      <1>     cmp rbx, -1             ;Variable doesnt exit?
   269 000004FD 740E                <1>     je .makeEditInteger      ;Make one!
   270 000004FF 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
   271 00000503 750F                <1>     jne .stringFoundError
   272 00000505 48894304            <1>     mov qword [rbx + varBlock.qValue], rax  ;Save value
   273                              <1> .exit:
   274 00000509 5B                  <1>     pop rbx
   275 0000050A 59                  <1>     pop rcx
   276 0000050B 5E                  <1>     pop rsi
   277 0000050C C3                  <1>     ret
   278                              <1> .makeEditInteger:
   279 0000050D E8B60C0000          <1>     call makeEditInteger
   280 00000512 EBF5                <1>     jmp short .exit
   281                              <1> .stringFoundError:
   282 00000514 488D2D5F0E0000      <1>     lea rbp, typeError
   283 0000051B E9A9FBFFFF          <1>     jmp criticalError
   284                              <1> 
   285                              <1> setStringVariable:
   286                              <1> ;Sets the string pointed to by rdx
   287                              <1> ;Input: rsi = Pointer to first char of a variable name
   288                              <1> ;       rdx = Start of string
   289                              <1> ;Output: rsi = Pointer to first char of variable name
   290                              <1> ;Keeps adding characters until a 0, : or " encountered
   291                              <1> ;Adds a 0 to the end
   292 00000520 51                  <1>     push rcx
   293 00000521 E826FEFFFF          <1>     call getVarNameLength   ;Gets the length of the var name in cx
   294 00000526 E8E80C0000          <1>     call makeEditString     ;Returns a ptr to the var block in rbx
   295 0000052B 59                  <1>     pop rcx
   296 0000052C C3                  <1>     ret
   297                              <1> 
   298                              <1> findOtherExpressionsOnLine:
   299                              <1> ;Input: rsi = start of line portion
   300                              <1> ;Output: rsi = points to first char after first ":" found
   301                              <1> ;         al = : if it was found or 00 if not
   302 0000052D AC                  <1>     lodsb
   303 0000052E 3C00                <1>     cmp al, 0   ;Null hit, RIP procedure
   304 00000530 7404                <1>     je .exit
   305 00000532 3C3A                <1>     cmp al, ":" ;Strings can be terminated with a :
   306 00000534 75F7                <1>     jne findOtherExpressionsOnLine
   307                              <1> .exit:
   308 00000536 C3                  <1>     ret
    14                                  %include "COMMANDS.ASM"
    15                              <1> 
    16                              <1> funTbl:
    17                              <1> ;Use PASCAL strings to know how long the comparisons need to be
    18                              <1> ;All function pointers are saved as distances from the head
    19                              <1> ; of the function table
    20                              <1> ;BASIC instructions are space terminated
    21                              <1> ;Interpreter instructions are null terminated
    22 00000537 044C4554            <1>     db 4, "LET"     ;DONE
    23 0000053B 6801                <1>     dw oldSchoolAssignemnt - funTbl
    24                              <1> 
    25 0000053D 054E455700          <1>     db 5, "NEW",0     ;DONE
    26 00000542 EB01                <1>     dw newProgram - funTbl 
    27                              <1> 
    28 00000544 07434C45415200      <1>     db 7, "CLEAR",0   ;DONE
    29 0000054B EB01                <1>     dw newProgram - funTbl 
    30                              <1> 
    31 0000054D 064C49535400        <1>     db 6, "LIST",0    ;DONE
    32 00000553 4D02                <1>     dw listProgram - funTbl 
    33                              <1> 
    34 00000555 0552554E00          <1>     db 5, "RUN",0     ;DONE
    35 0000055A 8902                <1>     dw runProgram - funTbl
    36                              <1> 
    37 0000055C 085052494E542420    <1>     db 8, "PRINT$ "    ;Not implemented yet
    38 00000564 BA02                <1>     dw printStatement - funTbl
    39                              <1> 
    40 00000566 075052494E5420      <1>     db 7, "PRINT "    ;DONE
    41 0000056D BA02                <1>     dw printStatement - funTbl
    42                              <1> 
    43 0000056F 033F20              <1>     db 3, "? "        ;DONE, alias Print
    44 00000572 BA02                <1>     dw printStatement - funTbl
    45                              <1> 
    46 00000574 07494E50555420      <1>     db 7, "INPUT "
    47 0000057B 5503                <1>     dw getInput - funTbl
    48                              <1> 
    49 0000057D 04494620            <1>     db 4, "IF "      ;DONE, needs to be tested
    50 00000581 080A                <1>     dw handleIf - funTbl
    51                              <1> 
    52 00000583 06474F544F20        <1>     db 6, "GOTO "    ;DONE
    53 00000589 B506                <1>     dw goto - funTbl
    54                              <1> 
    55 0000058B 07474F53554220      <1>     db 7, "GOSUB "
    56 00000592 CA06                <1>     dw gosub - funTbl
    57                              <1> 
    58 00000594 0852455455524E20    <1>     db 8, "RETURN "
    59 0000059C 1307                <1>     dw return - funTbl
    60                              <1> 
    61 0000059E 0852455455524E00    <1>     db 8, "RETURN",0
    62 000005A6 1307                <1>     dw return - funTbl
    63                              <1> 
    64 000005A8 05464F5220          <1>     db 5, "FOR "
    65 000005AD 6107                <1>     dw forLoop - funTbl
    66                              <1> 
    67 000005AF 064E45585400        <1>     db 6, "NEXT",0
    68 000005B5 6D08                <1>     dw next - funTbl
    69                              <1> 
    70 000005B7 064E45585420        <1>     db 6, "NEXT "
    71 000005BD 6D08                <1>     dw next - funTbl
    72                              <1> 
    73 000005BF 07                  <1>     db 7
    74                              <1> whileStr:
    75 000005C0 5748494C4520        <1>     db "WHILE "
    76 000005C6 E108                <1>     dw while - funTbl
    77                              <1> 
    78 000005C8 0657454E4420        <1>     db 6, "WEND "
    79 000005CE 5809                <1>     dw wend - funTbl    
    80 000005D0 0657454E4400        <1>     db 6, "WEND",0
    81 000005D6 5809                <1>     dw wend - funTbl   
    82                              <1> thenStr:
    83 000005D8 065448454E20        <1>     db 6, "THEN "    ;DONE
    84 000005DE 3D01                <1>     dw badCmd - funTbl
    85                              <1> elseStr:
    86 000005E0 06454C534520        <1>     db 6, "ELSE "    ;DONE
    87 000005E6 3D01                <1>     dw badCmd - funTbl
    88                              <1> 
    89 000005E8 0853595354454D00    <1>     db 8, "SYSTEM",0  ;DONE
    90 000005F0 F403                <1>     dw returnToDOS - funTbl
    91                              <1> 
    92 000005F2 05434C5300          <1>     db 5, "CLS",0     ;DONE
    93 000005F7 0004                <1>     dw cls - funTbl
    94                              <1> 
    95 000005F9 07444542554700      <1>     db 7, "DEBUG",0   ;DONE
    96 00000600 0504                <1>     dw dbgr - funTbl
    97                              <1> 
    98 00000602 0654524F4E00        <1>     db 6, "TRON",0    ;DONE
    99 00000608 4E01                <1>     dw tron - funTbl
   100                              <1> 
   101 0000060A 0754524F464600      <1>     db 7, "TROFF",0   ;DONE
   102 00000611 5601                <1>     dw troff - funTbl
   103                              <1> 
   104 00000613 05454E4420          <1>     db 5, "END "     ;DONE
   105 00000618 4901                <1>     dw endProg - funTbl
   106 0000061A 05454E4400          <1>     db 5, "END",0     ;DONE
   107 0000061F 4901                <1>     dw endProg - funTbl
   108                              <1> 
   109 00000621 0653544F5020        <1>     db 6, "STOP "    ;DONE
   110 00000627 4901                <1>     dw endProg - funTbl
   111 00000629 0653544F5000        <1>     db 6, "STOP",0    ;DONE
   112 0000062F 4901                <1>     dw endProg - funTbl
   113                              <1> 
   114 00000631 0845534341504520    <1>     db 8, "ESCAPE "  ;DONE
   115 00000639 4901                <1>     dw endProg - funTbl
   116 0000063B 0845534341504500    <1>     db 8, "ESCAPE",0  ;DONE
   117 00000643 4901                <1>     dw endProg - funTbl
   118                              <1> 
   119 00000645 07455045454B20      <1>     db 7, "EPEEK "
   120 0000064C 5E01                <1>     dw memRead - funTbl
   121                              <1> 
   122 0000064E 0745504F4B4520      <1>     db 7, "EPOKE "
   123 00000655 5E01                <1>     dw memWrite - funTbl
   124                              <1> 
   125 00000657 065045454B20        <1>     db 6, "PEEK "
   126 0000065D 5E01                <1>     dw byteRead - funTbl
   127                              <1> 
   128 0000065F 06504F4B4520        <1>     db 6, "POKE "
   129 00000665 5E01                <1>     dw byteWrite - funTbl
   130                              <1> 
   131 00000667 0552454D20          <1>     db 5, "REM "
   132 0000066C 5F01                <1>     dw remark - funTbl
   133 0000066E 032720              <1>     db 3, "' "
   134 00000671 5F01                <1>     dw remark - funTbl
   135                              <1>     
   136 00000673 FF                  <1>     db -1    ;Demarkate the end of the table
   137                              <1> ;End of Table
   138                              <1> badCmd:
   139 00000674 488D2DF00C0000      <1>     lea rbp, syntax
   140 0000067B E849FAFFFF          <1>     call criticalError 
   141                              <1> endProg:
   142 00000680 E960010000          <1>     jmp runProgram.endProgramPoint
   143                              <1> tron:
   144 00000685 800D(D90E0000)02    <1>     or byte [stateByte], traceBit   ;Set the traceBit
   145 0000068C C3                  <1>     ret
   146                              <1> troff:
   147 0000068D 8025(D90E0000)FD    <1>     and byte [stateByte], ~traceBit ;Clear the traceBit
   148 00000694 C3                  <1>     ret
   149                              <1> memRead:
   150                              <1> memWrite:
   151                              <1> byteRead:
   152                              <1> byteWrite:
   153 00000695 C3                  <1>     ret
   154                              <1> remark:
   155                              <1> ;Comment code, keep looping until end of line
   156 00000696 AC                  <1>     lodsb
   157 00000697 84C0                <1>     test al, al 
   158 00000699 75FB                <1>     jnz remark
   159 0000069B 48FFCE              <1>     dec rsi ;When al = 0, rsi points past it, move it back by one
   160 0000069E C3                  <1>     ret
   161                              <1> 
   162                              <1> oldSchoolAssignemnt:
   163                              <1> ;Assign with a LET directive
   164                              <1> ;rsi points to first char AFTER function name
   165 0000069F E89DFCFFFF          <1>     call spaceSkip  ;Goto var assignment as if at start of line
   166                              <1> variableAssignment: ;Assignment without a LET directive
   167                              <1>     ;Establish if the string is a variable assignment or not
   168                              <1>     ;rsi points to start of string
   169 000006A4 E8A3FCFFFF          <1>     call getVarNameLength   ;Get the variable name length
   170 000006A9 4889F7              <1>     mov rdi, rsi    ;Save ptr to start of string in rdi
   171 000006AC 4801CE              <1>     add rsi, rcx    ;Go to end of string
   172 000006AF E88DFCFFFF          <1>     call spaceSkip  ;Skip spaces after the end of the var name
   173 000006B4 AC                  <1>     lodsb   ;Get the first char after the spaces. This must be a =
   174 000006B5 3C3D                <1>     cmp al, "="
   175 000006B7 7551                <1>     jne .syntaxError
   176 000006B9 4889FE              <1>     mov rsi, rdi    ;Return rsi to the start of the string name
   177 000006BC 4801CE              <1>     add rsi, rcx    ;Go to end of var name
   178 000006BF 48FFCE              <1>     dec rsi
   179 000006C2 AC                  <1>     lodsb   ;Get last char into al and inc rsi
   180 000006C3 3C24                <1>     cmp al, "$"
   181 000006C5 7420                <1>     je .stringAssignment
   182 000006C7 E875FCFFFF          <1>     call spaceSkip  ;Skip any spaces
   183 000006CC 48FFC6              <1>     inc rsi         ;Go past the equality sign
   184 000006CF E86DFCFFFF          <1>     call spaceSkip  ;Skip any spaces
   185 000006D4 803E22              <1>     cmp byte [rsi], 22h ;Open speech mark
   186 000006D7 743D                <1>     je .typError    ;Integers cant have speechmarks
   187 000006D9 E8B6FCFFFF          <1>     call handleAlgebraicExpression  ;Get the result of the expression into rax
   188 000006DE 4889FE              <1>     mov rsi, rdi    ;Return the start of the string into rsi
   189 000006E1 E803FEFFFF          <1>     call setNumericVariable
   190 000006E6 C3                  <1>     ret
   191                              <1> .stringAssignment:
   192                              <1> ;This simply copies the string which is either speech mark, 0 or : terminated
   193                              <1> ;First allocate a string
   194                              <1> ;rsi = First char after the end of the variable name
   195                              <1> ;rdi = start of variable name 
   196                              <1> ;rcx = char count for var name
   197 000006E7 E855FCFFFF          <1>     call spaceSkip  ;Skip any spaces
   198 000006EC 48FFC6              <1>     inc rsi         ;Go past the equality sign
   199 000006EF E84DFCFFFF          <1>     call spaceSkip  ;Skip any spaces
   200 000006F4 803E22              <1>     cmp byte [rsi], 22h ;Open speechmark check again
   201 000006F7 751D                <1>     jne .typError    ;Assigning a number to a string is a type error
   202                              <1>     ;rsi now points to the start of the string to save
   203 000006F9 48FFC6              <1>     inc rsi ;Go past the speech mark
   204 000006FC 4889F2              <1>     mov rdx, rsi    ;save start of string data in rdx
   205 000006FF 4889FE              <1>     mov rsi, rdi
   206 00000702 57                  <1>     push rdi
   207 00000703 E818FEFFFF          <1>     call setStringVariable
   208 00000708 5E                  <1>     pop rsi ;Save the start of the assignment in rsi
   209 00000709 C3                  <1>     ret
   210                              <1> 
   211                              <1> .syntaxError:
   212 0000070A 488D2D5A0C0000      <1>     lea rbp, syntax ;Syntax error, keyword a bit confused
   213 00000711 E9B3F9FFFF          <1>     jmp criticalError
   214                              <1> .typError:
   215 00000716 488D2D5D0C0000      <1>     lea rbp, typeError
   216 0000071D E9A7F9FFFF          <1>     jmp criticalError
   217                              <1> 
   218                              <1> 
   219                              <1> newProgram: 
   220                              <1> ;Simply reset the program pointers
   221 00000722 488D05(00000000)    <1>     lea rax, section.programArea.vstart
   222 00000729 488905(C80E0000)    <1>     mov qword [minMemAddr], rax
   223 00000730 488905(E20E0000)    <1>     mov qword [lastBlock], rax  ;Start writing at this location
   224 00000737 488905(DA0E0000)    <1>     mov qword [mcbChain], rax   ;Create a mock MCB here
   225                              <1> 
   226 0000073E 4889C2              <1>     mov rdx, rax
   227 00000741 668B4801            <1>     mov cx, word [rax + memBlock.wBlockSize]
   228 00000745 4889C7              <1>     mov rdi, rax
   229 00000748 30C0                <1>     xor al, al
   230 0000074A F3AA                <1>     rep stosb   ;Sanitise the old first allocation
   231                              <1> 
   232 0000074C C60272              <1>     mov byte [rdx + memBlock.bSignature], lastMemBlock
   233 0000074F 66C742010000        <1>     mov word [rdx + memBlock.wBlockSize], 0 ;Dummy block, no size, gets overwritten
   234 00000755 31C0                <1>     xor eax, eax
   235 00000757 8805(D80E0000)      <1>     mov byte [strLen], al
   236 0000075D 488D3D(980D0000)    <1>     lea rdi, inString
   237 00000764 B900010000          <1>     mov ecx, maxLineLen
   238 00000769 F3AA                <1>     rep stosb
   239 0000076B C605(F40E0000)0A    <1>     mov byte [currentLine], 10  ;Default to line 10
   240 00000772 48FFC8              <1>     dec rax ;rax = -1
   241 00000775 488905(EA0E0000)    <1>     mov qword [firstLinPtr], rax ;No program in memory
   242 0000077C 668905(F20E0000)    <1>     mov word [firstLinNum], ax
   243 00000783 C3                  <1>     ret
   244                              <1> listProgram:
   245                              <1> ;Go line by line and echo the program lines, inserting a crlf after each
   246                              <1> ;First print the line number, then add a space
   247 00000784 488B1D(EA0E0000)    <1>     mov rbx, qword [firstLinPtr]    ;Get a pointer to the first program line
   248                              <1> .printLines:
   249 0000078B 488D2D8E0B0000      <1>     lea rbp, crlf           ;New line
   250 00000792 E809FAFFFF          <1>     call ttyOutString
   251 00000797 4881FBFFFFFFFF      <1>     cmp rbx, -1
   252 0000079E 741F                <1>     je .exit
   253 000007A0 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]
   254 000007A4 E856080000          <1>     call printdecimalword
   255 000007A9 B020                <1>     mov al, " "
   256 000007AB E8EBF9FFFF          <1>     call ttyOutChar ;Print a space
   257 000007B0 488D6B0E            <1>     lea rbp, qword [rbx + progLineBlock.sLine]  ;Null terminated string
   258 000007B4 E8E7F9FFFF          <1>     call ttyOutString
   259 000007B9 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr]   ;Walk list of program lines
   260 000007BD EBCC                <1>     jmp short .printLines
   261                              <1> .exit:
   262 000007BF C3                  <1>     ret
   263                              <1> runProgram:
   264                              <1>     ;Runs the machine in indirect mode
   265 000007C0 800D(D90E0000)04    <1>     or byte [stateByte], indirectBit    ;Entering indirect mode
   266                              <1>     ;rsi must point to the first line
   267 000007C7 668B15(F20E0000)    <1>     mov dx, word [firstLinNum]
   268 000007CE 668915(F40E0000)    <1>     mov word [currentLine], dx ;Reset the current line back to the start
   269 000007D5 488B1D(EA0E0000)    <1>     mov rbx, qword [firstLinPtr]
   270 000007DC 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine]
   271 000007E0 E843FAFFFF          <1>     call runLine
   272                              <1> .endProgramPoint:
   273 000007E5 8025(D90E0000)FB    <1>     and byte [stateByte], ~indirectBit  ;Exit indirect mode
   274 000007EC E94BF8FFFF          <1>     jmp mainLoop    ;Resets the stack if exit mid loop to avoid stkoverflow
   275                              <1> 
   276                              <1> printStatement:
   277                              <1> ;Strings must be "" delimited or a string variable must be used
   278                              <1> ;rsi points to first char AFTER function name
   279                              <1> .printStart:
   280 000007F1 E84BFBFFFF          <1>     call spaceSkip  ;move rsi to the start of the expression
   281 000007F6 AC                  <1>     lodsb
   282                              <1> 
   283 000007F7 84C0                <1>     test al, al     ;Is this a null string?
   284 000007F9 746B                <1>     jz .psvexit
   285                              <1> 
   286 000007FB 3C22                <1>     cmp al, 022h    ;22h = ASCII Speechmarks
   287 000007FD 7449                <1>     je .stringPrint
   288                              <1>     ;Here we check if the first char is ASCII, if it is, check if its a string var
   289 000007FF 3C41                <1>     cmp al, "A"
   290 00000801 7204                <1>     jb .printExpr
   291 00000803 3C5A                <1>     cmp al, "Z"
   292 00000805 7214                <1>     jb .printStringVar
   293                              <1> .printExpr:
   294 00000807 48FFCE              <1>     dec rsi ;Return to the start of the string
   295                              <1> .printExpr1:    ;Return without dec rsi
   296 0000080A E885FBFFFF          <1>     call handleAlgebraicExpression ;Gets value of a var and/or algebraic operation
   297 0000080F E8EB070000          <1>     call printdecimalword
   298 00000814 E828FBFFFF          <1>     call spaceSkip
   299 00000819 EB2D                <1>     jmp short .stringPrint
   300                              <1> .printStringVar:
   301                              <1>     ;Check if it is a string var
   302 0000081B 48FFCE              <1>     dec rsi
   303 0000081E E829FBFFFF          <1>     call getVarNameLength
   304 00000823 E851FBFFFF          <1>     call getVarType
   305 00000828 81FB01000000        <1>     cmp ebx, strEquate
   306 0000082E 75DA                <1>     jne .printExpr1  ;rsi points to the same point as initially
   307 00000830 E883080000          <1>     call findVariable   ;ecx has string length, get block ptr in rbx
   308 00000835 55                  <1>     push rbp
   309 00000836 488D6B04            <1>     lea rbp, qword [rbx + stringBlock.string]
   310 0000083A E861F9FFFF          <1>     call ttyOutString
   311 0000083F 5D                  <1>     pop rbp
   312 00000840 4801CE              <1>     add rsi, rcx    ;Go past variable
   313 00000843 E8F9FAFFFF          <1>     call spaceSkip
   314                              <1> .stringPrint:
   315 00000848 AC                  <1>     lodsb
   316 00000849 3C00                <1>     cmp al, 0
   317 0000084B 7419                <1>     je .psvexit
   318 0000084D 3C3A                <1>     cmp al, ":"
   319 0000084F 7412                <1>     je .psvexitColon
   320 00000851 3C22                <1>     cmp al, 022h    ;Close Speech marks, check next char
   321 00000853 741E                <1>     je .closespeechmarks
   322 00000855 3C3B                <1>     cmp al, ";"     ;Semicolon means print next section on same line
   323 00000857 7429                <1>     je .continue
   324 00000859 E83DF9FFFF          <1>     call ttyOutChar
   325 0000085E EBE8                <1>     jmp short .stringPrint
   326                              <1> .openSpeechMark:
   327 00000860 48FFC6              <1>     inc rsi ;Go back a char
   328                              <1> .psvexitColon:
   329 00000863 48FFCE              <1>     dec rsi ;Go back a char
   330                              <1> .psvexit:
   331 00000866 488D2DB30A0000      <1>     lea rbp, crlf
   332 0000086D E82EF9FFFF          <1>     call ttyOutString
   333 00000872 C3                  <1>     ret
   334                              <1> .closespeechmarks:
   335 00000873 E8C9FAFFFF          <1>     call spaceSkip
   336 00000878 AC                  <1>     lodsb
   337 00000879 3C3B                <1>     cmp al, ";" ;only exception to exiting if next non space char is a semicolon
   338 0000087B 74CB                <1>     je .stringPrint
   339 0000087D 48FFCE              <1>     dec rsi ;Go back a step
   340 00000880 EBE4                <1>     jmp short .psvexit
   341                              <1> .continue:
   342 00000882 E8BAFAFFFF          <1>     call spaceSkip
   343 00000887 E965FFFFFF          <1>     jmp .printStart
   344                              <1> getInput:
   345                              <1> ;Take a string as a prompt
   346                              <1> ;rdi points just past the end of the command line
   347                              <1> ;rsi points to first char AFTER function name
   348                              <1> ;Input prompt strings must be speech mark delimited on both sides!
   349 0000088C E8B0FAFFFF          <1>     call spaceSkip
   350                              <1>     ;Now check to see if the user has specified a custom prompt
   351 00000891 AC                  <1>     lodsb   ;Get first symbol and go past it
   352 00000892 3C22                <1>     cmp al, 22h ;Speechmark?
   353 00000894 7535                <1>     jne .defaultPrompt ;If no speechmark, print default prompt
   354                              <1> .customPrompt:
   355 00000896 4889F7              <1>     mov rdi, rsi    ;Save start of string in rdi
   356                              <1> .cp0:
   357 00000899 AC                  <1>     lodsb           ;Now search for end of string speech marks or null terminator
   358 0000089A 3C22                <1>     cmp al, 22h     ;Is al a speech mark?
   359 0000089C 7410                <1>     je .printCustomPrompt
   360 0000089E 84C0                <1>     test al, al     ;Is al null?
   361 000008A0 75F7                <1>     jnz .cp0        ;No, keep searching for terminator
   362                              <1> .error:
   363 000008A2 488D2DC20A0000      <1>     lea rbp, syntax
   364 000008A9 E91BF8FFFF          <1>     jmp criticalError
   365                              <1> .printCustomPrompt:
   366 000008AE 4889FE              <1>     mov rsi, rdi    ;rsi points to the first char of the string
   367                              <1> .pcp0:
   368 000008B1 AC                  <1>     lodsb
   369 000008B2 3C22                <1>     cmp al, 22h     ;Speechmark?
   370 000008B4 7407                <1>     je .stopPrompt
   371 000008B6 E8E0F8FFFF          <1>     call ttyOutChar
   372 000008BB EBF4                <1>     jmp short .pcp0
   373                              <1> .stopPrompt:
   374 000008BD E87FFAFFFF          <1>     call spaceSkip  ;Skip spaces
   375 000008C2 AC                  <1>     lodsb   ;Get first non space char after closing speechmark
   376 000008C3 3C3B                <1>     cmp al, ";" ;Semicolon means no default prompt
   377 000008C5 740E                <1>     je .noDefaultPrompt
   378 000008C7 3C2C                <1>     cmp al, "," ;Comma also means no default prompt
   379 000008C9 740A                <1>     je .noDefaultPrompt
   380                              <1> .defaultPrompt:
   381 000008CB 48FFCE              <1>     dec rsi
   382 000008CE B03F                <1>     mov al, "?"
   383 000008D0 E8C6F8FFFF          <1>     call ttyOutChar
   384                              <1> .noDefaultPrompt:
   385 000008D5 B020                <1>     mov al, " " ;space
   386 000008D7 E8BFF8FFFF          <1>     call ttyOutChar
   387 000008DC E860FAFFFF          <1>     call spaceSkip  ;Skip spaces after default supressor to get to var name
   388 000008E1 E866FAFFFF          <1>     call getVarNameLength   ;Get var name length in ecx
   389 000008E6 488D3D(980E0000)    <1>     lea rdi, digitString    ;Buffer has 48 chars, string names are max 40
   390 000008ED E88E090000          <1>     call strcpy     ;rsi points to var name
   391 000008F2 57                  <1>     push rdi    ;rdi points to first char of variable
   392 000008F3 51                  <1>     push rcx
   393 000008F4 E80AF8FFFF          <1>     call getLineInput   ;Get input from the user in inString, null terminated
   394                              <1>     ;This will sanitise in direct mode meaning input cannot have any more statements
   395                              <1>     ; after it.
   396 000008F9 59                  <1>     pop rcx
   397 000008FA 5F                  <1>     pop rdi 
   398 000008FB 4889FE              <1>     mov rsi, rdi    ;Save the start of the var name in rsi
   399 000008FE 4801CE              <1>     add rsi, rcx    ;Go to end of var
   400 00000901 48FFCE              <1>     dec rsi
   401 00000904 AC                  <1>     lodsb   ;Are we a string variable?
   402 00000905 488D35(980D0000)    <1>     lea rsi, inString   ;Move rsi to start of user input
   403 0000090C 3C24                <1>     cmp al, "$"
   404 0000090E 740F                <1>     je .handleString
   405                              <1> .handleNumeric:
   406 00000910 E87FFAFFFF          <1>     call handleAlgebraicExpression  ;Get the result of the expression into rax
   407 00000915 4889FE              <1>     mov rsi, rdi    ;Return the start of the string into rsi
   408 00000918 E8CCFBFFFF          <1>     call setNumericVariable
   409 0000091D EB0B                <1>     jmp short .commonExit
   410                              <1> .handleString:
   411                              <1>     ;IF a string variable, come here
   412                              <1>     ;rdi has the start of the variable name
   413                              <1> 
   414                              <1>     ;rdx must point to the start of the string
   415                              <1>     ;rsi must point to the start of the variable name
   416 0000091F 4889F2              <1>     mov rdx, rsi
   417 00000922 4889FE              <1>     mov rsi, rdi    ;Return start of user name in rsi
   418 00000925 E8F6FBFFFF          <1>     call setStringVariable
   419                              <1> .commonExit:
   420 0000092A C3                  <1>     ret
   421                              <1> 
   422                              <1> ;==========================================================:
   423                              <1> ;==========================================================:
   424                              <1> ;==========================================================:
   425                              <1> ;          Functions Related to Program Management         :
   426                              <1> ;==========================================================:
   427                              <1> ;==========================================================:
   428                              <1> ;==========================================================:
   429                              <1> returnToDOS:
   430 0000092B B007                <1>     mov al, 07h
   431 0000092D E869F8FFFF          <1>     call ttyOutChar
   432 00000932 E9C9F6FFFF          <1>     jmp start   ;Reset the interpreter
   433                              <1> cls:
   434 00000937 E971F8FFFF          <1>     jmp ttyClear
   435                              <1> dbgr:
   436                              <1>     ;Hook int 40h to main prog EP to allow returning 
   437                              <1> ;First call to get default BIOS segement selector and attribute word
   438 0000093C B340                <1>     mov bl, 40h
   439 0000093E B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   440 00000943 CD35                <1>     int 35h
   441 00000945 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   442 00000947 B940000000          <1>     mov ecx, 40h    ;Interrupt number
   443                              <1> ;dx preserves the attribute word
   444 0000094C 488D1D09000000      <1>     lea rbx, .farReturn  ;Pointer passed in
   445 00000953 B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   446 00000958 CD35                <1>     int 35h
   447 0000095A CD38                <1>     int 38h ;Call debugger
   448                              <1> .farReturn:
   449                              <1>     ;Reconnect CTRL+BREAK handler
   450 0000095C 48BC-               <1>     mov rsp, stacktop   ;Immediately reset stack
   450 0000095E [900D000000000000]  <1>
   451 00000966 488D3D6DF7FFFF      <1>     lea rdi, ctrlBreakHandler
   452 0000096D B03B                <1>     mov al, 3Bh
   453 0000096F E86FF7FFFF          <1>     call setHandler
   454                              <1>     
   455 00000974 488D2DA5090000      <1>     lea rbp, crlf
   456 0000097B E820F8FFFF          <1>     call ttyOutString
   457 00000980 E9B7F6FFFF          <1>     jmp mainLoop
    15                                  %include "CTRLFLOW.ASM"
    16                              <1> 
    17                              <1> ;Handles all the specific functions related to control flow such as scanning 
    18                              <1> ; lines for WEND, RETURN, NEXT
    19                              <1> retScan:
    20                              <1> ;Gets the current line address and starts searching program from current prog line
    21                              <1> ; for a return
    22 00000985 56                  <1>     push rsi
    23 00000986 668B15(F40E0000)    <1>     mov dx, word [currentLine]  ;pre-load dx with the current line number
    24 0000098D E896070000          <1>     call searchForProgramLine   ;Get program block pointer into rbx
    25 00000992 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If for some reason line doesnt exist?
    26 00000999 0F8493000000        <1>     je .error   ;Unknown Error
    27                              <1> ;Now pack for the first portion/line after the GOSUB
    28                              <1> ;rsi points just after the GOSUB itself
    29 0000099F 56                  <1>     push rsi    ;Save the first point after the WHILE itself
    30 000009A0 E888FBFFFF          <1>     call findOtherExpressionsOnLine     ;Get the first : or ASCII NUL
    31 000009A5 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]  ;Get the line number
    32 000009A9 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine]  ;Load ptr to start of string in rsi
    33 000009AD 4829CE              <1>     sub rsi, rcx    ;Compute difference from start of string
    34 000009B0 89F1                <1>     mov ecx, esi    ;Should just be low byte of si so cl
    35 000009B2 81E1FF000000        <1>     and ecx, 0FFh   ;Save only bottom byte just in case of garbage
    36 000009B8 C1E110              <1>     shl ecx, 2*8    ;Move to the third byte in the dword
    37 000009BB 09C8                <1>     or eax, ecx     ;Add byte three to eax
    38 000009BD 89C2                <1>     mov edx, eax    ;Save in edx
    39 000009BF 48C1E228            <1>     shl rdx, 5*8    ;Shift three bytes to top of qword
    40 000009C3 5E                  <1>     pop rsi
    41                              <1> .initialSearch:
    42                              <1>     ;First look for a ASCII NUL or RETURN
    43 000009C4 803E00              <1>     cmp byte [rsi], 0
    44 000009C7 7415                <1>     je .gotoNextLine
    45 000009C9 813E52455455        <1>     cmp dword [rsi], "RETU"
    46 000009CF 7508                <1>     jne .notCandidate
    47 000009D1 66817E04524E        <1>     cmp word [rsi + 4], "RN"
    48 000009D7 7418                <1>     je .wordFound
    49                              <1> .notCandidate:
    50 000009D9 48FFC6              <1>     inc rsi ;Now search up until the end of the line for a RETURN
    51 000009DC EBE6                <1>     jmp short .initialSearch
    52                              <1> .gotoNextLine:
    53 000009DE 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Get pointer to next program line
    54 000009E2 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Now, when walking if it gives a value of -1, no NEXT found
    55 000009E9 7431                <1>     je .noRet
    56 000009EB 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Load pointer to string rsi
    57 000009EF EBD3                <1>     jmp short .initialSearch
    58                              <1> .wordFound:
    59                              <1>     ;Here, RETURN found! Huzzah! Now pack edx correctly
    60                              <1>     ;Add 055AA55h in bytes 4:2
    61 000009F1 48B8000055AA550000- <1>     mov rax, 055AA550000h
    61 000009FA 00                  <1>
    62 000009FB 4809C2              <1>     or rdx, rax
    63                              <1>     ;Compute checksum now
    64 000009FE 31C0                <1>     xor eax, eax
    65 00000A00 B0A5                <1>     mov al, GOSUBsig 
    66 00000A02 6689C2              <1>     mov dx, ax  ;Zero checksum byte
    67 00000A05 31C0                <1>     xor eax, eax
    68 00000A07 B908000000          <1>     mov ecx, 8  ;8 times
    69                              <1> .csumLoop:
    70                              <1>     ;Spin rdx 8 times adding each byte to al
    71 00000A0C 00D0                <1>     add al, dl
    72 00000A0E 48C1C208            <1>     rol rdx, 8  ;Rotate left by 8 bits
    73 00000A12 FFC9                <1>     dec ecx
    74 00000A14 75F6                <1>     jnz .csumLoop
    75 00000A16 F6D8                <1>     neg al ;Get twos compliment of sum (FFh - al)
    76 00000A18 88C6                <1>     mov dh, al  ;Save in checksum byte
    77                              <1> .exit:
    78 00000A1A 5E                  <1>     pop rsi
    79 00000A1B C3                  <1>     ret
    80                              <1> .noRet:
    81 00000A1C 488D2DEA090000      <1>     lea rbp, noReturn
    82 00000A23 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
    82 00000A2C FF                  <1>
    83 00000A2D E9E8FFFFFF          <1>     jmp .exit
    84                              <1> .error:
    85 00000A32 488D2DEB090000      <1>     lea rbp, uknowner
    86 00000A39 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
    86 00000A42 FF                  <1>
    87 00000A43 E9D2FFFFFF          <1>     jmp .exit
    88                              <1> 
    89                              <1> wendScan:
    90                              <1> ; Gets the current line address and starts searching program from the current line
    91                              <1> ; for a WEND
    92                              <1> ; Puts the packed specialQword into rdx if a WEND is found
    93                              <1> ; Returns rdx = -1 if an error occured with rbp pointing to the error string
    94 00000A48 56                  <1>     push rsi
    95 00000A49 668B15(F40E0000)    <1>     mov dx, word [currentLine]  ;pre-load dx with the current line number
    96 00000A50 E8D3060000          <1>     call searchForProgramLine   ;Get program block pointer into rbx
    97 00000A55 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If for some reason line doesnt exist?
    98 00000A5C 0F84A2000000        <1>     je .error   ;Unknown Error
    99                              <1> ;Now pack for the first portion/line after the for loop
   100                              <1> ;rsi points just after the FOR itself
   101 00000A62 56                  <1>     push rsi    ;Save the first point after the WHILE itself
   102 00000A63 E8C5FAFFFF          <1>     call findOtherExpressionsOnLine     ;Get the first : or ASCII NUL
   103 00000A68 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]  ;Get the line number
   104 00000A6C 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine]  ;Load ptr to start of string in rsi
   105 00000A70 4829CE              <1>     sub rsi, rcx    ;Compute difference from start of string
   106 00000A73 89F1                <1>     mov ecx, esi    ;Should just be low byte of si so cl
   107 00000A75 81E1FF000000        <1>     and ecx, 0FFh   ;Save only bottom byte just in case of garbage
   108 00000A7B C1E110              <1>     shl ecx, 2*8    ;Move to the third byte in the dword
   109 00000A7E 09C8                <1>     or eax, ecx     ;Add byte three to eax
   110 00000A80 89C2                <1>     mov edx, eax    ;Save in edx
   111 00000A82 48C1E228            <1>     shl rdx, 5*8    ;Shift three bytes to top of qword
   112 00000A86 5E                  <1>     pop rsi
   113                              <1> .initialSearch:
   114                              <1>     ;First look for a : or a ASCII NUL to leave the WHILE part of the line
   115 00000A87 803E00              <1>     cmp byte [rsi], 0
   116 00000A8A 740D                <1>     je .gotoNextLine
   117 00000A8C 813E57454E44        <1>     cmp dword [rsi], "WEND"
   118 00000A92 7418                <1>     je .wordFound
   119 00000A94 48FFC6              <1>     inc rsi ;Now search up until the end of the line for a WEND
   120                              <1>     ;"WEND" found here!
   121 00000A97 EBEE                <1>     jmp short .initialSearch
   122                              <1> .gotoNextLine:
   123 00000A99 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Get pointer to next program line
   124 00000A9D 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Now, when walking if it gives a value of -1, no NEXT found
   125 00000AA4 7448                <1>     je .noWend
   126 00000AA6 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Load pointer to string rsi
   127 00000AAA EBDB                <1>     jmp short .initialSearch
   128                              <1> .wordFound:
   129                              <1>     ;Here, word found! Huzzah! Now pack edx correctly
   130                              <1>     ;rsi points to the N in "WEND "
   131 00000AAC E87CFAFFFF          <1>     call findOtherExpressionsOnLine 
   132                              <1>     ;make rsi point to next expression on the line or the end of the line
   133 00000AB1 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]  ;Get the line number
   134 00000AB5 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine]  ;Load ptr to start of string in rsi
   135 00000AB9 4829CE              <1>     sub rsi, rcx    ;Compute difference from start of string
   136 00000ABC 89F1                <1>     mov ecx, esi    ;Should just be low byte of si so cl
   137 00000ABE 81E1FF000000        <1>     and ecx, 0FFh   ;Save only bottom byte just in case of garbage
   138 00000AC4 C1E110              <1>     shl ecx, 2*8    ;Move to the third byte in the dword
   139 00000AC7 09C8                <1>     or eax, ecx     ;Add byte three to eax
   140 00000AC9 48C1E010            <1>     shl rax, 8*2    ;Shift three bytes to byte 4 of qword
   141 00000ACD 4809C2              <1>     or rdx, rax     ;Add bytes [4:2] to rdx
   142                              <1>     ;Compute checksum now
   143 00000AD0 31C0                <1>     xor eax, eax
   144 00000AD2 B055                <1>     mov al, WHILEsig 
   145 00000AD4 6689C2              <1>     mov dx, ax  ;Zero checksum byte
   146 00000AD7 31C0                <1>     xor eax, eax
   147 00000AD9 B908000000          <1>     mov ecx, 8  ;8 times
   148                              <1> .csumLoop:
   149                              <1>     ;Spin rdx 8 times adding each byte to al
   150 00000ADE 00D0                <1>     add al, dl
   151 00000AE0 48C1C208            <1>     rol rdx, 8  ;Rotate left by 8 bits
   152 00000AE4 FFC9                <1>     dec ecx
   153 00000AE6 75F6                <1>     jnz .csumLoop
   154 00000AE8 F6D8                <1>     neg al ;Get twos compliment of sum (FFh - al)
   155 00000AEA 88C6                <1>     mov dh, al  ;Save in checksum byte
   156                              <1> .exit:
   157 00000AEC 5E                  <1>     pop rsi
   158 00000AED C3                  <1>     ret
   159                              <1> .noWend:
   160 00000AEE 488D2DC8080000      <1>     lea rbp, noWend
   161 00000AF5 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
   161 00000AFE FF                  <1>
   162 00000AFF E9E8FFFFFF          <1>     jmp .exit
   163                              <1> .error:
   164 00000B04 488D2D19090000      <1>     lea rbp, uknowner
   165 00000B0B 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
   165 00000B14 FF                  <1>
   166 00000B15 E9D2FFFFFF          <1>     jmp .exit
   167                              <1> nextScan:
   168                              <1> ; Gets the current line address and starts searching program from the current line
   169                              <1> ; for a NEXT
   170                              <1> ; Puts the packed specialQword into rdx if a NEXT is found
   171                              <1> ; Returns rdx = -1 if an error occured with rbp pointing to the error string
   172 00000B1A 56                  <1>     push rsi
   173 00000B1B 668B15(F40E0000)    <1>     mov dx, word [currentLine]  ;pre-load dx with the current line number
   174 00000B22 E801060000          <1>     call searchForProgramLine   ;Get program block pointer into rbx
   175 00000B27 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If for some reason line doesnt exist?
   176 00000B2E 0F84A2000000        <1>     je .error   ;Unknown Error
   177                              <1> ;Now pack for the first portion/line after the for loop
   178                              <1> ;rsi points just after the FOR itself
   179 00000B34 56                  <1>     push rsi    ;Save the first point after the FOR itself
   180 00000B35 E8F3F9FFFF          <1>     call findOtherExpressionsOnLine     ;Get the first : or ASCII NUL
   181 00000B3A 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]  ;Get the line number
   182 00000B3E 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine]  ;Load ptr to start of string in rsi
   183 00000B42 4829CE              <1>     sub rsi, rcx    ;Compute difference from start of string
   184 00000B45 89F1                <1>     mov ecx, esi    ;Should just be low byte of si so cl
   185 00000B47 81E1FF000000        <1>     and ecx, 0FFh   ;Save only bottom byte just in case of garbage
   186 00000B4D C1E110              <1>     shl ecx, 2*8    ;Move to the third byte in the dword
   187 00000B50 09C8                <1>     or eax, ecx     ;Add byte three to eax
   188 00000B52 89C2                <1>     mov edx, eax    ;Save in edx
   189 00000B54 48C1E228            <1>     shl rdx, 5*8    ;Shift three bytes to top of qword
   190 00000B58 5E                  <1>     pop rsi
   191                              <1> .initialSearch:
   192                              <1>     ;First look for a : or a ASCII NUL to leave the FOR part of the line
   193 00000B59 803E00              <1>     cmp byte [rsi], 0
   194 00000B5C 740D                <1>     je .gotoNextLine
   195 00000B5E 813E4E455854        <1>     cmp dword [rsi], "NEXT"
   196 00000B64 7418                <1>     je .wordFound
   197 00000B66 48FFC6              <1>     inc rsi ;Now search up until the end of the line for a NEXT
   198                              <1>     ;"NEXT" found here!
   199 00000B69 EBEE                <1>     jmp short .initialSearch
   200                              <1> .gotoNextLine:
   201 00000B6B 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Get pointer to next program line
   202 00000B6F 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Now, when walking if it gives a value of -1, no NEXT found
   203 00000B76 7448                <1>     je .noNext
   204 00000B78 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Load pointer to string rsi
   205 00000B7C EBDB                <1>     jmp short .initialSearch
   206                              <1> .wordFound:
   207                              <1>     ;Here, word found! Huzzah! Now pack edx correctly
   208                              <1>     ;rsi points to the N in "NEXT "
   209 00000B7E E8AAF9FFFF          <1>     call findOtherExpressionsOnLine 
   210                              <1>     ;make rsi point to next expression on the line or the end of the line
   211 00000B83 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]  ;Get the line number
   212 00000B87 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine]  ;Load ptr to start of string in rsi
   213 00000B8B 4829CE              <1>     sub rsi, rcx    ;Compute difference from start of string
   214 00000B8E 89F1                <1>     mov ecx, esi    ;Should just be low byte of si so cl
   215 00000B90 81E1FF000000        <1>     and ecx, 0FFh   ;Save only bottom byte just in case of garbage
   216 00000B96 C1E110              <1>     shl ecx, 2*8    ;Move to the third byte in the dword
   217 00000B99 09C8                <1>     or eax, ecx     ;Add byte three to eax
   218 00000B9B 48C1E010            <1>     shl rax, 8*2    ;Shift three bytes to byte 4 of qword
   219 00000B9F 4809C2              <1>     or rdx, rax     ;Add bytes [4:2] to rdx
   220                              <1>     ;Compute checksum now
   221 00000BA2 31C0                <1>     xor eax, eax
   222 00000BA4 B05A                <1>     mov al, FORsig 
   223 00000BA6 6689C2              <1>     mov dx, ax  ;Zero checksum byte
   224 00000BA9 31C0                <1>     xor eax, eax
   225 00000BAB B908000000          <1>     mov ecx, 8  ;8 times
   226                              <1> .csumLoop:
   227                              <1>     ;Spin rdx 8 times adding each byte to al
   228 00000BB0 00D0                <1>     add al, dl
   229 00000BB2 48C1C208            <1>     rol rdx, 8  ;Rotate left by 8 bits
   230 00000BB6 FFC9                <1>     dec ecx
   231 00000BB8 75F6                <1>     jnz .csumLoop
   232 00000BBA F6D8                <1>     neg al ;Get twos compliment of sum (FFh - al)
   233 00000BBC 88C6                <1>     mov dh, al  ;Save in checksum byte
   234                              <1> .exit:
   235 00000BBE 5E                  <1>     pop rsi
   236 00000BBF C3                  <1>     ret
   237                              <1> .noNext:
   238 00000BC0 488D2D33080000      <1>     lea rbp, noNext
   239 00000BC7 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
   239 00000BD0 FF                  <1>
   240 00000BD1 E9E8FFFFFF          <1>     jmp .exit
   241                              <1> .error:
   242 00000BD6 488D2D47080000      <1>     lea rbp, uknowner
   243 00000BDD 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
   243 00000BE6 FF                  <1>
   244 00000BE7 E9D2FFFFFF          <1>     jmp .exit
   245                              <1> ;=======================================
   246                              <1> ;  ACTUAL CONTROL FLOW FUNCTIONS HERE  :
   247                              <1> ;=======================================
   248                              <1> ;All below functions return the line number in dx and the offset into the line
   249                              <1> ; to start reading at in byte three of edx
   250                              <1> goto:
   251                              <1> ;GOTO, works by replacing the address after the return address on the stack
   252                              <1> ;rsi points to first char AFTER function name
   253 00000BEC E850F7FFFF          <1>     call spaceSkip  ;Skip all preceeding spaces
   254 00000BF1 E89EF7FFFF          <1>     call handleAlgebraicExpression  ;Turn the expression into a number in ax
   255 00000BF6 0FB7D0              <1>     movzx edx, ax   ;Line number into dx, start at beginning of line
   256 00000BF9 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   257 00000C00 C3                  <1>     ret
   258                              <1> 
   259                              <1> gosub:
   260 00000C01 E87FFDFFFF          <1>     call retScan
   261 00000C06 4881FAFFFFFFFF      <1>     cmp rdx, -1
   262 00000C0D 7436                <1>     je .error
   263 00000C0F B901000000          <1>     mov ecx, gosubStruct_size/8
   264                              <1>     makeSpaceOnStack rcx  ;Make four qwords of space on the stack
    96                              <2> 
    97                              <2> 
    98                              <2> 
    99 00000C14 58                  <2>  pop rax
   100 00000C15 48C1E103            <2>  shl %1, 3
   101 00000C19 4829CC              <2>  sub rsp, %1
   102 00000C1C 488D2D(50000000)    <2>  lea rbp, stack
   103 00000C23 4839EC              <2>  cmp rsp, rbp
   104 00000C26 770C                <2>  ja .macroNotOverflow
   105 00000C28 488D2D7D070000      <2>  lea rbp, stkOvflw
   106 00000C2F E995F4FFFF          <2>  jmp criticalError
   107                              <2> .macroNotOverflow:
   108                              <2> 
   109                              <2> 
   110 00000C34 50                  <2>  push rax
   265 00000C35 4889E5              <1>     mov rbp, rsp
   266 00000C38 4881C508000000      <1>     add rbp, 8  ;Make rbp point to the base of the new struc
   267 00000C3F 48895500            <1>     mov qword [rbp + forStruct.specQword], rdx  ;Move rdx into its place on the stack
   268                              <1>     ;rsi points just past the GOSUB
   269 00000C43 EBA7                <1>     jmp short goto ;Now behave like GOTO
   270                              <1> .error:
   271 00000C45 E97FF4FFFF          <1>     jmp criticalError
   272                              <1> 
   273                              <1> return:
   274                              <1> ;First verify the GOSUB struc is on the stack
   275 00000C4A 4889E5              <1>     mov rbp, rsp    ;Dont need to save rbp so trash it
   276 00000C4D 4881C508000000      <1>     add rbp, 8  ;Make it point to the base of the struc past the return address
   277                              <1>     ;Read the qword on stack, verify it is a GOSUBstruc and passes checksum test
   278 00000C54 488B5500            <1>     mov rdx, qword [rbp + gosubStruct.specQword]
   279 00000C58 80FAA5              <1>     cmp dl, GOSUBsig
   280 00000C5B 752F                <1>     jne .noReturn
   281                              <1>     ;Now compute checksum to verify its not an accident
   282 00000C5D 30C0                <1>     xor al, al
   283 00000C5F B908000000          <1>     mov ecx, 8
   284                              <1> .checksumTest:
   285 00000C64 00D0                <1>     add al, dl
   286 00000C66 48C1CA08            <1>     ror rdx, 8
   287 00000C6A FFC9                <1>     dec ecx
   288 00000C6C 75F6                <1>     jnz .checksumTest
   289 00000C6E 84C0                <1>     test al, al     ;This should be 0
   290 00000C70 751A                <1>     jnz .noReturn
   291                              <1>  ;Now we are truly in a RETURN
   292 00000C72 48C1EA28            <1>     shr rdx, 5*8    ;Bring return information down to the lower three bytes
   293                              <1>     ;Clean the struc from the stack
   294 00000C76 B901000000          <1>     mov ecx, gosubStruct_size/8
   295                              <1>     cleanSpaceOnStack rcx
   114                              <2> 
   115 00000C7B 58                  <2>  pop rax
   116 00000C7C 48C1E103            <2>  shl %1, 3
   117 00000C80 4801CC              <2>  add rsp, %1
   118 00000C83 50                  <2>  push rax
   296 00000C84 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   297 00000C8B C3                  <1>     ret
   298                              <1> .noReturn:
   299 00000C8C 488D2D7A070000      <1>     lea rbp, noReturn
   300 00000C93 E931F4FFFF          <1>     jmp criticalError
   301                              <1> forLoop:
   302                              <1> ;This saves the following struc on the stack
   303                              <1> ;------------Hi stack addr-------------
   304                              <1> ;stepValue (qword), default 1
   305                              <1> ;limitValue (qword), to which value do we loop
   306                              <1> ;ptr to counter variable (qword)
   307                              <1> ;Special qword:
   308                              <1> ; Byte 7 = Offset into the line for next instruction
   309                              <1> ; Bytes[6:5] = Line number of portion after FOR (either FOR line or line after FOR)
   310                              <1> ; Byte 4 = Offset into the line for next instruction
   311                              <1> ; Bytes[3:2] = Line number of portion after NEXT (either NEXT line or line after NEXT)
   312                              <1> ; Byte 1 = Parity check sum for the qword, makes the sum of the bytes in qword 0
   313                              <1> ; Byte 0 = FOR signature
   314                              <1> ;------------Low stack addr------------
   315                              <1> ;rsp -> Return address
   316                              <1>     ;First check we have a NEXT following this FOR
   317 00000C98 E87DFEFFFF          <1>     call nextScan
   318 00000C9D 4881FAFFFFFFFF      <1>     cmp rdx, -1
   319 00000CA4 0F84F5000000        <1>     je .critError
   320                              <1>     ;Here we make space on the stack.
   321 00000CAA B904000000          <1>     mov ecx, forStruct_size/8
   322                              <1>     makeSpaceOnStack rcx  ;Make four qwords of space on the stack
    96                              <2> 
    97                              <2> 
    98                              <2> 
    99 00000CAF 58                  <2>  pop rax
   100 00000CB0 48C1E103            <2>  shl %1, 3
   101 00000CB4 4829CC              <2>  sub rsp, %1
   102 00000CB7 488D2D(50000000)    <2>  lea rbp, stack
   103 00000CBE 4839EC              <2>  cmp rsp, rbp
   104 00000CC1 770C                <2>  ja .macroNotOverflow
   105 00000CC3 488D2DE2060000      <2>  lea rbp, stkOvflw
   106 00000CCA E9FAF3FFFF          <2>  jmp criticalError
   107                              <2> .macroNotOverflow:
   108                              <2> 
   109                              <2> 
   110 00000CCF 50                  <2>  push rax
   323 00000CD0 4889E5              <1>     mov rbp, rsp
   324 00000CD3 4881C508000000      <1>     add rbp, 8  ;Make rbp point to the base of the new struc
   325 00000CDA 48895500            <1>     mov qword [rbp + forStruct.specQword], rdx  ;Move rdx into its place on the stack
   326 00000CDE 56                  <1>     push rsi   ;rsi points to first byte after FOR. The first word should now be a var
   327 00000CDF B820544F20          <1>     mov eax, " TO " ;First find the TO and STEP values
   328                              <1> .flScanTo:
   329 00000CE4 803E00              <1>     cmp byte [rsi], 0   ;ASCII null w/o a TO? Syntax Error
   330 00000CE7 0F84AB000000        <1>     je .syntaxError
   331 00000CED 803E3A              <1>     cmp byte [rsi], ":" ;Save for a next statement delimiter
   332 00000CF0 0F84A2000000        <1>     je .syntaxError
   333 00000CF6 3906                <1>     cmp dword [rsi], eax
   334 00000CF8 7405                <1>     je .flToFound
   335 00000CFA 48FFC6              <1>     inc rsi ;Go forwards by a byte
   336 00000CFD EBE5                <1>     jmp short .flScanTo
   337                              <1> .flToFound:
   338                              <1>     ;rsi points to the preceeding space so add 3 to go to trailing space
   339 00000CFF 4881C603000000      <1>     add rsi, 3
   340 00000D06 E836F6FFFF          <1>     call spaceSkip  ;Go to expression to evaluate
   341 00000D0B E884F6FFFF          <1>     call handleAlgebraicExpression  ;Get in rax the limit value
   342 00000D10 48894510            <1>     mov qword [rbp + forStruct.limitValue], rax
   343                              <1>     ;rsi now points to the next word, this should be step, otherwise ignore the word
   344 00000D14 AD                  <1>     lodsd   ;Get the word in eax
   345 00000D15 3D53544550          <1>     cmp eax, "STEP"
   346 00000D1A 754F                <1>     jne .defaultStep
   347                              <1>     ;Check it is a "STEP "
   348 00000D1C AC                  <1>     lodsb
   349 00000D1D 3C20                <1>     cmp al, " "
   350 00000D1F 754A                <1>     jne .defaultStep
   351                              <1>     ;rsi points to a "STEP "
   352 00000D21 E81BF6FFFF          <1>     call spaceSkip  ;Go to expression to evaluate
   353 00000D26 E869F6FFFF          <1>     call handleAlgebraicExpression  ;Get in rax the step value
   354 00000D2B 48894518            <1>     mov qword [rbp + forStruct.stepValue], rax
   355                              <1> .flVariable:
   356 00000D2F 5E                  <1>     pop rsi ;Get back OG rsi position immediately after FOR
   357 00000D30 E80CF6FFFF          <1>     call spaceSkip ;Skip intermediate spaces
   358 00000D35 56                  <1>     push rsi
   359 00000D36 E869F9FFFF          <1>     call variableAssignment ;Make the variable assignment, trashes rsi
   360 00000D3B 5E                  <1>     pop rsi ;rsi points to the start of the variable again
   361 00000D3C E80BF6FFFF          <1>     call getVarNameLength
   362 00000D41 E872030000          <1>     call findVariable   ;Get the variable pointer in rbx
   363 00000D46 48895D08            <1>     mov qword [rbp + forStruct.cntrPtr], rbx    ;Save variable pointer
   364                              <1>     ;Now check whether we should run the loop at all?
   365 00000D4A 488B5D08            <1>     mov rbx, qword [rbp + forStruct.cntrPtr]
   366 00000D4E 488B4B04            <1>     mov rcx, qword [rbx + varBlock.qValue]  ;Get the variable value
   367 00000D52 488B5D10            <1>     mov rbx, qword [rbp + forStruct.limitValue]
   368                              <1>     ;if rcx >= rbx, branch to after NEXT
   369 00000D56 4839D9              <1>     cmp rcx, rbx
   370 00000D59 7D1A                <1>     jge .dontRunFor
   371 00000D5B 488B5500            <1>     mov rdx, qword [rbp + forStruct.specQword]
   372 00000D5F 48C1EA28            <1>     shr rdx, 5*8    ;Upper bytes will be cleared, needed for the "branch"
   373                              <1> .exit:
   374                              <1>     ;Recall edx must have the correct three bytes in it from the special qword
   375 00000D63 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   376 00000D6A C3                  <1>     ret
   377                              <1> .defaultStep:
   378 00000D6B 48C7451801000000    <1>     mov qword [rbp + forStruct.stepValue], 1
   379 00000D73 EBBA                <1>     jmp short .flVariable
   380                              <1> .dontRunFor:
   381                              <1>     ;Move the bytes from the NEXT to edx 
   382 00000D75 488B5500            <1>     mov rdx, qword [rbp + forStruct.specQword]
   383 00000D79 48C1EA10            <1>     shr rdx, 2*8    ;Upper bytes will be cleared
   384 00000D7D 09D2                <1>     or edx, edx     ;This should zero the upper dword
   385                              <1>     ;Need to also reclaim the stack space
   386 00000D7F B904000000          <1>     mov ecx, forStruct_size/8
   387                              <1>     cleanSpaceOnStack rcx
   114                              <2> 
   115 00000D84 58                  <2>  pop rax
   116 00000D85 48C1E103            <2>  shl %1, 3
   117 00000D89 4801CC              <2>  add rsp, %1
   118 00000D8C 50                  <2>  push rax
   388 00000D8D EBD4                <1>     jmp short .exit
   389                              <1> ;Errors
   390                              <1> .unknownError:
   391 00000D8F 488D2D8E060000      <1>     lea rbp, uknowner
   392 00000D96 EB07                <1>     jmp short .critError
   393                              <1> .syntaxError:
   394 00000D98 488D2DCC050000      <1>     lea rbp, syntax
   395                              <1> .critError:
   396                              <1>     ;called with rbp already pointing to error string
   397 00000D9F E925F3FFFF          <1>     jmp criticalError
   398                              <1> 
   399                              <1> next:
   400                              <1>     ;Verify that the structure on the stack is a FOR structure
   401 00000DA4 4889E5              <1>     mov rbp, rsp    ;Dont need to save rbp so trash it
   402 00000DA7 4881C508000000      <1>     add rbp, 8  ;Make it point to the base of the struc past the return address
   403                              <1>     ;Read the qword on stack, verify it is a FORstruct and passes checksum test
   404 00000DAE 488B5500            <1>     mov rdx, qword [rbp + forStruct.specQword]
   405 00000DB2 80FA5A              <1>     cmp dl, FORsig
   406 00000DB5 7555                <1>     jne .noForNext
   407                              <1>     ;Now compute checksum to verify its not an accident
   408 00000DB7 30C0                <1>     xor al, al
   409 00000DB9 B908000000          <1>     mov ecx, 8
   410                              <1> .checksumTest:
   411 00000DBE 00D0                <1>     add al, dl
   412 00000DC0 48C1EA08            <1>     shr rdx, 8
   413 00000DC4 FFC9                <1>     dec ecx
   414 00000DC6 75F6                <1>     jnz .checksumTest
   415 00000DC8 84C0                <1>     test al, al     ;This should be 0
   416 00000DCA 7540                <1>     jnz .noForNext
   417                              <1>     ;Now we are truly in a FOR loop
   418 00000DCC 488B5D08            <1>     mov rbx, qword [rbp + forStruct.cntrPtr]    ;Get variable pointer
   419 00000DD0 488B4304            <1>     mov rax, qword [rbx + varBlock.qValue]      ;Get variable value
   420 00000DD4 483B4510            <1>     cmp rax, qword [rbp + forStruct.limitValue] ;Compare current var value to limit
   421 00000DD8 7D18                <1>     jge .noMoreLooping
   422 00000DDA 48034518            <1>     add rax, qword [rbp + forStruct.stepValue]  ;Add the step
   423 00000DDE 48894304            <1>     mov qword [rbx + varBlock.qValue], rax      ;Update the variable value
   424                              <1>     ;Now go back to line after FOR
   425 00000DE2 488B5500            <1>     mov rdx, qword [rbp + forStruct.specQword]
   426 00000DE6 48C1EA28            <1>     shr rdx, 5*8    ;Move upper three bytes to lower three bytes of edx
   427                              <1> .exit:
   428                              <1>     ;Recall edx must have the correct three bytes in it from the special qword
   429 00000DEA 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   430 00000DF1 C3                  <1>     ret
   431                              <1> .noMoreLooping:
   432                              <1>     ;No need to update the variable, it is already above
   433 00000DF2 488B5500            <1>     mov rdx, qword [rbp + forStruct.specQword]
   434 00000DF6 48C1EA10            <1>     shr rdx, 2*8    ;Move bytes 4:2 to lower three bytes of edx
   435 00000DFA 09D2                <1>     or edx, edx     ;Remove upper bits
   436                              <1>     ;Need to also reclaim the stack space
   437 00000DFC B904000000          <1>     mov ecx, forStruct_size/8
   438                              <1>     cleanSpaceOnStack rcx
   114                              <2> 
   115 00000E01 58                  <2>  pop rax
   116 00000E02 48C1E103            <2>  shl %1, 3
   117 00000E06 4801CC              <2>  add rsp, %1
   118 00000E09 50                  <2>  push rax
   439 00000E0A EBDE                <1>     jmp short .exit
   440                              <1> .noForNext:
   441 00000E0C 488D2DD4050000      <1>     lea rbp, noFor
   442 00000E13 E9B1F2FFFF          <1>     jmp criticalError
   443                              <1> 
   444                              <1> while:
   445                              <1>     ;First check we have a WEND following this WHILE
   446 00000E18 E82BFCFFFF          <1>     call wendScan
   447 00000E1D 4881FAFFFFFFFF      <1>     cmp rdx, -1
   448 00000E24 7464                <1>     je .critError
   449                              <1>     ;Here we make space on the stack.
   450 00000E26 B901000000          <1>     mov ecx, whileStruct_size/8
   451                              <1>     makeSpaceOnStack rcx  ;Make a qword of space on the stack
    96                              <2> 
    97                              <2> 
    98                              <2> 
    99 00000E2B 58                  <2>  pop rax
   100 00000E2C 48C1E103            <2>  shl %1, 3
   101 00000E30 4829CC              <2>  sub rsp, %1
   102 00000E33 488D2D(50000000)    <2>  lea rbp, stack
   103 00000E3A 4839EC              <2>  cmp rsp, rbp
   104 00000E3D 770C                <2>  ja .macroNotOverflow
   105 00000E3F 488D2D66050000      <2>  lea rbp, stkOvflw
   106 00000E46 E97EF2FFFF          <2>  jmp criticalError
   107                              <2> .macroNotOverflow:
   108                              <2> 
   109                              <2> 
   110 00000E4B 50                  <2>  push rax
   452 00000E4C 4889E5              <1>     mov rbp, rsp
   453 00000E4F 4881C508000000      <1>     add rbp, 8  ;Make rbp point to the base of the new struc
   454 00000E56 48895500            <1>     mov qword [rbp + whileStruct.specQword], rdx  ;Move rdx into its place on the stack
   455                              <1>     ;rsi should point after the WHILE
   456 00000E5A E835F5FFFF          <1>     call handleAlgebraicExpression  ;Get result of expression in rax
   457 00000E5F 488B5500            <1>     mov rdx, qword [rbp + whileStruct.specQword]    ;Get special qword back into rdx
   458 00000E63 4885C0              <1>     test rax, rax   ;Zero is FALSE
   459 00000E66 740C                <1>     jz .conditionFalse
   460 00000E68 48C1EA28            <1>     shr rdx, 5*8    ;Bring the upper three bytes down to eax
   461                              <1> .exit:
   462 00000E6C 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   463 00000E73 C3                  <1>     ret
   464                              <1> .conditionFalse:
   465                              <1>     ;If condition is false, jump to the instruction after WEND
   466                              <1>     ;Here we reclaim the space from the stack.
   467 00000E74 B901000000          <1>     mov ecx, whileStruct_size/8
   468                              <1>     cleanSpaceOnStack rcx  ;Clean a qword of space on the stack
   114                              <2> 
   115 00000E79 58                  <2>  pop rax
   116 00000E7A 48C1E103            <2>  shl %1, 3
   117 00000E7E 4801CC              <2>  add rsp, %1
   118 00000E81 50                  <2>  push rax
   469 00000E82 48C1EA10            <1>     shr rdx, 2*8    ;Bring bytes 4:2 down to bytes 2:0
   470 00000E86 09D2                <1>     or edx, edx     ;Zero the rest of it
   471 00000E88 EBE2                <1>     jmp short .exit
   472                              <1> .critError:
   473                              <1>     ;called with rbp already pointing to error string
   474 00000E8A E93AF2FFFF          <1>     jmp criticalError
   475                              <1> wend:
   476                              <1>     ;Find the While on the WHILE line and evaluate the expression
   477                              <1>     ;if true, branch to the WHILE three bytes in specialQword
   478                              <1>     ;if false, branch to WEND three bytes in specialQword and clean stack
   479                              <1>     ;First verify we have a While structure on the stack
   480 00000E8F 4889E5              <1>     mov rbp, rsp    ;Dont need to save rbp so trash it
   481 00000E92 4881C508000000      <1>     add rbp, 8  ;Make it point to the base of the struc past the return address
   482 00000E99 488B5500            <1>     mov rdx, qword [rbp + whileStruct.specQword]
   483 00000E9D 80FA55              <1>     cmp dl, WHILEsig
   484 00000EA0 0F858D000000        <1>     jne .noWhile
   485                              <1>     ;Now compute checksum to verify its not an accident
   486 00000EA6 30C0                <1>     xor al, al
   487 00000EA8 B908000000          <1>     mov ecx, 8
   488                              <1> .checksumTest:
   489 00000EAD 00D0                <1>     add al, dl
   490 00000EAF 48C1CA08            <1>     ror rdx, 8
   491 00000EB3 FFC9                <1>     dec ecx
   492 00000EB5 75F6                <1>     jnz .checksumTest
   493 00000EB7 84C0                <1>     test al, al     ;This should be 0
   494 00000EB9 7578                <1>     jnz .noWhile
   495                              <1>     ;Now we are truly in a WHILE loop
   496                              <1>     ;Search the While line for the WHILE keyword and evaluate the expression after it
   497                              <1>     ;rdx is as normal
   498 00000EBB 48C1EA28            <1>     shr rdx, 5*8    ;Get upper three bytes down low
   499 00000EBF 81E2FFFF0000        <1>     and edx, 0FFFFh ;Save only dx
   500 00000EC5 E85E020000          <1>     call searchForProgramLine
   501 00000ECA 4881FBFFFFFFFF      <1>     cmp rbx, -1
   502 00000ED1 7454                <1>     je .error
   503 00000ED3 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Point to start of string
   504                              <1> .whileScan:
   505 00000ED7 803E00              <1>     cmp byte [rsi], 0   ;Are we at the end of the line
   506 00000EDA 7457                <1>     je .noWhile ;If so, we have gotten to the end of the line without a while
   507 00000EDC 488D3DDDF6FFFF      <1>     lea rdi, whileStr   ;Point to the while string in the table, 6 chars long
   508 00000EE3 B906000000          <1>     mov ecx, 6
   509                              <1> .scanning:
   510 00000EE8 A6                  <1>     cmpsb
   511 00000EE9 75EC                <1>     jne .whileScan
   512 00000EEB FFC9                <1>     dec ecx
   513 00000EED 75F9                <1>     jnz .scanning
   514                              <1>     ;Here is equal, rsi points past the space in "WHILE "
   515 00000EEF 48FFCE              <1>     dec rsi
   516 00000EF2 E84AF4FFFF          <1>     call spaceSkip  ;Skip all spaces
   517 00000EF7 E898F4FFFF          <1>     call handleAlgebraicExpression  ;Get algebraic expression in rax
   518 00000EFC 488B5500            <1>     mov rdx, qword [rbp + whileStruct.specQword]    ;Get special qword back into rdx
   519 00000F00 4885C0              <1>     test rax, rax
   520 00000F03 740C                <1>     jz .conditionFalse
   521 00000F05 48C1EA28            <1>     shr rdx, 5*8    ;Bring the upper three bytes down to eax
   522                              <1> .exit:
   523 00000F09 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   524 00000F10 C3                  <1>     ret
   525                              <1> .conditionFalse:
   526                              <1>     ;If condition is false, go to the instruction after WEND
   527                              <1>     ;Here we reclaim the space from the stack.
   528 00000F11 B901000000          <1>     mov ecx, whileStruct_size/8
   529                              <1>     cleanSpaceOnStack rcx  ;Clean a qword of space on the stack
   114                              <2> 
   115 00000F16 58                  <2>  pop rax
   116 00000F17 48C1E103            <2>  shl %1, 3
   117 00000F1B 4801CC              <2>  add rsp, %1
   118 00000F1E 50                  <2>  push rax
   530 00000F1F 48C1EA10            <1>     shr rdx, 2*8    ;Bring bytes 4:2 down to bytes 2:0
   531 00000F23 09D2                <1>     or edx, edx     ;Zero the rest of it
   532 00000F25 EBE2                <1>     jmp short .exit
   533                              <1> .error:
   534 00000F27 488D2DF6040000      <1>     lea rbp, uknowner
   535 00000F2E E996F1FFFF          <1>     jmp criticalError
   536                              <1> .noWhile:
   537 00000F33 488D2D98040000      <1>     lea rbp, noWhile
   538 00000F3A E98AF1FFFF          <1>     jmp criticalError
   539                              <1> 
   540                              <1> handleIf:
   541                              <1> ;Evaluate the string. The IF,THEN/GOTO,ELSE statement must ALL be on one line
   542                              <1> ;IF exp1 THEN statement ELSE statement
   543                              <1> ;IF exp1 GOTO linenumber ELSE statement
   544                              <1> ;rsi points to first char AFTER function name
   545 00000F3F E8FDF3FFFF          <1>     call spaceSkip
   546 00000F44 E84BF4FFFF          <1>     call handleAlgebraicExpression
   547                              <1> ;THIS WORKS ON CONTRALOGIC. If the algebraic expression evaluates to 0,
   548                              <1> ; it is currently taken to be true (as that is a condition I can test for
   549                              <1> ; easily). Once Proper logical operators are introduced, then I will have to
   550                              <1> ; switch it so that test rax, rax -> jz .else
   551 00000F49 4885C0              <1>     test rax, rax  ;If this is NOT 0, go to the else
   552 00000F4C 7525                <1>     jnz .else   ;CONTRALOGIC, TO BE SWITCHED IN LATER VERSIONS TO JZ 
   553 00000F4E E8EEF3FFFF          <1>     call spaceSkip
   554 00000F53 AD                  <1>     lodsd   ;Get the whole word, must be either "THEN " or "GOTO "
   555 00000F54 3D5448454E          <1>     cmp eax, "THEN"
   556 00000F59 7442                <1>     je .hi0   ; Go past THEN, to process statement
   557 00000F5B 3D474F544F          <1>     cmp eax, "GOTO"
   558 00000F60 7569                <1>     jne .error
   559 00000F62 803E20              <1>     cmp byte [rsi], " " ;is the next char a space?
   560 00000F65 7564                <1>     jne .error
   561 00000F67 E980FCFFFF          <1>     jmp goto
   562                              <1> .candidatethen:
   563 00000F6C 803E20              <1>     cmp byte [rsi], " " ;is the next char a space?
   564 00000F6F 742C                <1>     je .hi0
   565 00000F71 EB58                <1>     jmp short .error
   566                              <1> .else:
   567                              <1>     ;Search for the ELSE, it has to be preceeded with a space and have a space after
   568 00000F73 803E00              <1>     cmp byte [rsi], 0 ;Are we at end of line?
   569 00000F76 7452                <1>     je .noElse
   570 00000F78 803E3A              <1>     cmp byte [rsi], ":" ;Are we at end line segment?
   571 00000F7B 744D                <1>     je .noElse
   572 00000F7D 48FFC6              <1>     inc rsi
   573 00000F80 813E20454C53        <1>     cmp dword [rsi], " ELS"
   574 00000F86 75EB                <1>     jne .else
   575 00000F88 4881C604000000      <1>     add rsi, 4  ;Skip those four chars, we have a candidate
   576 00000F8F 66813E4520          <1>     cmp word [rsi], "E "
   577 00000F94 75DD                <1>     jne .else   ;If not equal failed to match pattern
   578 00000F96 4881C602000000      <1>     add rsi, 2  ;Else its the ELSE we are looking for, move rsi to first space past it
   579                              <1> .hi0:
   580                              <1> ;Now we do the branchy stuff, branch to the same line just further down
   581 00000F9D 668B15(F40E0000)    <1>     mov dx, word [currentLine]
   582 00000FA4 E87F010000          <1>     call searchForProgramLine
   583 00000FA9 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Does the line not exist somehow?
   584 00000FB0 7419                <1>     je .error
   585 00000FB2 4889F0              <1>     mov rax, rsi    ;Save pointer in rax
   586 00000FB5 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine] ;Get the difference in chars
   587 00000FB9 4829C8              <1>     sub rax, rcx
   588 00000FBC 24FF                <1>     and al, -1  ;Save only bottom byte as the difference should be less than 255
   589 00000FBE C1E010              <1>     shl eax, 10h ;Shift to byte 3
   590 00000FC1 09C2                <1>     or edx, eax ;Save the offset into byte 3
   591 00000FC3 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   592                              <1> .noElse:
   593                              <1> ;If no else, simply return
   594 00000FCA C3                  <1>     ret
   595                              <1> .error:
   596 00000FCB 488D1D99030000      <1>     lea rbx, syntax
   597 00000FD2 E9F2F0FFFF          <1>     jmp criticalError
    16                                  %include "MATH.ASM"
    17                              <1> decimalToHex:
    18                              <1>     ;Takes ASCII encoded decimal number and 
    19                              <1>     ;returns its hex value
    20                              <1>     ;Input: rsi = Start of numeric ONLY string
    21                              <1>     ;Output: rax = Number
    22                              <1>     ;        rsi = First non-numeric char past end of number
    23 00000FD7 53                  <1>     push rbx
    24 00000FD8 51                  <1>     push rcx
    25 00000FD9 52                  <1>     push rdx
    26 00000FDA 31DB                <1>     xor ebx, ebx    ;Start with rbx = 0
    27                              <1> .processDigits:    
    28 00000FDC AC                  <1>     lodsb           ;Get the first digit in al
    29 00000FDD 2C30                <1>     sub al, 30h     ;Reduce to value
    30 00000FDF 31D2                <1>     xor edx, edx    ;Clear for multiplication
    31 00000FE1 3C0A                <1>     cmp al, 10      ;Digit valid? Propagte CF
    32 00000FE3 480FB6C0            <1>     movzx rax, al   ;Clear upper bits
    33 00000FE7 4893                <1>     xchg rax, rbx
    34 00000FE9 730D                <1>     jnc .exit       ;Digit was not valid, exit
    35 00000FEB B90A000000          <1>     mov ecx, 10     ;Multiply result by 10
    36 00000FF0 48F7E1              <1>     mul rcx
    37 00000FF3 4801C3              <1>     add rbx, rax    ;Add the new digits
    38 00000FF6 EBE4                <1>     jmp short .processDigits
    39                              <1> .exit:
    40 00000FF8 48FFCE              <1>     dec rsi         ;rsi points to first non-digit
    41 00000FFB 5A                  <1>     pop rdx
    42 00000FFC 59                  <1>     pop rcx
    43 00000FFD 5B                  <1>     pop rbx
    44 00000FFE C3                  <1>     ret
    45                              <1> 
    46                              <1> printdecimalword:
    47                              <1> ;Takes the qword in rax and prints its decimal representation
    48 00000FFF 50                  <1>     push rax
    49 00001000 53                  <1>     push rbx
    50 00001001 488D3D(980E0000)    <1>     lea rdi, digitString   ;Use the default line as a buffer
    51                              <1>     ;Sanitise the digit buffer
    52 00001008 57                  <1>     push rdi
    53 00001009 51                  <1>     push rcx
    54 0000100A 50                  <1>     push rax
    55 0000100B 31C0                <1>     xor eax, eax
    56 0000100D B906000000          <1>     mov ecx, digitStringLen/8
    57 00001012 F348AB              <1>     rep stosq
    58 00001015 58                  <1>     pop rax
    59 00001016 59                  <1>     pop rcx
    60 00001017 5F                  <1>     pop rdi
    61                              <1> 
    62 00001018 4881C72F000000      <1>     add rdi, digitStringLen - 1 ;Go to the end of the buffer
    63 0000101F FD                  <1>     std ;Reverse string ops
    64 00001020 50                  <1>     push rax
    65 00001021 30C0                <1>     xor al, al  ;Place delimiter
    66 00001023 AA                  <1>     stosb
    67 00001024 58                  <1>     pop rax
    68 00001025 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
    68 0000102E 00                  <1>
    69                              <1> .pdw0:
    70 0000102F 31D2                <1>     xor edx, edx
    71 00001031 48F7F3              <1>     div rbx
    72 00001034 80C230              <1>     add dl, '0'
    73 00001037 80FA39              <1>     cmp dl, '9'
    74 0000103A 7603                <1>     jbe .pdw1
    75 0000103C 80C207              <1>     add dl, 'A'-'0'-10
    76                              <1> .pdw1:
    77 0000103F 50                  <1>     push rax
    78 00001040 88D0                <1>     mov al, dl    ;Save remainder byte
    79 00001042 AA                  <1>     stosb   ;Store the byte and add one to rdi
    80 00001043 58                  <1>     pop rax
    81 00001044 4885C0              <1>     test rax, rax
    82 00001047 75E6                <1>     jnz .pdw0
    83 00001049 FC                  <1>     cld ;Return string ops to normal
    84 0000104A 48FFC7              <1>     inc rdi ;Skip the extra 0 that was inserted
    85 0000104D 4889FD              <1>     mov rbp, rdi    ;Point rbp to the head of the string
    86 00001050 E84BF1FFFF          <1>     call ttyOutString
    87 00001055 5B                  <1>     pop rbx
    88 00001056 58                  <1>     pop rax
    89 00001057 C3                  <1>     ret
    17                                  %include "MEMORY.ASM"
    18                              <1> allocateBlock:
    19                              <1> ;Allocates a program memory block, the caller then fixes the specifics
    20                              <1> ;Output: rbx = Pointer to generic memory block, or -1 if memory full
    21                              <1> ;       Caller needs to fill in, block size, block type and specifics
    22 00001058 52                  <1>     push rdx
    23                              <1> .ab0:
    24 00001059 488B1D(E20E0000)    <1>     mov rbx, qword [lastBlock]    ;Get the last block in the chain
    25 00001060 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;First allocation?
    26 00001067 742F                <1>     je .firstAllocation
    27 00001069 C60374              <1>     mov byte [rbx + memBlock.bSignature], notLastMemBlock ;Make it not be the last
    28 0000106C 480FB75301          <1>     movzx rdx, word [rbx + memBlock.wBlockSize] ;Goto end of block
    29 00001071 4801D3              <1>     add rbx, rdx    ;Move rbx over the previous last block
    30 00001074 488B15(D00E0000)    <1>     mov rdx, qword [maxMemAddr]
    31 0000107B 4839D3              <1>     cmp rbx, rdx ;rbx above maxmemory? 
    32 0000107E 770C                <1>     ja .memoryFull
    33 00001080 48891D(E20E0000)    <1>     mov qword [lastBlock], rbx  ;New last block
    34 00001087 C60372              <1>     mov byte [rbx + memBlock.bSignature], lastMemBlock
    35                              <1> .exit:
    36 0000108A 5A                  <1>     pop rdx
    37 0000108B C3                  <1>     ret
    38                              <1> .memoryFull:
    39 0000108C 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    39 00001095 FF                  <1>
    40 00001096 EBF2                <1>     jmp short .exit
    41                              <1> .firstAllocation:
    42                              <1> ;Deal with first allocation
    43 00001098 488D1D(00000000)    <1>     lea rbx, section.programArea.vstart   ;Get this as the head of the chain
    44 0000109F 48891D(E20E0000)    <1>     mov qword [lastBlock], rbx
    45 000010A6 48891D(DA0E0000)    <1>     mov qword [mcbChain], rbx
    46 000010AD C60372              <1>     mov byte [rbx + memBlock.bSignature], lastMemBlock
    47 000010B0 66C743010000        <1>     mov word [rbx + memBlock.wBlockSize], 0 ;Dummy block
    48 000010B6 EBD2                <1>     jmp short .exit
    49                              <1> 
    50                              <1> findVariable:
    51                              <1> ;Input: rsi = Source string for variable name
    52                              <1> ;       ecx = Length of variable name (max 40)
    53                              <1> ;Output: rbx = ptr to varBlock/strBlock OR -1 if doesnt exist
    54 000010B8 50                  <1>     push rax
    55 000010B9 51                  <1>     push rcx
    56 000010BA 52                  <1>     push rdx
    57 000010BB 56                  <1>     push rsi
    58 000010BC 57                  <1>     push rdi
    59 000010BD 488B1D(DA0E0000)    <1>     mov rbx, qword [mcbChain]   ;Start of the chain
    60 000010C4 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Chain empty?
    61 000010CB 7446                <1>     je .exit
    62                              <1> .search:
    63 000010CD 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
    64 000010D1 7415                <1>     je .varFound    ;We found a numerical variable
    65 000010D3 807B0302            <1>     cmp byte [rbx + memBlock.bBlockType], datBlockType
    66 000010D7 741E                <1>     je .datFound    ;We found a string variable
    67                              <1> .invalid:
    68                              <1>     ;Are we at the end of the chain?
    69 000010D9 803B72              <1>     cmp byte [rbx + memBlock.bSignature], lastMemBlock
    70 000010DC 742B                <1>     je .varNotFound ;At the end of the chain and var not found? Error!
    71 000010DE 480FB75301          <1>     movzx rdx, word [rbx + memBlock.wBlockSize]
    72 000010E3 4801D3              <1>     add rbx, rdx    ;Goto next block
    73 000010E6 EBE5                <1>     jmp short .search
    74                              <1> .varFound:
    75                              <1>     ;Compare to see the var is our var
    76 000010E8 488D7B0C            <1>     lea rdi, qword [rbx + varBlock.sVarName] ;point rdi to the name string
    77 000010EC 51                  <1>     push rcx
    78 000010ED 56                  <1>     push rsi
    79 000010EE F3A6                <1>     repe cmpsb  ;Compare one byte at a time
    80 000010F0 5E                  <1>     pop rsi
    81 000010F1 59                  <1>     pop rcx
    82 000010F2 75E5                <1>     jne .invalid
    83 000010F4 F8                  <1>     clc
    84 000010F5 EB1C                <1>     jmp short .exit
    85                              <1> .datFound:
    86 000010F7 488DBB04010000      <1>     lea rdi, qword [rbx + stringBlock.sVarName] ;point rdi to the name string
    87 000010FE 51                  <1>     push rcx
    88 000010FF 56                  <1>     push rsi
    89 00001100 F3A6                <1>     repe cmpsb  ;Compare one byte at a time
    90 00001102 5E                  <1>     pop rsi
    91 00001103 59                  <1>     pop rcx
    92 00001104 75D3                <1>     jne .invalid
    93 00001106 F8                  <1>     clc
    94 00001107 EB0A                <1>     jmp short .exit
    95                              <1> .varNotFound:
    96 00001109 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    96 00001112 FF                  <1>
    97                              <1> .exit:
    98 00001113 5F                  <1>     pop rdi
    99 00001114 5E                  <1>     pop rsi
   100 00001115 5A                  <1>     pop rdx
   101 00001116 59                  <1>     pop rcx
   102 00001117 58                  <1>     pop rax
   103 00001118 C3                  <1>     ret
   104                              <1> 
   105                              <1> findFirstLine:
   106                              <1> ;Output: rbx = Pointer to the first program block
   107                              <1> ;         dx = Number of the first line
   108 00001119 488B1D(EA0E0000)    <1>     mov rbx, qword [firstLinPtr]
   109 00001120 668B15(F20E0000)    <1>     mov dx, word [firstLinNum]
   110 00001127 C3                  <1>     ret
   111                              <1> 
   112                              <1> ;FIRST SEARCH FOR A LINE NUMBER BEFORE INSERTING IT INTO THE CHAIN
   113                              <1> ;IF THE LINE NUMBER IS FOUND, REPLACE THE COMMAND STRING
   114                              <1> 
   115                              <1> searchForProgramLine:
   116                              <1> ;Walk the program chain looking to see if a line number exists. If it does,
   117                              <1> ; return a pointer to the block in rbx. If it doesn't, return -1 in rbx
   118                              <1> ;Input: dx = Line number
   119                              <1> ;Output: rbx = Pointer to program block 
   120 00001128 488B1D(EA0E0000)    <1>     mov rbx, qword [firstLinPtr]
   121 0000112F 4881FBFFFFFFFF      <1>     cmp rbx, -1
   122 00001136 7413                <1>     je .lineFound
   123                              <1> .search:
   124 00001138 66395304            <1>     cmp word [rbx + progLineBlock.wLineNum], dx ;Equal line numbers?
   125 0000113C 740D                <1>     je .lineFound
   126 0000113E 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr]   ;Walk chain
   127 00001142 4881FBFFFFFFFF      <1>     cmp rbx, -1
   128 00001149 75ED                <1>     jne .search ;Not -1? Keep searching
   129                              <1> .lineFound:
   130 0000114B C3                  <1>     ret
   131                              <1> 
   132                              <1> insertProgramLine:
   133                              <1> ;Walk the program chain looking for the biggest number less than our
   134                              <1> ; line number. Once we have reached the end of the chain, insert the block there, or
   135                              <1> ; if there is no block, then we are the last in the chain
   136                              <1> ;Input: rsi = New Program Block to be added
   137 0000114C 50                  <1>     push rax
   138 0000114D 53                  <1>     push rbx
   139 0000114E 51                  <1>     push rcx
   140 0000114F 52                  <1>     push rdx
   141 00001150 57                  <1>     push rdi
   142 00001151 E8C3FFFFFF          <1>     call findFirstLine  ;Get start of program in rbx and line number in dx
   143                              <1> ;First check if we should be the first line
   144                              <1> 
   145 00001156 668B4E04            <1>     mov cx, word [rsi + progLineBlock.wLineNum] ;Save line number in cx
   146 0000115A 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Empty program marker
   147 00001161 744D                <1>     je .first
   148 00001163 6639D1              <1>     cmp cx, dx  ;If cx is below dx, then our entry is first
   149 00001166 7248                <1>     jb .first    
   150                              <1> ;Use ax as the best line number and rdi as the pointer to that block
   151 00001168 66B8FFFF            <1>     mov ax, -1  ;Marker to indicate no insertion
   152                              <1> .walk:
   153 0000116C 48817B06FFFFFFFF    <1>     cmp qword [rbx + progLineBlock.qPtr], -1    ;We are at the end
   154 00001174 7419                <1>     je .sort
   155 00001176 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Walk chain in rbx
   156 0000117A 663B4B04            <1>     cmp cx, word [rbx + progLineBlock.wLineNum]
   157 0000117E 77EC                <1>     ja .walk    ;If line number is above my line number, keep walking
   158                              <1> .candidate:
   159                              <1>     ;If the new line number is below the old line number, reject
   160 00001180 663B4304            <1>     cmp ax, word [rbx + progLineBlock.wLineNum]
   161 00001184 72E6                <1>     jb .walk
   162 00001186 4889DF              <1>     mov rdi, rbx
   163 00001189 668B4304            <1>     mov ax, word [rbx + progLineBlock.wLineNum]
   164 0000118D EBDD                <1>     jmp short .walk
   165                              <1> .sort:
   166 0000118F 66FFC0              <1>     inc ax  ;If no candidates, exit
   167 00001192 740E                <1>     jz .skipLink
   168                              <1>     ;rdi points to the previous line to link to
   169 00001194 488B5706            <1>     mov rdx, qword [rdi + progLineBlock.qPtr]
   170 00001198 48897706            <1>     mov qword [rdi + progLineBlock.qPtr], rsi   ;Insert self here
   171 0000119C 48895606            <1>     mov qword [rsi + progLineBlock.qPtr], rdx   ;Link new block to next line
   172 000011A0 EB20                <1>     jmp short .exit
   173                              <1> .skipLink:
   174 000011A2 48897306            <1>     mov qword [rbx + progLineBlock.qPtr], rsi   ;Link rsi to last element in list
   175 000011A6 48C74606FFFFFFFF    <1>     mov qword [rsi + progLineBlock.qPtr], -1    ;End of chain marker
   176 000011AE EB12                <1>     jmp short .exit
   177                              <1> .first:
   178 000011B0 488935(EA0E0000)    <1>     mov qword [firstLinPtr], rsi
   179 000011B7 66890D(F20E0000)    <1>     mov word [firstLinNum], cx
   180 000011BE 48895E06            <1>     mov qword [rsi + progLineBlock.qPtr], rbx   ;Put the old first line as second line
   181                              <1> .exit:
   182 000011C2 5F                  <1>     pop rdi
   183 000011C3 5A                  <1>     pop rdx
   184 000011C4 59                  <1>     pop rcx
   185 000011C5 5B                  <1>     pop rbx
   186 000011C6 58                  <1>     pop rax
   187 000011C7 C3                  <1>     ret
   188                              <1> 
   189                              <1> makeEditInteger:
   190                              <1> ;Will make a variable if it is new name, or edit the value if it already exists
   191                              <1> ;Input: rsi = Var name
   192                              <1> ;       (e)cx = Length of varname, max 40 chars
   193                              <1> ;       rax = Value
   194 000011C8 E8EBFEFFFF          <1>     call findVariable   ;rbx returned with var block or -1
   195 000011CD 4881FBFFFFFFFF      <1>     cmp rbx, -1
   196 000011D4 7405                <1>     je .newVar
   197 000011D6 48894304            <1>     mov qword [rbx + varBlock.qValue], rax
   198 000011DA C3                  <1>     ret
   199                              <1> .newVar:
   200 000011DB E878FEFFFF          <1>     call allocateBlock
   201 000011E0 4881FBFFFFFFFF      <1>     cmp rbx, -1
   202 000011E7 741E                <1>     je .error
   203 000011E9 48894304            <1>     mov qword [rbx + varBlock.qValue], rax  ;Save value
   204 000011ED 66894B01            <1>     mov word [rbx + varBlock.wBlockSize], cx    ;Save length of name
   205 000011F1 668143010C00        <1>     add word [rbx + varBlock.wBlockSize], varBlock_size ;Add full block size
   206 000011F7 C6430301            <1>     mov byte [rbx + varBlock.bBlockType], varBlockType  ;Block type
   207 000011FB 57                  <1>     push rdi
   208 000011FC 488D7B0C            <1>     lea rdi, qword [rbx + varBlock.sVarName]
   209 00001200 E87B000000          <1>     call strcpy ;Copy the string name into block buffer
   210 00001205 5F                  <1>     pop rdi
   211 00001206 C3                  <1>     ret
   212                              <1> .error:
   213 00001207 488D2D4D010000      <1>     lea rbp, noMem
   214 0000120E E9B6EEFFFF          <1>     jmp criticalError
   215                              <1> makeEditString:
   216                              <1> ;Will make a string if it is new name, or replace the string. Strings are null termin
   217                              <1> ;Input: rsi = Var name
   218                              <1> ;       ecx = Length of varname, max 40 chars
   219                              <1> ;       rdx = Ptr to string itself
   220 00001213 57                  <1>     push rdi
   221 00001214 56                  <1>     push rsi
   222 00001215 50                  <1>     push rax
   223 00001216 53                  <1>     push rbx
   224 00001217 E89CFEFFFF          <1>     call findVariable   ;rbx returned with string block or -1
   225 0000121C 4881FBFFFFFFFF      <1>     cmp rbx, -1
   226 00001223 7528                <1>     jne .strcopy
   227 00001225 E82EFEFFFF          <1>     call allocateBlock
   228 0000122A 4881FBFFFFFFFF      <1>     cmp rbx, -1
   229 00001231 742E                <1>     je .error
   230 00001233 66894B01            <1>     mov word [rbx + stringBlock.wBlockSize], cx    ;Save length of name
   231 00001237 668143010401        <1>     add word [rbx + stringBlock.wBlockSize], stringBlock_size ;Add full block size
   232 0000123D C6430302            <1>     mov byte [rbx + stringBlock.bBlockType], datBlockType  ;Block type
   233 00001241 488DBB04010000      <1>     lea rdi, qword [rbx + stringBlock.sVarName]
   234 00001248 E833000000          <1>     call strcpy ;Copy the string name into block buffer
   235                              <1> .strcopy:
   236 0000124D 488D7B04            <1>     lea rdi, qword [rbx + stringBlock.string]   ;point to string space
   237 00001251 4889D6              <1>     mov rsi, rdx    ;Point rsi to the string itself
   238 00001254 E814000000          <1>     call terminatedstrcpy
   239 00001259 30C0                <1>     xor al, al
   240 0000125B AA                  <1>     stosb   ;Store the null delimiter
   241 0000125C 5B                  <1>     pop rbx
   242 0000125D 58                  <1>     pop rax
   243 0000125E 5E                  <1>     pop rsi
   244 0000125F 5F                  <1>     pop rdi
   245 00001260 C3                  <1>     ret
   246                              <1> .error:
   247 00001261 488D2DF3000000      <1>     lea rbp, noMem
   248 00001268 E95CEEFFFF          <1>     jmp criticalError
   249                              <1> ;------------------------------------------------:
   250                              <1> ;  The below are misc memory related functions   :
   251                              <1> ;------------------------------------------------:
   252                              <1> terminatedstrcpy:
   253                              <1> ;rdi = Destination String
   254                              <1> ;rsi = Source String
   255                              <1> ;Copy a terminated string
   256 0000126D 50                  <1>     push rax
   257                              <1> .copy:
   258 0000126E AC                  <1>     lodsb   ;Get char in al and inc rsi
   259 0000126F 3C00                <1>     cmp al, 0
   260 00001271 740B                <1>     je .exit
   261 00001273 3C3A                <1>     cmp al, ":"
   262 00001275 7407                <1>     je .exit
   263 00001277 3C22                <1>     cmp al, 22h ;Speechmark
   264 00001279 7403                <1>     je .exit
   265 0000127B AA                  <1>     stosb   ;Save char from al and inc rdi
   266 0000127C EBF0                <1>     jmp short .copy 
   267                              <1> .exit:
   268 0000127E 58                  <1>     pop rax
   269 0000127F C3                  <1>     ret
   270                              <1> strcpy:
   271                              <1> ;rdi = Destination string
   272                              <1> ;rsi = Source string
   273                              <1> ;rcx = Number of Chars to copy
   274 00001280 57                  <1>     push rdi
   275 00001281 56                  <1>     push rsi
   276 00001282 51                  <1>     push rcx
   277 00001283 F3A4                <1>     rep movsb
   278 00001285 59                  <1>     pop rcx
   279 00001286 5E                  <1>     pop rsi
   280 00001287 5F                  <1>     pop rdi
   281 00001288 C3                  <1>     ret
   282                              <1> strlen:
   283                              <1> ;Input: rsi = String start
   284                              <1> ;Output: rsi = String start
   285                              <1> ;        ecx = String length, inclusive of NULL char
   286 00001289 50                  <1>     push rax
   287 0000128A 56                  <1>     push rsi
   288 0000128B 31C9                <1>     xor ecx, ecx    ;Clear counter
   289                              <1> .search:
   290 0000128D AC                  <1>     lodsb
   291 0000128E FFC1                <1>     inc ecx
   292 00001290 84C0                <1>     test al, al ;Is this a null char?
   293 00001292 75F9                <1>     jnz .search ;Null not found
   294                              <1> .exit:
   295 00001294 5E                  <1>     pop rsi
   296 00001295 58                  <1>     pop rax
   297 00001296 C3                  <1>     ret
   298                              <1> 
   299                              <1> memoryDetection:
   300 00001297 B820E80000          <1>     mov eax, 0E820h
   301 0000129C CD35                <1>     int 35h     ;rax = ptr to start, rsi = ptr to data table, each entry 24 bytes
   302 0000129E EB07                <1>     jmp short .fsa1
   303                              <1> .findStartAddr:
   304 000012A0 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   305                              <1> .fsa1:
   306 000012A7 6685C9              <1>     test cx, cx
   307 000012AA 742C                <1>     jz .worstCase
   308 000012AC 66FFC9              <1>     dec cx
   309 000012AF 488B1E              <1>     mov rbx, qword [rsi]    ;Get the address entry into rbx
   310 000012B2 4839C3              <1>     cmp rbx, rax    
   311 000012B5 75E9                <1>     jne .findStartAddr
   312 000012B7 488B4608            <1>     mov rax, qword [rsi + 8] ;Get the number of bytes saved into rax
   313                              <1> 
   314 000012BB 488D15(00000000)    <1>     lea rdx, section.programArea.vstart
   315 000012C2 4829DA              <1>     sub rdx, rbx    ;Get the size of the interpreter and internal data area
   316 000012C5 4829D0              <1>     sub rax, rdx    ;Remove the number of bytes reserved to the interpreter
   317 000012C8 E832FDFFFF          <1>     call printdecimalword
   318 000012CD 4801C3              <1>     add rbx, rax    ;Add number of bytes to start address
   319 000012D0 48891D(D00E0000)    <1>     mov qword [maxMemAddr], rbx ;Save this address
   320                              <1> .exit:
   321 000012D7 C3                  <1>     ret
   322                              <1> .worstCase:
   323                              <1> ;Assume 2Mb MAX memory, rax has base address
   324 000012D8 48BB00002000000000- <1>     mov rbx, 200000h    ;2Mb value
   324 000012E1 00                  <1>
   325 000012E2 4829C3              <1>     sub rbx, rax
   326 000012E5 4889D8              <1>     mov rax, rbx    ;Get value in rax
   327 000012E8 E812FDFFFF          <1>     call printdecimalword
   328 000012ED 48C705(D00E0000)00- <1>     mov qword [maxMemAddr], 200000h
   328 000012F5 002000              <1>
   329 000012F8 C3                  <1>     ret
   330                              <1> 
    18                                  %include "BASICDAT.ASM"
    19 000012F9 4F6B0A0D00          <1> prompt  db "Ok",0Ah,0Dh,0
    20 000012FE 5343522036342D4241- <1> mainmsg db "SCR 64-BASIC v0.1",0Ah,0Dh,0
    20 00001307 5349432076302E310A- <1>
    20 00001310 0D00                <1>
    21 00001312 204279746573206672- <1> bytemsg db " Bytes free",0Ah,0Dh,0
    21 0000131B 65650A0D00          <1>
    22 00001320 0A0D00              <1> crlf    db 0Ah,0Dh,0
    23 00001323 4572726F720A0D00    <1> errmsg  db "Error",0Ah,0Dh,0
    24 0000132B 303132333435363738- <1> numbers db "0123456789"
    24 00001334 39                  <1>
    25                              <1> ;startVarChars db "ABCDEFGHIJKLMNOPQRSTUVWXYZ" ;Valid starting chars for a var name
    26                              <1> ;numStartVarChars equ $ - startVarChars
    27 00001335 414243444546474849- <1> varChrs db "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789%$" ;Valid inner chars for var name
    27 0000133E 4A4B4C4D4E4F505152- <1>
    27 00001347 535455565758595A30- <1>
    27 00001350 313233343536373839- <1>
    27 00001359 2524                <1>
    28                              <1> numVarChars equ $ - varChrs
    29                              <1> ;% => Integer variable (8 bytes)
    30                              <1> ;! => Single-Precision, Unused and ignored
    31                              <1> ;# => Double-Precision, Unused and ignored
    32                              <1> ;$ => String variable
    33                              <1> 
    34                              <1> ;Error Messages
    35 0000135B 4F7574206F66206D65- <1> noMem   db "Out of memory",0Ah,0Dh,0
    35 00001364 6D6F72790A0D00      <1>
    36 0000136B 53796E746178206572- <1> syntax  db "Syntax error",0Ah,0Dh,0
    36 00001374 726F720A0D00        <1>
    37 0000137A 54797065206D69736D- <1> typeError   db "Type mismatch",0Ah,0Dh,0
    37 00001383 617463680A0D00      <1>
    38 0000138A 556E646566696E6564- <1> lineNoXist  db "Undefined line number",0Ah,0Dh,0
    38 00001393 206C696E65206E756D- <1>
    38 0000139C 6265720A0D00        <1>
    39 000013A2 427265616B20696E20- <1> breakmsg db "Break in ",0
    39 000013AB 00                  <1>
    40 000013AC 537461636B206F7665- <1> stkOvflw db "Stack overflow",0Ah,0Dh,0
    40 000013B5 72666C6F770A0D00    <1>
    41                              <1> 
    42 000013BD 5748494C4520776974- <1> noWend   db "WHILE without WEND", 0Ah, 0Dh, 0
    42 000013C6 686F75742057454E44- <1>
    42 000013CF 0A0D00              <1>
    43 000013D2 57454E442077697468- <1> noWhile  db "WEND without WHILE", 0Ah, 0Dh, 0
    43 000013DB 6F7574205748494C45- <1>
    43 000013E4 0A0D00              <1>
    44 000013E7 4E4558542077697468- <1> noFor    db "NEXT without FOR", 0Ah, 0Dh, 0
    44 000013F0 6F757420464F520A0D- <1>
    44 000013F9 00                  <1>
    45 000013FA 464F5220776974686F- <1> noNext   db "FOR without NEXT", 0Ah, 0Dh, 0
    45 00001403 7574204E4558540A0D- <1>
    45 0000140C 00                  <1>
    46 0000140D 52455455524E207769- <1> noReturn db "RETURN without GOSUB", 0Ah, 0Dh, 0
    46 00001416 74686F757420474F53- <1>
    46 0000141F 55420A0D00          <1>
    47 00001424 556E7072696E746162- <1> uknowner db "Unprintable error", 0Ah, 0Dh, 0
    47 0000142D 6C65206572726F720A- <1>
    47 00001436 0D00                <1>
    19                                  Segment programArea follows=resSeg align=1 vfollows=resSeg valign=1
    20                                  ENDOFPROGRAM:

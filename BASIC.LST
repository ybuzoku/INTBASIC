     1                                      [map all BASIC.MAP]
     2                                      [DEFAULT REL]
     3                                      BITS 64
     4                                  %include "MEM.INC"
     5                              <1> 
     6                              <1> progLineBlockType   equ 0   ;Program Line
     7                              <1> varBlockType        equ 1   ;Variable block
     8                              <1> datBlockType        equ 2   ;Data block (i.e. a string block)
     9                              <1> 
    10                              <1> notLastMemBlock equ "t" ;Used for blocks that are not the last block
    11                              <1> lastMemBlock    equ "r" ;Used by the last block to indicate end of chain
    12                              <1> 
    13                              <1> %macro memBlockM 0 ;Memory block Macro
    14                              <1>     .bSignature resb 1      ;Valid Signature
    15                              <1>     .wBlockSize resw 1      ;Total block size in bytes
    16                              <1>     .bBlockType resb 1      ;Block type, program line, variable or string
    17                              <1> %endmacro
    18                              <1> 
    19                              <1> struc memBlock
    20                              <1>     memBlockM
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    21                              <1> endstruc
    22                              <1> 
    23                              <1> struc progLineBlock
    24                              <1>     memBlockM               ;Common memory block header
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    25 00000004 ????                <1>     .wLineNum   resw 1      ;Line number, up to 65535
    26 00000006 ????????????????    <1>     .qPtr       resq 1      ;Pointer to the next line, or -1 if last line
    27 0000000E <res 100h>          <1>     .sLine      resb maxLineLen  ;Maximum length 255, keep null char but 
    28                              <1>     ;                             NOT LINE NUMBER OR PRECEEDING SPACES
    29                              <1> endstruc
    30                              <1> 
    31                              <1> struc varBlock
    32                              <1>     memBlockM               ;Common memory block header
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    33 00000004 ????????????????    <1>     .qValue     resq 1      ;One value qword
    34                              <1>     .sVarName:              ;Up to 40 chars for the var name
    35                              <1> endstruc
    36                              <1> 
    37                              <1> struc stringBlock
    38                              <1>     memBlockM
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    39 00000004 <res 100h>          <1>     .string     resb maxLineLen    ;Strings allocate 256 chars
    40                              <1>     .sVarName:              ;Up to 40 chars for the var name
    41                              <1> endstruc
    42                              <1> 
    43                              <1> ;Variable equates
    44                              <1> intEquate   equ 0
    45                              <1> strEquate   equ 1
    46                              <1> 
    47                              <1> ;State byte equates
    48                              <1> breakBit    equ 1    ;Set means on
    49                              <1> traceBit    equ 2    ;Set means TRON, Clear means TROFF
    50                              <1> indirectBit equ 4    ;Set means indirect/program mode, Clear means direct/line mode
    51                              <1> ctrlFlow    equ 8    ;Set means do not find other expression on current line
    52                              <1> 
    53                              <1> ;Control Instruction Signatures
    54                              <1> WHILEsig    equ 055h
    55                              <1> FORsig      equ 05Ah
    56                              <1> GOSUBsig    equ 0A5h
    57                              <1> ;Control stack data structures
    58                              <1> 
    59                              <1> struc forStruct
    60 00000000 ????????????????    <1>     .specQword  resq 1  ;Special qword (see function description)
    61 00000008 ????????????????    <1>     .cntrPtr    resq 1  ;Pointer to counter variable
    62 00000010 ????????????????    <1>     .limitValue resq 1  ;At what value, or after, do we stop the loop 
    63 00000018 ????????????????    <1>     .stepValue  resq 1  ;By how much do we increase on each iteration
    64                              <1> ;Special qword:
    65                              <1> ; Bytes[7:6] = Line number of portion after FOR (either FOR line or line after FOR)
    66                              <1> ; Byte 5 = Offset into the line for next instruction
    67                              <1> ; Bytes[4:3] = Line number of portion after NEXT (either NEXT line or line after NEXT)
    68                              <1> ; Byte 2 = Offset into the line for next instruction
    69                              <1> ; Byte 1 = Parity check sum for the qword, makes the sum of the bytes in qword 0
    70                              <1> ; Byte 0 = FOR signature
    71                              <1> endstruc
    72                              <1> 
    73                              <1> struc whileStruct
    74 00000000 ????????????????    <1>     .specQword  resq 1  ;Special qword
    75                              <1> ;Special qword:
    76                              <1> ; Bytes[7:6] = Line number of WHILE 
    77                              <1> ; Byte 5 = Offset into the line for the condition to evaluate
    78                              <1> ; Bytes[4:3] = Line number of WEND
    79                              <1> ; Byte 2 = Offset in line for either first : after WEND or ASCII NULL (end of line)
    80                              <1> ; Byte 1 = Parity check sum for the qword, makes the sum of the bytes in qword 0
    81                              <1> ; Byte 0 = WHILE signature
    82                              <1> endstruc
    83                              <1> 
    84                              <1> struc gosubStruct
    85 00000000 ????????????????    <1>     .specQword  resq 1  ;Special qword
    86                              <1> ;Special qword:
    87                              <1> ; Bytes[7:6] = Line number of GOSUB 
    88                              <1> ; Byte 5 =  Offset in line for either first : after GOSUB or ASCII NULL (end of line)
    89                              <1> ; Bytes[4:2] = 055AA55h space filler signature
    90                              <1> ; Byte 1 = Parity check sum for the qword, makes the sum of the bytes in qword 0
    91                              <1> ; Byte 0 = GOSUB signature
    92                              <1> endstruc
    93                              <1> 
    94                              <1> ;Stack based macros
    95                              <1> %macro makeSpaceOnStack 1
    96                              <1>     ;The argument is to specify how much space to make on the stack
    97                              <1>     ;It will check to ensure that we dont go past the stack minimum.
    98                              <1>     ;If we do, call stack overflow!
    99                              <1>     pop rax    ;Get the return address qword into rax
   100                              <1>     shl %1, 3  ;Multiply argument register by 8
   101                              <1>     sub rsp, %1 ;Clear space on the stack plus one qword for ret addr
   102                              <1>     cmp rsp, oflowbuff
   103                              <1>     ja ..@1 ;If rsp above overflow buffer, its oki
   104                              <1>     lea rbp, stkOvflw
   105                              <1>     jmp criticalError
   106                              <1> ..@1:
   107                              <1>     ;rsp now points to the start of the cleared space
   108                              <1>     ;Put the return address back on the stack
   109                              <1>     push rax
   110                              <1> %endmacro
   111                              <1> 
   112                              <1> %macro cleanSpaceOnStack 1
   113                              <1>     ;The argument is to specify how much space to reclaim from the stack
   114                              <1>     pop rax
   115                              <1>     shl %1, 3   ;Multiply argument register by 8
   116                              <1>     add rsp, %1
   117                              <1>     push rax
   118                              <1> %endmacro
     5                                  Segment .text align=1
     6                                  %include "RELOC.ASM"
     7 00000000 55AA                <1>     dw 0AA55h 
     8                              <1> ;First verify I have Enough RAM for my program and then run
     9 00000002 B801E80000          <1>     mov eax, 0E801h ;Get low memory count in ax
    10 00000007 CD35                <1>     int 35h
    11 00000009 663D0008            <1>     cmp ax, 200000h/400h ;Divide 2Mb into 1Kb chunks.
    12 0000000D 722A                <1>     jb bad
    13 0000000F B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    14 00000014 0F32                <1>     rdmsr
    15 00000016 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    16 00000018 48C1E720            <1>     shl rdi, 20h        ;Shift high
    17 0000001C 89C7                <1>     mov edi, eax        ;Get the low dword in
    18 0000001E 4889F8              <1>     mov rax, rdi
    19 00000021 488D35(00000000)    <1>     lea rsi, section.resSeg.start
    20 00000028 4881C7[F60E0000]    <1>     add rdi, bssLen
    21 0000002F B900100000          <1>     mov ecx, 1000h
    22 00000034 F348A5              <1>     rep movsq
    23 00000037 FFE0                <1>     jmp qword rax
    24                              <1> bad:
    25 00000039 488D2D0D000000      <1>     lea rbp, badmsg
    26 00000040 B804130000          <1>     mov eax, 1304h
    27 00000045 CD30                <1>     int 30h
    28 00000047 30E4                <1>     xor ah, ah
    29 00000049 CD36                <1>     int 36h
    30 0000004B CD38                <1>     int 38h
    31 0000004D 4E6F7420456E6F7567- <1> badmsg: db "Not Enough Memory. Press any key to enter SYSDEBUG...",0
    31 00000056 68204D656D6F72792E- <1>
    31 0000005F 20507265737320616E- <1>
    31 00000068 79206B657920746F20- <1>
    31 00000071 656E74657220535953- <1>
    31 0000007A 44454255472E2E2E00  <1>
     7                                  Segment dSeg nobits align=1 start=0
     8                                  %include "BSS.ASM"
     9 00000000 <res 50h>           <1> oflowbuff   resq 10        ;10 Qwords of overflow buffer
    10                              <1> ;rsp should never get here when operating in a program.
    11                              <1> ;Only acceptable to be used when processing a line
    12 00000050 <res D40h>          <1> stack       resq 200h - 8 - 10*8  ;Save total 4Kb stack space
    13 00000D90 ????????????????    <1> stacktop    resq 1
    14                              <1> 
    15                              <1> maxLineLen  equ 256
    16 00000D98 <res 100h>          <1> inString    resb maxLineLen         ;256 character input string
    17                              <1> 
    18                              <1> ;This string is used for printing long numbers and saving
    19                              <1> ; the variable names for string comparisons
    20                              <1> digitStringLen  equ 48
    21 00000E98 <res 30h>           <1> digitString resb digitStringLen     
    22                              <1> 
    23 00000EC8 ????????????????    <1> minMemAddr  resq 1  ;Pointer from where to start allocating memory blocks
    24 00000ED0 ????????????????    <1> maxMemAddr  resq 1  ;Pointer to the byte past which we cannot allocate anything
    25                              <1> ;==============================================================================
    26                              <1> ;This is the SDA for each program and must be included in the program area
    27                              <1> ; once we add the ability to save the program to disk.
    28                              <1> ;==============================================================================
    29                              <1> 
    30                              <1> ;void* mcbChain, lastBlock, firstLinPtr = -1 => New program, empty entries
    31                              <1> 
    32 00000ED8 ??                  <1> strLen      resb 1  ;Counter for number of chars entered in string
    33 00000ED9 ??                  <1> stateByte   resb 1  ;Bit 0 => Break Set, stop processing after end of current line
    34 00000EDA ????????????????    <1> mcbChain    resq 1  ;Pointer to the start of the chain
    35 00000EE2 ????????????????    <1> lastBlock   resq 1  ;Pointer to the last block
    36 00000EEA ????????????????    <1> firstLinPtr resq 1  ;Pointer to the programs' first line 
    37 00000EF2 ????                <1> firstLinNum resw 1  ;Line number of the first line of the program
    38 00000EF4 ????                <1> currentLine resw 1  ;Currently being executed line number
    39                              <1> 
    40                              <1> bssLen: ;Needed to compute the resident portion load location
     9                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1
    10                                  %include "MAIN.ASM"
    11                              <1> start:
    12 00000000 B801C50000          <1>     mov eax, 0C501h
    13 00000005 CD35                <1>     int 35h         ;Connect the debugger
    14 00000007 E8A1010000          <1>     call ttyClear   ;Clear the teletype
    15                              <1>     ;Set the CtrlBreak Handler
    16 0000000C 488D3DC7000000      <1>     lea rdi, ctrlBreakHandler
    17 00000013 B03B                <1>     mov al, 3Bh
    18 00000015 E8C9000000          <1>     call setHandler
    19                              <1> 
    20                              <1>     ;Memory stuff
    21 0000001A 488D2D720D0000      <1>     lea rbp, mainmsg
    22 00000021 E87A010000          <1>     call ttyOutString
    23 00000026 E8010D0000          <1>     call memoryDetection
    24 0000002B 488D2D750D0000      <1>     lea rbp, bytemsg
    25 00000032 E869010000          <1>     call ttyOutString
    26 00000037 E898060000          <1>     call newProgram         ;Use this to reset program pointers
    27                              <1> mainLoop:
    28 0000003C FC                  <1>     cld                 ;Set default string op direction
    29 0000003D 488D25(900D0000)    <1>     lea rsp, stacktop    ;Reinitialize stack pointer
    30 00000044 488D05F1FFFFFF      <1>     lea rax, mainLoop
    31 0000004B 8025(D90E0000)FE    <1>     and byte [stateByte], 0FEh  ;Clear the break bit
    32 00000052 50                  <1>     push rax    ;Save address on stack
    33 00000053 488D2D340D0000      <1>     lea rbp, prompt
    34 0000005A E841010000          <1>     call ttyOutString
    35                              <1> .ml0:
    36                              <1> ;This section will execute an input line if it is an interactive expression
    37                              <1> ; or store it in the program if it has a line number.
    38                              <1> ;It will keep accepting lines until a line is entered without a line number
    39 0000005F E89F000000          <1>     call getLineInput
    40 00000064 E8030A0000          <1>     call decimalToHex   ;Check to see if we have a valid line number
    41 00000069 6685C0              <1>     test ax, ax
    42 0000006C 750C                <1>     jnz .saveLine
    43                              <1> ;Here we execute the line, move rsi to the start of the line
    44 0000006E 488D35(980D0000)    <1>     lea rsi, inString
    45 00000075 E9AE010000          <1>     jmp runLine
    46                              <1> .saveLine:
    47                              <1>     ;ax has the line number
    48 0000007A 6689C2              <1>     mov dx, ax
    49 0000007D E83B0B0000          <1>     call searchForProgramLine
    50 00000082 4881FBFFFFFFFF      <1>     cmp rbx, -1
    51 00000089 751D                <1>     jne .commonProc ;If not equal, line must exist, continue
    52 0000008B E8AA020000          <1>     call spaceSkip  ;Skip all the prceeding spaces
    53 00000090 803E00              <1>     cmp byte [rsi], 0  ;Is the first non space char the end of the string?
    54 00000093 742D                <1>     je .lineDoesntExist
    55                              <1>     ;So we have a new line that isn't empty, allocate a new block for this line
    56 00000095 E8530A0000          <1>     call allocateBlock  ;Return a default block in rbx
    57 0000009A C6430300            <1>     mov byte [rbx + progLineBlock.bBlockType], progLineBlockType
    58 0000009E 66894304            <1>     mov word [rbx + progLineBlock.wLineNum], ax
    59 000000A2 66C743010E01        <1>     mov word [rbx + progLineBlock.wBlockSize], progLineBlock_size
    60                              <1> .commonProc:
    61                              <1>     ;If the line already exists, simply override the stored string
    62                              <1>     ;rbx has a pointer to the block
    63 000000A8 E8710C0000          <1>     call strlen ;Get the string length
    64 000000AD 488D7B0E            <1>     lea rdi, qword [rbx + progLineBlock.sLine]  ;Get address here
    65 000000B1 E85F0C0000          <1>     call strcpy ;Copy the program string to the program block
    66 000000B6 56                  <1>     push rsi
    67 000000B7 4889DE              <1>     mov rsi, rbx    ;Move the block into rsi
    68 000000BA E8220B0000          <1>     call insertProgramLine
    69 000000BF 5E                  <1>     pop rsi
    70 000000C0 EB9D                <1>     jmp short .ml0
    71                              <1> .lineDoesntExist:
    72 000000C2 488D2D560D0000      <1>     lea rbp, lineNoXist
    73                              <1> ;For any error, syntax or otherwise, come here
    74                              <1> criticalError:
    75                              <1> ;Called with rbp pointing at error message
    76 000000C9 E8D2000000          <1>     call ttyOutString
    77 000000CE C605(D90E0000)00    <1>     mov byte [stateByte], 0 ;Reset the state byte
    78 000000D5 E962FFFFFF          <1>     jmp mainLoop    ;Trash input line, restart line input
    79                              <1> 
    80                              <1> ctrlBreakHandler:
    81 000000DA 800D(D90E0000)01    <1>     or byte [stateByte], 1  ;Set the byte
    82 000000E1 48CF                <1>     iretq
    83                              <1> setHandler:
    84                              <1> ;Called with:
    85                              <1> ;   rdi = Pointer to interrupt handler
    86                              <1> ;   al = Interrupt number
    87 000000E3 89C5                <1>     mov ebp, eax    ;al has interrupt number which we need to save
    88 000000E5 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
    89                              <1> ;First call to get default BIOS segement selector and attribute word
    90 000000EB 88C3                <1>     mov bl, al  ;Set interrupt number 
    91 000000ED B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
    92 000000F2 CD35                <1>     int 35h
    93 000000F4 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
    94 000000F6 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
    95                              <1> ;dx preserves the attribute word
    96 000000F8 4889FB              <1>     mov rbx, rdi  ;Pointer passed in rdi
    97 000000FB B808F00000          <1>     mov eax, 0F008h ;Set descriptor
    98 00000100 CD35                <1>     int 35h
    99                              <1>     
   100 00000102 C3                  <1>     ret
    11                                  %include "TTY.ASM"
    12                              <1> getLineInput:
    13                              <1>     ;Sets rsi to the inputstring
    14 00000103 30E4                <1>     xor ah, ah
    15 00000105 8825(D80E0000)      <1>     mov byte [strLen], ah   ;Zero the char counter
    16 0000010B 488D3D(980D0000)    <1>     lea rdi, inString   ;Move to start of line
    17 00000112 4889FE              <1>     mov rsi, rdi
    18 00000115 57                  <1>     push rdi
    19 00000116 B900010000          <1>     mov ecx, maxLineLen
    20 0000011B 30C0                <1>     xor al, al    ;Ensure the input line is sanitised
    21 0000011D F3AA                <1>     rep stosb
    22 0000011F 5F                  <1>     pop rdi
    23                              <1> .getChar:
    24 00000120 E883000000          <1>     call ttyIn
    25 00000125 3C0D                <1>     cmp al, 0Dh ;Line Feed
    26 00000127 7456                <1>     je .gliExit
    27 00000129 3C08                <1>     cmp al, 08h ;Bspace
    28 0000012B 740F                <1>     je .glibspace
    29 0000012D 803D(D80E0000)FE    <1>     cmp byte [strLen], -2   ;If at max length (255 chars), simply beep and wait for either bspace or enter
    30 00000134 7459                <1>     je .gliFull 
    31 00000136 84C0                <1>     test al, al
    32 00000138 7443                <1>     je .gliExtendedChar
    33 0000013A EB29                <1>     jmp short .gliCheckCase
    34                              <1> .glibspace:
    35 0000013C F605(D80E0000)FF    <1>     test byte [strLen], -1  ;This will only be zero if strLen=0
    36 00000143 74DB                <1>     jz .getChar
    37 00000145 48FFCF              <1>     dec rdi ;Go back by one position in the input line
    38 00000148 FE0D(D80E0000)      <1>     dec byte [strLen]
    39 0000014E B008                <1>     mov al, 08h
    40 00000150 E846000000          <1>     call ttyOutChar
    41 00000155 B020                <1>     mov al, 20h  
    42 00000157 E83F000000          <1>     call ttyOutChar
    43 0000015C B008                <1>     mov al, 08h
    44 0000015E E838000000          <1>     call ttyOutChar
    45 00000163 EBBB                <1>     jmp short .getChar
    46                              <1> .gliCheckCase:
    47                              <1>     ;al has char
    48 00000165 E831000000          <1>     call ttyOutChar ;Echo the char as is, but store it uppercase
    49 0000016A 3C61                <1>     cmp al, "a"
    50 0000016C 7206                <1>     jb .gliccStore
    51 0000016E 3C7A                <1>     cmp al, "z"
    52 00000170 7702                <1>     ja .gliccStore
    53 00000172 2C20                <1>     sub al, 20h
    54                              <1> .gliccStore:
    55 00000174 AA                  <1>     stosb   ;Increment the pointer, add char to buffer
    56 00000175 FE05(D80E0000)      <1>     inc byte [strLen]   ;Inc char count
    57 0000017B EBA3                <1>     jmp short .getChar
    58                              <1> .gliExtendedChar:
    59                              <1>     ;Currently, extended chars do nothing, 
    60                              <1>     ; eventually add F1-F10 functionality
    61                              <1>     ; and arrow key support
    62 0000017D EBA1                <1>     jmp short .getChar
    63                              <1> .gliExit:
    64 0000017F 488D2D2F0C0000      <1>     lea rbp, crlf
    65 00000186 E815000000          <1>     call ttyOutString
    66 0000018B C60700              <1>     mov byte [rdi], 0   ;Null terminate string here
    67 0000018E C3                  <1>     ret
    68                              <1> .gliFull:
    69 0000018F B007                <1>     mov al, 07h
    70 00000191 E805000000          <1>     call ttyOutChar
    71 00000196 E985FFFFFF          <1>     jmp .getChar
    72                              <1> 
    73                              <1> ttyOutChar:
    74 0000019B B40E                <1>     mov ah, 0Eh
    75 0000019D CD30                <1>     int 30h
    76 0000019F C3                  <1>     ret
    77                              <1> ttyOutString:
    78                              <1> ;Print 0 terminated strings
    79 000001A0 B804130000          <1>     mov eax, 1304h
    80 000001A5 CD30                <1>     int 30h
    81 000001A7 C3                  <1>     ret
    82                              <1> ttyIn:
    83 000001A8 30E4                <1>     xor ah, ah
    84 000001AA CD36                <1>     int 36h
    85 000001AC C3                  <1>     ret
    86                              <1> ttyClear:
    87 000001AD B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
    88 000001B2 CD30                <1>     int 30h
    89 000001B4 B402                <1>     mov ah, 02h
    90 000001B6 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
    91 000001B8 88D7                <1>     mov bh, dl      ;Set cursor for page 0
    92 000001BA CD30                <1>     int 30h
    93 000001BC B707                <1>     mov bh, 07h     ;Grey/Black attribs
    94 000001BE B800060000          <1>     mov eax, 0600h  ;Clear whole screen
    95 000001C3 CD30                <1>     int 30h
    96 000001C5 C3                  <1>     ret
    12                                  %include "PROCESS.ASM"
    13                              <1> keywordParser:
    14                              <1> ;rsi must point to the start of the portion of the line to execute
    15 000001C6 E86F010000          <1>     call spaceSkip  ;Skip any leading spaces
    16 000001CB 803E00              <1>     cmp byte [rsi], 0   ;Null terminated line, empty line?
    17 000001CE 7444                <1>     je .exitEmpty
    18                              <1>     ;rsi now points to function
    19 000001D0 488D3D59030000      <1>     lea rdi, funTbl     ;Point rdi to the function table
    20                              <1> .functionFinderLoop:
    21 000001D7 0FB60F              <1>     movzx ecx, byte [rdi]  ;Get the string length  
    22 000001DA 80F9FF              <1>     cmp cl, -1  ;-1 is the end of table marker, either Var assignment or error
    23 000001DD 7440                <1>     je .notLetVarAssignment ;No key word found, consider variable assignment
    24 000001DF 56                  <1>     push rsi    ;Save ptr to start of string on stack 
    25 000001E0 57                  <1>     push rdi
    26 000001E1 48FFC7              <1>     inc rdi             ;Goto first char in function name
    27 000001E4 F3A6                <1>     repe cmpsb
    28 000001E6 5F                  <1>     pop rdi
    29 000001E7 5E                  <1>     pop rsi     ;Return ptr to start of string pointer from stack
    30 000001E8 84C9                <1>     test cl, cl ;Did all the chars match?
    31 000001EA 740F                <1>     jz .functionFound
    32 000001EC 480FB607            <1>     movzx rax, byte [rdi]    ;Skip unnecessary function pointer
    33 000001F0 480502000000        <1>     add rax, 2      ;Add 2 to skip relative pointer
    34 000001F6 4801C7              <1>     add rdi, rax
    35 000001F9 EBDC                <1>     jmp short .functionFinderLoop
    36                              <1> .functionFound:
    37                              <1>     ;Function found! Execute!
    38                              <1>     ;rsi points to start of expression to evaluate for function
    39                              <1>     ;rdi points to table entry
    40 000001FB 488D1D2E030000      <1>     lea rbx, funTbl         ;Get table address
    41 00000202 480FB617            <1>     movzx rdx, byte [rdi]   ;Get pascal string length
    42 00000206 0FB70C17            <1>     movzx ecx, word [rdi + rdx] ;Add pascal strlen to table entry and get word offset
    43 0000020A 4801CB              <1>     add rbx, rcx    ;Add word offset to table base
    44 0000020D 48FFCA              <1>     dec rdx         ;Get number of chars in function name
    45 00000210 4801D6              <1>     add rsi, rdx    ;rsi points to first char AFTER function name
    46                              <1> .exit:
    47 00000213 C3                  <1>     ret 
    48                              <1> .exitEmpty:
    49 00000214 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    49 0000021D FF                  <1>
    50 0000021E C3                  <1>     ret
    51                              <1>     ;rbx has the function pointer, 
    52                              <1>     ;rsi points to the first char after the keyword (e.g. PRINT, INPUT etc)
    53                              <1> .notLetVarAssignment:
    54 0000021F 488D1D30040000      <1>     lea rbx, variableAssignment
    55 00000226 EBEB                <1>     jmp short .exit  ;Now call the function as if it was found from the table
    56                              <1> 
    57                              <1> runLine:
    58                              <1> ;New lines begin here, rsi point to the start of the program line
    59 00000228 F605(D90E0000)02    <1>     test byte [stateByte], traceBit ;Are we TRON?
    60 0000022F 0F85B0000000        <1>     jnz .tron
    61                              <1> .stringPortionProcess:
    62                              <1>     ;rsi points to string portion to begin processing
    63 00000235 E88CFFFFFF          <1>     call keywordParser
    64                              <1>     ;rbx has the function pointer, if rbx is -1, line was empty
    65                              <1>     ;rsi points to the first char after the keyword (e.g. PRINT, INPUT etc)
    66 0000023A 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If the line is empty, rbx has a -1 so skip the line
    67 00000241 7437                <1>     je .gotoNextLine
    68 00000243 F605(D90E0000)01    <1>     test byte [stateByte], breakBit ;Is break set before exec?
    69 0000024A 0F85C1000000        <1>     jnz .break
    70                              <1> ;EXEC   LINE    PORTION
    71 00000250 FFD3                <1>     call rbx        ;Call the function pointer in rbx
    72                              <1>     ;rsi should be pointing to the next portion of the line or the end of the line
    73                              <1> ;EXEC COMPLETE
    74 00000252 F605(D90E0000)01    <1>     test byte [stateByte], breakBit ;Is break set after exec?
    75 00000259 0F85B2000000        <1>     jnz .break
    76 0000025F F605(D90E0000)04    <1>     test byte [stateByte], indirectBit
    77 00000266 7448                <1>     jz .exit    ;IF in direct mode, just return to command line
    78 00000268 F605(D90E0000)08    <1>     test byte [stateByte], ctrlFlow ;Ctrl Flow =>ignore other expressions temporarily
    79 0000026F 7540                <1>     jnz .ctrlFlowHandler
    80                              <1> 
    81 00000271 E8B0020000          <1>     call findOtherExpressionsOnLine ;See if there are any other expressions
    82 00000276 84C0                <1>     test al, al ;If al is null, no more expressions on the line
    83                              <1>     ;If not null, keep executing expressions on same line
    84                              <1>     ;rsi points to first char after :
    85 00000278 75BB                <1>     jnz .stringPortionProcess ;If a : found, keep processing
    86                              <1> .gotoNextLine:
    87 0000027A 668B15(F40E0000)    <1>     mov dx, word [currentLine]  ;Get in rbx the ptr to current line
    88 00000281 E837090000          <1>     call searchForProgramLine
    89 00000286 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Does the line not exist somehow?
    90 0000028D 7421                <1>     je .exit
    91 0000028F 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Walk chain
    92 00000293 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Are we at the end of the chain?
    93 0000029A 7414                <1>     je .exit
    94 0000029C 668B5304            <1>     mov dx, word [rbx + progLineBlock.wLineNum] ;Save the new line number
    95 000002A0 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Point rsi to the start of the next line
    96                              <1> .gotoNextLineCommon:
    97 000002A4 668915(F40E0000)    <1>     mov word [currentLine], dx
    98 000002AB E978FFFFFF          <1>     jmp runLine
    99                              <1> .exit:
   100 000002B0 C3                  <1>     ret
   101                              <1> .ctrlFlowHandler:
   102                              <1>     ;The stack pointer should be pointing now at the block
   103                              <1>     ; control flow data block. 
   104                              <1>     ;The functions which return with this bit set, also have placed
   105                              <1>     ; the next line number in dx, offset into line in byte three of edx
   106 000002B1 8025(D90E0000)F7    <1>     and byte [stateByte], ~ctrlFlow ;First clear the ctrlflow bit
   107 000002B8 E800090000          <1>     call searchForProgramLine   ;Get pointer to line
   108 000002BD 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Does the line not exist?
   109 000002C4 74DE                <1>     je .gotoNextLineCommon
   110 000002C6 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Point rsi to the start of the next line
   111 000002CA 89D0                <1>     mov eax, edx    ;Isolate the offset into the line
   112 000002CC C1E810              <1>     shr eax, 10h    ;Get byte three into byte 1
   113 000002CF 25FF000000          <1>     and eax, 0FFh   ;Save only the bottom byte
   114 000002D4 4801C6              <1>     add rsi, rax    ;Add the offset into the string to rsi
   115 000002D7 EBCB                <1>     jmp short .gotoNextLineCommon
   116                              <1> .badLineNumber:
   117 000002D9 488D2D3F0B0000      <1>     lea rbp, lineNoXist
   118 000002E0 E9E4FDFFFF          <1>     jmp criticalError
   119                              <1> 
   120                              <1> .tron:
   121                              <1> ;Print the line number about to be executed
   122 000002E5 F605(D90E0000)04    <1>     test byte [stateByte], indirectBit  ;Tron should only work in indirect mode
   123 000002EC 0F8443FFFFFF        <1>     jz .stringPortionProcess
   124 000002F2 B05B                <1>     mov al, "["
   125 000002F4 E8A2FEFFFF          <1>     call ttyOutChar
   126 000002F9 0FB705(F40E0000)    <1>     movzx eax, word [currentLine]
   127 00000300 E88F070000          <1>     call printdecimalword
   128 00000305 B05D                <1>     mov al, "]"
   129 00000307 E88FFEFFFF          <1>     call ttyOutChar
   130 0000030C E924FFFFFF          <1>     jmp .stringPortionProcess
   131                              <1> .break:
   132 00000311 488D2D1F0B0000      <1>     lea rbp, breakmsg
   133 00000318 E883FEFFFF          <1>     call ttyOutString
   134 0000031D 0FB705(F40E0000)    <1>     movzx eax, word [currentLine]
   135 00000324 E86B070000          <1>     call printdecimalword
   136 00000329 488D2D850A0000      <1>     lea rbp, crlf
   137 00000330 E86BFEFFFF          <1>     call ttyOutString
   138 00000335 E902FDFFFF          <1>     jmp mainLoop    ;Exit processing
    13                                  %include "PARSE.ASM"
    14                              <1> ;Main Parsing Routines go here
    15                              <1> 
    16                              <1> spaceSkip:
    17                              <1> ;Allows us to skip spaces that might have been placed for
    18                              <1> ; ease of reading by the user without modifying any registers
    19                              <1> ; except for rsi.
    20                              <1> ;Input: rsi = Pointer to string
    21                              <1> ;Output: rsi = First non space character encountered
    22 0000033A 803E20              <1>     cmp byte [rsi], " "
    23 0000033D 7505                <1>     jne .exit
    24 0000033F 48FFC6              <1>     inc rsi
    25 00000342 EBF6                <1>     jmp short spaceSkip
    26                              <1> .exit:
    27 00000344 C3                  <1>     ret
    28                              <1> 
    29                              <1> getVarNameLength:
    30                              <1> ;Called pointing to the buffer with the var name in it
    31                              <1> ;Input: rsi = Start of var name
    32                              <1> ;Output: ecx = Length of varname
    33 00000345 50                  <1>     push rax
    34 00000346 56                  <1>     push rsi
    35 00000347 57                  <1>     push rdi
    36 00000348 53                  <1>     push rbx
    37 00000349 52                  <1>     push rdx
    38 0000034A 31D2                <1>     xor edx, edx    ;Clear counter of chars
    39 0000034C 488D1D770A0000      <1>     lea rbx, varChrs    ;Get the list of valid variable name chars
    40                              <1> .search:
    41 00000353 4889DF              <1>     mov rdi, rbx    ;Save pointer in rbx
    42 00000356 AC                  <1>     lodsb       ;Get the first char into al
    43 00000357 B926000000          <1>     mov ecx, numVarChars
    44 0000035C F2AE                <1>     repne scasb       ;Look for char in the valid chars list
    45 0000035E 750A                <1>     jne .exit   ;Char not found, drop it
    46 00000360 FFC2                <1>     inc edx     ;Add one to number of chars found
    47 00000362 81FA28000000        <1>     cmp edx, 40 ;At position for char 40?
    48 00000368 72E9                <1>     jb .search  ;Whilst below, keep going
    49                              <1> .exit:
    50 0000036A 89D1                <1>     mov ecx, edx
    51 0000036C 5A                  <1>     pop rdx
    52 0000036D 5B                  <1>     pop rbx
    53 0000036E 5F                  <1>     pop rdi
    54 0000036F 5E                  <1>     pop rsi
    55 00000370 58                  <1>     pop rax
    56 00000371 C3                  <1>     ret
    57                              <1> 
    58                              <1> getVarType:
    59                              <1> ;Input: rsi = Start of var name
    60                              <1> ;       rcx = Length of varname
    61                              <1> ;Output: ebx = 0 => Integer
    62                              <1> ;        ebx = 1 => String
    63                              <1> ;        ebx = -1 => Var doesnt exist, caller handles
    64 00000372 50                  <1>     push rax
    65 00000373 51                  <1>     push rcx
    66 00000374 56                  <1>     push rsi
    67 00000375 E8D3070000          <1>     call findVariable
    68 0000037A 4881FBFFFFFFFF      <1>     cmp rbx, -1
    69 00000381 7406                <1>     je .exit
    70 00000383 0FB65B03            <1>     movzx ebx, byte [rbx + memBlock.bBlockType]
    71 00000387 FFCB                <1>     dec ebx
    72                              <1> .exit:
    73 00000389 5E                  <1>     pop rsi
    74 0000038A 59                  <1>     pop rcx
    75 0000038B 58                  <1>     pop rax
    76 0000038C C3                  <1>     ret
    77                              <1> 
    78                              <1> handleAlgebraicExpression:
    79                              <1> ;Input: rsi = Points to a mathematical expression
    80                              <1> ;Output: rax = Result of said expression
    81                              <1> ;Declares a syntax error if weird chars found
    82                              <1> ;Declares a type error if a string variable found
    83                              <1>     ;Handle Logical Connectives here
    84                              <1>     ;call .handleThirdLevel
    85 0000038D 66813E4E4F          <1>     cmp word [rsi], "NO"
    86 00000392 7504                <1>     jne .hae0
    87 00000394 807E0254            <1>     cmp byte [rsi + 2], "T"
    88                              <1> ;    je .not
    89                              <1> .hae0:
    90 00000398 66813E414E          <1>     cmp word [rsi], "AN"
    91 0000039D 7504                <1>     jne .hae1
    92 0000039F 807E0244            <1>     cmp byte [rsi + 2], "D"
    93                              <1> ;    je .and
    94                              <1> .hae1:
    95 000003A3 66813E4F52          <1>     cmp word [rsi], "OR"
    96                              <1> ;    je .or
    97 000003A8 66813E584F          <1>     cmp word [rsi], "XO"
    98 000003AD 7504                <1>     jne .hae2
    99 000003AF 807E0252            <1>     cmp byte [rsi + 2], "R"
   100                              <1> ;    je .xor
   101                              <1> .hae2:
   102 000003B3 66813E494D          <1>     cmp word [rsi], "IM"
   103 000003B8 7504                <1>     jne .relationals
   104 000003BA 807E0250            <1>     cmp byte [rsi + 2], "P"
   105                              <1> ;    je .implicaton
   106                              <1> ;Level 3, Relational Connectives
   107                              <1> ;.handleThirdLevel:
   108                              <1> ;   call .handleSecondLevel
   109                              <1> .relationals:
   110                              <1>     ;Handle Relational connectives
   111 000003BE 803E3D              <1>     cmp byte [rsi], "="
   112                              <1> ;    je .equivalence
   113 000003C1 66813E3C3E          <1>     cmp word [rsi], "<>"
   114                              <1> ;    je .neq
   115 000003C6 66813E3E3C          <1>     cmp word [rsi], "><"
   116                              <1> ;    je .neq
   117 000003CB 803E3C              <1>     cmp byte [rsi], "<"
   118                              <1> ;    je .less
   119 000003CE 803E3E              <1>     cmp byte [rsi], ">"
   120                              <1> ;    je .greater
   121 000003D1 66813E3C3D          <1>     cmp word [rsi], "<="
   122                              <1> ;    je .leq
   123 000003D6 66813E3E3D          <1>     cmp word [rsi], ">="
   124                              <1> ;    je .geq
   125                              <1> ;Level 2, Addition and Subtraction
   126                              <1> .handleSecondLevel:
   127 000003DB E828000000          <1>     call .handleFirstLevel
   128                              <1> .parseAdditiveOperators:    
   129 000003E0 803E2D              <1>     cmp byte [rsi], '-'
   130 000003E3 7415                <1>     je .processMinus
   131 000003E5 803E2B              <1>     cmp byte [rsi], '+'
   132 000003E8 0F8592000000        <1>     jne .exit              ;No operators, expression evaluated, exit
   133 000003EE 50                  <1>     push rax
   134 000003EF E811000000          <1>     call .handleFirstLevelSkip   ;Parse first level
   135                              <1> .processAdd:    
   136 000003F4 59                  <1>     pop rcx
   137 000003F5 4801C8              <1>     add rax, rcx           ;Add the two numbers
   138 000003F8 EBE6                <1>     jmp short .parseAdditiveOperators  ;Search again for + or -
   139                              <1> .processMinus:
   140 000003FA 50                  <1>     push rax
   141 000003FB E805000000          <1>     call .handleFirstLevelSkip   ;Parse first level
   142 00000400 48F7D8              <1>     neg rax              ;Change a - b to a + -b
   143 00000403 EBEF                <1>     jmp short .processAdd
   144                              <1> 
   145                              <1> ;Level 1, Division and multiplication
   146                              <1> 
   147                              <1> .handleFirstLevelSkip:
   148 00000405 48FFC6              <1>     inc rsi              ;Skip the op symbol
   149                              <1> .handleFirstLevel:
   150 00000408 E82C000000          <1>     call .handleZerothLevel      ;Call third level
   151                              <1> .parseProductOperators:   
   152 0000040D 803E2F              <1>     cmp byte [rsi], '/'
   153 00000410 7411                <1>     je .processDiv
   154 00000412 803E2A              <1>     cmp byte [rsi], '*'
   155 00000415 7569                <1>     jne .exit           ;Neither multiplication or division, return up a level
   156                              <1> 
   157 00000417 50                  <1>     push rax
   158 00000418 E819000000          <1>     call .handleZerothLevelSkip   ;Call zeroth level
   159 0000041D 59                  <1>     pop rcx
   160 0000041E 48F7E9              <1>     imul rcx             ; Multiplication
   161 00000421 EBEA                <1>     jmp short .parseProductOperators   ;Search again for * or /
   162                              <1> 
   163                              <1> .processDiv:
   164 00000423 50                  <1>     push rax
   165 00000424 E80D000000          <1>     call .handleZerothLevelSkip   ;Call zeroth level
   166 00000429 59                  <1>     pop rcx
   167 0000042A 4891                <1>     xchg rax, rcx
   168 0000042C 31D2                <1>     xor edx, edx         ;Clear rdx for rdx:rax
   169 0000042E 48F7F9              <1>     idiv rcx             ;Signed division
   170 00000431 E9D7FFFFFF          <1>     jmp .parseProductOperators         ;Search again for * or /
   171                              <1> 
   172                              <1> ;Level 0, Brackets, numbers and vars.
   173                              <1> 
   174                              <1> .handleZerothLevelSkip:
   175 00000436 48FFC6              <1>     inc rsi             ;Skip the op symbol
   176                              <1> .handleZerothLevel:
   177 00000439 E8FCFEFFFF          <1>     call spaceSkip
   178 0000043E AC                  <1>     lodsb               ;Read char and adv rsi
   179 0000043F 3C28                <1>     cmp al, '('
   180 00000441 750C                <1>     jne .notBracket
   181 00000443 E845FFFFFF          <1>     call handleAlgebraicExpression  ;Parse the inner expression
   182 00000448 803E29              <1>     cmp byte [rsi], ')'   
   183 0000044B 744D                <1>     je .closeBracket     ;If close bracket, goto skip spaces
   184 0000044D EB53                <1>     jmp short .error     ;Otherwise, error
   185                              <1> 
   186                              <1> .notBracket:    
   187 0000044F 3C5E                <1>     cmp al, "^"
   188 00000451 742E                <1>     je .exponentFound
   189                              <1> .varConstCheck:
   190 00000453 3C41                <1>     cmp al, "A"       ;Alphabetical first char?
   191 00000455 730D                <1>     jae .varOrRNDFound      ;Yes, variable found or rnd function or error
   192 00000457 48FFCE              <1>     dec rsi            ;Else back one symbol 
   193 0000045A E80D060000          <1>     call decimalToHex  ;to read number into rax
   194 0000045F E9D6FEFFFF          <1>     jmp spaceSkip
   195                              <1> 
   196                              <1> .varOrRNDFound:
   197 00000464 3C5A                <1>     cmp al, "Z"  
   198 00000466 773A                <1>     ja .error   ;Syntax error if char not between A-Z  
   199 00000468 3C52                <1>     cmp al, "R"
   200 0000046A 7517                <1>     jne .varFound
   201 0000046C 803E4E              <1>     cmp byte [rsi], "N" ;rsi was advanced by 1, check 
   202 0000046F 7512                <1>     jne .varFound
   203 00000471 807E0144            <1>     cmp byte [rsi+1], "D"
   204 00000475 750C                <1>     jne .varFound
   205 00000477 66AD                <1>     lodsw               ;Advance rsi by 3
   206 00000479 AC                  <1>     lodsb
   207 0000047A E440                <1>     in al, 40h         ;Read timer counter 0
   208 0000047C 480FB6C0            <1>     movzx rax, al
   209                              <1> .exit:
   210 00000480 C3                  <1>     ret                ;Return
   211                              <1> .exponentFound:
   212 00000481 EBD0                <1>    jmp short .varConstCheck
   213                              <1> .varFound:    
   214 00000483 48FFCE              <1>     dec rsi ;Back a char
   215 00000486 51                  <1>     push rcx
   216 00000487 E8B9FEFFFF          <1>     call getVarNameLength
   217 0000048C E81D000000          <1>     call getNumericVariable ;Get variable value in rax
   218 00000491 4801CE              <1>     add rsi, rcx    ;Go past the edge of the name
   219 00000494 59                  <1>     pop rcx
   220 00000495 E9A0FEFFFF          <1>     jmp spaceSkip
   221                              <1> 
   222                              <1> .closeBracket:
   223 0000049A 48FFC6              <1>     inc rsi
   224 0000049D E998FEFFFF          <1>     jmp spaceSkip
   225                              <1> .error:
   226 000004A2 488D2D57090000      <1>     lea rbp, syntax
   227 000004A9 E91BFCFFFF          <1>     jmp criticalError
   228                              <1> 
   229                              <1> 
   230                              <1> getNumericVariable:
   231                              <1> ;Gets the value stored in a variable into rax 
   232                              <1> ;Input: rsi = Pointer to first char of a variable name
   233                              <1> ;Output: rax = Variable Value
   234                              <1> ;        rsi = Pointer to first char of a variable name
   235 000004AE 56                  <1>     push rsi
   236 000004AF 51                  <1>     push rcx
   237 000004B0 53                  <1>     push rbx
   238 000004B1 E88FFEFFFF          <1>     call getVarNameLength   ;Returns the length of the var name in cx
   239 000004B6 E892060000          <1>     call findVariable       ;Returns a pointer to the variable block in rbx
   240 000004BB 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Variable doesnt exist? Pretend it is 0
   241 000004C2 740E                <1>     je .noVar
   242 000004C4 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
   243 000004C8 750C                <1>     jne .stringFoundError
   244 000004CA 488B4304            <1>     mov rax, qword [rbx + varBlock.qValue]
   245                              <1> .exit:
   246 000004CE 5B                  <1>     pop rbx
   247 000004CF 59                  <1>     pop rcx
   248 000004D0 5E                  <1>     pop rsi
   249 000004D1 C3                  <1>     ret
   250                              <1> .noVar:
   251 000004D2 31C0                <1>     xor eax, eax
   252 000004D4 EBF8                <1>     jmp short .exit
   253                              <1> .stringFoundError:
   254 000004D6 488D2D32090000      <1>     lea rbp, typeError
   255 000004DD E9E7FBFFFF          <1>     jmp criticalError
   256                              <1> 
   257                              <1> setNumericVariable:
   258                              <1> ;Sets the value stored in a variable
   259                              <1> ;Input: rsi = Pointer to first char of a variable name
   260                              <1> ;       rax = Variable value
   261                              <1> ;Output: rsi = Pointer to first char of variable name
   262 000004E2 56                  <1>     push rsi
   263 000004E3 51                  <1>     push rcx
   264 000004E4 53                  <1>     push rbx
   265                              <1> 
   266 000004E5 E85BFEFFFF          <1>     call getVarNameLength   ;Returns the length of the var name in cx
   267 000004EA E85E060000          <1>     call findVariable       ;Returns a pointer to the variable block in rbx
   268 000004EF 4881FBFFFFFFFF      <1>     cmp rbx, -1             ;Variable doesnt exit?
   269 000004F6 740E                <1>     je .makeEditInteger      ;Make one!
   270 000004F8 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
   271 000004FC 750F                <1>     jne .stringFoundError
   272 000004FE 48894304            <1>     mov qword [rbx + varBlock.qValue], rax  ;Save value
   273                              <1> .exit:
   274 00000502 5B                  <1>     pop rbx
   275 00000503 59                  <1>     pop rcx
   276 00000504 5E                  <1>     pop rsi
   277 00000505 C3                  <1>     ret
   278                              <1> .makeEditInteger:
   279 00000506 E852070000          <1>     call makeEditInteger
   280 0000050B EBF5                <1>     jmp short .exit
   281                              <1> .stringFoundError:
   282 0000050D 488D2DFB080000      <1>     lea rbp, typeError
   283 00000514 E9B0FBFFFF          <1>     jmp criticalError
   284                              <1> 
   285                              <1> setStringVariable:
   286                              <1> ;Sets the string pointed to by rdx
   287                              <1> ;Input: rsi = Pointer to first char of a variable name
   288                              <1> ;       rdx = Start of string
   289                              <1> ;Output: rsi = Pointer to first char of variable name
   290                              <1> ;Keeps adding characters until a 0, : or " encountered
   291                              <1> ;Adds a 0 to the end
   292 00000519 51                  <1>     push rcx
   293 0000051A E826FEFFFF          <1>     call getVarNameLength   ;Gets the length of the var name in cx
   294 0000051F E884070000          <1>     call makeEditString     ;Returns a ptr to the var block in rbx
   295 00000524 59                  <1>     pop rcx
   296 00000525 C3                  <1>     ret
   297                              <1> 
   298                              <1> findOtherExpressionsOnLine:
   299                              <1> ;Input: rsi = start of line portion
   300                              <1> ;Output: rsi = points to first char after first ":" found
   301                              <1> ;         al = : if it was found or 00 if not
   302 00000526 AC                  <1>     lodsb
   303 00000527 3C00                <1>     cmp al, 0   ;Null hit, RIP procedure
   304 00000529 7404                <1>     je .exit
   305 0000052B 3C3A                <1>     cmp al, ":" ;Strings can be terminated with a :
   306 0000052D 75F7                <1>     jne findOtherExpressionsOnLine
   307                              <1> .exit:
   308 0000052F C3                  <1>     ret
    14                                  %include "COMMANDS.ASM"
    15                              <1> 
    16                              <1> funTbl:
    17                              <1> ;Use PASCAL strings to know how long the comparisons need to be
    18                              <1> ;All function pointers are saved as distances from the head
    19                              <1> ; of the function table
    20                              <1> ;BASIC instructions are space terminated
    21                              <1> ;Interpreter instructions are null terminated
    22 00000530 054C455420          <1>     db 5, "LET "     ;DONE
    23 00000535 2101                <1>     dw oldSchoolAssignemnt - funTbl
    24                              <1> 
    25 00000537 054E455700          <1>     db 5, "NEW",0     ;DONE
    26 0000053C A401                <1>     dw newProgram - funTbl 
    27                              <1> 
    28 0000053E 07434C45415200      <1>     db 7, "CLEAR",0   ;DONE
    29 00000545 A401                <1>     dw newProgram - funTbl 
    30                              <1> 
    31 00000547 064C49535400        <1>     db 6, "LIST",0    ;DONE
    32 0000054D 0602                <1>     dw listProgram - funTbl 
    33                              <1> 
    34 0000054F 0552554E00          <1>     db 5, "RUN",0     ;DONE
    35 00000554 4202                <1>     dw runProgram - funTbl
    36                              <1> 
    37 00000556 085052494E542420    <1>     db 8, "PRINT$ "    ;Not implemented yet
    38 0000055E 6F02                <1>     dw printStatement - funTbl
    39                              <1> 
    40 00000560 075052494E5420      <1>     db 7, "PRINT "    ;DONE
    41 00000567 6F02                <1>     dw printStatement - funTbl
    42                              <1> 
    43 00000569 033F20              <1>     db 3, "? "        ;DONE, alias Print
    44 0000056C 6F02                <1>     dw printStatement - funTbl
    45                              <1> 
    46 0000056E 07494E50555420      <1>     db 7, "INPUT "
    47 00000575 0A03                <1>     dw getInput - funTbl
    48                              <1> 
    49 00000577 04494620            <1>     db 4, "IF "      ;DONE, needs to be tested
    50 0000057B A404                <1>     dw handleIf - funTbl
    51                              <1> 
    52 0000057D 06474F544F20        <1>     db 6, "GOTO "    ;DONE
    53 00000583 2804                <1>     dw goto - funTbl
    54                              <1> 
    55 00000585 07474F53554220      <1>     db 7, "GOSUB "
    56 0000058C 8404                <1>     dw gosub - funTbl
    57                              <1> 
    58 0000058E 0852455455524E20    <1>     db 8, "RETURN "
    59 00000596 8C04                <1>     dw return - funTbl
    60                              <1> 
    61 00000598 05464F5220          <1>     db 5, "FOR "
    62 0000059D 3D04                <1>     dw forLoop - funTbl
    63                              <1> 
    64 0000059F 064E45585420        <1>     db 6, "NEXT "
    65 000005A5 7204                <1>     dw next - funTbl
    66                              <1> 
    67 000005A7 075748494C4520      <1>     db 7, "WHILE "
    68 000005AE 9404                <1>     dw while - funTbl
    69                              <1> 
    70 000005B0 0657454E4420        <1>     db 6, "WEND "
    71 000005B6 9C04                <1>     dw wend - funTbl    
    72                              <1> thenStr:
    73 000005B8 065448454E20        <1>     db 6, "THEN "    ;DONE
    74 000005BE FF00                <1>     dw badCmd - funTbl
    75                              <1> elseStr:
    76 000005C0 06454C534520        <1>     db 6, "ELSE "    ;DONE
    77 000005C6 FF00                <1>     dw badCmd - funTbl
    78                              <1> 
    79                              <1>     
    80 000005C8 0853595354454D00    <1>     db 8, "SYSTEM",0  ;DONE
    81 000005D0 A903                <1>     dw returnToDOS - funTbl
    82                              <1> 
    83 000005D2 05434C5300          <1>     db 5, "CLS",0     ;DONE
    84 000005D7 B503                <1>     dw cls - funTbl
    85                              <1> 
    86 000005D9 07444542554700      <1>     db 7, "DEBUG",0   ;DONE
    87 000005E0 BA03                <1>     dw dbgr - funTbl
    88                              <1> 
    89 000005E2 0654524F4E00        <1>     db 6, "TRON",0    ;DONE
    90 000005E8 1001                <1>     dw tron - funTbl
    91                              <1> 
    92 000005EA 0754524F464600      <1>     db 7, "TROFF",0   ;DONE
    93 000005F1 1801                <1>     dw troff - funTbl
    94                              <1> 
    95 000005F3 05454E4420          <1>     db 5, "END "     ;DONE
    96 000005F8 0B01                <1>     dw endProg - funTbl
    97                              <1> 
    98 000005FA 0653544F5020        <1>     db 6, "STOP "    ;DONE
    99 00000600 0B01                <1>     dw endProg - funTbl
   100                              <1> 
   101 00000602 0845534341504520    <1>     db 8, "ESCAPE "  ;DONE
   102 0000060A 0B01                <1>     dw endProg - funTbl
   103                              <1> 
   104 0000060C 07455045454B20      <1>     db 7, "EPEEK "
   105 00000613 2001                <1>     dw memRead - funTbl
   106                              <1> 
   107 00000615 0745504F4B4520      <1>     db 7, "EPOKE "
   108 0000061C 2001                <1>     dw memWrite - funTbl
   109                              <1> 
   110 0000061E 065045454B20        <1>     db 6, "PEEK "
   111 00000624 2001                <1>     dw byteRead - funTbl
   112                              <1> 
   113 00000626 06504F4B4520        <1>     db 6, "POKE "
   114 0000062C 2001                <1>     dw byteWrite - funTbl
   115                              <1> 
   116 0000062E FF                  <1>     db -1    ;Demarkate the end of the table
   117                              <1> ;End of Table
   118                              <1> badCmd:
   119 0000062F 488D2DCA070000      <1>     lea rbp, syntax
   120 00000636 E88EFAFFFF          <1>     call criticalError 
   121                              <1> endProg:
   122 0000063B E9FCF9FFFF          <1>     jmp mainLoop
   123                              <1> tron:
   124 00000640 800D(D90E0000)02    <1>     or byte [stateByte], traceBit   ;Set the traceBit
   125 00000647 C3                  <1>     ret
   126                              <1> troff:
   127 00000648 8025(D90E0000)FD    <1>     and byte [stateByte], ~traceBit ;Clear the traceBit
   128 0000064F C3                  <1>     ret
   129                              <1> memRead:
   130                              <1> memWrite:
   131                              <1> byteRead:
   132                              <1> byteWrite:
   133 00000650 C3                  <1>     ret
   134                              <1> 
   135                              <1> oldSchoolAssignemnt:
   136                              <1> ;Assign with a LET directive
   137                              <1> ;rsi points to first char AFTER function name
   138 00000651 E8E4FCFFFF          <1>     call spaceSkip  ;Goto var assignment as if at start of line
   139                              <1> variableAssignment: ;Assignment without a LET directive
   140                              <1>     ;Establish if the string is a variable assignment or not
   141                              <1>     ;rsi points to start of string
   142 00000656 E8EAFCFFFF          <1>     call getVarNameLength   ;Get the variable name length
   143 0000065B 4889F7              <1>     mov rdi, rsi    ;Save ptr to start of string in rdi
   144 0000065E 4801CE              <1>     add rsi, rcx    ;Go to end of string
   145 00000661 E8D4FCFFFF          <1>     call spaceSkip  ;Skip spaces after the end of the var name
   146 00000666 AC                  <1>     lodsb   ;Get the first char after the spaces. This must be a =
   147 00000667 3C3D                <1>     cmp al, "="
   148 00000669 7551                <1>     jne .syntaxError
   149 0000066B 4889FE              <1>     mov rsi, rdi    ;Return rsi to the start of the string name
   150 0000066E 4801CE              <1>     add rsi, rcx    ;Go to end of var name
   151 00000671 48FFCE              <1>     dec rsi
   152 00000674 AC                  <1>     lodsb   ;Get last char into al and inc rsi
   153 00000675 3C24                <1>     cmp al, "$"
   154 00000677 7420                <1>     je .stringAssignment
   155 00000679 E8BCFCFFFF          <1>     call spaceSkip  ;Skip any spaces
   156 0000067E 48FFC6              <1>     inc rsi         ;Go past the equality sign
   157 00000681 E8B4FCFFFF          <1>     call spaceSkip  ;Skip any spaces
   158 00000686 803E22              <1>     cmp byte [rsi], 22h ;Open speech mark
   159 00000689 743D                <1>     je .typError    ;Integers cant have speechmarks
   160 0000068B E8FDFCFFFF          <1>     call handleAlgebraicExpression  ;Get the result of the expression into rax
   161 00000690 4889FE              <1>     mov rsi, rdi    ;Return the start of the string into rsi
   162 00000693 E84AFEFFFF          <1>     call setNumericVariable
   163 00000698 C3                  <1>     ret
   164                              <1> .stringAssignment:
   165                              <1> ;This simply copies the string which is either speech mark, 0 or : terminated
   166                              <1> ;First allocate a string
   167                              <1> ;rsi = First char after the end of the variable name
   168                              <1> ;rdi = start of variable name 
   169                              <1> ;rcx = char count for var name
   170 00000699 E89CFCFFFF          <1>     call spaceSkip  ;Skip any spaces
   171 0000069E 48FFC6              <1>     inc rsi         ;Go past the equality sign
   172 000006A1 E894FCFFFF          <1>     call spaceSkip  ;Skip any spaces
   173 000006A6 803E22              <1>     cmp byte [rsi], 22h ;Open speechmark check again
   174 000006A9 751D                <1>     jne .typError    ;Assigning a number to a string is a type error
   175                              <1>     ;rsi now points to the start of the string to save
   176 000006AB 48FFC6              <1>     inc rsi ;Go past the speech mark
   177 000006AE 4889F2              <1>     mov rdx, rsi    ;save start of string data in rdx
   178 000006B1 4889FE              <1>     mov rsi, rdi
   179 000006B4 57                  <1>     push rdi
   180 000006B5 E85FFEFFFF          <1>     call setStringVariable
   181 000006BA 5E                  <1>     pop rsi ;Save the start of the assignment in rsi
   182 000006BB C3                  <1>     ret
   183                              <1> 
   184                              <1> .syntaxError:
   185 000006BC 488D2D3D070000      <1>     lea rbp, syntax ;Syntax error, keyword a bit confused
   186 000006C3 E901FAFFFF          <1>     jmp criticalError
   187                              <1> .typError:
   188 000006C8 488D2D40070000      <1>     lea rbp, typeError
   189 000006CF E9F5F9FFFF          <1>     jmp criticalError
   190                              <1> 
   191                              <1> 
   192                              <1> newProgram: 
   193                              <1> ;Simply reset the program pointers
   194 000006D4 488D05(00000000)    <1>     lea rax, section.programArea.vstart
   195 000006DB 488905(C80E0000)    <1>     mov qword [minMemAddr], rax
   196 000006E2 488905(E20E0000)    <1>     mov qword [lastBlock], rax  ;Start writing at this location
   197 000006E9 488905(DA0E0000)    <1>     mov qword [mcbChain], rax   ;Create a mock MCB here
   198                              <1> 
   199 000006F0 4889C2              <1>     mov rdx, rax
   200 000006F3 668B4801            <1>     mov cx, word [rax + memBlock.wBlockSize]
   201 000006F7 4889C7              <1>     mov rdi, rax
   202 000006FA 30C0                <1>     xor al, al
   203 000006FC F3AA                <1>     rep stosb   ;Sanitise the old first allocation
   204                              <1> 
   205 000006FE C60272              <1>     mov byte [rdx + memBlock.bSignature], lastMemBlock
   206 00000701 66C742010000        <1>     mov word [rdx + memBlock.wBlockSize], 0 ;Dummy block, no size, gets overwritten
   207 00000707 31C0                <1>     xor eax, eax
   208 00000709 8805(D80E0000)      <1>     mov byte [strLen], al
   209 0000070F 488D3D(980D0000)    <1>     lea rdi, inString
   210 00000716 B900010000          <1>     mov ecx, maxLineLen
   211 0000071B F3AA                <1>     rep stosb
   212 0000071D C605(F40E0000)0A    <1>     mov byte [currentLine], 10  ;Default to line 10
   213 00000724 48FFC8              <1>     dec rax ;rax = -1
   214 00000727 488905(EA0E0000)    <1>     mov qword [firstLinPtr], rax ;No program in memory
   215 0000072E 668905(F20E0000)    <1>     mov word [firstLinNum], ax
   216 00000735 C3                  <1>     ret
   217                              <1> listProgram:
   218                              <1> ;Go line by line and echo the program lines, inserting a crlf after each
   219                              <1> ;First print the line number, then add a space
   220 00000736 488B1D(EA0E0000)    <1>     mov rbx, qword [firstLinPtr]    ;Get a pointer to the first program line
   221                              <1> .printLines:
   222 0000073D 488D2D71060000      <1>     lea rbp, crlf           ;New line
   223 00000744 E857FAFFFF          <1>     call ttyOutString
   224 00000749 4881FBFFFFFFFF      <1>     cmp rbx, -1
   225 00000750 741F                <1>     je .exit
   226 00000752 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]
   227 00000756 E839030000          <1>     call printdecimalword
   228 0000075B B020                <1>     mov al, " "
   229 0000075D E839FAFFFF          <1>     call ttyOutChar ;Print a space
   230 00000762 488D6B0E            <1>     lea rbp, qword [rbx + progLineBlock.sLine]  ;Null terminated string
   231 00000766 E835FAFFFF          <1>     call ttyOutString
   232 0000076B 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr]   ;Walk list of program lines
   233 0000076F EBCC                <1>     jmp short .printLines
   234                              <1> .exit:
   235 00000771 C3                  <1>     ret
   236                              <1> runProgram:
   237                              <1>     ;Runs the machine in indirect mode
   238 00000772 800D(D90E0000)04    <1>     or byte [stateByte], indirectBit    ;Entering indirect mode
   239                              <1>     ;rsi must point to the first line
   240 00000779 668B15(F20E0000)    <1>     mov dx, word [firstLinNum]
   241 00000780 668915(F40E0000)    <1>     mov word [currentLine], dx ;Reset the current line back to the start
   242 00000787 488B1D(EA0E0000)    <1>     mov rbx, qword [firstLinPtr]
   243 0000078E 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine]
   244 00000792 E891FAFFFF          <1>     call runLine
   245 00000797 8025(D90E0000)FB    <1>     and byte [stateByte], ~indirectBit  ;Exit indirect mode
   246 0000079E C3                  <1>     ret
   247                              <1> 
   248                              <1> printStatement:
   249                              <1> ;Strings must be "" delimited or a string variable must be used
   250                              <1> ;rsi points to first char AFTER function name
   251                              <1> .printStart:
   252 0000079F E896FBFFFF          <1>     call spaceSkip  ;move rsi to the start of the expression
   253 000007A4 AC                  <1>     lodsb
   254                              <1> 
   255 000007A5 84C0                <1>     test al, al     ;Is this a null string?
   256 000007A7 746B                <1>     jz .psvexit
   257                              <1> 
   258 000007A9 3C22                <1>     cmp al, 022h    ;22h = ASCII Speechmarks
   259 000007AB 7449                <1>     je .stringPrint
   260                              <1>     ;Here we check if the first char is ASCII, if it is, check if its a string var
   261 000007AD 3C41                <1>     cmp al, "A"
   262 000007AF 7204                <1>     jb .printExpr
   263 000007B1 3C5A                <1>     cmp al, "Z"
   264 000007B3 7214                <1>     jb .printStringVar
   265                              <1> .printExpr:
   266 000007B5 48FFCE              <1>     dec rsi ;Return to the start of the string
   267                              <1> .printExpr1:    ;Return without dec rsi
   268 000007B8 E8D0FBFFFF          <1>     call handleAlgebraicExpression ;Gets value of a var and/or algebraic operation
   269 000007BD E8D2020000          <1>     call printdecimalword
   270 000007C2 E873FBFFFF          <1>     call spaceSkip
   271 000007C7 EB2D                <1>     jmp short .stringPrint
   272                              <1> .printStringVar:
   273                              <1>     ;Check if it is a string var
   274 000007C9 48FFCE              <1>     dec rsi
   275 000007CC E874FBFFFF          <1>     call getVarNameLength
   276 000007D1 E89CFBFFFF          <1>     call getVarType
   277 000007D6 81FB01000000        <1>     cmp ebx, strEquate
   278 000007DC 75DA                <1>     jne .printExpr1  ;rsi points to the same point as initially
   279 000007DE E86A030000          <1>     call findVariable   ;ecx has string length, get block ptr in rbx
   280 000007E3 55                  <1>     push rbp
   281 000007E4 488D6B04            <1>     lea rbp, qword [rbx + stringBlock.string]
   282 000007E8 E8B3F9FFFF          <1>     call ttyOutString
   283 000007ED 5D                  <1>     pop rbp
   284 000007EE 4801CE              <1>     add rsi, rcx    ;Go past variable
   285 000007F1 E844FBFFFF          <1>     call spaceSkip
   286                              <1> .stringPrint:
   287 000007F6 AC                  <1>     lodsb
   288 000007F7 3C00                <1>     cmp al, 0
   289 000007F9 7419                <1>     je .psvexit
   290 000007FB 3C3A                <1>     cmp al, ":"
   291 000007FD 7412                <1>     je .psvexitColon
   292 000007FF 3C22                <1>     cmp al, 022h    ;Close Speech marks, check next char
   293 00000801 741E                <1>     je .closespeechmarks
   294 00000803 3C3B                <1>     cmp al, ";"     ;Semicolon means print next section on same line
   295 00000805 7429                <1>     je .continue
   296 00000807 E88FF9FFFF          <1>     call ttyOutChar
   297 0000080C EBE8                <1>     jmp short .stringPrint
   298                              <1> .openSpeechMark:
   299 0000080E 48FFC6              <1>     inc rsi ;Go back a char
   300                              <1> .psvexitColon:
   301 00000811 48FFCE              <1>     dec rsi ;Go back a char
   302                              <1> .psvexit:
   303 00000814 488D2D9A050000      <1>     lea rbp, crlf
   304 0000081B E880F9FFFF          <1>     call ttyOutString
   305 00000820 C3                  <1>     ret
   306                              <1> .closespeechmarks:
   307 00000821 E814FBFFFF          <1>     call spaceSkip
   308 00000826 AC                  <1>     lodsb
   309 00000827 3C3B                <1>     cmp al, ";" ;only exception to exiting if next non space char is a semicolon
   310 00000829 74CB                <1>     je .stringPrint
   311 0000082B 48FFCE              <1>     dec rsi ;Go back a step
   312 0000082E EBE4                <1>     jmp short .psvexit
   313                              <1> .continue:
   314 00000830 E805FBFFFF          <1>     call spaceSkip
   315 00000835 E965FFFFFF          <1>     jmp .printStart
   316                              <1> getInput:
   317                              <1> ;Take a string as a prompt
   318                              <1> ;rdi points just past the end of the command line
   319                              <1> ;rsi points to first char AFTER function name
   320                              <1> ;Input prompt strings must be speech mark delimited on both sides!
   321 0000083A E8FBFAFFFF          <1>     call spaceSkip
   322                              <1>     ;Now check to see if the user has specified a custom prompt
   323 0000083F AC                  <1>     lodsb   ;Get first symbol and go past it
   324 00000840 3C22                <1>     cmp al, 22h ;Speechmark?
   325 00000842 7535                <1>     jne .defaultPrompt ;If no speechmark, print default prompt
   326                              <1> .customPrompt:
   327 00000844 4889F7              <1>     mov rdi, rsi    ;Save start of string in rdi
   328                              <1> .cp0:
   329 00000847 AC                  <1>     lodsb           ;Now search for end of string speech marks or null terminator
   330 00000848 3C22                <1>     cmp al, 22h     ;Is al a speech mark?
   331 0000084A 7410                <1>     je .printCustomPrompt
   332 0000084C 84C0                <1>     test al, al     ;Is al null?
   333 0000084E 75F7                <1>     jnz .cp0        ;No, keep searching for terminator
   334                              <1> .error:
   335 00000850 488D2DA9050000      <1>     lea rbp, syntax
   336 00000857 E96DF8FFFF          <1>     jmp criticalError
   337                              <1> .printCustomPrompt:
   338 0000085C 4889FE              <1>     mov rsi, rdi    ;rsi points to the first char of the string
   339                              <1> .pcp0:
   340 0000085F AC                  <1>     lodsb
   341 00000860 3C22                <1>     cmp al, 22h     ;Speechmark?
   342 00000862 7407                <1>     je .stopPrompt
   343 00000864 E832F9FFFF          <1>     call ttyOutChar
   344 00000869 EBF4                <1>     jmp short .pcp0
   345                              <1> .stopPrompt:
   346 0000086B E8CAFAFFFF          <1>     call spaceSkip  ;Skip spaces
   347 00000870 AC                  <1>     lodsb   ;Get first non space char after closing speechmark
   348 00000871 3C3B                <1>     cmp al, ";" ;Semicolon means no default prompt
   349 00000873 740E                <1>     je .noDefaultPrompt
   350 00000875 3C2C                <1>     cmp al, "," ;Comma also means no default prompt
   351 00000877 740A                <1>     je .noDefaultPrompt
   352                              <1> .defaultPrompt:
   353 00000879 48FFCE              <1>     dec rsi
   354 0000087C B03F                <1>     mov al, "?"
   355 0000087E E818F9FFFF          <1>     call ttyOutChar
   356                              <1> .noDefaultPrompt:
   357 00000883 B020                <1>     mov al, " " ;space
   358 00000885 E811F9FFFF          <1>     call ttyOutChar
   359 0000088A E8ABFAFFFF          <1>     call spaceSkip  ;Skip spaces after default supressor to get to var name
   360 0000088F E8B1FAFFFF          <1>     call getVarNameLength   ;Get var name length in ecx
   361 00000894 488D3D(980E0000)    <1>     lea rdi, digitString    ;Buffer has 48 chars, string names are max 40
   362 0000089B E875040000          <1>     call strcpy     ;rsi points to var name
   363 000008A0 57                  <1>     push rdi    ;rdi points to first char of variable
   364 000008A1 51                  <1>     push rcx
   365 000008A2 E85CF8FFFF          <1>     call getLineInput   ;Get input from the user in inString, null terminated
   366                              <1>     ;This will sanitise in direct mode meaning input cannot have any more statements
   367                              <1>     ; after it.
   368 000008A7 59                  <1>     pop rcx
   369 000008A8 5F                  <1>     pop rdi 
   370 000008A9 4889FE              <1>     mov rsi, rdi    ;Save the start of the var name in rsi
   371 000008AC 4801CE              <1>     add rsi, rcx    ;Go to end of var
   372 000008AF 48FFCE              <1>     dec rsi
   373 000008B2 AC                  <1>     lodsb   ;Are we a string variable?
   374 000008B3 488D35(980D0000)    <1>     lea rsi, inString   ;Move rsi to start of user input
   375 000008BA 3C24                <1>     cmp al, "$"
   376 000008BC 740F                <1>     je .handleString
   377                              <1> .handleNumeric:
   378 000008BE E8CAFAFFFF          <1>     call handleAlgebraicExpression  ;Get the result of the expression into rax
   379 000008C3 4889FE              <1>     mov rsi, rdi    ;Return the start of the string into rsi
   380 000008C6 E817FCFFFF          <1>     call setNumericVariable
   381 000008CB EB0B                <1>     jmp short .commonExit
   382                              <1> .handleString:
   383                              <1>     ;IF a string variable, come here
   384                              <1>     ;rdi has the start of the variable name
   385                              <1> 
   386                              <1>     ;rdx must point to the start of the string
   387                              <1>     ;rsi must point to the start of the variable name
   388 000008CD 4889F2              <1>     mov rdx, rsi
   389 000008D0 4889FE              <1>     mov rsi, rdi    ;Return start of user name in rsi
   390 000008D3 E841FCFFFF          <1>     call setStringVariable
   391                              <1> .commonExit:
   392 000008D8 C3                  <1>     ret
   393                              <1> 
   394                              <1> ;==========================================================:
   395                              <1> ;==========================================================:
   396                              <1> ;==========================================================:
   397                              <1> ;          Functions Related to Program Management         :
   398                              <1> ;==========================================================:
   399                              <1> ;==========================================================:
   400                              <1> ;==========================================================:
   401                              <1> returnToDOS:
   402 000008D9 B007                <1>     mov al, 07h
   403 000008DB E8BBF8FFFF          <1>     call ttyOutChar
   404 000008E0 E91BF7FFFF          <1>     jmp start   ;Reset the interpreter
   405                              <1> cls:
   406 000008E5 E9C3F8FFFF          <1>     jmp ttyClear
   407                              <1> dbgr:
   408                              <1>     ;Hook int 40h to main prog EP to allow returning 
   409                              <1> ;First call to get default BIOS segement selector and attribute word
   410 000008EA B340                <1>     mov bl, 40h
   411 000008EC B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   412 000008F1 CD35                <1>     int 35h
   413 000008F3 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   414 000008F5 B940000000          <1>     mov ecx, 40h    ;Interrupt number
   415                              <1> ;dx preserves the attribute word
   416 000008FA 488D1D09000000      <1>     lea rbx, .farReturn  ;Pointer passed in
   417 00000901 B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   418 00000906 CD35                <1>     int 35h
   419 00000908 CD38                <1>     int 38h ;Call debugger
   420                              <1> .farReturn:
   421                              <1>     ;Reconnect CTRL+BREAK handler
   422 0000090A 48BC-               <1>     mov rsp, stacktop   ;Immediately reset stack
   422 0000090C [900D000000000000]  <1>
   423 00000914 488D3DBFF7FFFF      <1>     lea rdi, ctrlBreakHandler
   424 0000091B B03B                <1>     mov al, 3Bh
   425 0000091D E8C1F7FFFF          <1>     call setHandler
   426                              <1>     
   427 00000922 488D2D8C040000      <1>     lea rbp, crlf
   428 00000929 E872F8FFFF          <1>     call ttyOutString
   429 0000092E E909F7FFFF          <1>     jmp mainLoop
    15                                  %include "CTRLFLOW.ASM"
    16                              <1> 
    17                              <1> ;Handles all the specific functions related to control flow such as scanning 
    18                              <1> ; lines for WEND, RETURN, NEXT
    19                              <1> retScan:
    20                              <1> ;Gets the current line address and starts searching program from current prog line
    21                              <1> ; for a return
    22                              <1> 
    23                              <1> wendScan:
    24                              <1> nextScan:
    25                              <1> ; Gets the current line address and starts searching program from the current line
    26                              <1> ; for a NEXT
    27                              <1> ; Puts the packed three bytes into the low three bytes of edx if a NEXT is found
    28 00000933 56                  <1>     push rsi
    29 00000934 668B15(F40E0000)    <1>     mov dx, word [currentLine]  ;pre-load dx with the current line number
    30                              <1> .initialSearch:
    31                              <1>     ;First look for a : or a ASCII NUL to leave the FOR part of the line
    32 0000093B 803E00              <1>     cmp byte [rsi], 0
    33 0000093E 7411                <1>     je .gotoNextLine
    34 00000940 48FFC6              <1>     inc rsi ;Now search up until the end of the line for a NEXT
    35 00000943 813E4E455854        <1>     cmp dword [rsi], "NEXT"
    36 00000949 75F0                <1>     jne .initialSearch
    37 0000094B 807E0420            <1>     cmp byte [rsi + 4], " " ;NEXT must have a space after it
    38 0000094F 75EA                <1>     jne .initialSearch
    39                              <1> 
    40                              <1> .gotoNextLine:
    41 00000951 E867020000          <1>     call searchForProgramLine
    42                              <1> .exit:
    43 00000956 5E                  <1>     pop rsi
    44 00000957 C3                  <1>     ret
    45                              <1> .nextFound:
    46                              <1>     
    47                              <1> ;=======================================
    48                              <1> ;  ACTUAL CONTROL FLOW FUNCTIONS HERE  :
    49                              <1> ;=======================================
    50                              <1> ;All below functions return the line number in dx and the offset into the line
    51                              <1> ; to start reading at in byte three of edx
    52                              <1> goto:
    53                              <1> ;GOTO, works by replacing the address after the return address on the stack
    54                              <1> ;rsi points to first char AFTER function name
    55 00000958 E8DDF9FFFF          <1>     call spaceSkip  ;Skip all preceeding spaces
    56 0000095D E82BFAFFFF          <1>     call handleAlgebraicExpression  ;Turn the expression into a number in ax
    57 00000962 0FB7D0              <1>     movzx edx, ax   ;Line number into dx, start at beginning of line
    58 00000965 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
    59 0000096C C3                  <1>     ret
    60                              <1> 
    61                              <1> forLoop:
    62                              <1> ;This saves the following struc on the stack
    63                              <1> ;------------Hi stack addr-------------
    64                              <1> ;stepValue (qword), default 1
    65                              <1> ;limitValue (qword), to which value do we loop
    66                              <1> ;ptr to counter variable (qword)
    67                              <1> ;Special qword:
    68                              <1> ; Bytes[7:6] = Line number of portion after FOR (either FOR line or line after FOR)
    69                              <1> ; Byte 5 = Offset into the line for next instruction
    70                              <1> ; Bytes[4:3] = Line number of portion after NEXT (either NEXT line or line after NEXT)
    71                              <1> ; Byte 2 = Offset into the line for next instruction
    72                              <1> ; Byte 1 = Parity check sum for the qword, makes the sum of the bytes in qword 0
    73                              <1> ; Byte 0 = FOR signature
    74                              <1> ;------------Low stack addr------------
    75                              <1> ;rsp -> Return address
    76                              <1>     ;First check we have a NEXT following this FOR
    77                              <1> 
    78                              <1>     ;Here we make space on the stack.
    79 0000096D B920000000          <1>     mov ecx, forStruct_size
    80                              <1>     makeSpaceOnStack rcx  ;Make four qwords of space on the stack
    96                              <2> 
    97                              <2> 
    98                              <2> 
    99 00000972 58                  <2>  pop rax
   100 00000973 48C1E103            <2>  shl %1, 3
   101 00000977 4829CC              <2>  sub rsp, %1
   102 0000097A 4881FC[00000000]    <2>  cmp rsp, oflowbuff
   103 00000981 770C                <2>  ja ..@1
   104 00000983 488D2DB7040000      <2>  lea rbp, stkOvflw
   105 0000098A E93AF7FFFF          <2>  jmp criticalError
   106                              <2> ..@1:
   107                              <2> 
   108                              <2> 
   109 0000098F 50                  <2>  push rax
    81 00000990 4889E5              <1>     mov rbp, rsp
    82 00000993 4881C508000000      <1>     add rbp, 8  ;Make rbp point to the base of the new struc
    83                              <1> 
    84                              <1> 
    85 0000099A 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
    86 000009A1 C3                  <1>     ret
    87                              <1> 
    88                              <1> next:
    89                              <1>     ;Verify that the structure on the stack is as expected
    90 000009A2 4889E5              <1>     mov rbp, rsp    ;Dont need to save rbp so trash it
    91 000009A5 4881C508000000      <1>     add rbp, 8  ;Make it point to the base of the struc past the return address
    92 000009AC 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
    93 000009B3 C3                  <1>     ret
    94                              <1> 
    95                              <1> gosub:
    96 000009B4 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
    97 000009BB C3                  <1>     ret
    98                              <1> 
    99                              <1> return:
   100 000009BC 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   101 000009C3 C3                  <1>     ret
   102                              <1> 
   103                              <1> while:
   104 000009C4 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   105 000009CB C3                  <1>     ret
   106                              <1> 
   107                              <1> wend:
   108 000009CC 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   109 000009D3 C3                  <1>     ret
   110                              <1> 
   111                              <1> handleIf:
   112                              <1> ;Evaluate the string. The IF,THEN/GOTO,ELSE statement must ALL be on one line
   113                              <1> ;IF exp1 THEN statement ELSE statement
   114                              <1> ;IF exp1 GOTO linenumber ELSE statement
   115                              <1> ;rsi points to first char AFTER function name
   116 000009D4 E861F9FFFF          <1>     call spaceSkip
   117 000009D9 E8AFF9FFFF          <1>     call handleAlgebraicExpression
   118                              <1> ;THIS WORKS ON CONTRALOGIC. If the algebraic expression evaluates to 0,
   119                              <1> ; it is currently taken to be true (as that is a condition I can test for
   120                              <1> ; easily). Once Proper logical operators are introduced, then I will have to
   121                              <1> ; switch it so that test rax, rax -> jz .else
   122 000009DE 4885C0              <1>     test rax, rax  ;If this is NOT 0, go to the else
   123 000009E1 7525                <1>     jnz .else   ;CONTRALOGIC, TO BE SWITCHED IN LATER VERSIONS TO JZ 
   124 000009E3 E852F9FFFF          <1>     call spaceSkip
   125 000009E8 AD                  <1>     lodsd   ;Get the whole word, must be either "THEN " or "GOTO "
   126 000009E9 3D5448454E          <1>     cmp eax, "THEN"
   127 000009EE 7442                <1>     je .hi0   ; Go past THEN, to process statement
   128 000009F0 3D474F544F          <1>     cmp eax, "GOTO"
   129 000009F5 7569                <1>     jne .error
   130 000009F7 803E20              <1>     cmp byte [rsi], " " ;is the next char a space?
   131 000009FA 7564                <1>     jne .error
   132 000009FC E957FFFFFF          <1>     jmp goto
   133                              <1> .candidatethen:
   134 00000A01 803E20              <1>     cmp byte [rsi], " " ;is the next char a space?
   135 00000A04 742C                <1>     je .hi0
   136 00000A06 EB58                <1>     jmp short .error
   137                              <1> .else:
   138                              <1>     ;Search for the ELSE, it has to be preceeded with a space and have a space after
   139 00000A08 803E00              <1>     cmp byte [rsi], 0 ;Are we at end of line?
   140 00000A0B 7452                <1>     je .noElse
   141 00000A0D 803E3A              <1>     cmp byte [rsi], ":" ;Are we at end line segment?
   142 00000A10 744D                <1>     je .noElse
   143 00000A12 48FFC6              <1>     inc rsi
   144 00000A15 813E20454C53        <1>     cmp dword [rsi], " ELS"
   145 00000A1B 75EB                <1>     jne .else
   146 00000A1D 4881C604000000      <1>     add rsi, 4  ;Skip those four chars, we have a candidate
   147 00000A24 66813E4520          <1>     cmp word [rsi], "E "
   148 00000A29 75DD                <1>     jne .else   ;If not equal failed to match pattern
   149 00000A2B 4881C602000000      <1>     add rsi, 2  ;Else its the ELSE we are looking for, move rsi to first space past it
   150                              <1> .hi0:
   151                              <1> ;Now we do the branchy stuff, branch to the same line just further down
   152 00000A32 668B15(F40E0000)    <1>     mov dx, word [currentLine]
   153 00000A39 E87F010000          <1>     call searchForProgramLine
   154 00000A3E 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Does the line not exist somehow?
   155 00000A45 7419                <1>     je .error
   156 00000A47 4889F0              <1>     mov rax, rsi    ;Save pointer in rax
   157 00000A4A 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine] ;Get the difference in chars
   158 00000A4E 4829C8              <1>     sub rax, rcx
   159 00000A51 24FF                <1>     and al, -1  ;Save only bottom byte as the difference should be less than 255
   160 00000A53 C1E010              <1>     shl eax, 10h ;Shift to byte 3
   161 00000A56 09C2                <1>     or edx, eax ;Save the offset into byte 3
   162 00000A58 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   163                              <1> .noElse:
   164                              <1> ;If no else, simply return
   165 00000A5F C3                  <1>     ret
   166                              <1> .error:
   167 00000A60 488D1D99030000      <1>     lea rbx, syntax
   168 00000A67 E95DF6FFFF          <1>     jmp criticalError
    16                                  %include "MATH.ASM"
    17                              <1> decimalToHex:
    18                              <1>     ;Takes ASCII encoded decimal number and 
    19                              <1>     ;returns its hex value
    20                              <1>     ;Input: rsi = Start of numeric ONLY string
    21                              <1>     ;Output: rax = Number
    22                              <1>     ;        rsi = First non-numeric char past end of number
    23 00000A6C 53                  <1>     push rbx
    24 00000A6D 51                  <1>     push rcx
    25 00000A6E 52                  <1>     push rdx
    26 00000A6F 31DB                <1>     xor ebx, ebx    ;Start with rbx = 0
    27                              <1> .processDigits:    
    28 00000A71 AC                  <1>     lodsb           ;Get the first digit in al
    29 00000A72 2C30                <1>     sub al, 30h     ;Reduce to value
    30 00000A74 31D2                <1>     xor edx, edx    ;Clear for multiplication
    31 00000A76 3C0A                <1>     cmp al, 10      ;Digit valid? Propagte CF
    32 00000A78 480FB6C0            <1>     movzx rax, al   ;Clear upper bits
    33 00000A7C 4893                <1>     xchg rax, rbx
    34 00000A7E 730D                <1>     jnc .exit       ;Digit was not valid, exit
    35 00000A80 B90A000000          <1>     mov ecx, 10     ;Multiply result by 10
    36 00000A85 48F7E1              <1>     mul rcx
    37 00000A88 4801C3              <1>     add rbx, rax    ;Add the new digits
    38 00000A8B EBE4                <1>     jmp short .processDigits
    39                              <1> .exit:
    40 00000A8D 48FFCE              <1>     dec rsi         ;rsi points to first non-digit
    41 00000A90 5A                  <1>     pop rdx
    42 00000A91 59                  <1>     pop rcx
    43 00000A92 5B                  <1>     pop rbx
    44 00000A93 C3                  <1>     ret
    45                              <1> 
    46                              <1> printdecimalword:
    47                              <1> ;Takes the qword in rax and prints its decimal representation
    48 00000A94 50                  <1>     push rax
    49 00000A95 53                  <1>     push rbx
    50 00000A96 488D3D(980E0000)    <1>     lea rdi, digitString   ;Use the default line as a buffer
    51                              <1>     ;Sanitise the digit buffer
    52 00000A9D 57                  <1>     push rdi
    53 00000A9E 51                  <1>     push rcx
    54 00000A9F 50                  <1>     push rax
    55 00000AA0 31C0                <1>     xor eax, eax
    56 00000AA2 B906000000          <1>     mov ecx, digitStringLen/8
    57 00000AA7 F348AB              <1>     rep stosq
    58 00000AAA 58                  <1>     pop rax
    59 00000AAB 59                  <1>     pop rcx
    60 00000AAC 5F                  <1>     pop rdi
    61                              <1> 
    62 00000AAD 4881C72F000000      <1>     add rdi, digitStringLen - 1 ;Go to the end of the buffer
    63 00000AB4 FD                  <1>     std ;Reverse string ops
    64 00000AB5 50                  <1>     push rax
    65 00000AB6 30C0                <1>     xor al, al  ;Place delimiter
    66 00000AB8 AA                  <1>     stosb
    67 00000AB9 58                  <1>     pop rax
    68 00000ABA 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
    68 00000AC3 00                  <1>
    69                              <1> .pdw0:
    70 00000AC4 31D2                <1>     xor edx, edx
    71 00000AC6 48F7F3              <1>     div rbx
    72 00000AC9 80C230              <1>     add dl, '0'
    73 00000ACC 80FA39              <1>     cmp dl, '9'
    74 00000ACF 7603                <1>     jbe .pdw1
    75 00000AD1 80C207              <1>     add dl, 'A'-'0'-10
    76                              <1> .pdw1:
    77 00000AD4 50                  <1>     push rax
    78 00000AD5 88D0                <1>     mov al, dl    ;Save remainder byte
    79 00000AD7 AA                  <1>     stosb   ;Store the byte and add one to rdi
    80 00000AD8 58                  <1>     pop rax
    81 00000AD9 4885C0              <1>     test rax, rax
    82 00000ADC 75E6                <1>     jnz .pdw0
    83 00000ADE FC                  <1>     cld ;Return string ops to normal
    84 00000ADF 48FFC7              <1>     inc rdi ;Skip the extra 0 that was inserted
    85 00000AE2 4889FD              <1>     mov rbp, rdi    ;Point rbp to the head of the string
    86 00000AE5 E8B6F6FFFF          <1>     call ttyOutString
    87 00000AEA 5B                  <1>     pop rbx
    88 00000AEB 58                  <1>     pop rax
    89 00000AEC C3                  <1>     ret
    17                                  %include "MEMORY.ASM"
    18                              <1> allocateBlock:
    19                              <1> ;Allocates a program memory block, the caller then fixes the specifics
    20                              <1> ;Output: rbx = Pointer to generic memory block, or -1 if memory full
    21                              <1> ;       Caller needs to fill in, block size, block type and specifics
    22 00000AED 52                  <1>     push rdx
    23                              <1> .ab0:
    24 00000AEE 488B1D(E20E0000)    <1>     mov rbx, qword [lastBlock]    ;Get the last block in the chain
    25 00000AF5 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;First allocation?
    26 00000AFC 742F                <1>     je .firstAllocation
    27 00000AFE C60374              <1>     mov byte [rbx + memBlock.bSignature], notLastMemBlock ;Make it not be the last
    28 00000B01 480FB75301          <1>     movzx rdx, word [rbx + memBlock.wBlockSize] ;Goto end of block
    29 00000B06 4801D3              <1>     add rbx, rdx    ;Move rbx over the previous last block
    30 00000B09 488B15(D00E0000)    <1>     mov rdx, qword [maxMemAddr]
    31 00000B10 4839D3              <1>     cmp rbx, rdx ;rbx above maxmemory? 
    32 00000B13 770C                <1>     ja .memoryFull
    33 00000B15 48891D(E20E0000)    <1>     mov qword [lastBlock], rbx  ;New last block
    34 00000B1C C60372              <1>     mov byte [rbx + memBlock.bSignature], lastMemBlock
    35                              <1> .exit:
    36 00000B1F 5A                  <1>     pop rdx
    37 00000B20 C3                  <1>     ret
    38                              <1> .memoryFull:
    39 00000B21 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    39 00000B2A FF                  <1>
    40 00000B2B EBF2                <1>     jmp short .exit
    41                              <1> .firstAllocation:
    42                              <1> ;Deal with first allocation
    43 00000B2D 488D1D(00000000)    <1>     lea rbx, section.programArea.vstart   ;Get this as the head of the chain
    44 00000B34 48891D(E20E0000)    <1>     mov qword [lastBlock], rbx
    45 00000B3B 48891D(DA0E0000)    <1>     mov qword [mcbChain], rbx
    46 00000B42 C60372              <1>     mov byte [rbx + memBlock.bSignature], lastMemBlock
    47 00000B45 66C743010000        <1>     mov word [rbx + memBlock.wBlockSize], 0 ;Dummy block
    48 00000B4B EBD2                <1>     jmp short .exit
    49                              <1> 
    50                              <1> findVariable:
    51                              <1> ;Input: rsi = Source string for variable name
    52                              <1> ;       ecx = Length of variable name (max 40)
    53                              <1> ;Output: rbx = ptr to varBlock/strBlock OR -1 if doesnt exist
    54 00000B4D 50                  <1>     push rax
    55 00000B4E 51                  <1>     push rcx
    56 00000B4F 52                  <1>     push rdx
    57 00000B50 56                  <1>     push rsi
    58 00000B51 57                  <1>     push rdi
    59 00000B52 488B1D(DA0E0000)    <1>     mov rbx, qword [mcbChain]   ;Start of the chain
    60 00000B59 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Chain empty?
    61 00000B60 7446                <1>     je .exit
    62                              <1> .search:
    63 00000B62 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
    64 00000B66 7415                <1>     je .varFound    ;We found a numerical variable
    65 00000B68 807B0302            <1>     cmp byte [rbx + memBlock.bBlockType], datBlockType
    66 00000B6C 741E                <1>     je .datFound    ;We found a string variable
    67                              <1> .invalid:
    68                              <1>     ;Are we at the end of the chain?
    69 00000B6E 803B72              <1>     cmp byte [rbx + memBlock.bSignature], lastMemBlock
    70 00000B71 742B                <1>     je .varNotFound ;At the end of the chain and var not found? Error!
    71 00000B73 480FB75301          <1>     movzx rdx, word [rbx + memBlock.wBlockSize]
    72 00000B78 4801D3              <1>     add rbx, rdx    ;Goto next block
    73 00000B7B EBE5                <1>     jmp short .search
    74                              <1> .varFound:
    75                              <1>     ;Compare to see the var is our var
    76 00000B7D 488D7B0C            <1>     lea rdi, qword [rbx + varBlock.sVarName] ;point rdi to the name string
    77 00000B81 51                  <1>     push rcx
    78 00000B82 56                  <1>     push rsi
    79 00000B83 F3A6                <1>     repe cmpsb  ;Compare one byte at a time
    80 00000B85 5E                  <1>     pop rsi
    81 00000B86 59                  <1>     pop rcx
    82 00000B87 75E5                <1>     jne .invalid
    83 00000B89 F8                  <1>     clc
    84 00000B8A EB1C                <1>     jmp short .exit
    85                              <1> .datFound:
    86 00000B8C 488DBB04010000      <1>     lea rdi, qword [rbx + stringBlock.sVarName] ;point rdi to the name string
    87 00000B93 51                  <1>     push rcx
    88 00000B94 56                  <1>     push rsi
    89 00000B95 F3A6                <1>     repe cmpsb  ;Compare one byte at a time
    90 00000B97 5E                  <1>     pop rsi
    91 00000B98 59                  <1>     pop rcx
    92 00000B99 75D3                <1>     jne .invalid
    93 00000B9B F8                  <1>     clc
    94 00000B9C EB0A                <1>     jmp short .exit
    95                              <1> .varNotFound:
    96 00000B9E 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    96 00000BA7 FF                  <1>
    97                              <1> .exit:
    98 00000BA8 5F                  <1>     pop rdi
    99 00000BA9 5E                  <1>     pop rsi
   100 00000BAA 5A                  <1>     pop rdx
   101 00000BAB 59                  <1>     pop rcx
   102 00000BAC 58                  <1>     pop rax
   103 00000BAD C3                  <1>     ret
   104                              <1> 
   105                              <1> findFirstLine:
   106                              <1> ;Output: rbx = Pointer to the first program block
   107                              <1> ;         dx = Number of the first line
   108 00000BAE 488B1D(EA0E0000)    <1>     mov rbx, qword [firstLinPtr]
   109 00000BB5 668B15(F20E0000)    <1>     mov dx, word [firstLinNum]
   110 00000BBC C3                  <1>     ret
   111                              <1> 
   112                              <1> ;FIRST SEARCH FOR A LINE NUMBER BEFORE INSERTING IT INTO THE CHAIN
   113                              <1> ;IF THE LINE NUMBER IS FOUND, REPLACE THE COMMAND STRING
   114                              <1> 
   115                              <1> searchForProgramLine:
   116                              <1> ;Walk the program chain looking to see if a line number exists. If it does,
   117                              <1> ; return a pointer to the block in rbx. If it doesn't, return -1 in rbx
   118                              <1> ;Input: dx = Line number
   119                              <1> ;Output: rbx = Pointer to program block 
   120 00000BBD 488B1D(EA0E0000)    <1>     mov rbx, qword [firstLinPtr]
   121 00000BC4 4881FBFFFFFFFF      <1>     cmp rbx, -1
   122 00000BCB 7413                <1>     je .lineFound
   123                              <1> .search:
   124 00000BCD 66395304            <1>     cmp word [rbx + progLineBlock.wLineNum], dx ;Equal line numbers?
   125 00000BD1 740D                <1>     je .lineFound
   126 00000BD3 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr]   ;Walk chain
   127 00000BD7 4881FBFFFFFFFF      <1>     cmp rbx, -1
   128 00000BDE 75ED                <1>     jne .search ;Not -1? Keep searching
   129                              <1> .lineFound:
   130 00000BE0 C3                  <1>     ret
   131                              <1> 
   132                              <1> insertProgramLine:
   133                              <1> ;Walk the program chain looking for the biggest number less than our
   134                              <1> ; line number. Once we have reached the end of the chain, insert the block there, or
   135                              <1> ; if there is no block, then we are the last in the chain
   136                              <1> ;Input: rsi = New Program Block to be added
   137 00000BE1 50                  <1>     push rax
   138 00000BE2 53                  <1>     push rbx
   139 00000BE3 51                  <1>     push rcx
   140 00000BE4 52                  <1>     push rdx
   141 00000BE5 57                  <1>     push rdi
   142 00000BE6 E8C3FFFFFF          <1>     call findFirstLine  ;Get start of program in rbx and line number in dx
   143                              <1> ;First check if we should be the first line
   144                              <1> 
   145 00000BEB 668B4E04            <1>     mov cx, word [rsi + progLineBlock.wLineNum] ;Save line number in cx
   146 00000BEF 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Empty program marker
   147 00000BF6 744D                <1>     je .first
   148 00000BF8 6639D1              <1>     cmp cx, dx  ;If cx is below dx, then our entry is first
   149 00000BFB 7248                <1>     jb .first    
   150                              <1> ;Use ax as the best line number and rdi as the pointer to that block
   151 00000BFD 66B8FFFF            <1>     mov ax, -1  ;Marker to indicate no insertion
   152                              <1> .walk:
   153 00000C01 48817B06FFFFFFFF    <1>     cmp qword [rbx + progLineBlock.qPtr], -1    ;We are at the end
   154 00000C09 7419                <1>     je .sort
   155 00000C0B 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Walk chain in rbx
   156 00000C0F 663B4B04            <1>     cmp cx, word [rbx + progLineBlock.wLineNum]
   157 00000C13 77EC                <1>     ja .walk    ;If line number is above my line number, keep walking
   158                              <1> .candidate:
   159                              <1>     ;If the new line number is below the old line number, reject
   160 00000C15 663B4304            <1>     cmp ax, word [rbx + progLineBlock.wLineNum]
   161 00000C19 72E6                <1>     jb .walk
   162 00000C1B 4889DF              <1>     mov rdi, rbx
   163 00000C1E 668B4304            <1>     mov ax, word [rbx + progLineBlock.wLineNum]
   164 00000C22 EBDD                <1>     jmp short .walk
   165                              <1> .sort:
   166 00000C24 66FFC0              <1>     inc ax  ;If no candidates, exit
   167 00000C27 740E                <1>     jz .skipLink
   168                              <1>     ;rdi points to the previous line to link to
   169 00000C29 488B5706            <1>     mov rdx, qword [rdi + progLineBlock.qPtr]
   170 00000C2D 48897706            <1>     mov qword [rdi + progLineBlock.qPtr], rsi   ;Insert self here
   171 00000C31 48895606            <1>     mov qword [rsi + progLineBlock.qPtr], rdx   ;Link new block to next line
   172 00000C35 EB20                <1>     jmp short .exit
   173                              <1> .skipLink:
   174 00000C37 48897306            <1>     mov qword [rbx + progLineBlock.qPtr], rsi   ;Link rsi to last element in list
   175 00000C3B 48C74606FFFFFFFF    <1>     mov qword [rsi + progLineBlock.qPtr], -1    ;End of chain marker
   176 00000C43 EB12                <1>     jmp short .exit
   177                              <1> .first:
   178 00000C45 488935(EA0E0000)    <1>     mov qword [firstLinPtr], rsi
   179 00000C4C 66890D(F20E0000)    <1>     mov word [firstLinNum], cx
   180 00000C53 48895E06            <1>     mov qword [rsi + progLineBlock.qPtr], rbx   ;Put the old first line as second line
   181                              <1> .exit:
   182 00000C57 5F                  <1>     pop rdi
   183 00000C58 5A                  <1>     pop rdx
   184 00000C59 59                  <1>     pop rcx
   185 00000C5A 5B                  <1>     pop rbx
   186 00000C5B 58                  <1>     pop rax
   187 00000C5C C3                  <1>     ret
   188                              <1> 
   189                              <1> makeEditInteger:
   190                              <1> ;Will make a variable if it is new name, or edit the value if it already exists
   191                              <1> ;Input: rsi = Var name
   192                              <1> ;       (e)cx = Length of varname, max 40 chars
   193                              <1> ;       rax = Value
   194 00000C5D E8EBFEFFFF          <1>     call findVariable   ;rbx returned with var block or -1
   195 00000C62 4881FBFFFFFFFF      <1>     cmp rbx, -1
   196 00000C69 7405                <1>     je .newVar
   197 00000C6B 48894304            <1>     mov qword [rbx + varBlock.qValue], rax
   198 00000C6F C3                  <1>     ret
   199                              <1> .newVar:
   200 00000C70 E878FEFFFF          <1>     call allocateBlock
   201 00000C75 4881FBFFFFFFFF      <1>     cmp rbx, -1
   202 00000C7C 741E                <1>     je .error
   203 00000C7E 48894304            <1>     mov qword [rbx + varBlock.qValue], rax  ;Save value
   204 00000C82 66894B01            <1>     mov word [rbx + varBlock.wBlockSize], cx    ;Save length of name
   205 00000C86 668143010C00        <1>     add word [rbx + varBlock.wBlockSize], varBlock_size ;Add full block size
   206 00000C8C C6430301            <1>     mov byte [rbx + varBlock.bBlockType], varBlockType  ;Block type
   207 00000C90 57                  <1>     push rdi
   208 00000C91 488D7B0C            <1>     lea rdi, qword [rbx + varBlock.sVarName]
   209 00000C95 E87B000000          <1>     call strcpy ;Copy the string name into block buffer
   210 00000C9A 5F                  <1>     pop rdi
   211 00000C9B C3                  <1>     ret
   212                              <1> .error:
   213 00000C9C 488D2D4D010000      <1>     lea rbp, noMem
   214 00000CA3 E921F4FFFF          <1>     jmp criticalError
   215                              <1> makeEditString:
   216                              <1> ;Will make a string if it is new name, or replace the string. Strings are null termin
   217                              <1> ;Input: rsi = Var name
   218                              <1> ;       ecx = Length of varname, max 40 chars
   219                              <1> ;       rdx = Ptr to string itself
   220 00000CA8 57                  <1>     push rdi
   221 00000CA9 56                  <1>     push rsi
   222 00000CAA 50                  <1>     push rax
   223 00000CAB 53                  <1>     push rbx
   224 00000CAC E89CFEFFFF          <1>     call findVariable   ;rbx returned with string block or -1
   225 00000CB1 4881FBFFFFFFFF      <1>     cmp rbx, -1
   226 00000CB8 7528                <1>     jne .strcopy
   227 00000CBA E82EFEFFFF          <1>     call allocateBlock
   228 00000CBF 4881FBFFFFFFFF      <1>     cmp rbx, -1
   229 00000CC6 742E                <1>     je .error
   230 00000CC8 66894B01            <1>     mov word [rbx + stringBlock.wBlockSize], cx    ;Save length of name
   231 00000CCC 668143010401        <1>     add word [rbx + stringBlock.wBlockSize], stringBlock_size ;Add full block size
   232 00000CD2 C6430302            <1>     mov byte [rbx + stringBlock.bBlockType], datBlockType  ;Block type
   233 00000CD6 488DBB04010000      <1>     lea rdi, qword [rbx + stringBlock.sVarName]
   234 00000CDD E833000000          <1>     call strcpy ;Copy the string name into block buffer
   235                              <1> .strcopy:
   236 00000CE2 488D7B04            <1>     lea rdi, qword [rbx + stringBlock.string]   ;point to string space
   237 00000CE6 4889D6              <1>     mov rsi, rdx    ;Point rsi to the string itself
   238 00000CE9 E814000000          <1>     call terminatedstrcpy
   239 00000CEE 30C0                <1>     xor al, al
   240 00000CF0 AA                  <1>     stosb   ;Store the null delimiter
   241 00000CF1 5B                  <1>     pop rbx
   242 00000CF2 58                  <1>     pop rax
   243 00000CF3 5E                  <1>     pop rsi
   244 00000CF4 5F                  <1>     pop rdi
   245 00000CF5 C3                  <1>     ret
   246                              <1> .error:
   247 00000CF6 488D2DF3000000      <1>     lea rbp, noMem
   248 00000CFD E9C7F3FFFF          <1>     jmp criticalError
   249                              <1> ;------------------------------------------------:
   250                              <1> ;  The below are misc memory related functions   :
   251                              <1> ;------------------------------------------------:
   252                              <1> terminatedstrcpy:
   253                              <1> ;rdi = Destination String
   254                              <1> ;rsi = Source String
   255                              <1> ;Copy a terminated string
   256 00000D02 50                  <1>     push rax
   257                              <1> .copy:
   258 00000D03 AC                  <1>     lodsb   ;Get char in al and inc rsi
   259 00000D04 3C00                <1>     cmp al, 0
   260 00000D06 740B                <1>     je .exit
   261 00000D08 3C3A                <1>     cmp al, ":"
   262 00000D0A 7407                <1>     je .exit
   263 00000D0C 3C22                <1>     cmp al, 22h ;Speechmark
   264 00000D0E 7403                <1>     je .exit
   265 00000D10 AA                  <1>     stosb   ;Save char from al and inc rdi
   266 00000D11 EBF0                <1>     jmp short .copy 
   267                              <1> .exit:
   268 00000D13 58                  <1>     pop rax
   269 00000D14 C3                  <1>     ret
   270                              <1> strcpy:
   271                              <1> ;rdi = Destination string
   272                              <1> ;rsi = Source string
   273                              <1> ;rcx = Number of Chars to copy
   274 00000D15 57                  <1>     push rdi
   275 00000D16 56                  <1>     push rsi
   276 00000D17 51                  <1>     push rcx
   277 00000D18 F3A4                <1>     rep movsb
   278 00000D1A 59                  <1>     pop rcx
   279 00000D1B 5E                  <1>     pop rsi
   280 00000D1C 5F                  <1>     pop rdi
   281 00000D1D C3                  <1>     ret
   282                              <1> strlen:
   283                              <1> ;Input: rsi = String start
   284                              <1> ;Output: rsi = String start
   285                              <1> ;        ecx = String length, inclusive of NULL char
   286 00000D1E 50                  <1>     push rax
   287 00000D1F 56                  <1>     push rsi
   288 00000D20 31C9                <1>     xor ecx, ecx    ;Clear counter
   289                              <1> .search:
   290 00000D22 AC                  <1>     lodsb
   291 00000D23 FFC1                <1>     inc ecx
   292 00000D25 84C0                <1>     test al, al ;Is this a null char?
   293 00000D27 75F9                <1>     jnz .search ;Null not found
   294                              <1> .exit:
   295 00000D29 5E                  <1>     pop rsi
   296 00000D2A 58                  <1>     pop rax
   297 00000D2B C3                  <1>     ret
   298                              <1> 
   299                              <1> memoryDetection:
   300 00000D2C B820E80000          <1>     mov eax, 0E820h
   301 00000D31 CD35                <1>     int 35h     ;rax = ptr to start, rsi = ptr to data table, each entry 24 bytes
   302 00000D33 EB07                <1>     jmp short .fsa1
   303                              <1> .findStartAddr:
   304 00000D35 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   305                              <1> .fsa1:
   306 00000D3C 6685C9              <1>     test cx, cx
   307 00000D3F 742C                <1>     jz .worstCase
   308 00000D41 66FFC9              <1>     dec cx
   309 00000D44 488B1E              <1>     mov rbx, qword [rsi]    ;Get the address entry into rbx
   310 00000D47 4839C3              <1>     cmp rbx, rax    
   311 00000D4A 75E9                <1>     jne .findStartAddr
   312 00000D4C 488B4608            <1>     mov rax, qword [rsi + 8] ;Get the number of bytes saved into rax
   313                              <1> 
   314 00000D50 488D15(00000000)    <1>     lea rdx, section.programArea.vstart
   315 00000D57 4829DA              <1>     sub rdx, rbx    ;Get the size of the interpreter and internal data area
   316 00000D5A 4829D0              <1>     sub rax, rdx    ;Remove the number of bytes reserved to the interpreter
   317 00000D5D E832FDFFFF          <1>     call printdecimalword
   318 00000D62 4801C3              <1>     add rbx, rax    ;Add number of bytes to start address
   319 00000D65 48891D(D00E0000)    <1>     mov qword [maxMemAddr], rbx ;Save this address
   320                              <1> .exit:
   321 00000D6C C3                  <1>     ret
   322                              <1> .worstCase:
   323                              <1> ;Assume 2Mb MAX memory, rax has base address
   324 00000D6D 48BB00002000000000- <1>     mov rbx, 200000h    ;2Mb value
   324 00000D76 00                  <1>
   325 00000D77 4829C3              <1>     sub rbx, rax
   326 00000D7A 4889D8              <1>     mov rax, rbx    ;Get value in rax
   327 00000D7D E812FDFFFF          <1>     call printdecimalword
   328 00000D82 48C705(D00E0000)00- <1>     mov qword [maxMemAddr], 200000h
   328 00000D8A 002000              <1>
   329 00000D8D C3                  <1>     ret
   330                              <1> 
    18                                  %include "BASICDAT.ASM"
    19 00000D8E 4F6B0A0D00          <1> prompt  db "Ok",0Ah,0Dh,0
    20 00000D93 5343522036342D4241- <1> mainmsg db "SCR 64-BASIC v0.1",0Ah,0Dh,0
    20 00000D9C 5349432076302E310A- <1>
    20 00000DA5 0D00                <1>
    21 00000DA7 204279746573206672- <1> bytemsg db " Bytes free",0Ah,0Dh,0
    21 00000DB0 65650A0D00          <1>
    22 00000DB5 0A0D00              <1> crlf    db 0Ah,0Dh,0
    23 00000DB8 4572726F720A0D00    <1> errmsg  db "Error",0Ah,0Dh,0
    24 00000DC0 303132333435363738- <1> numbers db "0123456789"
    24 00000DC9 39                  <1>
    25                              <1> ;startVarChars db "ABCDEFGHIJKLMNOPQRSTUVWXYZ" ;Valid starting chars for a var name
    26                              <1> ;numStartVarChars equ $ - startVarChars
    27 00000DCA 414243444546474849- <1> varChrs db "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789%$" ;Valid inner chars for var name
    27 00000DD3 4A4B4C4D4E4F505152- <1>
    27 00000DDC 535455565758595A30- <1>
    27 00000DE5 313233343536373839- <1>
    27 00000DEE 2524                <1>
    28                              <1> numVarChars equ $ - varChrs
    29                              <1> ;% => Integer variable (8 bytes)
    30                              <1> ;! => Single-Precision, Unused and ignored
    31                              <1> ;# => Double-Precision, Unused and ignored
    32                              <1> ;$ => String variable
    33                              <1> 
    34                              <1> ;Error Messages
    35 00000DF0 4F7574206F66206D65- <1> noMem   db "Out of memory",0Ah,0Dh,0
    35 00000DF9 6D6F72790A0D00      <1>
    36 00000E00 53796E746178206572- <1> syntax  db "Syntax error",0Ah,0Dh,0
    36 00000E09 726F720A0D00        <1>
    37 00000E0F 54797065206D69736D- <1> typeError   db "Type mismatch",0Ah,0Dh,0
    37 00000E18 617463680A0D00      <1>
    38 00000E1F 556E646566696E6564- <1> lineNoXist  db "Undefined line number",0Ah,0Dh,0
    38 00000E28 206C696E65206E756D- <1>
    38 00000E31 6265720A0D00        <1>
    39 00000E37 427265616B20696E20- <1> breakmsg db "Break in ",0
    39 00000E40 00                  <1>
    40 00000E41 537461636B206F7665- <1> stkOvflw db "Stack overflow",0Ah,0Dh,0
    40 00000E4A 72666C6F770A0D00    <1>
    41                              <1> 
    42 00000E52 5748494C4520776974- <1> nowend   db "WHILE without WEND", 0Ah, 0Dh, 0
    42 00000E5B 686F75742057454E44- <1>
    42 00000E64 0A0D00              <1>
    43 00000E67 57454E442077697468- <1> noWhile  db "WEND without WHILE", 0Ah, 0Dh, 0
    43 00000E70 6F7574205748494C45- <1>
    43 00000E79 0A0D00              <1>
    44 00000E7C 4E4558542077697468- <1> noFor    db "NEXT without FOR", 0Ah, 0Dh, 0
    44 00000E85 6F757420464F520A0D- <1>
    44 00000E8E 00                  <1>
    45 00000E8F 464F5220776974686F- <1> noNext   db "FOR without NEXT", 0Ah, 0Dh, 0
    45 00000E98 7574204E4558540A0D- <1>
    45 00000EA1 00                  <1>
    46 00000EA2 52455455524E207769- <1> noReturn db "RETURN without GOSUB", 0Ah, 0Dh, 0
    46 00000EAB 74686F757420474F53- <1>
    46 00000EB4 55420A0D00          <1>
    47 00000EB9 556E7072696E746162- <1> errorMsg db "Unprintable error", 0Ah, 0Dh, 0
    47 00000EC2 6C65206572726F720A- <1>
    47 00000ECB 0D00                <1>
    19                                  Segment programArea follows=resSeg align=1 vfollows=resSeg valign=1
    20                                  ENDOFPROGRAM:

     1                                      [map all BASIC.MAP]
     2                                      [DEFAULT REL]
     3                                      BITS 64
     4                                  %include "MEM.INC"
     5                              <1> 
     6                              <1> progLineBlockType   equ 0   ;Program Line
     7                              <1> varBlockType        equ 1   ;Variable block
     8                              <1> datBlockType        equ 2   ;Data block (i.e. a string block)
     9                              <1> 
    10                              <1> notLastMemBlock equ "t" ;Used for blocks that are not the last block
    11                              <1> lastMemBlock    equ "r" ;Used by the last block to indicate end of chain
    12                              <1> 
    13                              <1> %macro memBlockM 0 ;Memory block Macro
    14                              <1>     .bSignature resb 1      ;Valid Signature
    15                              <1>     .wBlockSize resw 1      ;Total block size in bytes
    16                              <1>     .bBlockType resb 1      ;Block type, program line, variable or string
    17                              <1> %endmacro
    18                              <1> 
    19                              <1> struc memBlock
    20                              <1>     memBlockM
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    21                              <1> endstruc
    22                              <1> 
    23                              <1> struc progLineBlock
    24                              <1>     memBlockM               ;Common memory block header
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    25 00000004 ????                <1>     .wLineNum   resw 1      ;Line number, up to 65535
    26 00000006 ????????????????    <1>     .qPtr       resq 1      ;Pointer to the next line, or -1 if last line
    27 0000000E <res 100h>          <1>     .sLine      resb maxLineLen  ;Maximum length 255, keep null char but 
    28                              <1>     ;                             NOT LINE NUMBER OR PRECEEDING SPACES
    29                              <1> endstruc
    30                              <1> 
    31                              <1> struc varBlock
    32                              <1>     memBlockM               ;Common memory block header
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    33 00000004 ????????????????    <1>     .qValue     resq 1      ;One value qword
    34                              <1>     .sVarName:              ;Up to 40 chars for the var name
    35                              <1> endstruc
    36                              <1> 
    37                              <1> struc stringBlock
    38                              <1>     memBlockM
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    39 00000004 <res 100h>          <1>     .string     resb maxLineLen    ;Strings allocate 256 chars
    40                              <1>     .sVarName:              ;Up to 40 chars for the var name
    41                              <1> endstruc
    42                              <1> 
    43                              <1> ;Variable equates
    44                              <1> intEquate  equ 0
    45                              <1> strEquate  equ 1
    46                              <1> 
    47                              <1> ;Status Equates
    48                              <1> breakBit   equ 1    ;Set means on
    49                              <1> traceBit   equ 2    ;Set means TRON, Clear means TROFF
     5                                  Segment .text align=1
     6                                  %include "RELOC.ASM"
     7 00000000 55AA                <1>     dw 0AA55h 
     8                              <1> ;First verify I have Enough RAM for my program and then run
     9 00000002 B801E80000          <1>     mov eax, 0E801h ;Get low memory count in ax
    10 00000007 CD35                <1>     int 35h
    11 00000009 663D0008            <1>     cmp ax, 200000h/400h ;Divide 2Mb into 1Kb chunks.
    12 0000000D 722A                <1>     jb bad
    13 0000000F B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    14 00000014 0F32                <1>     rdmsr
    15 00000016 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    16 00000018 48C1E720            <1>     shl rdi, 20h        ;Shift high
    17 0000001C 89C7                <1>     mov edi, eax        ;Get the low dword in
    18 0000001E 4889F8              <1>     mov rax, rdi
    19 00000021 488D35(00000000)    <1>     lea rsi, section.resSeg.start
    20 00000028 4881C7[26110000]    <1>     add rdi, bssLen
    21 0000002F B900100000          <1>     mov ecx, 1000h
    22 00000034 F348A5              <1>     rep movsq
    23 00000037 FFE0                <1>     jmp qword rax
    24                              <1> bad:
    25 00000039 488D2D0D000000      <1>     lea rbp, badmsg
    26 00000040 B804130000          <1>     mov eax, 1304h
    27 00000045 CD30                <1>     int 30h
    28 00000047 30E4                <1>     xor ah, ah
    29 00000049 CD36                <1>     int 36h
    30 0000004B CD38                <1>     int 38h
    31 0000004D 4E6F7420456E6F7567- <1> badmsg: db "Not Enough Memory. Press any key to enter SYSDEBUG...",0
    31 00000056 68204D656D6F72792E- <1>
    31 0000005F 20507265737320616E- <1>
    31 00000068 79206B657920746F20- <1>
    31 00000071 656E74657220535953- <1>
    31 0000007A 44454255472E2E2E00  <1>
     7                                  Segment dSeg nobits align=1 start=0
     8                                  %include "BSS.ASM"
     9 00000000 <res FC0h>          <1> stack       resq 200h - 8  ;Save 4Kb stack space
    10 00000FC0 ????????????????    <1> stacktop    resq 1
    11                              <1> 
    12                              <1> maxLineLen  equ 256
    13 00000FC8 <res 100h>          <1> inString    resb maxLineLen         ;256 character input string
    14                              <1> 
    15                              <1> ;This string is used for printing long numbers and saving
    16                              <1> ; the variable names for string comparisons
    17                              <1> digitStringLen  equ 48
    18 000010C8 <res 30h>           <1> digitString resb digitStringLen     
    19                              <1> 
    20 000010F8 ????????????????    <1> minMemAddr  resq 1  ;Pointer from where to start allocating memory blocks
    21 00001100 ????????????????    <1> maxMemAddr  resq 1  ;Pointer to the byte past which we cannot allocate anything
    22                              <1> ;==============================================================================
    23                              <1> ;This is the SDA for each program and must be included in the program area
    24                              <1> ; once we add the ability to save the program to disk.
    25                              <1> ;==============================================================================
    26                              <1> 
    27                              <1> ;void* mcbChain, lastBlock, firstLinPtr = -1 => New program, empty entries
    28                              <1> 
    29 00001108 ??                  <1> strLen      resb 1  ;Counter for number of chars entered in string
    30 00001109 ??                  <1> stateByte   resb 1  ;Bit 0 => Break Set, stop processing after end of current line
    31 0000110A ????????????????    <1> mcbChain    resq 1  ;Pointer to the start of the chain
    32 00001112 ????????????????    <1> lastBlock   resq 1  ;Pointer to the last block
    33 0000111A ????????????????    <1> firstLinPtr resq 1  ;Pointer to the programs' first line 
    34 00001122 ????                <1> firstLinNum resw 1  ;Line number of the first line of the program
    35 00001124 ????                <1> currentLine resw 1  ;Currently being executed line number
    36                              <1> 
    37                              <1> bssLen: ;Needed to compute the resident portion load location
     9                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1
    10                                  %include "MAIN.ASM"
    11                              <1> start:
    12 00000000 B801C50000          <1>     mov eax, 0C501h
    13 00000005 CD35                <1>     int 35h         ;Connect the debugger
    14 00000007 E893010000          <1>     call ttyClear   ;Clear the teletype
    15                              <1>     ;Set the CtrlBreak Handler
    16 0000000C 488D3DB9000000      <1>     lea rdi, ctrlBreakHandler
    17 00000013 B03B                <1>     mov al, 3Bh
    18 00000015 E8BB000000          <1>     call setHandler
    19                              <1> 
    20                              <1>     ;Memory stuff
    21 0000001A 488D2D4B0B0000      <1>     lea rbp, mainmsg
    22 00000021 E86C010000          <1>     call ttyOutString
    23 00000026 E8DA0A0000          <1>     call memoryDetection
    24 0000002B 488D2D4E0B0000      <1>     lea rbp, bytemsg
    25 00000032 E85B010000          <1>     call ttyOutString
    26 00000037 E879050000          <1>     call newProgram         ;Use this to reset program pointers
    27                              <1> mainLoop:
    28 0000003C FC                  <1>     cld                 ;Set default string op direction
    29 0000003D 488D25(C00F0000)    <1>     lea rsp, stacktop    ;Reinitialize stack pointer
    30 00000044 488D05F1FFFFFF      <1>     lea rax, mainLoop
    31 0000004B 8025(09110000)FE    <1>     and byte [stateByte], 0FEh  ;Clear the break bit
    32 00000052 50                  <1>     push rax    ;Save address on stack
    33 00000053 488D2D0D0B0000      <1>     lea rbp, prompt
    34 0000005A E833010000          <1>     call ttyOutString
    35                              <1> .ml0:
    36                              <1> ;This section will execute an input line if it is an interactive expression
    37                              <1> ; or store it in the program if it has a line number.
    38                              <1> ;It will keep accepting lines until a line is entered without a line number
    39 0000005F E891000000          <1>     call getLineInput
    40 00000064 E8DC070000          <1>     call decimalToHex   ;Check to see if we have a valid line number
    41 00000069 6685C0              <1>     test ax, ax
    42 0000006C 7505                <1>     jnz .saveLine
    43                              <1> ;Here we execute the line
    44 0000006E E90D020000          <1>     jmp mainProcessing
    45                              <1> .saveLine:
    46                              <1>     ;ax has the line number
    47 00000073 6689C2              <1>     mov dx, ax
    48 00000076 E81B090000          <1>     call searchForProgramLine
    49 0000007B 4881FBFFFFFFFF      <1>     cmp rbx, -1
    50 00000082 751D                <1>     jne .commonProc ;If not equal, line must exist, continue
    51 00000084 E868020000          <1>     call spaceSkip  ;Skip all the prceeding spaces
    52 00000089 803E00              <1>     cmp byte [rsi], 0  ;Is the first non space char the end of the string?
    53 0000008C 742D                <1>     je .lineDoesntExist
    54                              <1>     ;So we have a new line that isn't empty, allocate a new block for this line
    55 0000008E E833080000          <1>     call allocateBlock  ;Return a default block in rbx
    56 00000093 C6430300            <1>     mov byte [rbx + progLineBlock.bBlockType], progLineBlockType
    57 00000097 66894304            <1>     mov word [rbx + progLineBlock.wLineNum], ax
    58 0000009B 66C743010E01        <1>     mov word [rbx + progLineBlock.wBlockSize], progLineBlock_size
    59                              <1> .commonProc:
    60                              <1>     ;If the line already exists, simply override the stored string
    61                              <1>     ;rbx has a pointer to the block
    62 000000A1 E8510A0000          <1>     call strlen ;Get the string length
    63 000000A6 488D7B0E            <1>     lea rdi, qword [rbx + progLineBlock.sLine]  ;Get address here
    64 000000AA E83F0A0000          <1>     call strcpy ;Copy the program string to the program block
    65 000000AF 56                  <1>     push rsi
    66 000000B0 4889DE              <1>     mov rsi, rbx    ;Move the block into rsi
    67 000000B3 E802090000          <1>     call insertProgramLine
    68 000000B8 5E                  <1>     pop rsi
    69 000000B9 EBA4                <1>     jmp short .ml0
    70                              <1> .lineDoesntExist:
    71 000000BB 488D2D360B0000      <1>     lea rbp, lineNoXist
    72                              <1> ;For any error, syntax or otherwise, come here
    73                              <1> criticalError:
    74                              <1> ;Called with rbp pointing at error message
    75 000000C2 E8CB000000          <1>     call ttyOutString
    76 000000C7 E970FFFFFF          <1>     jmp mainLoop    ;Trash input line, restart line input
    77                              <1> 
    78                              <1> ctrlBreakHandler:
    79 000000CC 800D(09110000)01    <1>     or byte [stateByte], 1  ;Set the byte
    80 000000D3 48CF                <1>     iretq
    81                              <1> setHandler:
    82                              <1> ;Called with:
    83                              <1> ;   rdi = Pointer to interrupt handler
    84                              <1> ;   al = Interrupt number
    85 000000D5 89C5                <1>     mov ebp, eax    ;al has interrupt number which we need to save
    86 000000D7 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
    87                              <1> ;First call to get default BIOS segement selector and attribute word
    88 000000DD 88C3                <1>     mov bl, al  ;Set interrupt number 
    89 000000DF B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
    90 000000E4 CD35                <1>     int 35h
    91 000000E6 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
    92 000000E8 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
    93                              <1> ;dx preserves the attribute word
    94 000000EA 4889FB              <1>     mov rbx, rdi  ;Pointer passed in rdi
    95 000000ED B808F00000          <1>     mov eax, 0F008h ;Set descriptor
    96 000000F2 CD35                <1>     int 35h
    97                              <1>     
    98 000000F4 C3                  <1>     ret
    11                                  %include "TTY.ASM"
    12                              <1> getLineInput:
    13                              <1>     ;Sets rsi to the inputstring
    14 000000F5 30E4                <1>     xor ah, ah
    15 000000F7 8825(08110000)      <1>     mov byte [strLen], ah   ;Zero the char counter
    16 000000FD 488D3D(C80F0000)    <1>     lea rdi, inString   ;Move to start of line
    17 00000104 4889FE              <1>     mov rsi, rdi
    18 00000107 57                  <1>     push rdi
    19 00000108 B900010000          <1>     mov ecx, maxLineLen
    20 0000010D 30C0                <1>     xor al, al    ;Ensure the input line is sanitised
    21 0000010F F3AA                <1>     rep stosb
    22 00000111 5F                  <1>     pop rdi
    23                              <1> .getChar:
    24 00000112 E883000000          <1>     call ttyIn
    25 00000117 3C0D                <1>     cmp al, 0Dh ;Line Feed
    26 00000119 7456                <1>     je .gliExit
    27 0000011B 3C08                <1>     cmp al, 08h ;Bspace
    28 0000011D 740F                <1>     je .glibspace
    29 0000011F 803D(08110000)FE    <1>     cmp byte [strLen], -2   ;If at max length (255 chars), simply beep and wait for either bspace or enter
    30 00000126 7459                <1>     je .gliFull 
    31 00000128 84C0                <1>     test al, al
    32 0000012A 7443                <1>     je .gliExtendedChar
    33 0000012C EB29                <1>     jmp short .gliCheckCase
    34                              <1> .glibspace:
    35 0000012E F605(08110000)FF    <1>     test byte [strLen], -1  ;This will only be zero if strLen=0
    36 00000135 74DB                <1>     jz .getChar
    37 00000137 48FFCF              <1>     dec rdi ;Go back by one position in the input line
    38 0000013A FE0D(08110000)      <1>     dec byte [strLen]
    39 00000140 B008                <1>     mov al, 08h
    40 00000142 E846000000          <1>     call ttyOutChar
    41 00000147 B020                <1>     mov al, 20h  
    42 00000149 E83F000000          <1>     call ttyOutChar
    43 0000014E B008                <1>     mov al, 08h
    44 00000150 E838000000          <1>     call ttyOutChar
    45 00000155 EBBB                <1>     jmp short .getChar
    46                              <1> .gliCheckCase:
    47                              <1>     ;al has char
    48 00000157 E831000000          <1>     call ttyOutChar ;Echo the char as is, but store it uppercase
    49 0000015C 3C61                <1>     cmp al, "a"
    50 0000015E 7206                <1>     jb .gliccStore
    51 00000160 3C7A                <1>     cmp al, "z"
    52 00000162 7702                <1>     ja .gliccStore
    53 00000164 2C20                <1>     sub al, 20h
    54                              <1> .gliccStore:
    55 00000166 AA                  <1>     stosb   ;Increment the pointer, add char to buffer
    56 00000167 FE05(08110000)      <1>     inc byte [strLen]   ;Inc char count
    57 0000016D EBA3                <1>     jmp short .getChar
    58                              <1> .gliExtendedChar:
    59                              <1>     ;Currently, extended chars do nothing, 
    60                              <1>     ; eventually add F1-F10 functionality
    61                              <1>     ; and arrow key support
    62 0000016F EBA1                <1>     jmp short .getChar
    63                              <1> .gliExit:
    64 00000171 488D2D160A0000      <1>     lea rbp, crlf
    65 00000178 E815000000          <1>     call ttyOutString
    66 0000017D C60700              <1>     mov byte [rdi], 0   ;Null terminate string here
    67 00000180 C3                  <1>     ret
    68                              <1> .gliFull:
    69 00000181 B007                <1>     mov al, 07h
    70 00000183 E805000000          <1>     call ttyOutChar
    71 00000188 E985FFFFFF          <1>     jmp .getChar
    72                              <1> 
    73                              <1> ttyOutChar:
    74 0000018D B40E                <1>     mov ah, 0Eh
    75 0000018F CD30                <1>     int 30h
    76 00000191 C3                  <1>     ret
    77                              <1> ttyOutString:
    78                              <1> ;Print 0 terminated strings
    79 00000192 B804130000          <1>     mov eax, 1304h
    80 00000197 CD30                <1>     int 30h
    81 00000199 C3                  <1>     ret
    82                              <1> ttyIn:
    83 0000019A 30E4                <1>     xor ah, ah
    84 0000019C CD36                <1>     int 36h
    85 0000019E C3                  <1>     ret
    86                              <1> ttyClear:
    87 0000019F B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
    88 000001A4 CD30                <1>     int 30h
    89 000001A6 B402                <1>     mov ah, 02h
    90 000001A8 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
    91 000001AA 88D7                <1>     mov bh, dl      ;Set cursor for page 0
    92 000001AC CD30                <1>     int 30h
    93 000001AE B707                <1>     mov bh, 07h     ;Grey/Black attribs
    94 000001B0 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
    95 000001B5 CD30                <1>     int 30h
    96 000001B7 C3                  <1>     ret
    12                                  %include "PROCESS.ASM"
    13                              <1> executeExpression:
    14                              <1> ;rsi must point to the start of the portion of the line to execute
    15 000001B8 E834010000          <1>     call spaceSkip  ;Skip any leading spaces
    16 000001BD 803E00              <1>     cmp byte [rsi], 0   ;Null terminated line, empty line?
    17 000001C0 743F                <1>     je .exit
    18                              <1>     ;rsi now points to function
    19 000001C2 488D3D1E030000      <1>     lea rdi, funTbl     ;Point rdi to the function table
    20                              <1> .functionFinderLoop:
    21 000001C9 0FB60F              <1>     movzx ecx, byte [rdi]  ;Get the string length  
    22 000001CC 80F9FF              <1>     cmp cl, -1  ;-1 is the end of table marker, either Var assignment or error
    23 000001CF 7431                <1>     je .variableAssignment 
    24 000001D1 56                  <1>     push rsi    ;Save ptr to start of string on stack 
    25 000001D2 57                  <1>     push rdi
    26 000001D3 48FFC7              <1>     inc rdi             ;Goto first char in function name
    27 000001D6 F3A6                <1>     repe cmpsb
    28 000001D8 5F                  <1>     pop rdi
    29 000001D9 5E                  <1>     pop rsi     ;Return ptr to start of string pointer from stack
    30 000001DA 84C9                <1>     test cl, cl ;Did all the chars match?
    31 000001DC 740F                <1>     jz .functionFound
    32 000001DE 480FB607            <1>     movzx rax, byte [rdi]    ;Skip unnecessary function pointer
    33 000001E2 480502000000        <1>     add rax, 2      ;Add 2 to skip relative pointer
    34 000001E8 4801C7              <1>     add rdi, rax
    35 000001EB EBDC                <1>     jmp short .functionFinderLoop
    36                              <1> .functionFound:
    37                              <1>     ;Function found! Execute!
    38                              <1>     ;rsi points to start of expression to evaluate for function
    39                              <1>     ;rdi points to table entry
    40 000001ED 488D1DF3020000      <1>     lea rbx, funTbl         ;Get table address
    41 000001F4 480FB617            <1>     movzx rdx, byte [rdi]   ;Get pascal string length
    42 000001F8 0FB71417            <1>     movzx edx, word [rdi + rdx]    ;Add pascal strlen to table entry and get ptr
    43 000001FC 4801D3              <1>     add rbx, rdx    ;Add word offset to table base
    44 000001FF FFE3                <1>     jmp rbx ;Goto function pointer in rbx
    45                              <1> .exit:
    46 00000201 C3                  <1>     ret
    47                              <1> 
    48                              <1> .variableAssignment:
    49                              <1>     ;Establish if the string is a variable assignment or not
    50                              <1>     ;rsi points to start of string
    51 00000202 E8F5000000          <1>     call getVarNameLength   ;Get the variable name length
    52 00000207 4889F7              <1>     mov rdi, rsi    ;Save ptr to start of string in rdi
    53 0000020A 4801CE              <1>     add rsi, rcx    ;Go to end of string
    54 0000020D E8DF000000          <1>     call spaceSkip  ;Skip spaces after the end of the var name
    55 00000212 AC                  <1>     lodsb   ;Get the first char after the spaces. This must be a =
    56 00000213 3C3D                <1>     cmp al, "="
    57 00000215 7551                <1>     jne .syntaxError
    58 00000217 4889FE              <1>     mov rsi, rdi    ;Return rsi to the start of the string name
    59 0000021A 4801CE              <1>     add rsi, rcx    ;Go to end of var name
    60 0000021D 48FFCE              <1>     dec rsi
    61 00000220 AC                  <1>     lodsb   ;Get last char into al and inc rsi
    62 00000221 3C24                <1>     cmp al, "$"
    63 00000223 7420                <1>     je .stringAssignment
    64 00000225 E8C7000000          <1>     call spaceSkip  ;Skip any spaces
    65 0000022A 48FFC6              <1>     inc rsi         ;Go past the equality sign
    66 0000022D E8BF000000          <1>     call spaceSkip  ;Skip any spaces
    67 00000232 803E22              <1>     cmp byte [rsi], 22h ;Open speech mark
    68 00000235 743D                <1>     je .typError    ;Integers cant have speechmarks
    69 00000237 E808010000          <1>     call handleAlgebraicExpression  ;Get the result of the expression into rax
    70 0000023C 4889FE              <1>     mov rsi, rdi    ;Return the start of the string into rsi
    71 0000023F E855020000          <1>     call setNumericVariable
    72 00000244 C3                  <1>     ret
    73                              <1> .stringAssignment:
    74                              <1> ;This simply copies the string which is either speech mark, 0 or : terminated
    75                              <1> ;First allocate a string
    76                              <1> ;rsi = First char after the end of the variable name
    77                              <1> ;rdi = start of variable name 
    78                              <1> ;rcx = char count for var name
    79 00000245 E8A7000000          <1>     call spaceSkip  ;Skip any spaces
    80 0000024A 48FFC6              <1>     inc rsi         ;Go past the equality sign
    81 0000024D E89F000000          <1>     call spaceSkip  ;Skip any spaces
    82 00000252 803E22              <1>     cmp byte [rsi], 22h ;Open speechmark check again
    83 00000255 751D                <1>     jne .typError    ;Assigning a number to a string is a type error
    84                              <1>     ;rsi now points to the start of the string to save
    85 00000257 48FFC6              <1>     inc rsi ;Go past the speech mark
    86 0000025A 4889F2              <1>     mov rdx, rsi    ;save start of string data in rdx
    87 0000025D 4889FE              <1>     mov rsi, rdi
    88 00000260 57                  <1>     push rdi
    89 00000261 E86A020000          <1>     call setStringVariable
    90 00000266 5E                  <1>     pop rsi ;Save the start of the assignment in rsi
    91 00000267 C3                  <1>     ret
    92                              <1> 
    93                              <1> .syntaxError:
    94 00000268 488D2D6A090000      <1>     lea rbp, syntax ;Syntax error, keyword a bit confused
    95 0000026F E94EFEFFFF          <1>     jmp criticalError
    96                              <1> .typError:
    97 00000274 488D2D6D090000      <1>     lea rbp, typeError
    98 0000027B E942FEFFFF          <1>     jmp criticalError
    99                              <1> 
   100                              <1> mainProcessing:
   101                              <1>     ;rsi points to string to begin processing
   102 00000280 F605(09110000)01    <1>     test byte [stateByte], breakBit ;Is break set before exec?
   103 00000287 753F                <1>     jnz .break
   104 00000289 F605(09110000)02    <1>     test byte [stateByte], traceBit ;Are we TRON?
   105 00000290 751A                <1>     jnz .tron
   106                              <1> .mp0:
   107 00000292 53                  <1>     push rbx
   108 00000293 E820FFFFFF          <1>     call executeExpression
   109 00000298 5B                  <1>     pop rbx
   110 00000299 F605(09110000)01    <1>     test byte [stateByte], breakBit ;Is break set after exec?
   111 000002A0 7526                <1>     jnz .break
   112                              <1>     ;Now see if the line has any more expressions by checking for :
   113 000002A2 E836020000          <1>     call findOtherExpressionsOnLine
   114 000002A7 84C0                <1>     test al, al ;If al is null, no more expressions on the line
   115 000002A9 75D5                <1>     jnz mainProcessing    ;Execute portion again
   116 000002AB C3                  <1>     ret ;Return to caller
   117                              <1> .tron:
   118                              <1> ;Print the line number about to be executed
   119 000002AC B05B                <1>     mov al, "["
   120 000002AE E8DAFEFFFF          <1>     call ttyOutChar
   121 000002B3 0FB705(24110000)    <1>     movzx eax, word [currentLine]
   122 000002BA E8AE050000          <1>     call printdecimalword
   123 000002BF B05D                <1>     mov al, "]"
   124 000002C1 E8C7FEFFFF          <1>     call ttyOutChar
   125 000002C6 EBCA                <1>     jmp short .mp0
   126                              <1> .break:
   127 000002C8 488D2D41090000      <1>     lea rbp, breakmsg
   128 000002CF E8BEFEFFFF          <1>     call ttyOutString
   129 000002D4 0FB705(24110000)    <1>     movzx eax, word [currentLine]
   130 000002DB E88D050000          <1>     call printdecimalword
   131 000002E0 488D2DA7080000      <1>     lea rbp, crlf
   132 000002E7 E8A6FEFFFF          <1>     call ttyOutString
   133 000002EC E94BFDFFFF          <1>     jmp mainLoop    ;Exit processing
   134                              <1> 
   135                              <1> 
    13                                  %include "PARSE.ASM"
    14                              <1> ;Main Parsing Routines go here
    15                              <1> 
    16                              <1> spaceSkip:
    17                              <1> ;Allows us to skip spaces that might have been placed for
    18                              <1> ; ease of reading by the user.
    19                              <1> ;Input: rsi = Pointer to string
    20                              <1> ;Output: rsi = First non space character encountered
    21 000002F1 803E20              <1>     cmp byte [rsi], " "
    22 000002F4 7505                <1>     jne .exit
    23 000002F6 48FFC6              <1>     inc rsi
    24 000002F9 EBF6                <1>     jmp short spaceSkip
    25                              <1> .exit:
    26 000002FB C3                  <1>     ret
    27                              <1> 
    28                              <1> getVarNameLength:
    29                              <1> ;Called pointing to the buffer with the var name in it
    30                              <1> ;Input: rsi = Start of var name
    31                              <1> ;Output: ecx = Length of varname
    32 000002FC 50                  <1>     push rax
    33 000002FD 56                  <1>     push rsi
    34 000002FE 57                  <1>     push rdi
    35 000002FF 53                  <1>     push rbx
    36 00000300 52                  <1>     push rdx
    37 00000301 31D2                <1>     xor edx, edx    ;Clear counter of chars
    38 00000303 488D1D99080000      <1>     lea rbx, varChrs    ;Get the list of valid variable name chars
    39                              <1> .search:
    40 0000030A 4889DF              <1>     mov rdi, rbx    ;Save pointer in rbx
    41 0000030D AC                  <1>     lodsb       ;Get the first char into al
    42 0000030E B926000000          <1>     mov ecx, numVarChars
    43 00000313 F2AE                <1>     repne scasb       ;Look for char in the valid chars list
    44 00000315 750A                <1>     jne .exit   ;Char not found, drop it
    45 00000317 FFC2                <1>     inc edx     ;Add one to number of chars found
    46 00000319 81FA28000000        <1>     cmp edx, 40 ;At position for char 40?
    47 0000031F 72E9                <1>     jb .search  ;Whilst below, keep going
    48                              <1> .exit:
    49 00000321 89D1                <1>     mov ecx, edx
    50 00000323 5A                  <1>     pop rdx
    51 00000324 5B                  <1>     pop rbx
    52 00000325 5F                  <1>     pop rdi
    53 00000326 5E                  <1>     pop rsi
    54 00000327 58                  <1>     pop rax
    55 00000328 C3                  <1>     ret
    56                              <1> 
    57                              <1> getVarType:
    58                              <1> ;Input: rsi = Start of var name
    59                              <1> ;       rcx = Length of varname
    60                              <1> ;Output: ebx = 0 => Integer
    61                              <1> ;        ebx = 1 => String
    62                              <1> ;        ebx = -1 => Var doesnt exist, caller handles
    63 00000329 50                  <1>     push rax
    64 0000032A 51                  <1>     push rcx
    65 0000032B 56                  <1>     push rsi
    66 0000032C E8F5050000          <1>     call findVariable
    67 00000331 4881FBFFFFFFFF      <1>     cmp rbx, -1
    68 00000338 7406                <1>     je .exit
    69 0000033A 0FB65B03            <1>     movzx ebx, byte [rbx + memBlock.bBlockType]
    70 0000033E FFCB                <1>     dec ebx
    71                              <1> .exit:
    72 00000340 5E                  <1>     pop rsi
    73 00000341 59                  <1>     pop rcx
    74 00000342 58                  <1>     pop rax
    75 00000343 C3                  <1>     ret
    76                              <1> 
    77                              <1> handleAlgebraicExpression:
    78                              <1> ;Input: rsi = Points to a mathematical expression
    79                              <1> ;Output: rax = Result of said expression
    80                              <1> ;Declares a syntax error if weird chars found
    81                              <1> ;Declares a type error if a string variable found
    82                              <1>     ;Handle Logical Connectives here
    83                              <1>     ;call .handleThirdLevel
    84 00000344 66813E4E4F          <1>     cmp word [rsi], "NO"
    85 00000349 7504                <1>     jne .hae0
    86 0000034B 807E0254            <1>     cmp byte [rsi + 2], "T"
    87                              <1> ;    je .not
    88                              <1> .hae0:
    89 0000034F 66813E414E          <1>     cmp word [rsi], "AN"
    90 00000354 7504                <1>     jne .hae1
    91 00000356 807E0244            <1>     cmp byte [rsi + 2], "D"
    92                              <1> ;    je .and
    93                              <1> .hae1:
    94 0000035A 66813E4F52          <1>     cmp word [rsi], "OR"
    95                              <1> ;    je .or
    96 0000035F 66813E584F          <1>     cmp word [rsi], "XO"
    97 00000364 7504                <1>     jne .hae2
    98 00000366 807E0252            <1>     cmp byte [rsi + 2], "R"
    99                              <1> ;    je .xor
   100                              <1> .hae2:
   101 0000036A 66813E494D          <1>     cmp word [rsi], "IM"
   102 0000036F 7504                <1>     jne .relationals
   103 00000371 807E0250            <1>     cmp byte [rsi + 2], "P"
   104                              <1> ;    je .implicaton
   105                              <1> ;Level 3, Relational Connectives
   106                              <1> ;.handleThirdLevel:
   107                              <1> ;   call .handleSecondLevel
   108                              <1> .relationals:
   109                              <1>     ;Handle Relational connectives
   110 00000375 803E3D              <1>     cmp byte [rsi], "="
   111                              <1> ;    je .equivalence
   112 00000378 66813E3C3E          <1>     cmp word [rsi], "<>"
   113                              <1> ;    je .neq
   114 0000037D 66813E3E3C          <1>     cmp word [rsi], "><"
   115                              <1> ;    je .neq
   116 00000382 803E3C              <1>     cmp byte [rsi], "<"
   117                              <1> ;    je .less
   118 00000385 803E3E              <1>     cmp byte [rsi], ">"
   119                              <1> ;    je .greater
   120 00000388 66813E3C3D          <1>     cmp word [rsi], "<="
   121                              <1> ;    je .leq
   122 0000038D 66813E3E3D          <1>     cmp word [rsi], ">="
   123                              <1> ;    je .geq
   124                              <1> ;Level 2, Addition and Subtraction
   125                              <1> .handleSecondLevel:
   126 00000392 E828000000          <1>     call .handleFirstLevel
   127                              <1> .parseAdditiveOperators:    
   128 00000397 803E2D              <1>     cmp byte [rsi], '-'
   129 0000039A 7415                <1>     je .processMinus
   130 0000039C 803E2B              <1>     cmp byte [rsi], '+'
   131 0000039F 0F8592000000        <1>     jne .exit              ;No operators, expression evaluated, exit
   132 000003A5 50                  <1>     push rax
   133 000003A6 E811000000          <1>     call .handleFirstLevelSkip   ;Parse first level
   134                              <1> .processAdd:    
   135 000003AB 59                  <1>     pop rcx
   136 000003AC 4801C8              <1>     add rax, rcx           ;Add the two numbers
   137 000003AF EBE6                <1>     jmp short .parseAdditiveOperators  ;Search again for + or -
   138                              <1> .processMinus:
   139 000003B1 50                  <1>     push rax
   140 000003B2 E805000000          <1>     call .handleFirstLevelSkip   ;Parse first level
   141 000003B7 48F7D8              <1>     neg rax              ;Change a - b to a + -b
   142 000003BA EBEF                <1>     jmp short .processAdd
   143                              <1> 
   144                              <1> ;Level 1, Division and multiplication
   145                              <1> 
   146                              <1> .handleFirstLevelSkip:
   147 000003BC 48FFC6              <1>     inc rsi              ;Skip the op symbol
   148                              <1> .handleFirstLevel:
   149 000003BF E82C000000          <1>     call .handleZerothLevel      ;Call third level
   150                              <1> .parseProductOperators:   
   151 000003C4 803E2F              <1>     cmp byte [rsi], '/'
   152 000003C7 7411                <1>     je .processDiv
   153 000003C9 803E2A              <1>     cmp byte [rsi], '*'
   154 000003CC 7569                <1>     jne .exit           ;Neither multiplication or division, return up a level
   155                              <1> 
   156 000003CE 50                  <1>     push rax
   157 000003CF E819000000          <1>     call .handleZerothLevelSkip   ;Call zeroth level
   158 000003D4 59                  <1>     pop rcx
   159 000003D5 48F7E9              <1>     imul rcx             ; Multiplication
   160 000003D8 EBEA                <1>     jmp short .parseProductOperators   ;Search again for * or /
   161                              <1> 
   162                              <1> .processDiv:
   163 000003DA 50                  <1>     push rax
   164 000003DB E80D000000          <1>     call .handleZerothLevelSkip   ;Call zeroth level
   165 000003E0 59                  <1>     pop rcx
   166 000003E1 4891                <1>     xchg rax, rcx
   167 000003E3 31D2                <1>     xor edx, edx         ;Clear rdx for rdx:rax
   168 000003E5 48F7F9              <1>     idiv rcx             ;Signed division
   169 000003E8 E9D7FFFFFF          <1>     jmp .parseProductOperators         ;Search again for * or /
   170                              <1> 
   171                              <1> ;Level 0, Brackets, numbers and vars.
   172                              <1> 
   173                              <1> .handleZerothLevelSkip:
   174 000003ED 48FFC6              <1>     inc rsi             ;Skip the op symbol
   175                              <1> .handleZerothLevel:
   176 000003F0 E8FCFEFFFF          <1>     call spaceSkip
   177 000003F5 AC                  <1>     lodsb               ;Read char and adv rsi
   178 000003F6 3C28                <1>     cmp al, '('
   179 000003F8 750C                <1>     jne .notBracket
   180 000003FA E845FFFFFF          <1>     call handleAlgebraicExpression  ;Parse the inner expression
   181 000003FF 803E29              <1>     cmp byte [rsi], ')'   
   182 00000402 744D                <1>     je .closeBracket     ;If close bracket, goto skip spaces
   183 00000404 EB53                <1>     jmp short .error     ;Otherwise, error
   184                              <1> 
   185                              <1> .notBracket:    
   186 00000406 3C5E                <1>     cmp al, "^"
   187 00000408 742E                <1>     je .exponentFound
   188                              <1> .varConstCheck:
   189 0000040A 3C41                <1>     cmp al, "A"       ;Alphabetical first char?
   190 0000040C 730D                <1>     jae .varOrRNDFound      ;Yes, variable found or rnd function or error
   191 0000040E 48FFCE              <1>     dec rsi            ;Else back one symbol 
   192 00000411 E82F040000          <1>     call decimalToHex  ;to read number into rax
   193 00000416 E9D6FEFFFF          <1>     jmp spaceSkip
   194                              <1> 
   195                              <1> .varOrRNDFound:
   196 0000041B 3C5A                <1>     cmp al, "Z"  
   197 0000041D 773A                <1>     ja .error   ;Syntax error if char not between A-Z  
   198 0000041F 3C52                <1>     cmp al, "R"
   199 00000421 7517                <1>     jne .varFound
   200 00000423 803E4E              <1>     cmp byte [rsi], "N" ;rsi was advanced by 1, check 
   201 00000426 7512                <1>     jne .varFound
   202 00000428 807E0144            <1>     cmp byte [rsi+1], "D"
   203 0000042C 750C                <1>     jne .varFound
   204 0000042E 66AD                <1>     lodsw               ;Advance rsi by 3
   205 00000430 AC                  <1>     lodsb
   206 00000431 E440                <1>     in al, 40h         ;Read timer counter 0
   207 00000433 480FB6C0            <1>     movzx rax, al
   208                              <1> .exit:
   209 00000437 C3                  <1>     ret                ;Return
   210                              <1> .exponentFound:
   211 00000438 EBD0                <1>    jmp short .varConstCheck
   212                              <1> .varFound:    
   213 0000043A 48FFCE              <1>     dec rsi ;Back a char
   214 0000043D 51                  <1>     push rcx
   215 0000043E E8B9FEFFFF          <1>     call getVarNameLength
   216 00000443 E81D000000          <1>     call getNumericVariable ;Get variable value in rax
   217 00000448 4801CE              <1>     add rsi, rcx    ;Go past the edge of the name
   218 0000044B 59                  <1>     pop rcx
   219 0000044C E9A0FEFFFF          <1>     jmp spaceSkip
   220                              <1> 
   221                              <1> .closeBracket:
   222 00000451 48FFC6              <1>     inc rsi
   223 00000454 E998FEFFFF          <1>     jmp spaceSkip
   224                              <1> .error:
   225 00000459 488D2D79070000      <1>     lea rbp, syntax
   226 00000460 E95DFCFFFF          <1>     jmp criticalError
   227                              <1> 
   228                              <1> 
   229                              <1> getNumericVariable:
   230                              <1> ;Gets the value stored in a variable into rax 
   231                              <1> ;Input: rsi = Pointer to first char of a variable name
   232                              <1> ;Output: rax = Variable Value
   233                              <1> ;        rsi = Pointer to first char of a variable name
   234 00000465 56                  <1>     push rsi
   235 00000466 51                  <1>     push rcx
   236 00000467 53                  <1>     push rbx
   237 00000468 E88FFEFFFF          <1>     call getVarNameLength   ;Returns the length of the var name in cx
   238 0000046D E8B4040000          <1>     call findVariable       ;Returns a pointer to the variable block in rbx
   239 00000472 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Variable doesnt exist? Pretend it is 0
   240 00000479 740E                <1>     je .noVar
   241 0000047B 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
   242 0000047F 750C                <1>     jne .stringFoundError
   243 00000481 488B4304            <1>     mov rax, qword [rbx + varBlock.qValue]
   244                              <1> .exit:
   245 00000485 5B                  <1>     pop rbx
   246 00000486 59                  <1>     pop rcx
   247 00000487 5E                  <1>     pop rsi
   248 00000488 C3                  <1>     ret
   249                              <1> .noVar:
   250 00000489 31C0                <1>     xor eax, eax
   251 0000048B EBF8                <1>     jmp short .exit
   252                              <1> .stringFoundError:
   253 0000048D 488D2D54070000      <1>     lea rbp, typeError
   254 00000494 E929FCFFFF          <1>     jmp criticalError
   255                              <1> 
   256                              <1> setNumericVariable:
   257                              <1> ;Sets the value stored in a variable
   258                              <1> ;Input: rsi = Pointer to first char of a variable name
   259                              <1> ;       rax = Variable value
   260                              <1> ;Output: rsi = Pointer to first char of variable name
   261 00000499 56                  <1>     push rsi
   262 0000049A 51                  <1>     push rcx
   263 0000049B 53                  <1>     push rbx
   264                              <1> 
   265 0000049C E85BFEFFFF          <1>     call getVarNameLength   ;Returns the length of the var name in cx
   266 000004A1 E880040000          <1>     call findVariable       ;Returns a pointer to the variable block in rbx
   267 000004A6 4881FBFFFFFFFF      <1>     cmp rbx, -1             ;Variable doesnt exit?
   268 000004AD 740E                <1>     je .makeEditInteger      ;Make one!
   269 000004AF 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
   270 000004B3 750F                <1>     jne .stringFoundError
   271 000004B5 48894304            <1>     mov qword [rbx + varBlock.qValue], rax  ;Save value
   272                              <1> .exit:
   273 000004B9 5B                  <1>     pop rbx
   274 000004BA 59                  <1>     pop rcx
   275 000004BB 5E                  <1>     pop rsi
   276 000004BC C3                  <1>     ret
   277                              <1> .makeEditInteger:
   278 000004BD E874050000          <1>     call makeEditInteger
   279 000004C2 EBF5                <1>     jmp short .exit
   280                              <1> .stringFoundError:
   281 000004C4 488D2D1D070000      <1>     lea rbp, typeError
   282 000004CB E9F2FBFFFF          <1>     jmp criticalError
   283                              <1> 
   284                              <1> setStringVariable:
   285                              <1> ;Sets the string pointed to by rdx
   286                              <1> ;Input: rsi = Pointer to first char of a variable name
   287                              <1> ;       rdx = Start of string
   288                              <1> ;Output: rsi = Pointer to first char of variable name
   289                              <1> ;Keeps adding characters until a 0, : or " encountered
   290                              <1> ;Adds a 0 to the end
   291 000004D0 51                  <1>     push rcx
   292 000004D1 E826FEFFFF          <1>     call getVarNameLength   ;Gets the length of the var name in cx
   293 000004D6 E8A6050000          <1>     call makeEditString     ;Returns a ptr to the var block in rbx
   294 000004DB 59                  <1>     pop rcx
   295 000004DC C3                  <1>     ret
   296                              <1> 
   297                              <1> findOtherExpressionsOnLine:
   298                              <1> ;Input: rsi = start of line portion
   299                              <1> ;Output: rsi = points to first char after first ":" found
   300                              <1> ;         al = : if it was found or 00 if not
   301 000004DD AC                  <1>     lodsb
   302 000004DE 3C00                <1>     cmp al, 0   ;Null hit, RIP procedure
   303 000004E0 7404                <1>     je .exit
   304 000004E2 3C3A                <1>     cmp al, ":" ;Strings can be terminated with a :
   305 000004E4 75F7                <1>     jne findOtherExpressionsOnLine
   306                              <1> .exit:
   307 000004E6 C3                  <1>     ret
    14                                  %include "COMMANDS.ASM"
    15                              <1> 
    16                              <1> funTbl:
    17                              <1> ;Use PASCAL strings to know how long the comparisons need to be
    18                              <1> ;All function pointers are saved as distances from the head
    19                              <1> ; of the function table
    20 000004E7 044C4554            <1>     db 4, "LET"     ;DONE
    21 000004EB BC00                <1>     dw oldSchoolAssignemnt - funTbl
    22                              <1> 
    23 000004ED 044E4557            <1>     db 4, "NEW"     ;DONE
    24 000004F1 CE00                <1>     dw newProgram - funTbl 
    25                              <1> 
    26 000004F3 06434C454152        <1>     db 6, "CLEAR"   ;DONE
    27 000004F9 CE00                <1>     dw newProgram - funTbl 
    28                              <1> 
    29 000004FB 054C495354          <1>     db 5, "LIST"    ;DONE
    30 00000500 3001                <1>     dw listProgram - funTbl 
    31                              <1> 
    32 00000502 0452554E            <1>     db 4, "RUN"     ;DONE
    33 00000506 6C01                <1>     dw runProgram - funTbl
    34                              <1> 
    35 00000508 075052494E5424      <1>     db 7, "PRINT$"    ;Not implemented yet
    36 0000050F A701                <1>     dw printStatement - funTbl
    37                              <1> 
    38 00000511 065052494E54        <1>     db 6, "PRINT"    ;DONE
    39 00000517 A701                <1>     dw printStatement - funTbl
    40                              <1> 
    41 00000519 023F                <1>     db 2, "?"        ;DONE, alias Print
    42 0000051B A701                <1>     dw printStatement - funTbl
    43                              <1> 
    44 0000051D 06494E505554        <1>     db 6, "INPUT"
    45 00000523 4D02                <1>     dw getInput - funTbl
    46                              <1> 
    47 00000525 034946              <1>     db 3, "IF"      ;DONE, needs to be tested
    48 00000528 5002                <1>     dw handleIf - funTbl
    49                              <1> 
    50 0000052A 05474F544F          <1>     db 5, "GOTO"    ;DONE
    51 0000052F C202                <1>     dw fancyJmp - funTbl
    52                              <1> 
    53 00000531 0753595354454D      <1>     db 7, "SYSTEM"  ;DONE
    54 00000538 0403                <1>     dw returnToDOS - funTbl
    55                              <1> 
    56 0000053A 04464F52            <1>     db 4, "FOR"
    57 0000053E 0103                <1>     dw forLoop - funTbl
    58                              <1> 
    59 00000540 04434C53            <1>     db 4, "CLS"     ;DONE
    60 00000544 1003                <1>     dw cls - funTbl
    61                              <1> 
    62 00000546 064445425547        <1>     db 6, "DEBUG"   ;DONE
    63 0000054C 1503                <1>     dw dbgr - funTbl
    64                              <1> 
    65 0000054E 0554524F4E          <1>     db 5, "TRON"    ;DONE
    66 00000553 AC00                <1>     dw tron - funTbl
    67                              <1> 
    68 00000555 0654524F4646        <1>     db 6, "TROFF"   ;DONE
    69 0000055B B400                <1>     dw troff - funTbl
    70                              <1> 
    71 0000055D 04454E44            <1>     db 4, "END"     ;DONE
    72 00000561 A700                <1>     dw endProg - funTbl
    73                              <1> 
    74 00000563 0553544F50          <1>     db 5, "STOP"    ;DONE
    75 00000568 A700                <1>     dw endProg - funTbl
    76                              <1> 
    77 0000056A 07455343415045      <1>     db 7, "ESCAPE"  ;DONE
    78 00000571 A700                <1>     dw endProg - funTbl
    79                              <1> thenStr:
    80 00000573 055448454E          <1>     db 5, "THEN"    ;DONE
    81 00000578 9B00                <1>     dw badCmd - funTbl
    82                              <1> elseStr:
    83 0000057A 05454C5345          <1>     db 5, "ELSE"    ;DONE
    84 0000057F 9B00                <1>     dw badCmd - funTbl
    85                              <1> 
    86 00000581 FF                  <1>     db -1    ;Demarkate the end of the table
    87                              <1> ;End of Table
    88                              <1> badCmd:
    89 00000582 488D2D50060000      <1>     lea rbp, syntax
    90 00000589 E834FBFFFF          <1>     call criticalError 
    91                              <1> endProg:
    92 0000058E E9A9FAFFFF          <1>     jmp mainLoop
    93                              <1> tron:
    94 00000593 800D(09110000)02    <1>     or byte [stateByte], traceBit   ;Set the traceBit
    95 0000059A C3                  <1>     ret
    96                              <1> troff:
    97 0000059B 8025(09110000)FD    <1>     and byte [stateByte], ~traceBit ;Clear the traceBit
    98 000005A2 C3                  <1>     ret
    99                              <1> oldSchoolAssignemnt:
   100                              <1> ;
   101 000005A3 0FB60F              <1>     movzx ecx, byte [rdi]
   102 000005A6 FFC9                <1>     dec ecx
   103 000005A8 4801CE              <1>     add rsi, rcx
   104 000005AB E841FDFFFF          <1>     call spaceSkip  ;Goto var assignment as if at start of line
   105 000005B0 E94DFCFFFF          <1>     jmp executeExpression.variableAssignment
   106                              <1> newProgram: 
   107                              <1> ;Simply reset the program pointers
   108 000005B5 488D05(00000000)    <1>     lea rax, section.programArea.vstart
   109 000005BC 488905(F8100000)    <1>     mov qword [minMemAddr], rax
   110 000005C3 488905(12110000)    <1>     mov qword [lastBlock], rax  ;Start writing at this location
   111 000005CA 488905(0A110000)    <1>     mov qword [mcbChain], rax   ;Create a mock MCB here
   112                              <1> 
   113 000005D1 4889C2              <1>     mov rdx, rax
   114 000005D4 668B4801            <1>     mov cx, word [rax + memBlock.wBlockSize]
   115 000005D8 4889C7              <1>     mov rdi, rax
   116 000005DB 30C0                <1>     xor al, al
   117 000005DD F3AA                <1>     rep stosb   ;Sanitise the old first allocation
   118                              <1> 
   119 000005DF C60272              <1>     mov byte [rdx + memBlock.bSignature], lastMemBlock
   120 000005E2 66C742010000        <1>     mov word [rdx + memBlock.wBlockSize], 0 ;Dummy block, no size, gets overwritten
   121 000005E8 31C0                <1>     xor eax, eax
   122 000005EA 8805(08110000)      <1>     mov byte [strLen], al
   123 000005F0 488D3D(C80F0000)    <1>     lea rdi, inString
   124 000005F7 B900010000          <1>     mov ecx, maxLineLen
   125 000005FC F3AA                <1>     rep stosb
   126 000005FE C605(24110000)0A    <1>     mov byte [currentLine], 10  ;Default to line 10
   127 00000605 48FFC8              <1>     dec rax ;rax = -1
   128 00000608 488905(1A110000)    <1>     mov qword [firstLinPtr], rax ;No program in memory
   129 0000060F 668905(22110000)    <1>     mov word [firstLinNum], ax
   130 00000616 C3                  <1>     ret
   131                              <1> listProgram:
   132                              <1> ;Go line by line and echo the program lines, inserting a crlf after each
   133                              <1> ;First print the line number, then add a space
   134 00000617 488B1D(1A110000)    <1>     mov rbx, qword [firstLinPtr]    ;Get a pointer to the first program line
   135                              <1> .printLines:
   136 0000061E 488D2D69050000      <1>     lea rbp, crlf           ;New line
   137 00000625 E868FBFFFF          <1>     call ttyOutString
   138 0000062A 4881FBFFFFFFFF      <1>     cmp rbx, -1
   139 00000631 741F                <1>     je .exit
   140 00000633 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]
   141 00000637 E831020000          <1>     call printdecimalword
   142 0000063C B020                <1>     mov al, " "
   143 0000063E E84AFBFFFF          <1>     call ttyOutChar ;Print a space
   144 00000643 488D6B0E            <1>     lea rbp, qword [rbx + progLineBlock.sLine]  ;Null terminated string
   145 00000647 E846FBFFFF          <1>     call ttyOutString
   146 0000064C 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr]   ;Walk list of program lines
   147 00000650 EBCC                <1>     jmp short .printLines
   148                              <1> .exit:
   149 00000652 C3                  <1>     ret
   150                              <1> runProgram:
   151                              <1> ;Go to each line, one at a time, skip the line number and execute the expr
   152                              <1> ;First thing it does, resets the stack 
   153                              <1> ; and takes the first line number and moves it to current line number
   154 00000653 488D25(C00F0000)    <1>     lea rsp, stacktop
   155 0000065A 488B1D(1A110000)    <1>     mov rbx, qword [firstLinPtr]    ;Get a pointer to the first program line
   156                              <1> .runLines:
   157 00000661 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Are we at the end?
   158 00000668 741F                <1>     je .exit    ;Yes, return to the prompt
   159 0000066A 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]
   160 0000066E 668905(24110000)    <1>     mov word [currentLine], ax  ;Gone to new line
   161 00000675 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine]  ;Point to the instruction
   162 00000679 E873FCFFFF          <1>     call spaceSkip  ;Goto first char
   163                              <1>     ;xchg bx, bx
   164 0000067E E8FDFBFFFF          <1>     call mainProcessing
   165                              <1> .rl0:
   166 00000683 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr]   ;Walk list of program lines
   167 00000687 EBD8                <1>     jmp short .runLines
   168                              <1> .exit:
   169 00000689 E9AEF9FFFF          <1>     jmp mainLoop
   170                              <1> 
   171                              <1> printStatement:
   172                              <1> ;Strings must be "" delimited or a string variable must be used
   173                              <1> ;rdi points to the command length
   174 0000068E 0FB60F              <1>     movzx ecx, byte [rdi]
   175 00000691 FFC9                <1>     dec ecx ;This gives instruction name + 1
   176 00000693 4801CE              <1>     add rsi, rcx
   177                              <1> .printStart:
   178 00000696 E856FCFFFF          <1>     call spaceSkip  ;move rsi to the start of the expression
   179 0000069B AC                  <1>     lodsb
   180 0000069C 84C0                <1>     test al, al     ;Is this a null string?
   181 0000069E 746B                <1>     jz .psvexit
   182                              <1> 
   183 000006A0 3C22                <1>     cmp al, 022h    ;22h = ASCII Speechmarks
   184 000006A2 7449                <1>     je .stringPrint
   185                              <1>     ;Here we check if the first char is ASCII, if it is, check if its a string var
   186 000006A4 3C41                <1>     cmp al, "A"
   187 000006A6 7204                <1>     jb .printExpr
   188 000006A8 3C5A                <1>     cmp al, "Z"
   189 000006AA 7214                <1>     jb .printStringVar
   190                              <1> .printExpr:
   191 000006AC 48FFCE              <1>     dec rsi ;Return to the start of the string
   192                              <1> .printExpr1:    ;Return without dec rsi
   193 000006AF E890FCFFFF          <1>     call handleAlgebraicExpression ;Gets value of a var and/or algebraic operation
   194 000006B4 E8B4010000          <1>     call printdecimalword
   195 000006B9 E833FCFFFF          <1>     call spaceSkip
   196 000006BE EB2D                <1>     jmp short .stringPrint
   197                              <1> .printStringVar:
   198                              <1>     ;Check if it is a string var
   199 000006C0 48FFCE              <1>     dec rsi
   200 000006C3 E834FCFFFF          <1>     call getVarNameLength
   201 000006C8 E85CFCFFFF          <1>     call getVarType
   202 000006CD 81FB01000000        <1>     cmp ebx, strEquate
   203 000006D3 75DA                <1>     jne .printExpr1  ;rsi points to the same point as initially
   204 000006D5 E84C020000          <1>     call findVariable   ;ecx has string length, get block ptr in rbx
   205 000006DA 55                  <1>     push rbp
   206 000006DB 488D6B04            <1>     lea rbp, qword [rbx + stringBlock.string]
   207 000006DF E8AEFAFFFF          <1>     call ttyOutString
   208 000006E4 5D                  <1>     pop rbp
   209 000006E5 4801CE              <1>     add rsi, rcx    ;Go past variable
   210 000006E8 E804FCFFFF          <1>     call spaceSkip
   211                              <1> .stringPrint:
   212 000006ED AC                  <1>     lodsb
   213 000006EE 3C00                <1>     cmp al, 0
   214 000006F0 7419                <1>     je .psvexit
   215 000006F2 3C3A                <1>     cmp al, ":"
   216 000006F4 7412                <1>     je .psvexitColon
   217 000006F6 3C22                <1>     cmp al, 022h    ;Close Speech marks, check next char
   218 000006F8 741E                <1>     je .closespeechmarks
   219 000006FA 3C3B                <1>     cmp al, ";"     ;Semicolon means print next section on same line
   220 000006FC 742C                <1>     je .continue
   221 000006FE E88AFAFFFF          <1>     call ttyOutChar
   222 00000703 EBE8                <1>     jmp short .stringPrint
   223                              <1> .openSpeechMark:
   224 00000705 48FFC6              <1>     inc rsi ;Go back a char
   225                              <1> .psvexitColon:
   226 00000708 48FFCE              <1>     dec rsi ;Go back a char
   227                              <1> .psvexit:
   228 0000070B 488D2D7C040000      <1>     lea rbp, crlf
   229 00000712 E87BFAFFFF          <1>     call ttyOutString
   230 00000717 C3                  <1>     ret
   231                              <1> .closespeechmarks:
   232 00000718 E8D4FBFFFF          <1>     call spaceSkip
   233 0000071D AC                  <1>     lodsb
   234 0000071E 3C3B                <1>     cmp al, ";" ;only exception to exiting if next non space char is a semicolon
   235 00000720 74CB                <1>     je .stringPrint
   236 00000722 6687DB              <1>     xchg bx, bx
   237 00000725 48FFCE              <1>     dec rsi ;Go back a step
   238 00000728 EBE1                <1>     jmp short .psvexit
   239                              <1> .continue:
   240 0000072A E8C2FBFFFF          <1>     call spaceSkip
   241 0000072F E962FFFFFF          <1>     jmp .printStart
   242                              <1> getInput:
   243                              <1> ;Take a string as a prompt
   244 00000734 B005                <1>     mov al, 5
   245 00000736 C3                  <1>     ret
   246                              <1> handleIf:
   247                              <1> ;Evaluate the string. The IF,THEN/GOTO,ELSE statement must ALL be on one line
   248                              <1> ;IF exp1 THEN statement ELSE statement
   249                              <1> ;IF exp1 GOTO linenumber ELSE statement
   250 00000737 0FB60F              <1>     movzx ecx, byte [rdi]
   251 0000073A FFC9                <1>     dec ecx
   252 0000073C 4801CE              <1>     add rsi, rcx
   253                              <1> 
   254 0000073F E8ADFBFFFF          <1>     call spaceSkip
   255 00000744 E8FBFBFFFF          <1>     call handleAlgebraicExpression
   256 00000749 4885C0              <1>     test rax, rax  ;If this is 0, go to the else
   257 0000074C 7526                <1>     jnz .else
   258 0000074E E89EFBFFFF          <1>     call spaceSkip
   259                              <1>     ;Now check if it is a THEN or a GOTO
   260                              <1>     ;If it is a THEN, go past the then and let mainProcessing handle it
   261                              <1>     ;If it is a GOTO, dont go past the GOTO and let mainProcessing handle it
   262                              <1>     ;In both cases JUMP to mainProcessing to avoid stack growth
   263                              <1>     ;If no GOTO or THEN, then syntax error
   264 00000753 AD                  <1>     lodsd   ;Get the whole word
   265 00000754 3D5448454E          <1>     cmp eax, "THEN"
   266 00000759 740E                <1>     je .mp0   ; Go past THEN, to process statement
   267 0000075B 3D474F544F          <1>     cmp eax, "GOTO"
   268 00000760 753B                <1>     jne .error
   269 00000762 4881EE04000000      <1>     sub rsi, 4  ;Go back four spaces to process GOTO
   270                              <1> .mp0:
   271 00000769 488D0510FBFFFF      <1>     lea rax, mainProcessing
   272 00000770 50                  <1>     push rax
   273 00000771 C21800              <1>     ret 3*8 ;Align stack as expected
   274                              <1> .else:
   275 00000774 B8454C5345          <1>     mov eax, "ELSE" ;Lucky for us, ELSE fits in eax
   276                              <1> .e0:
   277 00000779 48FFC6              <1>     inc rsi
   278 0000077C 803E00              <1>     cmp byte [rsi], 0   ;End of command line?
   279 0000077F 741B                <1>     jz .noElse
   280 00000781 803E3A              <1>     cmp byte [rsi], ":" ;End of command line portion?
   281 00000784 7413                <1>     jz .noElse0
   282 00000786 3906                <1>     cmp dword [rsi], eax
   283 00000788 75EF                <1>     jne .e0
   284                              <1> ;If we are else, first move rsi past the else
   285 0000078A 4881C604000000      <1>     add rsi, 4  ;We are past the else now
   286 00000791 E85BFBFFFF          <1>     call spaceSkip
   287 00000796 C21800              <1>     ret 3*8 ;Align stack as expected
   288                              <1> .noElse0:
   289                              <1> ;If there is no ELSE, simply ret
   290 00000799 48FFCE              <1>     dec rsi ;Ensure it is caught by the main findOtherExpressionsOnLine command
   291                              <1> .noElse:
   292 0000079C C3                  <1>     ret
   293                              <1> .error:
   294 0000079D 488D1D35040000      <1>     lea rbx, syntax
   295 000007A4 E919F9FFFF          <1>     jmp criticalError
   296                              <1> 
   297                              <1> fancyJmp:
   298                              <1> ;GOTO
   299                              <1> ;rdi points just past the end of the command line
   300 000007A9 0FB60F              <1>     movzx ecx, byte [rdi]
   301 000007AC FFC9                <1>     dec ecx
   302 000007AE 4801CE              <1>     add rsi, rcx
   303 000007B1 E83BFBFFFF          <1>     call spaceSkip  ;Skip all preceeding spaces
   304 000007B6 E889FBFFFF          <1>     call handleAlgebraicExpression  ;Turn the expression into a number in ax
   305 000007BB 0FB7D0              <1>     movzx edx, ax   ;Line number into dx
   306 000007BE E8D3010000          <1>     call searchForProgramLine   ;Get pointer to line in rbx
   307 000007C3 4881FBFFFFFFFF      <1>     cmp rbx, -1
   308 000007CA 740B                <1>     je .unknownLineNumber
   309                              <1> 
   310 000007CC 488D158EFEFFFF      <1>     lea rdx, runProgram.runLines    ;New line pointer in rbx
   311 000007D3 52                  <1>     push rdx    ;Run lines return address
   312                              <1>     ;xchg bx, bx 
   313 000007D4 C21800              <1>     ret 3*8     ;pop three qwords off of the stack (old return addresses)
   314                              <1> .unknownLineNumber:
   315 000007D7 488D2D1A040000      <1>     lea rbp, lineNoXist
   316 000007DE E8AFF9FFFF          <1>     call ttyOutString
   317 000007E3 E954F8FFFF          <1>     jmp mainLoop
   318                              <1> forLoop:
   319 000007E8 B009                <1>     mov al, 9
   320 000007EA C3                  <1>     ret
   321                              <1> ;==========================================================:
   322                              <1> ;==========================================================:
   323                              <1> ;==========================================================:
   324                              <1> ;          Functions Related to Program Management         :
   325                              <1> ;==========================================================:
   326                              <1> ;==========================================================:
   327                              <1> ;==========================================================:
   328                              <1> returnToDOS:
   329 000007EB B007                <1>     mov al, 07h
   330 000007ED E89BF9FFFF          <1>     call ttyOutChar
   331 000007F2 E909F8FFFF          <1>     jmp start   ;Reset the interpreter
   332                              <1> cls:
   333 000007F7 E9A3F9FFFF          <1>     jmp ttyClear
   334                              <1> dbgr:
   335                              <1>     ;Hook int 40h to main prog EP to allow returning 
   336                              <1> ;First call to get default BIOS segement selector and attribute word
   337 000007FC B340                <1>     mov bl, 40h
   338 000007FE B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   339 00000803 CD35                <1>     int 35h
   340 00000805 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   341 00000807 B940000000          <1>     mov ecx, 40h    ;Interrupt number
   342                              <1> ;dx preserves the attribute word
   343 0000080C 488D1D09000000      <1>     lea rbx, .farReturn  ;Pointer passed in
   344 00000813 B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   345 00000818 CD35                <1>     int 35h
   346 0000081A CD38                <1>     int 38h ;Call debugger
   347                              <1> .farReturn:
   348                              <1>     ;Reconnect CTRL+BREAK handler
   349 0000081C 48BC-               <1>     mov rsp, stacktop   ;Immediately reset stack
   349 0000081E [C00F000000000000]  <1>
   350 00000826 488D3D9FF8FFFF      <1>     lea rdi, ctrlBreakHandler
   351 0000082D B03B                <1>     mov al, 3Bh
   352 0000082F E8A1F8FFFF          <1>     call setHandler
   353                              <1>     
   354 00000834 488D2D53030000      <1>     lea rbp, crlf
   355 0000083B E852F9FFFF          <1>     call ttyOutString
   356 00000840 E9F7F7FFFF          <1>     jmp mainLoop
    15                                  %include "MATH.ASM"
    16                              <1> decimalToHex:
    17                              <1>     ;Takes ASCII encoded decimal number and 
    18                              <1>     ;returns its hex value
    19                              <1>     ;Input: rsi = Start of numeric ONLY string
    20                              <1>     ;Output: rax = Number
    21                              <1>     ;        rsi = First non-numeric char past end of number
    22 00000845 53                  <1>     push rbx
    23 00000846 51                  <1>     push rcx
    24 00000847 52                  <1>     push rdx
    25 00000848 31DB                <1>     xor ebx, ebx    ;Start with rbx = 0
    26                              <1> .processDigits:    
    27 0000084A AC                  <1>     lodsb           ;Get the first digit in al
    28 0000084B 2C30                <1>     sub al, 30h     ;Reduce to value
    29 0000084D 31D2                <1>     xor edx, edx    ;Clear for multiplication
    30 0000084F 3C0A                <1>     cmp al, 10      ;Digit valid? Propagte CF
    31 00000851 480FB6C0            <1>     movzx rax, al   ;Clear upper bits
    32 00000855 4893                <1>     xchg rax, rbx
    33 00000857 730D                <1>     jnc .exit       ;Digit was not valid, exit
    34 00000859 B90A000000          <1>     mov ecx, 10     ;Multiply result by 10
    35 0000085E 48F7E1              <1>     mul rcx
    36 00000861 4801C3              <1>     add rbx, rax    ;Add the new digits
    37 00000864 EBE4                <1>     jmp short .processDigits
    38                              <1> .exit:
    39 00000866 48FFCE              <1>     dec rsi         ;rsi points to first non-digit
    40 00000869 5A                  <1>     pop rdx
    41 0000086A 59                  <1>     pop rcx
    42 0000086B 5B                  <1>     pop rbx
    43 0000086C C3                  <1>     ret
    44                              <1> 
    45                              <1> printdecimalword:
    46                              <1> ;Takes the qword in rax and prints its decimal representation
    47 0000086D 50                  <1>     push rax
    48 0000086E 53                  <1>     push rbx
    49 0000086F 488D3D(C8100000)    <1>     lea rdi, digitString   ;Use the default line as a buffer
    50                              <1>     ;Sanitise the digit buffer
    51 00000876 57                  <1>     push rdi
    52 00000877 51                  <1>     push rcx
    53 00000878 50                  <1>     push rax
    54 00000879 31C0                <1>     xor eax, eax
    55 0000087B B906000000          <1>     mov ecx, digitStringLen/8
    56 00000880 F348AB              <1>     rep stosq
    57 00000883 58                  <1>     pop rax
    58 00000884 59                  <1>     pop rcx
    59 00000885 5F                  <1>     pop rdi
    60                              <1> 
    61 00000886 4881C72F000000      <1>     add rdi, digitStringLen - 1 ;Go to the end of the buffer
    62 0000088D FD                  <1>     std ;Reverse string ops
    63 0000088E 50                  <1>     push rax
    64 0000088F 30C0                <1>     xor al, al  ;Place delimiter
    65 00000891 AA                  <1>     stosb
    66 00000892 58                  <1>     pop rax
    67 00000893 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
    67 0000089C 00                  <1>
    68                              <1> .pdw0:
    69 0000089D 31D2                <1>     xor edx, edx
    70 0000089F 48F7F3              <1>     div rbx
    71 000008A2 80C230              <1>     add dl, '0'
    72 000008A5 80FA39              <1>     cmp dl, '9'
    73 000008A8 7603                <1>     jbe .pdw1
    74 000008AA 80C207              <1>     add dl, 'A'-'0'-10
    75                              <1> .pdw1:
    76 000008AD 50                  <1>     push rax
    77 000008AE 88D0                <1>     mov al, dl    ;Save remainder byte
    78 000008B0 AA                  <1>     stosb   ;Store the byte and add one to rdi
    79 000008B1 58                  <1>     pop rax
    80 000008B2 4885C0              <1>     test rax, rax
    81 000008B5 75E6                <1>     jnz .pdw0
    82 000008B7 FC                  <1>     cld ;Return string ops to normal
    83 000008B8 48FFC7              <1>     inc rdi ;Skip the extra 0 that was inserted
    84 000008BB 4889FD              <1>     mov rbp, rdi    ;Point rbp to the head of the string
    85 000008BE E8CFF8FFFF          <1>     call ttyOutString
    86 000008C3 5B                  <1>     pop rbx
    87 000008C4 58                  <1>     pop rax
    88 000008C5 C3                  <1>     ret
    16                                  %include "MEMORY.ASM"
    17                              <1> allocateBlock:
    18                              <1> ;Allocates a program memory block, the caller then fixes the specifics
    19                              <1> ;Output: rbx = Pointer to generic memory block, or -1 if memory full
    20                              <1> ;       Caller needs to fill in, block size, block type and specifics
    21 000008C6 52                  <1>     push rdx
    22                              <1> .ab0:
    23 000008C7 488B1D(12110000)    <1>     mov rbx, qword [lastBlock]    ;Get the last block in the chain
    24 000008CE 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;First allocation?
    25 000008D5 742F                <1>     je .firstAllocation
    26 000008D7 C60374              <1>     mov byte [rbx + memBlock.bSignature], notLastMemBlock ;Make it not be the last
    27 000008DA 480FB75301          <1>     movzx rdx, word [rbx + memBlock.wBlockSize] ;Goto end of block
    28 000008DF 4801D3              <1>     add rbx, rdx    ;Move rbx over the previous last block
    29 000008E2 488B15(00110000)    <1>     mov rdx, qword [maxMemAddr]
    30 000008E9 4839D3              <1>     cmp rbx, rdx ;rbx above maxmemory? 
    31 000008EC 770C                <1>     ja .memoryFull
    32 000008EE 48891D(12110000)    <1>     mov qword [lastBlock], rbx  ;New last block
    33 000008F5 C60372              <1>     mov byte [rbx + memBlock.bSignature], lastMemBlock
    34                              <1> .exit:
    35 000008F8 5A                  <1>     pop rdx
    36 000008F9 C3                  <1>     ret
    37                              <1> .memoryFull:
    38 000008FA 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    38 00000903 FF                  <1>
    39 00000904 EBF2                <1>     jmp short .exit
    40                              <1> .firstAllocation:
    41                              <1> ;Deal with first allocation
    42 00000906 488D1D(00000000)    <1>     lea rbx, section.programArea.vstart   ;Get this as the head of the chain
    43 0000090D 48891D(12110000)    <1>     mov qword [lastBlock], rbx
    44 00000914 48891D(0A110000)    <1>     mov qword [mcbChain], rbx
    45 0000091B C60372              <1>     mov byte [rbx + memBlock.bSignature], lastMemBlock
    46 0000091E 66C743010000        <1>     mov word [rbx + memBlock.wBlockSize], 0 ;Dummy block
    47 00000924 EBD2                <1>     jmp short .exit
    48                              <1> 
    49                              <1> findVariable:
    50                              <1> ;Input: rsi = Source string for variable name
    51                              <1> ;       ecx = Length of variable name (max 40)
    52                              <1> ;Output: rbx = ptr to varBlock/strBlock OR -1 if doesnt exist
    53 00000926 50                  <1>     push rax
    54 00000927 51                  <1>     push rcx
    55 00000928 52                  <1>     push rdx
    56 00000929 56                  <1>     push rsi
    57 0000092A 57                  <1>     push rdi
    58 0000092B 488B1D(0A110000)    <1>     mov rbx, qword [mcbChain]   ;Start of the chain
    59 00000932 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Chain empty?
    60 00000939 7446                <1>     je .exit
    61                              <1> .search:
    62 0000093B 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
    63 0000093F 7415                <1>     je .varFound    ;We found a numerical variable
    64 00000941 807B0302            <1>     cmp byte [rbx + memBlock.bBlockType], datBlockType
    65 00000945 741E                <1>     je .datFound    ;We found a string variable
    66                              <1> .invalid:
    67                              <1>     ;Are we at the end of the chain?
    68 00000947 803B72              <1>     cmp byte [rbx + memBlock.bSignature], lastMemBlock
    69 0000094A 742B                <1>     je .varNotFound ;At the end of the chain and var not found? Error!
    70 0000094C 480FB75301          <1>     movzx rdx, word [rbx + memBlock.wBlockSize]
    71 00000951 4801D3              <1>     add rbx, rdx    ;Goto next block
    72 00000954 EBE5                <1>     jmp short .search
    73                              <1> .varFound:
    74                              <1>     ;Compare to see the var is our var
    75 00000956 488D7B0C            <1>     lea rdi, qword [rbx + varBlock.sVarName] ;point rdi to the name string
    76 0000095A 51                  <1>     push rcx
    77 0000095B 56                  <1>     push rsi
    78 0000095C F3A6                <1>     repe cmpsb  ;Compare one byte at a time
    79 0000095E 5E                  <1>     pop rsi
    80 0000095F 59                  <1>     pop rcx
    81 00000960 75E5                <1>     jne .invalid
    82 00000962 F8                  <1>     clc
    83 00000963 EB1C                <1>     jmp short .exit
    84                              <1> .datFound:
    85 00000965 488DBB04010000      <1>     lea rdi, qword [rbx + stringBlock.sVarName] ;point rdi to the name string
    86 0000096C 51                  <1>     push rcx
    87 0000096D 56                  <1>     push rsi
    88 0000096E F3A6                <1>     repe cmpsb  ;Compare one byte at a time
    89 00000970 5E                  <1>     pop rsi
    90 00000971 59                  <1>     pop rcx
    91 00000972 75D3                <1>     jne .invalid
    92 00000974 F8                  <1>     clc
    93 00000975 EB0A                <1>     jmp short .exit
    94                              <1> .varNotFound:
    95 00000977 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    95 00000980 FF                  <1>
    96                              <1> .exit:
    97 00000981 5F                  <1>     pop rdi
    98 00000982 5E                  <1>     pop rsi
    99 00000983 5A                  <1>     pop rdx
   100 00000984 59                  <1>     pop rcx
   101 00000985 58                  <1>     pop rax
   102 00000986 C3                  <1>     ret
   103                              <1> 
   104                              <1> findFirstLine:
   105                              <1> ;Output: rbx = Pointer to the first program block
   106                              <1> ;         dx = Number of the first line
   107 00000987 488B1D(1A110000)    <1>     mov rbx, qword [firstLinPtr]
   108 0000098E 668B15(22110000)    <1>     mov dx, word [firstLinNum]
   109 00000995 C3                  <1>     ret
   110                              <1> 
   111                              <1> ;FIRST SEARCH FOR A LINE NUMBER BEFORE INSERTING IT INTO THE CHAIN
   112                              <1> ;IF THE LINE NUMBER IS FOUND, REPLACE THE COMMAND STRING
   113                              <1> 
   114                              <1> searchForProgramLine:
   115                              <1> ;Walk the program chain looking to see if a line number exists. If it does,
   116                              <1> ; return a pointer to the block in rbx. If it doesn't, return -1 in rbx
   117                              <1> ;Input: dx = Line number
   118                              <1> ;Output: rbx = Pointer to program block 
   119 00000996 488B1D(1A110000)    <1>     mov rbx, qword [firstLinPtr]
   120 0000099D 4881FBFFFFFFFF      <1>     cmp rbx, -1
   121 000009A4 7413                <1>     je .lineFound
   122                              <1> .search:
   123 000009A6 66395304            <1>     cmp word [rbx + progLineBlock.wLineNum], dx ;Equal line numbers?
   124 000009AA 740D                <1>     je .lineFound
   125 000009AC 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr]   ;Walk chain
   126 000009B0 4881FBFFFFFFFF      <1>     cmp rbx, -1
   127 000009B7 75ED                <1>     jne .search ;Not -1? Keep searching
   128                              <1> .lineFound:
   129 000009B9 C3                  <1>     ret
   130                              <1> 
   131                              <1> insertProgramLine:
   132                              <1> ;Walk the program chain looking for the biggest number less than our
   133                              <1> ; line number. Once we have reached the end of the chain, insert the block there, or
   134                              <1> ; if there is no block, then we are the last in the chain
   135                              <1> ;Input: rsi = New Program Block to be added
   136 000009BA 50                  <1>     push rax
   137 000009BB 53                  <1>     push rbx
   138 000009BC 51                  <1>     push rcx
   139 000009BD 52                  <1>     push rdx
   140 000009BE 57                  <1>     push rdi
   141 000009BF E8C3FFFFFF          <1>     call findFirstLine  ;Get start of program in rbx and line number in dx
   142                              <1> ;First check if we should be the first line
   143                              <1> 
   144 000009C4 668B4E04            <1>     mov cx, word [rsi + progLineBlock.wLineNum] ;Save line number in cx
   145 000009C8 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Empty program marker
   146 000009CF 744D                <1>     je .first
   147 000009D1 6639D1              <1>     cmp cx, dx  ;If cx is below dx, then our entry is first
   148 000009D4 7248                <1>     jb .first    
   149                              <1> ;Use ax as the best line number and rdi as the pointer to that block
   150 000009D6 66B8FFFF            <1>     mov ax, -1  ;Marker to indicate no insertion
   151                              <1> .walk:
   152 000009DA 48817B06FFFFFFFF    <1>     cmp qword [rbx + progLineBlock.qPtr], -1    ;We are at the end
   153 000009E2 7419                <1>     je .sort
   154 000009E4 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Walk chain in rbx
   155 000009E8 663B4B04            <1>     cmp cx, word [rbx + progLineBlock.wLineNum]
   156 000009EC 77EC                <1>     ja .walk    ;If line number is above my line number, keep walking
   157                              <1> .candidate:
   158                              <1>     ;If the new line number is below the old line number, reject
   159 000009EE 663B4304            <1>     cmp ax, word [rbx + progLineBlock.wLineNum]
   160 000009F2 72E6                <1>     jb .walk
   161 000009F4 4889DF              <1>     mov rdi, rbx
   162 000009F7 668B4304            <1>     mov ax, word [rbx + progLineBlock.wLineNum]
   163 000009FB EBDD                <1>     jmp short .walk
   164                              <1> .sort:
   165 000009FD 66FFC0              <1>     inc ax  ;If no candidates, exit
   166 00000A00 740E                <1>     jz .skipLink
   167                              <1>     ;rdi points to the previous line to link to
   168 00000A02 488B5706            <1>     mov rdx, qword [rdi + progLineBlock.qPtr]
   169 00000A06 48897706            <1>     mov qword [rdi + progLineBlock.qPtr], rsi   ;Insert self here
   170 00000A0A 48895606            <1>     mov qword [rsi + progLineBlock.qPtr], rdx   ;Link new block to next line
   171 00000A0E EB20                <1>     jmp short .exit
   172                              <1> .skipLink:
   173 00000A10 48897306            <1>     mov qword [rbx + progLineBlock.qPtr], rsi   ;Link rsi to last element in list
   174 00000A14 48C74606FFFFFFFF    <1>     mov qword [rsi + progLineBlock.qPtr], -1    ;End of chain marker
   175 00000A1C EB12                <1>     jmp short .exit
   176                              <1> .first:
   177 00000A1E 488935(1A110000)    <1>     mov qword [firstLinPtr], rsi
   178 00000A25 66890D(22110000)    <1>     mov word [firstLinNum], cx
   179 00000A2C 48895E06            <1>     mov qword [rsi + progLineBlock.qPtr], rbx   ;Put the old first line as second line
   180                              <1> .exit:
   181 00000A30 5F                  <1>     pop rdi
   182 00000A31 5A                  <1>     pop rdx
   183 00000A32 59                  <1>     pop rcx
   184 00000A33 5B                  <1>     pop rbx
   185 00000A34 58                  <1>     pop rax
   186 00000A35 C3                  <1>     ret
   187                              <1> 
   188                              <1> makeEditInteger:
   189                              <1> ;Will make a variable if it is new name, or edit the value if it already exists
   190                              <1> ;Input: rsi = Var name
   191                              <1> ;       (e)cx = Length of varname, max 40 chars
   192                              <1> ;       rax = Value
   193 00000A36 E8EBFEFFFF          <1>     call findVariable   ;rbx returned with var block or -1
   194 00000A3B 4881FBFFFFFFFF      <1>     cmp rbx, -1
   195 00000A42 7405                <1>     je .newVar
   196 00000A44 48894304            <1>     mov qword [rbx + varBlock.qValue], rax
   197 00000A48 C3                  <1>     ret
   198                              <1> .newVar:
   199 00000A49 E878FEFFFF          <1>     call allocateBlock
   200 00000A4E 4881FBFFFFFFFF      <1>     cmp rbx, -1
   201 00000A55 741E                <1>     je .error
   202 00000A57 48894304            <1>     mov qword [rbx + varBlock.qValue], rax  ;Save value
   203 00000A5B 66894B01            <1>     mov word [rbx + varBlock.wBlockSize], cx    ;Save length of name
   204 00000A5F 668143010C00        <1>     add word [rbx + varBlock.wBlockSize], varBlock_size ;Add full block size
   205 00000A65 C6430301            <1>     mov byte [rbx + varBlock.bBlockType], varBlockType  ;Block type
   206 00000A69 57                  <1>     push rdi
   207 00000A6A 488D7B0C            <1>     lea rdi, qword [rbx + varBlock.sVarName]
   208 00000A6E E87B000000          <1>     call strcpy ;Copy the string name into block buffer
   209 00000A73 5F                  <1>     pop rdi
   210 00000A74 C3                  <1>     ret
   211                              <1> .error:
   212 00000A75 488D2D4D010000      <1>     lea rbp, noMem
   213 00000A7C E941F6FFFF          <1>     jmp criticalError
   214                              <1> makeEditString:
   215                              <1> ;Will make a string if it is new name, or replace the string. Strings are null termin
   216                              <1> ;Input: rsi = Var name
   217                              <1> ;       ecx = Length of varname, max 40 chars
   218                              <1> ;       rdx = Ptr to string itself
   219 00000A81 57                  <1>     push rdi
   220 00000A82 56                  <1>     push rsi
   221 00000A83 50                  <1>     push rax
   222 00000A84 53                  <1>     push rbx
   223 00000A85 E89CFEFFFF          <1>     call findVariable   ;rbx returned with string block or -1
   224 00000A8A 4881FBFFFFFFFF      <1>     cmp rbx, -1
   225 00000A91 7528                <1>     jne .strcopy
   226 00000A93 E82EFEFFFF          <1>     call allocateBlock
   227 00000A98 4881FBFFFFFFFF      <1>     cmp rbx, -1
   228 00000A9F 742E                <1>     je .error
   229 00000AA1 66894B01            <1>     mov word [rbx + stringBlock.wBlockSize], cx    ;Save length of name
   230 00000AA5 668143010401        <1>     add word [rbx + stringBlock.wBlockSize], stringBlock_size ;Add full block size
   231 00000AAB C6430302            <1>     mov byte [rbx + stringBlock.bBlockType], datBlockType  ;Block type
   232 00000AAF 488DBB04010000      <1>     lea rdi, qword [rbx + stringBlock.sVarName]
   233 00000AB6 E833000000          <1>     call strcpy ;Copy the string name into block buffer
   234                              <1> .strcopy:
   235 00000ABB 488D7B04            <1>     lea rdi, qword [rbx + stringBlock.string]   ;point to string space
   236 00000ABF 4889D6              <1>     mov rsi, rdx    ;Point rsi to the string itself
   237 00000AC2 E814000000          <1>     call terminatedstrcpy
   238 00000AC7 30C0                <1>     xor al, al
   239 00000AC9 AA                  <1>     stosb   ;Store the null delimiter
   240 00000ACA 5B                  <1>     pop rbx
   241 00000ACB 58                  <1>     pop rax
   242 00000ACC 5E                  <1>     pop rsi
   243 00000ACD 5F                  <1>     pop rdi
   244 00000ACE C3                  <1>     ret
   245                              <1> .error:
   246 00000ACF 488D2DF3000000      <1>     lea rbp, noMem
   247 00000AD6 E9E7F5FFFF          <1>     jmp criticalError
   248                              <1> ;------------------------------------------------:
   249                              <1> ;  The below are misc memory related functions   :
   250                              <1> ;------------------------------------------------:
   251                              <1> terminatedstrcpy:
   252                              <1> ;rdi = Destination String
   253                              <1> ;rsi = Source String
   254                              <1> ;Copy a terminated string
   255 00000ADB 50                  <1>     push rax
   256                              <1> .copy:
   257 00000ADC AC                  <1>     lodsb   ;Get char in al and inc rsi
   258 00000ADD 3C00                <1>     cmp al, 0
   259 00000ADF 740B                <1>     je .exit
   260 00000AE1 3C3A                <1>     cmp al, ":"
   261 00000AE3 7407                <1>     je .exit
   262 00000AE5 3C22                <1>     cmp al, 22h ;Speechmark
   263 00000AE7 7403                <1>     je .exit
   264 00000AE9 AA                  <1>     stosb   ;Save char from al and inc rdi
   265 00000AEA EBF0                <1>     jmp short .copy 
   266                              <1> .exit:
   267 00000AEC 58                  <1>     pop rax
   268 00000AED C3                  <1>     ret
   269                              <1> strcpy:
   270                              <1> ;rdi = Destination string
   271                              <1> ;rsi = Source string
   272                              <1> ;rcx = Number of Chars to copy
   273 00000AEE 57                  <1>     push rdi
   274 00000AEF 56                  <1>     push rsi
   275 00000AF0 51                  <1>     push rcx
   276 00000AF1 F3A4                <1>     rep movsb
   277 00000AF3 59                  <1>     pop rcx
   278 00000AF4 5E                  <1>     pop rsi
   279 00000AF5 5F                  <1>     pop rdi
   280 00000AF6 C3                  <1>     ret
   281                              <1> strlen:
   282                              <1> ;Input: rsi = String start
   283                              <1> ;Output: rsi = String start
   284                              <1> ;        ecx = String length, inclusive of NULL char
   285 00000AF7 50                  <1>     push rax
   286 00000AF8 56                  <1>     push rsi
   287 00000AF9 31C9                <1>     xor ecx, ecx    ;Clear counter
   288                              <1> .search:
   289 00000AFB AC                  <1>     lodsb
   290 00000AFC FFC1                <1>     inc ecx
   291 00000AFE 84C0                <1>     test al, al ;Is this a null char?
   292 00000B00 75F9                <1>     jnz .search ;Null not found
   293                              <1> .exit:
   294 00000B02 5E                  <1>     pop rsi
   295 00000B03 58                  <1>     pop rax
   296 00000B04 C3                  <1>     ret
   297                              <1> 
   298                              <1> memoryDetection:
   299 00000B05 B820E80000          <1>     mov eax, 0E820h
   300 00000B0A CD35                <1>     int 35h     ;rax = ptr to start, rsi = ptr to data table, each entry 24 bytes
   301 00000B0C EB07                <1>     jmp short .fsa1
   302                              <1> .findStartAddr:
   303 00000B0E 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   304                              <1> .fsa1:
   305 00000B15 6685C9              <1>     test cx, cx
   306 00000B18 742C                <1>     jz .worstCase
   307 00000B1A 66FFC9              <1>     dec cx
   308 00000B1D 488B1E              <1>     mov rbx, qword [rsi]    ;Get the address entry into rbx
   309 00000B20 4839C3              <1>     cmp rbx, rax    
   310 00000B23 75E9                <1>     jne .findStartAddr
   311 00000B25 488B4608            <1>     mov rax, qword [rsi + 8] ;Get the number of bytes saved into rax
   312                              <1> 
   313 00000B29 488D15(00000000)    <1>     lea rdx, section.programArea.vstart
   314 00000B30 4829DA              <1>     sub rdx, rbx    ;Get the size of the interpreter and internal data area
   315 00000B33 4829D0              <1>     sub rax, rdx    ;Remove the number of bytes reserved to the interpreter
   316 00000B36 E832FDFFFF          <1>     call printdecimalword
   317 00000B3B 4801C3              <1>     add rbx, rax    ;Add number of bytes to start address
   318 00000B3E 48891D(00110000)    <1>     mov qword [maxMemAddr], rbx ;Save this address
   319                              <1> .exit:
   320 00000B45 C3                  <1>     ret
   321                              <1> .worstCase:
   322                              <1> ;Assume 2Mb MAX memory, rax has base address
   323 00000B46 48BB00002000000000- <1>     mov rbx, 200000h    ;2Mb value
   323 00000B4F 00                  <1>
   324 00000B50 4829C3              <1>     sub rbx, rax
   325 00000B53 4889D8              <1>     mov rax, rbx    ;Get value in rax
   326 00000B56 E812FDFFFF          <1>     call printdecimalword
   327 00000B5B 48C705(00110000)00- <1>     mov qword [maxMemAddr], 200000h
   327 00000B63 002000              <1>
   328 00000B66 C3                  <1>     ret
   329                              <1> 
    17                                  %include "BASICDAT.ASM"
    18 00000B67 4F6B0A0D00          <1> prompt  db "Ok",0Ah,0Dh,0
    19 00000B6C 5343522036342D4241- <1> mainmsg db "SCR 64-BASIC v0.1",0Ah,0Dh,0
    19 00000B75 5349432076302E310A- <1>
    19 00000B7E 0D00                <1>
    20 00000B80 204279746573206672- <1> bytemsg db " Bytes free",0Ah,0Dh,0
    20 00000B89 65650A0D00          <1>
    21 00000B8E 0A0D00              <1> crlf    db 0Ah,0Dh,0
    22 00000B91 4572726F720A0D00    <1> errmsg  db "Error",0Ah,0Dh,0
    23 00000B99 303132333435363738- <1> numbers db "0123456789"
    23 00000BA2 39                  <1>
    24                              <1> ;startVarChars db "ABCDEFGHIJKLMNOPQRSTUVWXYZ" ;Valid starting chars for a var name
    25                              <1> ;numStartVarChars equ $ - startVarChars
    26 00000BA3 414243444546474849- <1> varChrs db "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789%$" ;Valid inner chars for var name
    26 00000BAC 4A4B4C4D4E4F505152- <1>
    26 00000BB5 535455565758595A30- <1>
    26 00000BBE 313233343536373839- <1>
    26 00000BC7 2524                <1>
    27                              <1> numVarChars equ $ - varChrs
    28                              <1> ;% => Integer variable (8 bytes)
    29                              <1> ;! => Single-Precision, Unused and ignored
    30                              <1> ;# => Double-Precision, Unused and ignored
    31                              <1> ;$ => String variable
    32                              <1> 
    33                              <1> ;Error Messages
    34 00000BC9 4F7574206F66206D65- <1> noMem   db "Out of memory",0Ah,0Dh,0
    34 00000BD2 6D6F72790A0D00      <1>
    35 00000BD9 53796E746178206572- <1> syntax  db "Syntax error",0Ah,0Dh,0
    35 00000BE2 726F720A0D00        <1>
    36 00000BE8 54797065206D69736D- <1> typeError   db "Type mismatch",0Ah,0Dh,0
    36 00000BF1 617463680A0D00      <1>
    37 00000BF8 556E646566696E6564- <1> lineNoXist  db "Undefined line number",0Ah,0Dh,0
    37 00000C01 206C696E65206E756D- <1>
    37 00000C0A 6265720A0D00        <1>
    38 00000C10 427265616B20696E20- <1> breakmsg db "Break in ",0
    38 00000C19 00                  <1>
    18                                  Segment programArea follows=resSeg align=1 vfollows=resSeg valign=1
    19                                  ENDOFPROGRAM:

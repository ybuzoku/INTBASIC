     1                                      [map all BASIC.MAP]
     2                                      [DEFAULT REL]
     3                                      BITS 64
     4                                  %include "MEM.INC"
     5                              <1> 
     6                              <1> progLineBlockType   equ 0   ;Program Line
     7                              <1> varBlockType        equ 1   ;Variable block
     8                              <1> datBlockType        equ 2   ;Data block (i.e. a string block)
     9                              <1> 
    10                              <1> notLastMemBlock equ "t" ;Used for blocks that are not the last block
    11                              <1> lastMemBlock    equ "r" ;Used by the last block to indicate end of chain
    12                              <1> 
    13                              <1> %macro memBlockM 0 ;Memory block Macro
    14                              <1>     .bSignature resb 1      ;Valid Signature
    15                              <1>     .wBlockSize resw 1      ;Total block size in bytes
    16                              <1>     .bBlockType resb 1      ;Block type, program line, variable or string
    17                              <1> %endmacro
    18                              <1> 
    19                              <1> struc memBlock
    20                              <1>     memBlockM
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    21                              <1> endstruc
    22                              <1> 
    23                              <1> struc progLineBlock
    24                              <1>     memBlockM               ;Common memory block header
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    25 00000004 ????                <1>     .wLineNum   resw 1      ;Line number, up to 65535
    26 00000006 ????????????????    <1>     .qPtr       resq 1      ;Pointer to the next line, or -1 if last line
    27 0000000E <res 100h>          <1>     .sLine      resb maxLineLen  ;Maximum length 255, keep null char but 
    28                              <1>     ;                             NOT LINE NUMBER OR PRECEEDING SPACES
    29                              <1> endstruc
    30                              <1> 
    31                              <1> struc varBlock
    32                              <1>     memBlockM               ;Common memory block header
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    33 00000004 ????????????????    <1>     .qValue     resq 1      ;One value qword
    34                              <1>     .sVarName:              ;Up to 40 chars for the var name
    35                              <1> endstruc
    36                              <1> 
    37                              <1> struc stringBlock
    38                              <1>     memBlockM
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    39 00000004 <res 100h>          <1>     .string     resb maxLineLen    ;Strings allocate 256 chars
    40                              <1>     .sVarName:              ;Up to 40 chars for the var name
    41                              <1> endstruc
    42                              <1> 
    43                              <1> ;Variable equates
    44                              <1> intEquate   equ 0
    45                              <1> strEquate   equ 1
    46                              <1> 
    47                              <1> ;State byte equates
    48                              <1> breakBit    equ 1    ;Set means on
    49                              <1> traceBit    equ 2    ;Set means TRON, Clear means TROFF
    50                              <1> indirectBit equ 4    ;Set means indirect/program mode, Clear means direct/line mode
    51                              <1> ctrlFlow    equ 8    ;Set means do not find other expression on current line
    52                              <1> 
    53                              <1> ;Control Instruction Signatures
    54                              <1> WHILEsig    equ 055h
    55                              <1> FORsig      equ 05Ah
    56                              <1> GOSUBsig    equ 0A5h
    57                              <1> ;Control stack data structures
    58                              <1> 
    59                              <1> struc forStruct
    60 00000000 ????????????????    <1>     .specQword  resq 1  ;Special qword (see function description)
    61 00000008 ????????????????    <1>     .cntrPtr    resq 1  ;Pointer to counter variable
    62 00000010 ????????????????    <1>     .limitValue resq 1  ;At what value, or after, do we stop the loop 
    63 00000018 ????????????????    <1>     .stepValue  resq 1  ;By how much do we increase on each iteration
    64                              <1> ;Special qword:
    65                              <1> ; Byte 7 = Offset into the line for next instruction after FOR
    66                              <1> ; Bytes[6:5] = Line number of portion after FOR (either FOR line or line after FOR)
    67                              <1> ; Byte 4 = Offset into the line for next instruction after NEXT
    68                              <1> ; Bytes[3:2] = Line number of portion after NEXT (either NEXT line or line after NEXT)
    69                              <1> ; Byte 1 = Parity check sum for the qword, makes the sum of the bytes in qword 0
    70                              <1> ; Byte 0 = FOR signature
    71                              <1> endstruc
    72                              <1> 
    73                              <1> struc whileStruct
    74 00000000 ????????????????    <1>     .specQword  resq 1  ;Special qword
    75                              <1> ;Special qword:
    76                              <1> ; Byte 7 = Offset into the line for the condition to evaluate
    77                              <1> ; Bytes[6:5] = Line number of WHILE 
    78                              <1> ; Byte 4 = Offset in line for either first : after WEND or ASCII NULL (end of line)
    79                              <1> ; Bytes[3:2] = Line number of WEND
    80                              <1> ; Byte 1 = Parity check sum for the qword, makes the sum of the bytes in qword 0
    81                              <1> ; Byte 0 = WHILE signature
    82                              <1> endstruc
    83                              <1> 
    84                              <1> struc gosubStruct
    85 00000000 ????????????????    <1>     .specQword  resq 1  ;Special qword
    86                              <1> ;Special qword:
    87                              <1> ; Byte 7 =  Offset in line for either first : after GOSUB or ASCII NULL (end of line)
    88                              <1> ; Bytes[6:5] = Line number of GOSUB 
    89                              <1> ; Bytes[4:2] = 055AA55h space filler signature
    90                              <1> ; Byte 1 = Parity check sum for the qword, makes the sum of the bytes in qword 0
    91                              <1> ; Byte 0 = GOSUB signature
    92                              <1> endstruc
    93                              <1> 
    94                              <1> ;Stack based macros
    95                              <1> %macro makeSpaceOnStack 1
    96                              <1>     ;The argument is to specify how much space to make on the stack
    97                              <1>     ;It will check to ensure that we dont go past the stack minimum.
    98                              <1>     ;If we do, call stack overflow!
    99                              <1>     pop rax    ;Get the return address qword into rax
   100                              <1>     shl %1, 3  ;Multiply argument register by 8
   101                              <1>     sub rsp, %1 ;Clear space on the stack plus one qword for ret addr
   102                              <1>     lea rbp, stack
   103                              <1>     cmp rsp, rbp
   104                              <1>     ja .macroNotOverflow ;If rsp above overflow buffer, its oki
   105                              <1>     lea rbp, stkOvflw
   106                              <1>     jmp criticalError
   107                              <1> .macroNotOverflow:
   108                              <1>     ;rsp now points to the start of the cleared space
   109                              <1>     ;Put the return address back on the stack
   110                              <1>     push rax
   111                              <1> %endmacro
   112                              <1> 
   113                              <1> %macro cleanSpaceOnStack 1
   114                              <1>     ;The argument is to specify how much space to reclaim from the stack
   115                              <1>     pop rax
   116                              <1>     shl %1, 3   ;Multiply argument register by 8
   117                              <1>     add rsp, %1
   118                              <1>     push rax
   119                              <1> %endmacro
     5                                  Segment .text align=1
     6                                  %include "RELOC.ASM"
     7 00000000 55AA                <1>     dw 0AA55h 
     8                              <1> ;First verify I have Enough RAM for my program and then run
     9 00000002 B801E80000          <1>     mov eax, 0E801h ;Get low memory count in ax
    10 00000007 CD35                <1>     int 35h
    11 00000009 663D0008            <1>     cmp ax, 200000h/400h ;Divide 2Mb into 1Kb chunks.
    12 0000000D 722D                <1>     jb bad
    13 0000000F B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    14 00000014 0F32                <1>     rdmsr
    15 00000016 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    16 00000018 48C1E720            <1>     shl rdi, 20h        ;Shift high
    17 0000001C 89C7                <1>     mov edi, eax        ;Get the low dword in
    18 0000001E 4889F8              <1>     mov rax, rdi
    19 00000021 488D35(00000000)    <1>     lea rsi, section.resSeg.start
    20 00000028 4881C7[F60E0000]    <1>     add rdi, bssLen
    21 0000002F B900100000          <1>     mov ecx, 1000h
    22 00000034 4889F8              <1>     mov rax, rdi    ;Move rax after the BSS area
    23 00000037 F348A5              <1>     rep movsq
    24 0000003A FFE0                <1>     jmp qword rax
    25                              <1> bad:
    26 0000003C 488D2D0D000000      <1>     lea rbp, badmsg
    27 00000043 B804130000          <1>     mov eax, 1304h
    28 00000048 CD30                <1>     int 30h
    29 0000004A 30E4                <1>     xor ah, ah
    30 0000004C CD36                <1>     int 36h
    31 0000004E CD38                <1>     int 38h
    32 00000050 4E6F7420456E6F7567- <1> badmsg: db "Not Enough Memory. Press any key to enter SYSDEBUG...",0
    32 00000059 68204D656D6F72792E- <1>
    32 00000062 20507265737320616E- <1>
    32 0000006B 79206B657920746F20- <1>
    32 00000074 656E74657220535953- <1>
    32 0000007D 44454255472E2E2E00  <1>
     7                                  Segment dSeg nobits align=1 start=0
     8                                  %include "BSS.ASM"
     9 00000000 <res 50h>           <1> oflowbuff   resq 10        ;10 Qwords of overflow buffer
    10                              <1> ;rsp should never get here when operating in a program.
    11                              <1> ;Only acceptable to be used when processing a line
    12 00000050 <res D40h>          <1> stack       resq 200h - 8 - 10*8  ;Save total 4Kb stack space
    13 00000D90 ????????????????    <1> stacktop    resq 1
    14                              <1> 
    15                              <1> maxLineLen  equ 256
    16 00000D98 <res 100h>          <1> inString    resb maxLineLen         ;256 character input string
    17                              <1> 
    18                              <1> ;This string is used for printing long numbers and saving
    19                              <1> ; the variable names for string comparisons
    20                              <1> digitStringLen  equ 48
    21 00000E98 <res 30h>           <1> digitString resb digitStringLen     
    22                              <1> 
    23 00000EC8 ????????????????    <1> minMemAddr  resq 1  ;Pointer from where to start allocating memory blocks
    24 00000ED0 ????????????????    <1> maxMemAddr  resq 1  ;Pointer to the byte past which we cannot allocate anything
    25                              <1> ;==============================================================================
    26                              <1> ;This is the SDA for each program and must be included in the program area
    27                              <1> ; once we add the ability to save the program to disk.
    28                              <1> ;==============================================================================
    29                              <1> 
    30                              <1> ;void* mcbChain, lastBlock, firstLinPtr = -1 => New program, empty entries
    31                              <1> 
    32 00000ED8 ??                  <1> strLen      resb 1  ;Counter for number of chars entered in string
    33 00000ED9 ??                  <1> stateByte   resb 1  ;Bit 0 => Break Set, stop processing after end of current line
    34 00000EDA ????????????????    <1> mcbChain    resq 1  ;Pointer to the start of the chain
    35 00000EE2 ????????????????    <1> lastBlock   resq 1  ;Pointer to the last block
    36 00000EEA ????????????????    <1> firstLinPtr resq 1  ;Pointer to the programs' first line 
    37 00000EF2 ????                <1> firstLinNum resw 1  ;Line number of the first line of the program
    38 00000EF4 ????                <1> currentLine resw 1  ;Currently being executed line number
    39                              <1> 
    40                              <1> bssLen: ;Needed to compute the resident portion load location
     9                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1
    10                                  %include "MAIN.ASM"
    11                              <1> start:
    12 00000000 B801C50000          <1>     mov eax, 0C501h
    13 00000005 CD35                <1>     int 35h         ;Connect the debugger
    14 00000007 E8B6010000          <1>     call ttyClear   ;Clear the teletype
    15                              <1>     ;Set the CtrlBreak Handler
    16 0000000C 488D3DDC000000      <1>     lea rdi, ctrlBreakHandler
    17 00000013 B03B                <1>     mov al, 3Bh
    18 00000015 E8DE000000          <1>     call setHandler
    19                              <1> 
    20                              <1>     ;Memory stuff
    21 0000001A 488D2D9B150000      <1>     lea rbp, mainmsg
    22 00000021 E88F010000          <1>     call ttyOutString
    23 00000026 E82A150000          <1>     call memoryDetection
    24 0000002B 488D2DA1150000      <1>     lea rbp, bytemsg
    25 00000032 E87E010000          <1>     call ttyOutString
    26 00000037 E881090000          <1>     call newProgram         ;Use this to reset program pointers
    27 0000003C C605(D90E0000)00    <1>     mov byte [stateByte], 0 ;Init the byte to 0
    28                              <1> mainLoop:
    29                              <1> ;Entering here resets the program counter but doesnt remove the program from memory
    30 00000043 668B05(F20E0000)    <1>     mov ax, word [firstLinNum]  ;Error occured, restart the program counter
    31 0000004A 668905(F40E0000)    <1>     mov word [currentLine], ax
    32                              <1> 
    33 00000051 FC                  <1>     cld                 ;Set default string op direction
    34 00000052 488D25(900D0000)    <1>     lea rsp, stacktop    ;Reinitialize stack pointer
    35 00000059 8025(D90E0000)FE    <1>     and byte [stateByte], 0FEh  ;Clear the break bit
    36 00000060 488D2D50150000      <1>     lea rbp, prompt
    37 00000067 E849010000          <1>     call ttyOutString
    38 0000006C 488D05D0FFFFFF      <1>     lea rax, mainLoop
    39 00000073 50                  <1>     push rax    ;Save address on stack
    40                              <1> .ml0:
    41                              <1> ;This section will execute an input line if it is an interactive expression
    42                              <1> ; or store it in the program if it has a line number.
    43                              <1> ;It will keep accepting lines until a line is entered without a line number
    44 00000074 E89F000000          <1>     call getLineInput
    45 00000079 E8FA110000          <1>     call decimalToHex   ;Check to see if we have a valid line number
    46 0000007E 6685C0              <1>     test ax, ax
    47 00000081 750C                <1>     jnz .saveLine
    48                              <1> ;Here we execute the line, move rsi to the start of the line
    49 00000083 488D35(980D0000)    <1>     lea rsi, inString
    50 0000008A E9AE010000          <1>     jmp runLine
    51                              <1> .saveLine:
    52                              <1>     ;ax has the line number
    53 0000008F 6689C2              <1>     mov dx, ax
    54 00000092 E84F130000          <1>     call searchForProgramLine
    55 00000097 4881FBFFFFFFFF      <1>     cmp rbx, -1
    56 0000009E 751D                <1>     jne .commonProc ;If not equal, line must exist, continue
    57 000000A0 E8B1020000          <1>     call spaceSkip  ;Skip all the prceeding spaces
    58 000000A5 803E00              <1>     cmp byte [rsi], 0  ;Is the first non space char the end of the string?
    59 000000A8 742D                <1>     je .lineDoesntExist
    60                              <1>     ;So we have a new line that isn't empty, allocate a new block for this line
    61 000000AA E867120000          <1>     call allocateBlock  ;Return a default block in rbx
    62 000000AF C6430300            <1>     mov byte [rbx + progLineBlock.bBlockType], progLineBlockType
    63 000000B3 66894304            <1>     mov word [rbx + progLineBlock.wLineNum], ax
    64 000000B7 66C743010E01        <1>     mov word [rbx + progLineBlock.wBlockSize], progLineBlock_size
    65                              <1> .commonProc:
    66                              <1>     ;If the line already exists, simply override the stored string
    67                              <1>     ;rbx has a pointer to the block
    68 000000BD E885140000          <1>     call strlen ;Get the string length
    69 000000C2 488D7B0E            <1>     lea rdi, qword [rbx + progLineBlock.sLine]  ;Get address here
    70 000000C6 E873140000          <1>     call strcpy ;Copy the program string to the program block
    71 000000CB 56                  <1>     push rsi
    72 000000CC 4889DE              <1>     mov rsi, rbx    ;Move the block into rsi
    73 000000CF E836130000          <1>     call insertProgramLine
    74 000000D4 5E                  <1>     pop rsi
    75 000000D5 EB9D                <1>     jmp short .ml0
    76                              <1> .lineDoesntExist:
    77 000000D7 488D2D6D150000      <1>     lea rbp, lineNoXist
    78                              <1> ;For any error, syntax or otherwise, come here
    79                              <1> criticalError:
    80                              <1> ;Called with rbp pointing at error message
    81 000000DE E8D2000000          <1>     call ttyOutString
    82 000000E3 C605(D90E0000)00    <1>     mov byte [stateByte], 0 ;Reset the state byte
    83 000000EA E954FFFFFF          <1>     jmp mainLoop    ;Trash input line, restart line input
    84                              <1> 
    85                              <1> ctrlBreakHandler:
    86 000000EF 800D(D90E0000)01    <1>     or byte [stateByte], 1  ;Set the byte
    87 000000F6 48CF                <1>     iretq
    88                              <1> setHandler:
    89                              <1> ;Called with:
    90                              <1> ;   rdi = Pointer to interrupt handler
    91                              <1> ;   al = Interrupt number
    92 000000F8 89C5                <1>     mov ebp, eax    ;al has interrupt number which we need to save
    93 000000FA 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
    94                              <1> ;First call to get default BIOS segement selector and attribute word
    95 00000100 88C3                <1>     mov bl, al  ;Set interrupt number 
    96 00000102 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
    97 00000107 CD35                <1>     int 35h
    98 00000109 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
    99 0000010B 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   100                              <1> ;dx preserves the attribute word
   101 0000010D 4889FB              <1>     mov rbx, rdi  ;Pointer passed in rdi
   102 00000110 B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   103 00000115 CD35                <1>     int 35h
   104                              <1>     
   105 00000117 C3                  <1>     ret
    11                                  %include "TTY.ASM"
    12                              <1> getLineInput:
    13                              <1>     ;Sets rsi to the inputstring
    14 00000118 30E4                <1>     xor ah, ah
    15 0000011A 8825(D80E0000)      <1>     mov byte [strLen], ah   ;Zero the char counter
    16 00000120 488D3D(980D0000)    <1>     lea rdi, inString   ;Move to start of line
    17 00000127 4889FE              <1>     mov rsi, rdi
    18 0000012A 57                  <1>     push rdi
    19 0000012B B900010000          <1>     mov ecx, maxLineLen
    20 00000130 30C0                <1>     xor al, al    ;Ensure the input line is sanitised
    21 00000132 F3AA                <1>     rep stosb
    22 00000134 5F                  <1>     pop rdi
    23                              <1> .getChar:
    24 00000135 E883000000          <1>     call ttyIn
    25 0000013A 3C0D                <1>     cmp al, 0Dh ;Line Feed
    26 0000013C 7456                <1>     je .gliExit
    27 0000013E 3C08                <1>     cmp al, 08h ;Bspace
    28 00000140 740F                <1>     je .glibspace
    29 00000142 803D(D80E0000)FE    <1>     cmp byte [strLen], -2   ;If at max length (255 chars), simply beep and wait for either bspace or enter
    30 00000149 7459                <1>     je .gliFull 
    31 0000014B 84C0                <1>     test al, al
    32 0000014D 7443                <1>     je .gliExtendedChar
    33 0000014F EB29                <1>     jmp short .gliCheckCase
    34                              <1> .glibspace:
    35 00000151 F605(D80E0000)FF    <1>     test byte [strLen], -1  ;This will only be zero if strLen=0
    36 00000158 74DB                <1>     jz .getChar
    37 0000015A 48FFCF              <1>     dec rdi ;Go back by one position in the input line
    38 0000015D FE0D(D80E0000)      <1>     dec byte [strLen]
    39 00000163 B008                <1>     mov al, 08h
    40 00000165 E846000000          <1>     call ttyOutChar
    41 0000016A B020                <1>     mov al, 20h  
    42 0000016C E83F000000          <1>     call ttyOutChar
    43 00000171 B008                <1>     mov al, 08h
    44 00000173 E838000000          <1>     call ttyOutChar
    45 00000178 EBBB                <1>     jmp short .getChar
    46                              <1> .gliCheckCase:
    47                              <1>     ;al has char
    48 0000017A E831000000          <1>     call ttyOutChar ;Echo the char as is, but store it uppercase
    49 0000017F 3C61                <1>     cmp al, "a"
    50 00000181 7206                <1>     jb .gliccStore
    51 00000183 3C7A                <1>     cmp al, "z"
    52 00000185 7702                <1>     ja .gliccStore
    53 00000187 2C20                <1>     sub al, 20h
    54                              <1> .gliccStore:
    55 00000189 AA                  <1>     stosb   ;Increment the pointer, add char to buffer
    56 0000018A FE05(D80E0000)      <1>     inc byte [strLen]   ;Inc char count
    57 00000190 EBA3                <1>     jmp short .getChar
    58                              <1> .gliExtendedChar:
    59                              <1>     ;Currently, extended chars do nothing, 
    60                              <1>     ; eventually add F1-F10 functionality
    61                              <1>     ; and arrow key support
    62 00000192 EBA1                <1>     jmp short .getChar
    63                              <1> .gliExit:
    64 00000194 488D2D46140000      <1>     lea rbp, crlf
    65 0000019B E815000000          <1>     call ttyOutString
    66 000001A0 C60700              <1>     mov byte [rdi], 0   ;Null terminate string here
    67 000001A3 C3                  <1>     ret
    68                              <1> .gliFull:
    69 000001A4 B007                <1>     mov al, 07h
    70 000001A6 E805000000          <1>     call ttyOutChar
    71 000001AB E985FFFFFF          <1>     jmp .getChar
    72                              <1> 
    73                              <1> ttyOutChar:
    74 000001B0 B40E                <1>     mov ah, 0Eh
    75 000001B2 CD30                <1>     int 30h
    76 000001B4 C3                  <1>     ret
    77                              <1> ttyOutString:
    78                              <1> ;Print 0 terminated strings
    79 000001B5 B804130000          <1>     mov eax, 1304h
    80 000001BA CD30                <1>     int 30h
    81 000001BC C3                  <1>     ret
    82                              <1> ttyIn:
    83 000001BD 30E4                <1>     xor ah, ah
    84 000001BF CD36                <1>     int 36h
    85 000001C1 C3                  <1>     ret
    86                              <1> ttyClear:
    87 000001C2 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
    88 000001C7 CD30                <1>     int 30h
    89 000001C9 B402                <1>     mov ah, 02h
    90 000001CB 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
    91 000001CD 88D7                <1>     mov bh, dl      ;Set cursor for page 0
    92 000001CF CD30                <1>     int 30h
    93 000001D1 B707                <1>     mov bh, 07h     ;Grey/Black attribs
    94 000001D3 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
    95 000001D8 CD30                <1>     int 30h
    96 000001DA C3                  <1>     ret
    12                                  %include "PROCESS.ASM"
    13                              <1> keywordParser:
    14                              <1> ;rsi must point to the start of the portion of the line to execute
    15 000001DB E876010000          <1>     call spaceSkip  ;Skip any leading spaces
    16 000001E0 803E00              <1>     cmp byte [rsi], 0   ;Null terminated line, empty line?
    17 000001E3 7444                <1>     je .exitEmpty
    18                              <1>     ;rsi now points to function
    19 000001E5 488D3DD7050000      <1>     lea rdi, funTbl     ;Point rdi to the function table
    20                              <1> .functionFinderLoop:
    21 000001EC 0FB60F              <1>     movzx ecx, byte [rdi]  ;Get the string length  
    22 000001EF 80F9FF              <1>     cmp cl, -1  ;-1 is the end of table marker, either Var assignment or error
    23 000001F2 7440                <1>     je .notLetVarAssignment ;No key word found, consider variable assignment
    24 000001F4 56                  <1>     push rsi    ;Save ptr to start of string on stack 
    25 000001F5 57                  <1>     push rdi
    26 000001F6 48FFC7              <1>     inc rdi             ;Goto first char in function name
    27 000001F9 F3A6                <1>     repe cmpsb
    28 000001FB 5F                  <1>     pop rdi
    29 000001FC 5E                  <1>     pop rsi     ;Return ptr to start of string pointer from stack
    30 000001FD 84C9                <1>     test cl, cl ;Did all the chars match?
    31 000001FF 740F                <1>     jz .functionFound
    32 00000201 480FB607            <1>     movzx rax, byte [rdi]    ;Skip unnecessary function pointer
    33 00000205 480502000000        <1>     add rax, 2      ;Add 2 to skip relative pointer
    34 0000020B 4801C7              <1>     add rdi, rax
    35 0000020E EBDC                <1>     jmp short .functionFinderLoop
    36                              <1> .functionFound:
    37                              <1>     ;Function found! Execute!
    38                              <1>     ;rsi points to start of expression to evaluate for function
    39                              <1>     ;rdi points to table entry
    40 00000210 488D1DAC050000      <1>     lea rbx, funTbl         ;Get table address
    41 00000217 480FB617            <1>     movzx rdx, byte [rdi]   ;Get pascal string length
    42 0000021B 0FB70C17            <1>     movzx ecx, word [rdi + rdx] ;Add pascal strlen to table entry and get word offset
    43 0000021F 4801CB              <1>     add rbx, rcx    ;Add word offset to table base
    44 00000222 48FFCA              <1>     dec rdx         ;Get number of chars in function name
    45 00000225 4801D6              <1>     add rsi, rdx    ;rsi points to first char AFTER function name
    46                              <1> .exit:
    47 00000228 C3                  <1>     ret 
    48                              <1> .exitEmpty:
    49 00000229 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    49 00000232 FF                  <1>
    50 00000233 C3                  <1>     ret
    51                              <1>     ;rbx has the function pointer, 
    52                              <1>     ;rsi points to the first char after the keyword (e.g. PRINT, INPUT etc)
    53                              <1> .notLetVarAssignment:
    54 00000234 488D1D04070000      <1>     lea rbx, variableAssignment
    55 0000023B EBEB                <1>     jmp short .exit  ;Now call the function as if it was found from the table
    56                              <1> 
    57                              <1> runLine:
    58                              <1> ;New lines begin here, rsi point to the start of the program line
    59 0000023D F605(D90E0000)02    <1>     test byte [stateByte], traceBit ;Are we TRON?
    60 00000244 0F85B0000000        <1>     jnz .tron
    61                              <1> .stringPortionProcess:
    62                              <1>     ;rsi points to string portion to begin processing
    63 0000024A E88CFFFFFF          <1>     call keywordParser
    64                              <1>     ;rbx has the function pointer, if rbx is -1, line was empty
    65                              <1>     ;rsi points to the first char after the keyword (e.g. PRINT, INPUT etc)
    66 0000024F 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If the line is empty, rbx has a -1 so skip the line
    67 00000256 7437                <1>     je .gotoNextLine
    68 00000258 F605(D90E0000)01    <1>     test byte [stateByte], breakBit ;Is break set before exec?
    69 0000025F 0F85C1000000        <1>     jnz .break
    70                              <1> ;EXEC   LINE    PORTION
    71 00000265 FFD3                <1>     call rbx        ;Call the function pointer in rbx
    72                              <1>     ;rsi should be pointing to the next portion of the line or the end of the line
    73                              <1> ;EXEC COMPLETE
    74 00000267 F605(D90E0000)01    <1>     test byte [stateByte], breakBit ;Is break set after exec?
    75 0000026E 0F85B2000000        <1>     jnz .break
    76 00000274 F605(D90E0000)04    <1>     test byte [stateByte], indirectBit
    77 0000027B 7448                <1>     jz .exit    ;IF in direct mode, just return to command line
    78 0000027D F605(D90E0000)08    <1>     test byte [stateByte], ctrlFlow ;Ctrl Flow =>ignore other expressions temporarily
    79 00000284 7540                <1>     jnz .ctrlFlowHandler
    80                              <1> 
    81 00000286 E82E050000          <1>     call findOtherExpressionsOnLine ;See if there are any other expressions
    82 0000028B 84C0                <1>     test al, al ;If al is null, no more expressions on the line
    83                              <1>     ;If not null, keep executing expressions on same line
    84                              <1>     ;rsi points to first char after :
    85 0000028D 75BB                <1>     jnz .stringPortionProcess ;If a : found, keep processing
    86                              <1> .gotoNextLine:
    87 0000028F 668B15(F40E0000)    <1>     mov dx, word [currentLine]  ;Get in rbx the ptr to current line
    88 00000296 E84B110000          <1>     call searchForProgramLine
    89 0000029B 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Does the line not exist somehow?
    90 000002A2 7421                <1>     je .exit
    91 000002A4 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Walk chain
    92 000002A8 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Are we at the end of the chain?
    93 000002AF 7414                <1>     je .exit
    94 000002B1 668B5304            <1>     mov dx, word [rbx + progLineBlock.wLineNum] ;Save the new line number
    95 000002B5 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Point rsi to the start of the next line
    96                              <1> .gotoNextLineCommon:
    97 000002B9 668915(F40E0000)    <1>     mov word [currentLine], dx
    98 000002C0 E978FFFFFF          <1>     jmp runLine
    99                              <1> .exit:
   100 000002C5 C3                  <1>     ret
   101                              <1> .ctrlFlowHandler:
   102                              <1>     ;The stack pointer should be pointing now at the block
   103                              <1>     ; control flow data block. 
   104                              <1>     ;The functions which return with this bit set, also have placed
   105                              <1>     ; the next line number in dx, offset into line in byte three of edx
   106 000002C6 8025(D90E0000)F7    <1>     and byte [stateByte], ~ctrlFlow ;First clear the ctrlflow bit
   107 000002CD E814110000          <1>     call searchForProgramLine   ;Get pointer to line
   108 000002D2 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Does the line not exist?
   109 000002D9 74DE                <1>     je .gotoNextLineCommon
   110 000002DB 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Point rsi to the start of the next line
   111 000002DF 89D0                <1>     mov eax, edx    ;Isolate the offset into the line
   112 000002E1 C1E810              <1>     shr eax, 10h    ;Get byte three into byte 1
   113 000002E4 25FF000000          <1>     and eax, 0FFh   ;Save only the bottom byte
   114 000002E9 4801C6              <1>     add rsi, rax    ;Add the offset into the string to rsi
   115 000002EC EBCB                <1>     jmp short .gotoNextLineCommon
   116                              <1> .badLineNumber:
   117 000002EE 488D2D56130000      <1>     lea rbp, lineNoXist
   118 000002F5 E9E4FDFFFF          <1>     jmp criticalError
   119                              <1> 
   120                              <1> .tron:
   121                              <1> ;Print the line number about to be executed
   122 000002FA F605(D90E0000)04    <1>     test byte [stateByte], indirectBit  ;Tron should only work in indirect mode
   123 00000301 0F8443FFFFFF        <1>     jz .stringPortionProcess
   124 00000307 B05B                <1>     mov al, "["
   125 00000309 E8A2FEFFFF          <1>     call ttyOutChar
   126 0000030E 0FB705(F40E0000)    <1>     movzx eax, word [currentLine]
   127 00000315 E8860F0000          <1>     call printdecimalword
   128 0000031A B05D                <1>     mov al, "]"
   129 0000031C E88FFEFFFF          <1>     call ttyOutChar
   130 00000321 E924FFFFFF          <1>     jmp .stringPortionProcess
   131                              <1> .break:
   132 00000326 488D2D36130000      <1>     lea rbp, breakmsg
   133 0000032D E883FEFFFF          <1>     call ttyOutString
   134 00000332 0FB705(F40E0000)    <1>     movzx eax, word [currentLine]
   135 00000339 E8620F0000          <1>     call printdecimalword
   136 0000033E 488D2D9C120000      <1>     lea rbp, crlf
   137 00000345 E86BFEFFFF          <1>     call ttyOutString
   138                              <1>     ;Preserve only bit 2 of the state byte
   139 0000034A 8025(D90E0000)02    <1>     and byte [stateByte], traceBit
   140 00000351 E9EDFCFFFF          <1>     jmp mainLoop    ;Exit processing
    13                                  %include "PARSE.ASM"
    14                              <1> ;Main Parsing Routines go here
    15                              <1> 
    16                              <1> spaceSkip:
    17                              <1> ;Allows us to skip spaces that might have been placed for
    18                              <1> ; ease of reading by the user without modifying any registers
    19                              <1> ; except for rsi.
    20                              <1> ;Input: rsi = Pointer to string
    21                              <1> ;Output: rsi = First non space character encountered
    22 00000356 803E20              <1>     cmp byte [rsi], " "
    23 00000359 7505                <1>     jne .exit
    24 0000035B 48FFC6              <1>     inc rsi
    25 0000035E EBF6                <1>     jmp short spaceSkip
    26                              <1> .exit:
    27 00000360 C3                  <1>     ret
    28                              <1> 
    29                              <1> getVarNameLength:
    30                              <1> ;Called pointing to the buffer with the var name in it
    31                              <1> ;Input: rsi = Start of var name
    32                              <1> ;Output: ecx = Length of varname
    33 00000361 50                  <1>     push rax
    34 00000362 56                  <1>     push rsi
    35 00000363 57                  <1>     push rdi
    36 00000364 53                  <1>     push rbx
    37 00000365 52                  <1>     push rdx
    38 00000366 31D2                <1>     xor edx, edx    ;Clear counter of chars
    39 00000368 488D1D87120000      <1>     lea rbx, varChrs    ;Get the list of valid variable name chars
    40                              <1> .search:
    41 0000036F 4889DF              <1>     mov rdi, rbx    ;Save pointer in rbx
    42 00000372 AC                  <1>     lodsb       ;Get the first char into al
    43 00000373 B926000000          <1>     mov ecx, numVarChars
    44 00000378 F2AE                <1>     repne scasb       ;Look for char in the valid chars list
    45 0000037A 750A                <1>     jne .exit   ;Char not found, drop it
    46 0000037C FFC2                <1>     inc edx     ;Add one to number of chars found
    47 0000037E 81FA28000000        <1>     cmp edx, 40 ;At position for char 40?
    48 00000384 72E9                <1>     jb .search  ;Whilst below, keep going
    49                              <1> .exit:
    50 00000386 89D1                <1>     mov ecx, edx
    51 00000388 5A                  <1>     pop rdx
    52 00000389 5B                  <1>     pop rbx
    53 0000038A 5F                  <1>     pop rdi
    54 0000038B 5E                  <1>     pop rsi
    55 0000038C 58                  <1>     pop rax
    56 0000038D C3                  <1>     ret
    57                              <1> 
    58                              <1> getVarType:
    59                              <1> ;Input: rsi = Start of var name
    60                              <1> ;       rcx = Length of varname
    61                              <1> ;Output: ebx = 0 => Integer
    62                              <1> ;        ebx = 1 => String
    63                              <1> ;        ebx = -1 => Var doesnt exist, caller handles
    64 0000038E 50                  <1>     push rax
    65 0000038F 51                  <1>     push rcx
    66 00000390 56                  <1>     push rsi
    67 00000391 E8E00F0000          <1>     call findVariable
    68 00000396 4881FBFFFFFFFF      <1>     cmp rbx, -1
    69 0000039D 7406                <1>     je .exit
    70 0000039F 0FB65B03            <1>     movzx ebx, byte [rbx + memBlock.bBlockType]
    71 000003A3 FFCB                <1>     dec ebx
    72                              <1> .exit:
    73 000003A5 5E                  <1>     pop rsi
    74 000003A6 59                  <1>     pop rcx
    75 000003A7 58                  <1>     pop rax
    76 000003A8 C3                  <1>     ret
    77                              <1> 
    78                              <1> handleAlgebraicExpression:
    79                              <1> ;Input: rsi = Points to a mathematical expression
    80                              <1> ;Output: rax = Result of said expression
    81                              <1> ;Declares a syntax error if weird chars found
    82                              <1> ;Declares a type error if a string variable found
    83                              <1> ;Declares a stack overflow if less than 20 stack words available
    84 000003A9 50                  <1>     push rax
    85 000003AA 488D05(50000000)    <1>     lea rax, stack
    86 000003B1 480550000000        <1>     add rax, 10*8   ;Be extra careful
    87 000003B7 4839C4              <1>     cmp rsp, rax
    88                              <1>     ;if rsp is below rax, fail
    89 000003BA 0F8275030000        <1>     jb .stack
    90 000003C0 58                  <1>     pop rax
    91                              <1> .handleFourthLevel:
    92 000003C1 E807010000          <1>     call .handleThirdLevel
    93                              <1> .parseLogicals:
    94 000003C6 813E414E4420        <1>     cmp dword [rsi], "AND "
    95 000003CC 0F84B2000000        <1>     je .and
    96 000003D2 66813E4F52          <1>     cmp word [rsi], "OR"
    97 000003D7 0F84B6000000        <1>     je .or
    98 000003DD 813E584F5220        <1>     cmp dword [rsi], "XOR "
    99 000003E3 0F84BC000000        <1>     je .xor
   100 000003E9 813E45515620        <1>     cmp dword [rsi], "EQV "
   101 000003EF 0F84BF000000        <1>     je .eqv
   102 000003F5 813E494D5020        <1>     cmp dword [rsi], "IMP "
   103 000003FB 7468                <1>     je .imp
   104 000003FD 813E524F4C20        <1>     cmp dword [rsi], "ROL "
   105 00000403 744F                <1>     je .leftRoll
   106 00000405 813E524F5220        <1>     cmp dword [rsi], "ROR "
   107 0000040B 7436                <1>     je .rightRoll
   108 0000040D 813E53484C20        <1>     cmp dword [rsi], "SHL "
   109 00000413 741D                <1>     je .leftShift
   110 00000415 813E53485220        <1>     cmp dword [rsi], "SHR "
   111 0000041B 0F85E8020000        <1>     jne .exit
   112                              <1> .rightShift:
   113                              <1> ;Shift count is truncated to between 1 and 255 for shift and Roll
   114 00000421 50                  <1>     push rax
   115 00000422 E89F000000          <1>     call .handleThirdLevelSkip
   116 00000427 59                  <1>     pop rcx
   117 00000428 4891                <1>     xchg rax, rcx   ;Move count into rcx, and shift target to rax
   118 0000042A 48D3E8              <1>     shr rax, cl
   119 0000042D E994FFFFFF          <1>     jmp .parseLogicals
   120                              <1> 
   121                              <1> .leftShift:
   122 00000432 50                  <1>     push rax
   123 00000433 E88E000000          <1>     call .handleThirdLevelSkip
   124 00000438 59                  <1>     pop rcx
   125 00000439 4891                <1>     xchg rax, rcx   ;Move count into rcx, and shift target to rax
   126 0000043B 48D3E0              <1>     shl rax, cl
   127 0000043E E983FFFFFF          <1>     jmp .parseLogicals
   128                              <1> 
   129                              <1> .rightRoll:
   130 00000443 50                  <1>     push rax
   131 00000444 E87D000000          <1>     call .handleThirdLevelSkip
   132 00000449 59                  <1>     pop rcx
   133 0000044A 4891                <1>     xchg rax, rcx   ;Move count into rcx, and shift target to rax
   134 0000044C 48D3C8              <1>     ror rax, cl
   135 0000044F E972FFFFFF          <1>     jmp .parseLogicals
   136                              <1> 
   137                              <1> .leftRoll:
   138 00000454 50                  <1>     push rax
   139 00000455 E86C000000          <1>     call .handleThirdLevelSkip
   140 0000045A 59                  <1>     pop rcx
   141 0000045B 4891                <1>     xchg rax, rcx   ;Move count into rcx, and shift target to rax
   142 0000045D 48D3C0              <1>     rol rax, cl
   143 00000460 E961FFFFFF          <1>     jmp .parseLogicals
   144                              <1> 
   145                              <1> .imp:
   146                              <1>     ;A => B == ¬A OR B
   147 00000465 50                  <1>     push rax
   148 00000466 E85B000000          <1>     call .handleThirdLevelSkip
   149 0000046B 59                  <1>     pop rcx ;rcx has A
   150 0000046C 48F7D1              <1>     not rcx
   151 0000046F 4809C8              <1>     or rax, rcx
   152 00000472 E94FFFFFFF          <1>     jmp .parseLogicals
   153                              <1> 
   154                              <1> .not:
   155 00000477 E84A000000          <1>     call .handleThirdLevelSkip  ;Get result in rax
   156 0000047C 48F7D0              <1>     not rax ;Save 1's compliment in rax
   157 0000047F E942FFFFFF          <1>     jmp .parseLogicals
   158                              <1> .and:
   159 00000484 50                  <1>     push rax
   160 00000485 E83C000000          <1>     call .handleThirdLevelSkip
   161 0000048A 59                  <1>     pop rcx
   162 0000048B 4821C8              <1>     and rax, rcx
   163 0000048E E933FFFFFF          <1>     jmp .parseLogicals
   164                              <1> .or:
   165 00000493 48FFCE              <1>     dec rsi ;handle third level skips skips one too many for or
   166 00000496 50                  <1>     push rax
   167 00000497 E82A000000          <1>     call .handleThirdLevelSkip
   168 0000049C 59                  <1>     pop rcx
   169 0000049D 4809C8              <1>     or rax, rcx
   170 000004A0 E921FFFFFF          <1>     jmp .parseLogicals
   171                              <1> .xor:
   172 000004A5 50                  <1>     push rax
   173 000004A6 E81B000000          <1>     call .handleThirdLevelSkip
   174 000004AB 59                  <1>     pop rcx
   175 000004AC 4831C8              <1>     xor rax, rcx
   176 000004AF E912FFFFFF          <1>     jmp .parseLogicals
   177                              <1> .eqv:
   178                              <1> ;Not XOR, ie only if the two bits are equal do we set it
   179 000004B4 50                  <1>     push rax
   180 000004B5 E80C000000          <1>     call .handleThirdLevelSkip
   181 000004BA 59                  <1>     pop rcx
   182 000004BB 4831C8              <1>     xor rax, rcx
   183 000004BE 48F7D0              <1>     not rax
   184 000004C1 E900FFFFFF          <1>     jmp .parseLogicals
   185                              <1> 
   186                              <1> ;Level 3, Relational Connectives
   187                              <1> .handleThirdLevelSkip:
   188 000004C6 4881C603000000      <1>     add rsi, 3  ;Go past the end of the word
   189                              <1> .handleThirdLevel:
   190 000004CD E80B010000          <1>    call .handleSecondLevel
   191                              <1> .parseRelationals:
   192                              <1>     ;Handle Relational connectives
   193 000004D2 803E3D              <1>     cmp byte [rsi], "="
   194 000004D5 0F84BA000000        <1>     je .processEq
   195 000004DB 66813E3C3E          <1>     cmp word [rsi], "<>"
   196 000004E0 0F84D0000000        <1>     je .processNeq
   197 000004E6 66813E3E3C          <1>     cmp word [rsi], "><"
   198 000004EB 0F84C5000000        <1>     je .processNeq
   199 000004F1 803E3C              <1>     cmp byte [rsi], "<"
   200 000004F4 7430                <1>     je .processLess
   201 000004F6 803E3E              <1>     cmp byte [rsi], ">"
   202 000004F9 0F850A020000        <1>     jne .exit
   203                              <1> .processGreater:
   204 000004FF 807E013D            <1>     cmp byte [rsi + 1], "=" ;Is this a GEQ
   205 00000503 7448                <1>     je .processGeq
   206 00000505 50                  <1>     push rax
   207 00000506 E8CF000000          <1>     call .handleSecondLevelSkip
   208 0000050B 59                  <1>     pop rcx ;lhs, rax has rhs of >
   209                              <1> 
   210 0000050C 53                  <1>     push rbx
   211 0000050D 31DB                <1>     xor ebx, ebx
   212 0000050F 4839C1              <1>     cmp rcx, rax
   213 00000512 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1 ;Default to true
   213 0000051B FF                  <1>
   214 0000051C 480F4EC3            <1>     cmovle rax, rbx  ;Move the false value if less than
   215 00000520 5B                  <1>     pop rbx
   216 00000521 E9ACFFFFFF          <1>     jmp .parseRelationals
   217                              <1> .processLess:
   218 00000526 807E013D            <1>     cmp byte [rsi + 1], "=" ;Is this a LEQ
   219 0000052A 7445                <1>     je .processLeq
   220 0000052C 50                  <1>     push rax
   221 0000052D E8A8000000          <1>     call .handleSecondLevelSkip
   222 00000532 59                  <1>     pop rcx ;lhs, rax has rhs of <
   223                              <1> 
   224 00000533 53                  <1>     push rbx
   225 00000534 31DB                <1>     xor ebx, ebx
   226 00000536 4839C1              <1>     cmp rcx, rax
   227 00000539 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1 ;Default to true
   227 00000542 FF                  <1>
   228 00000543 480F4DC3            <1>     cmovge rax, rbx  ;Move the false value if greater than or equal to
   229 00000547 5B                  <1>     pop rbx
   230 00000548 E985FFFFFF          <1>     jmp .parseRelationals
   231                              <1> 
   232                              <1> .processGeq:
   233                              <1> ;Symbol has two chars so skip second char
   234 0000054D 48FFC6              <1>     inc rsi ;Skip first symbol
   235 00000550 50                  <1>     push rax
   236 00000551 E884000000          <1>     call .handleSecondLevelSkip
   237 00000556 59                  <1>     pop rcx ;lhs, rax has rhs of >=
   238                              <1> 
   239 00000557 53                  <1>     push rbx
   240 00000558 31DB                <1>     xor ebx, ebx
   241 0000055A 4839C1              <1>     cmp rcx, rax
   242 0000055D 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1 ;Default to true
   242 00000566 FF                  <1>
   243 00000567 480F4CC3            <1>     cmovl rax, rbx  ;Move the false value if less than
   244 0000056B 5B                  <1>     pop rbx
   245 0000056C E961FFFFFF          <1>     jmp .parseRelationals
   246                              <1> 
   247                              <1> .processLeq:
   248                              <1> ;Symbol has two chars so skip second char
   249 00000571 48FFC6              <1>     inc rsi
   250 00000574 50                  <1>     push rax
   251 00000575 E860000000          <1>     call .handleSecondLevelSkip
   252 0000057A 59                  <1>     pop rcx ;lhs, rax has rhs of <=
   253                              <1> 
   254 0000057B 53                  <1>     push rbx
   255 0000057C 31DB                <1>     xor ebx, ebx
   256 0000057E 4839C1              <1>     cmp rcx, rax
   257 00000581 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1 ;Default to true
   257 0000058A FF                  <1>
   258 0000058B 480F4FC3            <1>     cmovg rax, rbx  ;Move the false value if greater than
   259 0000058F 5B                  <1>     pop rbx
   260 00000590 E93DFFFFFF          <1>     jmp .parseRelationals
   261                              <1> 
   262                              <1> .processEq:
   263 00000595 50                  <1>     push rax
   264 00000596 E83F000000          <1>     call .handleSecondLevelSkip
   265 0000059B 59                  <1>     pop rcx ;lhs, rax has rhs of =
   266                              <1> 
   267 0000059C 53                  <1>     push rbx 
   268 0000059D 31DB                <1>     xor ebx, ebx
   269 0000059F 4839C1              <1>     cmp rcx, rax
   270 000005A2 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1
   270 000005AB FF                  <1>
   271 000005AC 480F45C3            <1>     cmovne rax, rbx ;Only set rax to 0 if not equal
   272 000005B0 5B                  <1>     pop rbx
   273 000005B1 E91CFFFFFF          <1>     jmp .parseRelationals
   274                              <1> 
   275                              <1> .processNeq:
   276                              <1> ;Symbol has two chars so skip second char
   277 000005B6 48FFC6              <1>     inc rsi
   278 000005B9 50                  <1>     push rax
   279 000005BA E81B000000          <1>     call .handleSecondLevelSkip
   280 000005BF 59                  <1>     pop rcx ;lhs, rax has rhs of <>
   281                              <1> 
   282 000005C0 53                  <1>     push rbx 
   283 000005C1 31DB                <1>     xor ebx, ebx
   284 000005C3 4839C1              <1>     cmp rcx, rax
   285 000005C6 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1 ;Assume true, not equal
   285 000005CF FF                  <1>
   286 000005D0 480F44C3            <1>     cmove rax, rbx ;Only set rax to 0 if equal
   287 000005D4 5B                  <1>     pop rbx
   288 000005D5 E9F8FEFFFF          <1>     jmp .parseRelationals
   289                              <1> 
   290                              <1> ;Level 2, Addition and Subtraction
   291                              <1> .handleSecondLevelSkip:
   292 000005DA 48FFC6              <1>     inc rsi
   293                              <1> .handleSecondLevel:
   294 000005DD E828000000          <1>     call .handleFirstLevel
   295                              <1> .parseAdditiveOperators:    
   296 000005E2 803E2D              <1>     cmp byte [rsi], "-"
   297 000005E5 7415                <1>     je .processMinus
   298 000005E7 803E2B              <1>     cmp byte [rsi], "+"
   299 000005EA 0F8519010000        <1>     jne .exit              ;No operators, expression evaluated, exit
   300 000005F0 50                  <1>     push rax
   301 000005F1 E811000000          <1>     call .handleFirstLevelSkip   ;Parse first level
   302                              <1> .processAdd:    
   303 000005F6 59                  <1>     pop rcx
   304 000005F7 4801C8              <1>     add rax, rcx           ;Add the two numbers
   305 000005FA EBE6                <1>     jmp short .parseAdditiveOperators  ;Search again for + or -
   306                              <1> .processMinus:
   307 000005FC 50                  <1>     push rax
   308 000005FD E805000000          <1>     call .handleFirstLevelSkip   ;Parse first level
   309 00000602 48F7D8              <1>     neg rax              ;Change a - b to a + -b
   310 00000605 EBEF                <1>     jmp short .processAdd
   311                              <1> 
   312                              <1> ;Level 1, Exponent, Division and multiplication
   313                              <1> 
   314                              <1> .handleFirstLevelSkip:
   315 00000607 48FFC6              <1>     inc rsi              ;Skip the op symbol
   316                              <1> .handleFirstLevel:
   317 0000060A E8A2000000          <1>     call .handleZerothLevel      ;Call third level
   318                              <1> .parseProductOperators:
   319 0000060F 803E5E              <1>     cmp byte [rsi], "^"
   320 00000612 747A                <1>     je .exponentFound
   321 00000614 803E2F              <1>     cmp byte [rsi], "/"
   322 00000617 743F                <1>     je .processDiv
   323 00000619 803E2A              <1>     cmp byte [rsi], "*"
   324 0000061C 742E                <1>     je .processMult
   325 0000061E 813E4D4F4420        <1>     cmp dword [rsi], "MOD "
   326 00000624 0F85DF000000        <1>     jne .exit     ;Neither exp, multiplication, division or MOD, return up a level
   327                              <1> 
   328 0000062A 4881C603000000      <1>     add rsi, 3  ;Skip the MOD part
   329 00000631 50                  <1>     push rax
   330 00000632 E877000000          <1>     call .handleZerothLevelSkip   ;Call zeroth level
   331 00000637 59                  <1>     pop rcx
   332 00000638 4885C0              <1>     test rax, rax        ;Dividend is returned in rax
   333 0000063B 7433                <1>     jz .divByZero
   334 0000063D 4891                <1>     xchg rax, rcx
   335 0000063F 31D2                <1>     xor edx, edx         ;Clear rdx for rdx:rax
   336 00000641 48F7F9              <1>     idiv rcx             ;Signed division
   337 00000644 4889D0              <1>     mov rax, rdx         ;Save remainder in rax
   338 00000647 E9C3FFFFFF          <1>     jmp .parseProductOperators         ;Search again for * or /
   339                              <1>     
   340                              <1> .processMult:
   341 0000064C 50                  <1>     push rax
   342 0000064D E85C000000          <1>     call .handleZerothLevelSkip   ;Call zeroth level
   343 00000652 59                  <1>     pop rcx
   344 00000653 48F7E9              <1>     imul rcx             ; Multiplication
   345 00000656 EBB7                <1>     jmp short .parseProductOperators   ;Search again for * or /
   346                              <1> 
   347                              <1> .processDiv:
   348 00000658 50                  <1>     push rax
   349 00000659 E850000000          <1>     call .handleZerothLevelSkip   ;Call zeroth level
   350 0000065E 59                  <1>     pop rcx
   351 0000065F 4885C0              <1>     test rax, rax        ;Dividend is returned in rax
   352 00000662 740C                <1>     jz .divByZero
   353 00000664 4891                <1>     xchg rax, rcx
   354 00000666 31D2                <1>     xor edx, edx         ;Clear rdx for rdx:rax
   355 00000668 48F7F9              <1>     idiv rcx             ;Signed division
   356 0000066B E99FFFFFFF          <1>     jmp .parseProductOperators         ;Search again for * or /
   357                              <1> .divByZero:
   358                              <1>     ;If a division by zero occurs, print the message and return
   359                              <1>     ; result as signed 64 bit MAX or MIN + 1 depending on if the 
   360                              <1>     ; number being divided is positive or negative
   361 00000670 55                  <1>     push rbp
   362 00000671 488D2D81100000      <1>     lea rbp, divZer
   363 00000678 E838FBFFFF          <1>     call ttyOutString   ;Print the message
   364 0000067D B801000000          <1>     mov eax, 1 ;Get 1 in ebp and clear upper bits
   365 00000682 48D1C8              <1>     ror rax, 1 ;Put the bit in bit 63
   366 00000685 48F7D0              <1>     not rax    ;Set all other bits and clear sign bit
   367 00000688 5D                  <1>     pop rbp
   368 00000689 E981FFFFFF          <1>     jmp .parseProductOperators
   369                              <1> 
   370                              <1> .exponentFound:
   371                              <1>     ;rax has the number to exponentiate
   372 0000068E 50                  <1>     push rax
   373 0000068F E81A000000          <1>     call .handleZerothLevelSkip  ;Parse the inner expression
   374 00000694 59                  <1>     pop rcx
   375 00000695 4891                <1>     xchg rcx, rax
   376                              <1>     ;rax has the number to exponentiate, rcx has the number of times to loop imul
   377 00000697 53                  <1>     push rbx
   378 00000698 4889C3              <1>     mov rbx, rax    ;Save a copy of rax in rbx
   379 0000069B 48FFC9              <1>     dec rcx
   380                              <1> .imulLoop:
   381 0000069E 31D2                <1>     xor edx, edx
   382 000006A0 48F7EB              <1>     imul rbx
   383 000006A3 48FFC9              <1>     dec rcx
   384 000006A6 75F6                <1>     jnz .imulLoop
   385 000006A8 5B                  <1>     pop rbx
   386 000006A9 E961FFFFFF          <1>     jmp .parseProductOperators
   387                              <1> 
   388                              <1> 
   389                              <1> ;Level 0, Brackets, numbers and vars.
   390                              <1> 
   391                              <1> .handleZerothLevelSkip:
   392 000006AE 48FFC6              <1>     inc rsi             ;Skip the op symbol
   393                              <1> .handleZerothLevel:
   394 000006B1 E8A0FCFFFF          <1>     call spaceSkip
   395 000006B6 AC                  <1>     lodsb               ;Read char and adv rsi
   396 000006B7 3C28                <1>     cmp al, '('
   397 000006B9 750F                <1>     jne .varConstCheck
   398 000006BB E8E9FCFFFF          <1>     call handleAlgebraicExpression  ;Parse the inner expression
   399 000006C0 803E29              <1>     cmp byte [rsi], ')'   
   400 000006C3 745C                <1>     je .closeBracket     ;If close bracket, goto skip spaces
   401 000006C5 E95F000000          <1>     jmp .error     ;Otherwise, error
   402                              <1>   
   403                              <1> .varConstCheck:
   404 000006CA 3C41                <1>     cmp al, "A"       ;Alphabetical first char?
   405 000006CC 730D                <1>     jae .varOrRNDFound      ;Yes, variable found or rnd function or error
   406 000006CE 48FFCE              <1>     dec rsi            ;Else back one symbol 
   407 000006D1 E8A20B0000          <1>     call decimalToHex  ;to read number into rax
   408 000006D6 E97BFCFFFF          <1>     jmp spaceSkip
   409                              <1> 
   410                              <1> .varOrRNDFound:
   411 000006DB 48FFCE              <1>     dec rsi
   412                              <1> ;Evaluate UNARY operators here in reverse stack order of importance
   413 000006DE 813E4E4F5420        <1>     cmp dword [rsi], "NOT "
   414 000006E4 0F848DFDFFFF        <1>     je .not
   415 000006EA 48FFC6              <1>     inc rsi
   416 000006ED 3C5A                <1>     cmp al, "Z"  
   417 000006EF 7738                <1>     ja .error   ;Syntax error if char not between A-Z  
   418 000006F1 3C52                <1>     cmp al, "R"
   419 000006F3 7515                <1>     jne .varFound
   420 000006F5 803E4E              <1>     cmp byte [rsi], "N" ;rsi was advanced by 1, check 
   421 000006F8 7510                <1>     jne .varFound
   422 000006FA 807E0144            <1>     cmp byte [rsi+1], "D"
   423 000006FE 750A                <1>     jne .varFound
   424 00000700 66AD                <1>     lodsw               ;Advance rsi by 3
   425 00000702 AC                  <1>     lodsb
   426 00000703 E440                <1>     in al, 40h         ;Read timer counter 0
   427 00000705 480FB6C0            <1>     movzx rax, al
   428                              <1> .exit:
   429 00000709 C3                  <1>     ret                ;Return
   430                              <1> 
   431                              <1> .varFound:    
   432 0000070A 48FFCE              <1>     dec rsi ;Back a char
   433 0000070D 51                  <1>     push rcx
   434 0000070E E84EFCFFFF          <1>     call getVarNameLength
   435 00000713 E829000000          <1>     call getNumericVariable ;Get variable value in rax
   436 00000718 4801CE              <1>     add rsi, rcx    ;Go past the edge of the name
   437 0000071B 59                  <1>     pop rcx
   438 0000071C E935FCFFFF          <1>     jmp spaceSkip
   439                              <1> 
   440                              <1> .closeBracket:
   441 00000721 48FFC6              <1>     inc rsi
   442 00000724 E92DFCFFFF          <1>     jmp spaceSkip
   443                              <1> .error:
   444 00000729 488D2DFC0E0000      <1>     lea rbp, syntax
   445 00000730 E9A9F9FFFF          <1>     jmp criticalError
   446                              <1> .stack:
   447 00000735 488D2D310F0000      <1>     lea rbp, stkOvflw
   448 0000073C E99DF9FFFF          <1>     jmp criticalError
   449                              <1> 
   450                              <1> 
   451                              <1> getNumericVariable:
   452                              <1> ;Gets the value stored in a variable into rax 
   453                              <1> ;Input: rsi = Pointer to first char of a variable name
   454                              <1> ;Output: rax = Variable Value
   455                              <1> ;        rsi = Pointer to first char of a variable name
   456 00000741 56                  <1>     push rsi
   457 00000742 51                  <1>     push rcx
   458 00000743 53                  <1>     push rbx
   459 00000744 E818FCFFFF          <1>     call getVarNameLength   ;Returns the length of the var name in cx
   460 00000749 E8280C0000          <1>     call findVariable       ;Returns a pointer to the variable block in rbx
   461 0000074E 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Variable doesnt exist? Pretend it is 0
   462 00000755 740E                <1>     je .noVar
   463 00000757 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
   464 0000075B 750C                <1>     jne .stringFoundError
   465 0000075D 488B4304            <1>     mov rax, qword [rbx + varBlock.qValue]
   466                              <1> .exit:
   467 00000761 5B                  <1>     pop rbx
   468 00000762 59                  <1>     pop rcx
   469 00000763 5E                  <1>     pop rsi
   470 00000764 C3                  <1>     ret
   471                              <1> .noVar:
   472 00000765 31C0                <1>     xor eax, eax
   473 00000767 EBF8                <1>     jmp short .exit
   474                              <1> .stringFoundError:
   475 00000769 488D2DCB0E0000      <1>     lea rbp, typeError
   476 00000770 E969F9FFFF          <1>     jmp criticalError
   477                              <1> 
   478                              <1> setNumericVariable:
   479                              <1> ;Sets the value stored in a variable
   480                              <1> ;Input: rsi = Pointer to first char of a variable name
   481                              <1> ;       rax = Variable value
   482                              <1> ;Output: rsi = Pointer to first char of variable name
   483 00000775 56                  <1>     push rsi
   484 00000776 51                  <1>     push rcx
   485 00000777 53                  <1>     push rbx
   486                              <1> 
   487 00000778 E8E4FBFFFF          <1>     call getVarNameLength   ;Returns the length of the var name in cx
   488 0000077D E8F40B0000          <1>     call findVariable       ;Returns a pointer to the variable block in rbx
   489 00000782 4881FBFFFFFFFF      <1>     cmp rbx, -1             ;Variable doesnt exit?
   490 00000789 740E                <1>     je .makeEditInteger      ;Make one!
   491 0000078B 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
   492 0000078F 750F                <1>     jne .stringFoundError
   493 00000791 48894304            <1>     mov qword [rbx + varBlock.qValue], rax  ;Save value
   494                              <1> .exit:
   495 00000795 5B                  <1>     pop rbx
   496 00000796 59                  <1>     pop rcx
   497 00000797 5E                  <1>     pop rsi
   498 00000798 C3                  <1>     ret
   499                              <1> .makeEditInteger:
   500 00000799 E8E80C0000          <1>     call makeEditInteger
   501 0000079E EBF5                <1>     jmp short .exit
   502                              <1> .stringFoundError:
   503 000007A0 488D2D940E0000      <1>     lea rbp, typeError
   504 000007A7 E932F9FFFF          <1>     jmp criticalError
   505                              <1> 
   506                              <1> setStringVariable:
   507                              <1> ;Sets the string pointed to by rdx
   508                              <1> ;Input: rsi = Pointer to first char of a variable name
   509                              <1> ;       rdx = Start of string
   510                              <1> ;Output: rsi = Pointer to first char of variable name
   511                              <1> ;Keeps adding characters until a 0, : or " encountered
   512                              <1> ;Adds a 0 to the end
   513 000007AC 51                  <1>     push rcx
   514 000007AD E8AFFBFFFF          <1>     call getVarNameLength   ;Gets the length of the var name in cx
   515 000007B2 E81A0D0000          <1>     call makeEditString     ;Returns a ptr to the var block in rbx
   516 000007B7 59                  <1>     pop rcx
   517 000007B8 C3                  <1>     ret
   518                              <1> 
   519                              <1> findOtherExpressionsOnLine:
   520                              <1> ;Input: rsi = start of line portion
   521                              <1> ;Output: rsi = points to first char after first ":" found
   522                              <1> ;         al = : if it was found or 00 if not
   523 000007B9 AC                  <1>     lodsb
   524 000007BA 3C00                <1>     cmp al, 0   ;Null hit, RIP procedure
   525 000007BC 7404                <1>     je .exit
   526 000007BE 3C3A                <1>     cmp al, ":" ;Strings can be terminated with a :
   527 000007C0 75F7                <1>     jne findOtherExpressionsOnLine
   528                              <1> .exit:
   529 000007C2 C3                  <1>     ret
    14                                  %include "COMMANDS.ASM"
    15                              <1> 
    16                              <1> funTbl:
    17                              <1> ;Use PASCAL strings to know how long the comparisons need to be
    18                              <1> ;All function pointers are saved as distances from the head
    19                              <1> ; of the function table
    20                              <1> ;BASIC instructions are space terminated
    21                              <1> ;Interpreter instructions are null terminated
    22 000007C3 044C4554            <1>     db 4, "LET"     ;DONE
    23 000007C7 7701                <1>     dw oldSchoolAssignemnt - funTbl
    24                              <1> 
    25 000007C9 054E455700          <1>     db 5, "NEW",0     ;DONE
    26 000007CE FA01                <1>     dw newProgram - funTbl 
    27                              <1> 
    28 000007D0 07434C45415200      <1>     db 7, "CLEAR",0   ;DONE
    29 000007D7 FA01                <1>     dw newProgram - funTbl 
    30                              <1> 
    31 000007D9 064C49535400        <1>     db 6, "LIST",0    ;DONE
    32 000007DF 5E02                <1>     dw listProgram - funTbl 
    33                              <1> 
    34 000007E1 0552554E00          <1>     db 5, "RUN",0     ;DONE
    35 000007E6 9A02                <1>     dw runProgram - funTbl
    36                              <1> 
    37 000007E8 085052494E542420    <1>     db 8, "PRINT$ "    ;Not implemented yet
    38 000007F0 CB02                <1>     dw printStatement - funTbl
    39                              <1> 
    40 000007F2 075052494E5420      <1>     db 7, "PRINT "    ;DONE
    41 000007F9 CB02                <1>     dw printStatement - funTbl
    42                              <1> 
    43 000007FB 033F20              <1>     db 3, "? "        ;DONE, alias Print
    44 000007FE CB02                <1>     dw printStatement - funTbl
    45                              <1> 
    46 00000800 07494E50555420      <1>     db 7, "INPUT "
    47 00000807 6A03                <1>     dw getInput - funTbl
    48                              <1> 
    49 00000809 04494620            <1>     db 4, "IF "      ;DONE, needs to be tested
    50 0000080D 1D0A                <1>     dw handleIf - funTbl
    51                              <1> 
    52 0000080F 06474F544F20        <1>     db 6, "GOTO "    ;DONE
    53 00000815 CA06                <1>     dw goto - funTbl
    54                              <1> 
    55 00000817 07474F53554220      <1>     db 7, "GOSUB "
    56 0000081E DF06                <1>     dw gosub - funTbl
    57                              <1> 
    58 00000820 0852455455524E20    <1>     db 8, "RETURN "
    59 00000828 2807                <1>     dw return - funTbl
    60                              <1> 
    61 0000082A 0852455455524E00    <1>     db 8, "RETURN",0
    62 00000832 2807                <1>     dw return - funTbl
    63                              <1> 
    64 00000834 05464F5220          <1>     db 5, "FOR "
    65 00000839 7607                <1>     dw forLoop - funTbl
    66                              <1> 
    67 0000083B 064E45585400        <1>     db 6, "NEXT",0
    68 00000841 8208                <1>     dw next - funTbl
    69                              <1> 
    70 00000843 064E45585420        <1>     db 6, "NEXT "
    71 00000849 8208                <1>     dw next - funTbl
    72                              <1> 
    73 0000084B 07                  <1>     db 7
    74                              <1> whileStr:
    75 0000084C 5748494C4520        <1>     db "WHILE "
    76 00000852 F608                <1>     dw while - funTbl
    77                              <1> 
    78 00000854 0657454E4420        <1>     db 6, "WEND "
    79 0000085A 6D09                <1>     dw wend - funTbl    
    80 0000085C 0657454E4400        <1>     db 6, "WEND",0
    81 00000862 6D09                <1>     dw wend - funTbl   
    82                              <1> thenStr:
    83 00000864 065448454E20        <1>     db 6, "THEN "    ;DONE
    84 0000086A 4401                <1>     dw badCmd - funTbl
    85                              <1> elseStr:
    86 0000086C 06454C534520        <1>     db 6, "ELSE "    ;DONE
    87 00000872 4401                <1>     dw badCmd - funTbl
    88                              <1> 
    89 00000874 0853595354454D00    <1>     db 8, "SYSTEM",0  ;DONE
    90 0000087C 0904                <1>     dw returnToDOS - funTbl
    91                              <1> 
    92 0000087E 05434C5300          <1>     db 5, "CLS",0     ;DONE
    93 00000883 1504                <1>     dw cls - funTbl
    94 00000885 05434C5320          <1>     db 5, "CLS "      ;DONE
    95 0000088A 1504                <1>     dw cls - funTbl
    96                              <1> 
    97 0000088C 07444542554700      <1>     db 7, "DEBUG",0   ;DONE
    98 00000893 1A04                <1>     dw dbgr - funTbl
    99                              <1> 
   100 00000895 0654524F4E00        <1>     db 6, "TRON",0    ;DONE
   101 0000089B 5501                <1>     dw tron - funTbl
   102                              <1> 
   103 0000089D 0754524F464600      <1>     db 7, "TROFF",0   ;DONE
   104 000008A4 5D01                <1>     dw troff - funTbl
   105                              <1> 
   106 000008A6 05454E4420          <1>     db 5, "END "     ;DONE
   107 000008AB 5001                <1>     dw endProg - funTbl
   108 000008AD 05454E4400          <1>     db 5, "END",0     ;DONE
   109 000008B2 5001                <1>     dw endProg - funTbl
   110                              <1> 
   111 000008B4 0653544F5020        <1>     db 6, "STOP "    ;DONE
   112 000008BA 5001                <1>     dw endProg - funTbl
   113 000008BC 0653544F5000        <1>     db 6, "STOP",0    ;DONE
   114 000008C2 5001                <1>     dw endProg - funTbl
   115                              <1> 
   116 000008C4 0845534341504520    <1>     db 8, "ESCAPE "  ;DONE
   117 000008CC 5001                <1>     dw endProg - funTbl
   118 000008CE 0845534341504500    <1>     db 8, "ESCAPE",0  ;DONE
   119 000008D6 5001                <1>     dw endProg - funTbl
   120                              <1> 
   121 000008D8 07455045454B20      <1>     db 7, "EPEEK "
   122 000008DF 6D01                <1>     dw memRead - funTbl
   123                              <1> 
   124 000008E1 0745504F4B4520      <1>     db 7, "EPOKE "
   125 000008E8 6D01                <1>     dw memWrite - funTbl
   126                              <1> 
   127 000008EA 065045454B20        <1>     db 6, "PEEK "
   128 000008F0 6D01                <1>     dw byteRead - funTbl
   129                              <1> 
   130 000008F2 06504F4B4520        <1>     db 6, "POKE "
   131 000008F8 6D01                <1>     dw byteWrite - funTbl
   132                              <1> 
   133 000008FA 0552454D20          <1>     db 5, "REM "
   134 000008FF 6E01                <1>     dw remark - funTbl
   135 00000901 032720              <1>     db 3, "' "
   136 00000904 6E01                <1>     dw remark - funTbl
   137                              <1> 
   138 00000906 FF                  <1>     db -1    ;Demarkate the end of the table
   139                              <1> ;End of Table
   140                              <1> badCmd:
   141 00000907 488D2D1E0D0000      <1>     lea rbp, syntax
   142 0000090E E8CBF7FFFF          <1>     call criticalError 
   143                              <1> endProg:
   144 00000913 E96A010000          <1>     jmp runProgram.endProgramPoint
   145                              <1> tron:
   146 00000918 800D(D90E0000)02    <1>     or byte [stateByte], traceBit   ;Set the traceBit
   147 0000091F C3                  <1>     ret
   148                              <1> troff:
   149 00000920 8025(D90E0000)FD    <1>     and byte [stateByte], ~traceBit ;Clear the traceBit
   150 00000927 C3                  <1>     ret
   151                              <1> notWrapper:
   152 00000928 6687DB              <1>     xchg bx, bx
   153 0000092B E947FBFFFF          <1>     jmp handleAlgebraicExpression.not
   154                              <1> memRead:
   155                              <1> memWrite:
   156                              <1> byteRead:
   157                              <1> byteWrite:
   158 00000930 C3                  <1>     ret
   159                              <1> remark:
   160                              <1> ;Comment code, keep looping until end of line
   161 00000931 AC                  <1>     lodsb
   162 00000932 84C0                <1>     test al, al 
   163 00000934 75FB                <1>     jnz remark
   164 00000936 48FFCE              <1>     dec rsi ;When al = 0, rsi points past it, move it back by one
   165 00000939 C3                  <1>     ret
   166                              <1> 
   167                              <1> oldSchoolAssignemnt:
   168                              <1> ;Assign with a LET directive
   169                              <1> ;rsi points to first char AFTER function name
   170 0000093A E817FAFFFF          <1>     call spaceSkip  ;Goto var assignment as if at start of line
   171                              <1> variableAssignment: ;Assignment without a LET directive
   172                              <1>     ;Establish if the string is a variable assignment or not
   173                              <1>     ;rsi points to start of string
   174 0000093F E81DFAFFFF          <1>     call getVarNameLength   ;Get the variable name length
   175 00000944 4889F7              <1>     mov rdi, rsi    ;Save ptr to start of string in rdi
   176 00000947 4801CE              <1>     add rsi, rcx    ;Go to end of string
   177 0000094A E807FAFFFF          <1>     call spaceSkip  ;Skip spaces after the end of the var name
   178 0000094F AC                  <1>     lodsb   ;Get the first char after the spaces. This must be a =
   179 00000950 3C3D                <1>     cmp al, "="
   180 00000952 7551                <1>     jne .syntaxError
   181 00000954 4889FE              <1>     mov rsi, rdi    ;Return rsi to the start of the string name
   182 00000957 4801CE              <1>     add rsi, rcx    ;Go to end of var name
   183 0000095A 48FFCE              <1>     dec rsi
   184 0000095D AC                  <1>     lodsb   ;Get last char into al and inc rsi
   185 0000095E 3C24                <1>     cmp al, "$"
   186 00000960 7420                <1>     je .stringAssignment
   187 00000962 E8EFF9FFFF          <1>     call spaceSkip  ;Skip any spaces
   188 00000967 48FFC6              <1>     inc rsi         ;Go past the equality sign
   189 0000096A E8E7F9FFFF          <1>     call spaceSkip  ;Skip any spaces
   190 0000096F 803E22              <1>     cmp byte [rsi], 22h ;Open speech mark
   191 00000972 743D                <1>     je .typError    ;Integers cant have speechmarks
   192 00000974 E830FAFFFF          <1>     call handleAlgebraicExpression  ;Get the result of the expression into rax
   193 00000979 4889FE              <1>     mov rsi, rdi    ;Return the start of the string into rsi
   194 0000097C E8F4FDFFFF          <1>     call setNumericVariable
   195 00000981 C3                  <1>     ret
   196                              <1> .stringAssignment:
   197                              <1> ;This simply copies the string which is either speech mark, 0 or : terminated
   198                              <1> ;First allocate a string
   199                              <1> ;rsi = First char after the end of the variable name
   200                              <1> ;rdi = start of variable name 
   201                              <1> ;rcx = char count for var name
   202 00000982 E8CFF9FFFF          <1>     call spaceSkip  ;Skip any spaces
   203 00000987 48FFC6              <1>     inc rsi         ;Go past the equality sign
   204 0000098A E8C7F9FFFF          <1>     call spaceSkip  ;Skip any spaces
   205 0000098F 803E22              <1>     cmp byte [rsi], 22h ;Open speechmark check again
   206 00000992 751D                <1>     jne .typError    ;Assigning a number to a string is a type error
   207                              <1>     ;rsi now points to the start of the string to save
   208 00000994 48FFC6              <1>     inc rsi ;Go past the speech mark
   209 00000997 4889F2              <1>     mov rdx, rsi    ;save start of string data in rdx
   210 0000099A 4889FE              <1>     mov rsi, rdi
   211 0000099D 57                  <1>     push rdi
   212 0000099E E809FEFFFF          <1>     call setStringVariable
   213 000009A3 5E                  <1>     pop rsi ;Save the start of the assignment in rsi
   214 000009A4 C3                  <1>     ret
   215                              <1> 
   216                              <1> .syntaxError:
   217 000009A5 488D2D800C0000      <1>     lea rbp, syntax ;Syntax error, keyword a bit confused
   218 000009AC E92DF7FFFF          <1>     jmp criticalError
   219                              <1> .typError:
   220 000009B1 488D2D830C0000      <1>     lea rbp, typeError
   221 000009B8 E921F7FFFF          <1>     jmp criticalError
   222                              <1> 
   223                              <1> 
   224                              <1> newProgram: 
   225                              <1> ;Simply reset the program pointers
   226 000009BD 488D05(00000000)    <1>     lea rax, section.programArea.vstart
   227 000009C4 488905(C80E0000)    <1>     mov qword [minMemAddr], rax
   228 000009CB 488905(E20E0000)    <1>     mov qword [lastBlock], rax  ;Start writing at this location
   229 000009D2 488905(DA0E0000)    <1>     mov qword [mcbChain], rax   ;Create a mock MCB here
   230                              <1> 
   231 000009D9 4889C2              <1>     mov rdx, rax
   232 000009DC 668B4801            <1>     mov cx, word [rax + memBlock.wBlockSize]
   233 000009E0 4889C7              <1>     mov rdi, rax
   234 000009E3 30C0                <1>     xor al, al
   235 000009E5 F3AA                <1>     rep stosb   ;Sanitise the old first allocation
   236                              <1> 
   237 000009E7 C60272              <1>     mov byte [rdx + memBlock.bSignature], lastMemBlock
   238 000009EA 66C742010000        <1>     mov word [rdx + memBlock.wBlockSize], 0 ;Dummy block, no size, gets overwritten
   239 000009F0 31C0                <1>     xor eax, eax
   240 000009F2 8805(D80E0000)      <1>     mov byte [strLen], al
   241 000009F8 488D3D(980D0000)    <1>     lea rdi, inString
   242 000009FF B900010000          <1>     mov ecx, maxLineLen
   243 00000A04 F3AA                <1>     rep stosb
   244 00000A06 C605(F40E0000)0A    <1>     mov byte [currentLine], 10  ;Default to line 10
   245 00000A0D 31C0                <1>     xor eax, eax,
   246 00000A0F 48FFC8              <1>     dec rax ;rax = -1
   247 00000A12 488905(EA0E0000)    <1>     mov qword [firstLinPtr], rax ;No program in memory
   248 00000A19 668905(F20E0000)    <1>     mov word [firstLinNum], ax
   249 00000A20 C3                  <1>     ret
   250                              <1> listProgram:
   251                              <1> ;Go line by line and echo the program lines, inserting a crlf after each
   252                              <1> ;First print the line number, then add a space
   253 00000A21 488B1D(EA0E0000)    <1>     mov rbx, qword [firstLinPtr]    ;Get a pointer to the first program line
   254                              <1> .printLines:
   255 00000A28 488D2DB20B0000      <1>     lea rbp, crlf           ;New line
   256 00000A2F E881F7FFFF          <1>     call ttyOutString
   257 00000A34 4881FBFFFFFFFF      <1>     cmp rbx, -1
   258 00000A3B 741F                <1>     je .exit
   259 00000A3D 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]
   260 00000A41 E85A080000          <1>     call printdecimalword
   261 00000A46 B020                <1>     mov al, " "
   262 00000A48 E863F7FFFF          <1>     call ttyOutChar ;Print a space
   263 00000A4D 488D6B0E            <1>     lea rbp, qword [rbx + progLineBlock.sLine]  ;Null terminated string
   264 00000A51 E85FF7FFFF          <1>     call ttyOutString
   265 00000A56 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr]   ;Walk list of program lines
   266 00000A5A EBCC                <1>     jmp short .printLines
   267                              <1> .exit:
   268 00000A5C C3                  <1>     ret
   269                              <1> runProgram:
   270                              <1>     ;Runs the machine in indirect mode
   271 00000A5D 800D(D90E0000)04    <1>     or byte [stateByte], indirectBit    ;Entering indirect mode
   272                              <1>     ;rsi must point to the first line
   273 00000A64 668B15(F20E0000)    <1>     mov dx, word [firstLinNum]
   274 00000A6B 668915(F40E0000)    <1>     mov word [currentLine], dx ;Reset the current line back to the start
   275 00000A72 488B1D(EA0E0000)    <1>     mov rbx, qword [firstLinPtr]
   276 00000A79 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine]
   277 00000A7D E8BBF7FFFF          <1>     call runLine
   278                              <1> .endProgramPoint:
   279 00000A82 8025(D90E0000)FB    <1>     and byte [stateByte], ~indirectBit  ;Exit indirect mode
   280 00000A89 E9B5F5FFFF          <1>     jmp mainLoop    ;Resets the stack if exit mid loop to avoid stkoverflow
   281                              <1> 
   282                              <1> printStatement:
   283                              <1> ;Strings must be "" delimited or a string variable must be used
   284                              <1> ;rsi points to first char AFTER function name
   285                              <1> .printStart:
   286 00000A8E E8C3F8FFFF          <1>     call spaceSkip  ;move rsi to the start of the expression
   287 00000A93 AC                  <1>     lodsb
   288                              <1> 
   289 00000A94 84C0                <1>     test al, al     ;Is this a null string?
   290 00000A96 746B                <1>     jz .psvexit
   291 00000A98 3C22                <1>     cmp al, 022h    ;22h = ASCII Speechmarks
   292 00000A9A 7449                <1>     je .stringPrint
   293                              <1>     ;Here we check if the first char is ASCII, if it is, check if its a string var
   294 00000A9C 3C41                <1>     cmp al, "A"
   295 00000A9E 7204                <1>     jb .printExpr
   296 00000AA0 3C5A                <1>     cmp al, "Z"
   297 00000AA2 7214                <1>     jb .printStringVar
   298                              <1> .printExpr:
   299 00000AA4 48FFCE              <1>     dec rsi ;Return to the start of the string
   300                              <1> .printExpr1:    ;Return without dec rsi
   301 00000AA7 E8FDF8FFFF          <1>     call handleAlgebraicExpression ;Gets value of a var and/or algebraic operation
   302 00000AAC E8EF070000          <1>     call printdecimalword
   303 00000AB1 E8A0F8FFFF          <1>     call spaceSkip
   304 00000AB6 EB2D                <1>     jmp short .stringPrint
   305                              <1> .printStringVar:
   306                              <1>     ;Check if it is a string var or a unary function
   307 00000AB8 48FFCE              <1>     dec rsi
   308 00000ABB E8A1F8FFFF          <1>     call getVarNameLength
   309 00000AC0 E8C9F8FFFF          <1>     call getVarType
   310 00000AC5 81FB01000000        <1>     cmp ebx, strEquate
   311 00000ACB 75DA                <1>     jne .printExpr1  ;rsi points to the same point as initially
   312 00000ACD E8A4080000          <1>     call findVariable   ;ecx has string length, get block ptr in rbx
   313 00000AD2 55                  <1>     push rbp
   314 00000AD3 488D6B04            <1>     lea rbp, qword [rbx + stringBlock.string]
   315 00000AD7 E8D9F6FFFF          <1>     call ttyOutString
   316 00000ADC 5D                  <1>     pop rbp
   317 00000ADD 4801CE              <1>     add rsi, rcx    ;Go past variable
   318 00000AE0 E871F8FFFF          <1>     call spaceSkip
   319                              <1> .stringPrint:
   320 00000AE5 AC                  <1>     lodsb
   321 00000AE6 3C00                <1>     cmp al, 0
   322 00000AE8 7419                <1>     je .psvexit
   323 00000AEA 3C3A                <1>     cmp al, ":"
   324 00000AEC 7412                <1>     je .psvexitColon
   325 00000AEE 3C22                <1>     cmp al, 022h    ;Close Speech marks, check next char
   326 00000AF0 741E                <1>     je .closespeechmarks
   327 00000AF2 3C3B                <1>     cmp al, ";"     ;Semicolon means print next section on same line
   328 00000AF4 742D                <1>     je .continue
   329 00000AF6 E8B5F6FFFF          <1>     call ttyOutChar
   330 00000AFB EBE8                <1>     jmp short .stringPrint
   331                              <1> .openSpeechMark:
   332 00000AFD 48FFC6              <1>     inc rsi ;Go back a char
   333                              <1> .psvexitColon:
   334 00000B00 48FFCE              <1>     dec rsi ;Go back a char
   335                              <1> .psvexit:
   336 00000B03 488D2DD70A0000      <1>     lea rbp, crlf
   337 00000B0A E8A6F6FFFF          <1>     call ttyOutString
   338 00000B0F C3                  <1>     ret
   339                              <1> .closespeechmarks:
   340 00000B10 E841F8FFFF          <1>     call spaceSkip
   341 00000B15 AC                  <1>     lodsb
   342 00000B16 3C3B                <1>     cmp al, ";" ;only exception to exiting if next non space char is a semicolon
   343 00000B18 0F8470FFFFFF        <1>     je .printStart
   344 00000B1E 48FFCE              <1>     dec rsi ;Go back a step
   345 00000B21 EBE0                <1>     jmp short .psvexit
   346                              <1> .continue:
   347 00000B23 E82EF8FFFF          <1>     call spaceSkip
   348 00000B28 E961FFFFFF          <1>     jmp .printStart
   349                              <1> getInput:
   350                              <1> ;Take a string as a prompt
   351                              <1> ;rdi points just past the end of the command line
   352                              <1> ;rsi points to first char AFTER function name
   353                              <1> ;Input prompt strings must be speech mark delimited on both sides!
   354 00000B2D E824F8FFFF          <1>     call spaceSkip
   355                              <1>     ;Now check to see if the user has specified a custom prompt
   356 00000B32 AC                  <1>     lodsb   ;Get first symbol and go past it
   357 00000B33 3C22                <1>     cmp al, 22h ;Speechmark?
   358 00000B35 7535                <1>     jne .defaultPrompt ;If no speechmark, print default prompt
   359                              <1> .customPrompt:
   360 00000B37 4889F7              <1>     mov rdi, rsi    ;Save start of string in rdi
   361                              <1> .cp0:
   362 00000B3A AC                  <1>     lodsb           ;Now search for end of string speech marks or null terminator
   363 00000B3B 3C22                <1>     cmp al, 22h     ;Is al a speech mark?
   364 00000B3D 7410                <1>     je .printCustomPrompt
   365 00000B3F 84C0                <1>     test al, al     ;Is al null?
   366 00000B41 75F7                <1>     jnz .cp0        ;No, keep searching for terminator
   367                              <1> .error:
   368 00000B43 488D2DE20A0000      <1>     lea rbp, syntax
   369 00000B4A E98FF5FFFF          <1>     jmp criticalError
   370                              <1> .printCustomPrompt:
   371 00000B4F 4889FE              <1>     mov rsi, rdi    ;rsi points to the first char of the string
   372                              <1> .pcp0:
   373 00000B52 AC                  <1>     lodsb
   374 00000B53 3C22                <1>     cmp al, 22h     ;Speechmark?
   375 00000B55 7407                <1>     je .stopPrompt
   376 00000B57 E854F6FFFF          <1>     call ttyOutChar
   377 00000B5C EBF4                <1>     jmp short .pcp0
   378                              <1> .stopPrompt:
   379 00000B5E E8F3F7FFFF          <1>     call spaceSkip  ;Skip spaces
   380 00000B63 AC                  <1>     lodsb   ;Get first non space char after closing speechmark
   381 00000B64 3C3B                <1>     cmp al, ";" ;Semicolon means no default prompt
   382 00000B66 740E                <1>     je .noDefaultPrompt
   383 00000B68 3C2C                <1>     cmp al, "," ;Comma also means no default prompt
   384 00000B6A 740A                <1>     je .noDefaultPrompt
   385                              <1> .defaultPrompt:
   386 00000B6C 48FFCE              <1>     dec rsi
   387 00000B6F B03F                <1>     mov al, "?"
   388 00000B71 E83AF6FFFF          <1>     call ttyOutChar
   389                              <1> .noDefaultPrompt:
   390 00000B76 B020                <1>     mov al, " " ;space
   391 00000B78 E833F6FFFF          <1>     call ttyOutChar
   392 00000B7D E8D4F7FFFF          <1>     call spaceSkip  ;Skip spaces after default supressor to get to var name
   393 00000B82 E8DAF7FFFF          <1>     call getVarNameLength   ;Get var name length in ecx
   394 00000B87 488D3D(980E0000)    <1>     lea rdi, digitString    ;Buffer has 48 chars, string names are max 40
   395 00000B8E E8AB090000          <1>     call strcpy     ;rsi points to var name
   396 00000B93 57                  <1>     push rdi    ;rdi points to first char of variable
   397 00000B94 51                  <1>     push rcx
   398 00000B95 E87EF5FFFF          <1>     call getLineInput   ;Get input from the user in inString, null terminated
   399                              <1>     ;This will sanitise in direct mode meaning input cannot have any more statements
   400                              <1>     ; after it.
   401 00000B9A 59                  <1>     pop rcx
   402 00000B9B 5F                  <1>     pop rdi 
   403 00000B9C 4889FE              <1>     mov rsi, rdi    ;Save the start of the var name in rsi
   404 00000B9F 4801CE              <1>     add rsi, rcx    ;Go to end of var
   405 00000BA2 48FFCE              <1>     dec rsi
   406 00000BA5 AC                  <1>     lodsb   ;Are we a string variable?
   407 00000BA6 488D35(980D0000)    <1>     lea rsi, inString   ;Move rsi to start of user input
   408 00000BAD 3C24                <1>     cmp al, "$"
   409 00000BAF 740F                <1>     je .handleString
   410                              <1> .handleNumeric:
   411 00000BB1 E8F3F7FFFF          <1>     call handleAlgebraicExpression  ;Get the result of the expression into rax
   412 00000BB6 4889FE              <1>     mov rsi, rdi    ;Return the start of the string into rsi
   413 00000BB9 E8B7FBFFFF          <1>     call setNumericVariable
   414 00000BBE EB0B                <1>     jmp short .commonExit
   415                              <1> .handleString:
   416                              <1>     ;IF a string variable, come here
   417                              <1>     ;rdi has the start of the variable name
   418                              <1> 
   419                              <1>     ;rdx must point to the start of the string
   420                              <1>     ;rsi must point to the start of the variable name
   421 00000BC0 4889F2              <1>     mov rdx, rsi
   422 00000BC3 4889FE              <1>     mov rsi, rdi    ;Return start of user name in rsi
   423 00000BC6 E8E1FBFFFF          <1>     call setStringVariable
   424                              <1> .commonExit:
   425 00000BCB C3                  <1>     ret
   426                              <1> 
   427                              <1> ;==========================================================:
   428                              <1> ;==========================================================:
   429                              <1> ;==========================================================:
   430                              <1> ;          Functions Related to Program Management         :
   431                              <1> ;==========================================================:
   432                              <1> ;==========================================================:
   433                              <1> ;==========================================================:
   434                              <1> returnToDOS:
   435 00000BCC B007                <1>     mov al, 07h
   436 00000BCE E8DDF5FFFF          <1>     call ttyOutChar
   437 00000BD3 E928F4FFFF          <1>     jmp start   ;Reset the interpreter
   438                              <1> cls:
   439 00000BD8 E9E5F5FFFF          <1>     jmp ttyClear
   440                              <1> dbgr:
   441                              <1>     ;Hook int 40h to main prog EP to allow returning 
   442                              <1> ;First call to get default BIOS segement selector and attribute word
   443 00000BDD B340                <1>     mov bl, 40h
   444 00000BDF B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   445 00000BE4 CD35                <1>     int 35h
   446 00000BE6 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   447 00000BE8 B940000000          <1>     mov ecx, 40h    ;Interrupt number
   448                              <1> ;dx preserves the attribute word
   449 00000BED 488D1D09000000      <1>     lea rbx, .farReturn  ;Pointer passed in
   450 00000BF4 B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   451 00000BF9 CD35                <1>     int 35h
   452 00000BFB CD38                <1>     int 38h ;Call debugger
   453                              <1> .farReturn:
   454                              <1>     ;Reconnect CTRL+BREAK handler
   455 00000BFD 48BC-               <1>     mov rsp, stacktop   ;Immediately reset stack
   455 00000BFF [900D000000000000]  <1>
   456 00000C07 488D3DE1F4FFFF      <1>     lea rdi, ctrlBreakHandler
   457 00000C0E B03B                <1>     mov al, 3Bh
   458 00000C10 E8E3F4FFFF          <1>     call setHandler
   459                              <1>     
   460 00000C15 488D2DC5090000      <1>     lea rbp, crlf
   461 00000C1C E894F5FFFF          <1>     call ttyOutString
   462 00000C21 E91DF4FFFF          <1>     jmp mainLoop
    15                                  %include "CTRLFLOW.ASM"
    16                              <1> 
    17                              <1> ;Handles all the specific functions related to control flow such as scanning 
    18                              <1> ; lines for WEND, RETURN, NEXT
    19                              <1> retScan:
    20                              <1> ;Gets the current line address and starts searching program from current prog line
    21                              <1> ; for a return
    22 00000C26 56                  <1>     push rsi
    23 00000C27 668B15(F40E0000)    <1>     mov dx, word [currentLine]  ;pre-load dx with the current line number
    24 00000C2E E8B3070000          <1>     call searchForProgramLine   ;Get program block pointer into rbx
    25 00000C33 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If for some reason line doesnt exist?
    26 00000C3A 0F8493000000        <1>     je .error   ;Unknown Error
    27                              <1> ;Now pack for the first portion/line after the GOSUB
    28                              <1> ;rsi points just after the GOSUB itself
    29 00000C40 56                  <1>     push rsi    ;Save the first point after the WHILE itself
    30 00000C41 E873FBFFFF          <1>     call findOtherExpressionsOnLine     ;Get the first : or ASCII NUL
    31 00000C46 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]  ;Get the line number
    32 00000C4A 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine]  ;Load ptr to start of string in rsi
    33 00000C4E 4829CE              <1>     sub rsi, rcx    ;Compute difference from start of string
    34 00000C51 89F1                <1>     mov ecx, esi    ;Should just be low byte of si so cl
    35 00000C53 81E1FF000000        <1>     and ecx, 0FFh   ;Save only bottom byte just in case of garbage
    36 00000C59 C1E110              <1>     shl ecx, 2*8    ;Move to the third byte in the dword
    37 00000C5C 09C8                <1>     or eax, ecx     ;Add byte three to eax
    38 00000C5E 89C2                <1>     mov edx, eax    ;Save in edx
    39 00000C60 48C1E228            <1>     shl rdx, 5*8    ;Shift three bytes to top of qword
    40 00000C64 5E                  <1>     pop rsi
    41                              <1> .initialSearch:
    42                              <1>     ;First look for a ASCII NUL or RETURN
    43 00000C65 803E00              <1>     cmp byte [rsi], 0
    44 00000C68 7415                <1>     je .gotoNextLine
    45 00000C6A 813E52455455        <1>     cmp dword [rsi], "RETU"
    46 00000C70 7508                <1>     jne .notCandidate
    47 00000C72 66817E04524E        <1>     cmp word [rsi + 4], "RN"
    48 00000C78 7418                <1>     je .wordFound
    49                              <1> .notCandidate:
    50 00000C7A 48FFC6              <1>     inc rsi ;Now search up until the end of the line for a RETURN
    51 00000C7D EBE6                <1>     jmp short .initialSearch
    52                              <1> .gotoNextLine:
    53 00000C7F 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Get pointer to next program line
    54 00000C83 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Now, when walking if it gives a value of -1, no NEXT found
    55 00000C8A 7431                <1>     je .noRet
    56 00000C8C 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Load pointer to string rsi
    57 00000C90 EBD3                <1>     jmp short .initialSearch
    58                              <1> .wordFound:
    59                              <1>     ;Here, RETURN found! Huzzah! Now pack edx correctly
    60                              <1>     ;Add 055AA55h in bytes 4:2
    61 00000C92 48B8000055AA550000- <1>     mov rax, 055AA550000h
    61 00000C9B 00                  <1>
    62 00000C9C 4809C2              <1>     or rdx, rax
    63                              <1>     ;Compute checksum now
    64 00000C9F 31C0                <1>     xor eax, eax
    65 00000CA1 B0A5                <1>     mov al, GOSUBsig 
    66 00000CA3 6689C2              <1>     mov dx, ax  ;Zero checksum byte
    67 00000CA6 31C0                <1>     xor eax, eax
    68 00000CA8 B908000000          <1>     mov ecx, 8  ;8 times
    69                              <1> .csumLoop:
    70                              <1>     ;Spin rdx 8 times adding each byte to al
    71 00000CAD 00D0                <1>     add al, dl
    72 00000CAF 48C1C208            <1>     rol rdx, 8  ;Rotate left by 8 bits
    73 00000CB3 FFC9                <1>     dec ecx
    74 00000CB5 75F6                <1>     jnz .csumLoop
    75 00000CB7 F6D8                <1>     neg al ;Get twos compliment of sum (FFh - al)
    76 00000CB9 88C6                <1>     mov dh, al  ;Save in checksum byte
    77                              <1> .exit:
    78 00000CBB 5E                  <1>     pop rsi
    79 00000CBC C3                  <1>     ret
    80                              <1> .noRet:
    81 00000CBD 488D2D0A0A0000      <1>     lea rbp, noReturn
    82 00000CC4 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
    82 00000CCD FF                  <1>
    83 00000CCE E9E8FFFFFF          <1>     jmp .exit
    84                              <1> .error:
    85 00000CD3 488D2D0B0A0000      <1>     lea rbp, uknowner
    86 00000CDA 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
    86 00000CE3 FF                  <1>
    87 00000CE4 E9D2FFFFFF          <1>     jmp .exit
    88                              <1> 
    89                              <1> wendScan:
    90                              <1> ; Gets the current line address and starts searching program from the current line
    91                              <1> ; for a WEND
    92                              <1> ; Puts the packed specialQword into rdx if a WEND is found
    93                              <1> ; Returns rdx = -1 if an error occured with rbp pointing to the error string
    94 00000CE9 56                  <1>     push rsi
    95 00000CEA 668B15(F40E0000)    <1>     mov dx, word [currentLine]  ;pre-load dx with the current line number
    96 00000CF1 E8F0060000          <1>     call searchForProgramLine   ;Get program block pointer into rbx
    97 00000CF6 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If for some reason line doesnt exist?
    98 00000CFD 0F84A2000000        <1>     je .error   ;Unknown Error
    99                              <1> ;Now pack for the first portion/line after the for loop
   100                              <1> ;rsi points just after the FOR itself
   101 00000D03 56                  <1>     push rsi    ;Save the first point after the WHILE itself
   102 00000D04 E8B0FAFFFF          <1>     call findOtherExpressionsOnLine     ;Get the first : or ASCII NUL
   103 00000D09 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]  ;Get the line number
   104 00000D0D 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine]  ;Load ptr to start of string in rsi
   105 00000D11 4829CE              <1>     sub rsi, rcx    ;Compute difference from start of string
   106 00000D14 89F1                <1>     mov ecx, esi    ;Should just be low byte of si so cl
   107 00000D16 81E1FF000000        <1>     and ecx, 0FFh   ;Save only bottom byte just in case of garbage
   108 00000D1C C1E110              <1>     shl ecx, 2*8    ;Move to the third byte in the dword
   109 00000D1F 09C8                <1>     or eax, ecx     ;Add byte three to eax
   110 00000D21 89C2                <1>     mov edx, eax    ;Save in edx
   111 00000D23 48C1E228            <1>     shl rdx, 5*8    ;Shift three bytes to top of qword
   112 00000D27 5E                  <1>     pop rsi
   113                              <1> .initialSearch:
   114                              <1>     ;First look for a : or a ASCII NUL to leave the WHILE part of the line
   115 00000D28 803E00              <1>     cmp byte [rsi], 0
   116 00000D2B 740D                <1>     je .gotoNextLine
   117 00000D2D 813E57454E44        <1>     cmp dword [rsi], "WEND"
   118 00000D33 7418                <1>     je .wordFound
   119 00000D35 48FFC6              <1>     inc rsi ;Now search up until the end of the line for a WEND
   120                              <1>     ;"WEND" found here!
   121 00000D38 EBEE                <1>     jmp short .initialSearch
   122                              <1> .gotoNextLine:
   123 00000D3A 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Get pointer to next program line
   124 00000D3E 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Now, when walking if it gives a value of -1, no NEXT found
   125 00000D45 7448                <1>     je .noWend
   126 00000D47 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Load pointer to string rsi
   127 00000D4B EBDB                <1>     jmp short .initialSearch
   128                              <1> .wordFound:
   129                              <1>     ;Here, word found! Huzzah! Now pack edx correctly
   130                              <1>     ;rsi points to the N in "WEND "
   131 00000D4D E867FAFFFF          <1>     call findOtherExpressionsOnLine 
   132                              <1>     ;make rsi point to next expression on the line or the end of the line
   133 00000D52 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]  ;Get the line number
   134 00000D56 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine]  ;Load ptr to start of string in rsi
   135 00000D5A 4829CE              <1>     sub rsi, rcx    ;Compute difference from start of string
   136 00000D5D 89F1                <1>     mov ecx, esi    ;Should just be low byte of si so cl
   137 00000D5F 81E1FF000000        <1>     and ecx, 0FFh   ;Save only bottom byte just in case of garbage
   138 00000D65 C1E110              <1>     shl ecx, 2*8    ;Move to the third byte in the dword
   139 00000D68 09C8                <1>     or eax, ecx     ;Add byte three to eax
   140 00000D6A 48C1E010            <1>     shl rax, 8*2    ;Shift three bytes to byte 4 of qword
   141 00000D6E 4809C2              <1>     or rdx, rax     ;Add bytes [4:2] to rdx
   142                              <1>     ;Compute checksum now
   143 00000D71 31C0                <1>     xor eax, eax
   144 00000D73 B055                <1>     mov al, WHILEsig 
   145 00000D75 6689C2              <1>     mov dx, ax  ;Zero checksum byte
   146 00000D78 31C0                <1>     xor eax, eax
   147 00000D7A B908000000          <1>     mov ecx, 8  ;8 times
   148                              <1> .csumLoop:
   149                              <1>     ;Spin rdx 8 times adding each byte to al
   150 00000D7F 00D0                <1>     add al, dl
   151 00000D81 48C1C208            <1>     rol rdx, 8  ;Rotate left by 8 bits
   152 00000D85 FFC9                <1>     dec ecx
   153 00000D87 75F6                <1>     jnz .csumLoop
   154 00000D89 F6D8                <1>     neg al ;Get twos compliment of sum (FFh - al)
   155 00000D8B 88C6                <1>     mov dh, al  ;Save in checksum byte
   156                              <1> .exit:
   157 00000D8D 5E                  <1>     pop rsi
   158 00000D8E C3                  <1>     ret
   159                              <1> .noWend:
   160 00000D8F 488D2DE8080000      <1>     lea rbp, noWend
   161 00000D96 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
   161 00000D9F FF                  <1>
   162 00000DA0 E9E8FFFFFF          <1>     jmp .exit
   163                              <1> .error:
   164 00000DA5 488D2D39090000      <1>     lea rbp, uknowner
   165 00000DAC 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
   165 00000DB5 FF                  <1>
   166 00000DB6 E9D2FFFFFF          <1>     jmp .exit
   167                              <1> nextScan:
   168                              <1> ; Gets the current line address and starts searching program from the current line
   169                              <1> ; for a NEXT
   170                              <1> ; Puts the packed specialQword into rdx if a NEXT is found
   171                              <1> ; Returns rdx = -1 if an error occured with rbp pointing to the error string
   172 00000DBB 56                  <1>     push rsi
   173 00000DBC 668B15(F40E0000)    <1>     mov dx, word [currentLine]  ;pre-load dx with the current line number
   174 00000DC3 E81E060000          <1>     call searchForProgramLine   ;Get program block pointer into rbx
   175 00000DC8 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If for some reason line doesnt exist?
   176 00000DCF 0F84A2000000        <1>     je .error   ;Unknown Error
   177                              <1> ;Now pack for the first portion/line after the for loop
   178                              <1> ;rsi points just after the FOR itself
   179 00000DD5 56                  <1>     push rsi    ;Save the first point after the FOR itself
   180 00000DD6 E8DEF9FFFF          <1>     call findOtherExpressionsOnLine     ;Get the first : or ASCII NUL
   181 00000DDB 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]  ;Get the line number
   182 00000DDF 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine]  ;Load ptr to start of string in rsi
   183 00000DE3 4829CE              <1>     sub rsi, rcx    ;Compute difference from start of string
   184 00000DE6 89F1                <1>     mov ecx, esi    ;Should just be low byte of si so cl
   185 00000DE8 81E1FF000000        <1>     and ecx, 0FFh   ;Save only bottom byte just in case of garbage
   186 00000DEE C1E110              <1>     shl ecx, 2*8    ;Move to the third byte in the dword
   187 00000DF1 09C8                <1>     or eax, ecx     ;Add byte three to eax
   188 00000DF3 89C2                <1>     mov edx, eax    ;Save in edx
   189 00000DF5 48C1E228            <1>     shl rdx, 5*8    ;Shift three bytes to top of qword
   190 00000DF9 5E                  <1>     pop rsi
   191                              <1> .initialSearch:
   192                              <1>     ;First look for a : or a ASCII NUL to leave the FOR part of the line
   193 00000DFA 803E00              <1>     cmp byte [rsi], 0
   194 00000DFD 740D                <1>     je .gotoNextLine
   195 00000DFF 813E4E455854        <1>     cmp dword [rsi], "NEXT"
   196 00000E05 7418                <1>     je .wordFound
   197 00000E07 48FFC6              <1>     inc rsi ;Now search up until the end of the line for a NEXT
   198                              <1>     ;"NEXT" found here!
   199 00000E0A EBEE                <1>     jmp short .initialSearch
   200                              <1> .gotoNextLine:
   201 00000E0C 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Get pointer to next program line
   202 00000E10 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Now, when walking if it gives a value of -1, no NEXT found
   203 00000E17 7448                <1>     je .noNext
   204 00000E19 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Load pointer to string rsi
   205 00000E1D EBDB                <1>     jmp short .initialSearch
   206                              <1> .wordFound:
   207                              <1>     ;Here, word found! Huzzah! Now pack edx correctly
   208                              <1>     ;rsi points to the N in "NEXT "
   209 00000E1F E895F9FFFF          <1>     call findOtherExpressionsOnLine 
   210                              <1>     ;make rsi point to next expression on the line or the end of the line
   211 00000E24 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]  ;Get the line number
   212 00000E28 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine]  ;Load ptr to start of string in rsi
   213 00000E2C 4829CE              <1>     sub rsi, rcx    ;Compute difference from start of string
   214 00000E2F 89F1                <1>     mov ecx, esi    ;Should just be low byte of si so cl
   215 00000E31 81E1FF000000        <1>     and ecx, 0FFh   ;Save only bottom byte just in case of garbage
   216 00000E37 C1E110              <1>     shl ecx, 2*8    ;Move to the third byte in the dword
   217 00000E3A 09C8                <1>     or eax, ecx     ;Add byte three to eax
   218 00000E3C 48C1E010            <1>     shl rax, 8*2    ;Shift three bytes to byte 4 of qword
   219 00000E40 4809C2              <1>     or rdx, rax     ;Add bytes [4:2] to rdx
   220                              <1>     ;Compute checksum now
   221 00000E43 31C0                <1>     xor eax, eax
   222 00000E45 B05A                <1>     mov al, FORsig 
   223 00000E47 6689C2              <1>     mov dx, ax  ;Zero checksum byte
   224 00000E4A 31C0                <1>     xor eax, eax
   225 00000E4C B908000000          <1>     mov ecx, 8  ;8 times
   226                              <1> .csumLoop:
   227                              <1>     ;Spin rdx 8 times adding each byte to al
   228 00000E51 00D0                <1>     add al, dl
   229 00000E53 48C1C208            <1>     rol rdx, 8  ;Rotate left by 8 bits
   230 00000E57 FFC9                <1>     dec ecx
   231 00000E59 75F6                <1>     jnz .csumLoop
   232 00000E5B F6D8                <1>     neg al ;Get twos compliment of sum (FFh - al)
   233 00000E5D 88C6                <1>     mov dh, al  ;Save in checksum byte
   234                              <1> .exit:
   235 00000E5F 5E                  <1>     pop rsi
   236 00000E60 C3                  <1>     ret
   237                              <1> .noNext:
   238 00000E61 488D2D53080000      <1>     lea rbp, noNext
   239 00000E68 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
   239 00000E71 FF                  <1>
   240 00000E72 E9E8FFFFFF          <1>     jmp .exit
   241                              <1> .error:
   242 00000E77 488D2D67080000      <1>     lea rbp, uknowner
   243 00000E7E 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
   243 00000E87 FF                  <1>
   244 00000E88 E9D2FFFFFF          <1>     jmp .exit
   245                              <1> ;=======================================
   246                              <1> ;  ACTUAL CONTROL FLOW FUNCTIONS HERE  :
   247                              <1> ;=======================================
   248                              <1> ;All below functions return the line number in dx and the offset into the line
   249                              <1> ; to start reading at in byte three of edx
   250                              <1> goto:
   251                              <1> ;GOTO, works by replacing the address after the return address on the stack
   252                              <1> ;rsi points to first char AFTER function name
   253 00000E8D E8C4F4FFFF          <1>     call spaceSkip  ;Skip all preceeding spaces
   254 00000E92 E812F5FFFF          <1>     call handleAlgebraicExpression  ;Turn the expression into a number in ax
   255 00000E97 0FB7D0              <1>     movzx edx, ax   ;Line number into dx, start at beginning of line
   256 00000E9A 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   257 00000EA1 C3                  <1>     ret
   258                              <1> 
   259                              <1> gosub:
   260 00000EA2 E87FFDFFFF          <1>     call retScan
   261 00000EA7 4881FAFFFFFFFF      <1>     cmp rdx, -1
   262 00000EAE 7436                <1>     je .error
   263 00000EB0 B901000000          <1>     mov ecx, gosubStruct_size/8
   264                              <1>     makeSpaceOnStack rcx  ;Make four qwords of space on the stack
    96                              <2> 
    97                              <2> 
    98                              <2> 
    99 00000EB5 58                  <2>  pop rax
   100 00000EB6 48C1E103            <2>  shl %1, 3
   101 00000EBA 4829CC              <2>  sub rsp, %1
   102 00000EBD 488D2D(50000000)    <2>  lea rbp, stack
   103 00000EC4 4839EC              <2>  cmp rsp, rbp
   104 00000EC7 770C                <2>  ja .macroNotOverflow
   105 00000EC9 488D2D9D070000      <2>  lea rbp, stkOvflw
   106 00000ED0 E909F2FFFF          <2>  jmp criticalError
   107                              <2> .macroNotOverflow:
   108                              <2> 
   109                              <2> 
   110 00000ED5 50                  <2>  push rax
   265 00000ED6 4889E5              <1>     mov rbp, rsp
   266 00000ED9 4881C508000000      <1>     add rbp, 8  ;Make rbp point to the base of the new struc
   267 00000EE0 48895500            <1>     mov qword [rbp + forStruct.specQword], rdx  ;Move rdx into its place on the stack
   268                              <1>     ;rsi points just past the GOSUB
   269 00000EE4 EBA7                <1>     jmp short goto ;Now behave like GOTO
   270                              <1> .error:
   271 00000EE6 E9F3F1FFFF          <1>     jmp criticalError
   272                              <1> 
   273                              <1> return:
   274                              <1> ;First verify the GOSUB struc is on the stack
   275 00000EEB 4889E5              <1>     mov rbp, rsp    ;Dont need to save rbp so trash it
   276 00000EEE 4881C508000000      <1>     add rbp, 8  ;Make it point to the base of the struc past the return address
   277                              <1>     ;Read the qword on stack, verify it is a GOSUBstruc and passes checksum test
   278 00000EF5 488B5500            <1>     mov rdx, qword [rbp + gosubStruct.specQword]
   279 00000EF9 80FAA5              <1>     cmp dl, GOSUBsig
   280 00000EFC 752F                <1>     jne .noReturn
   281                              <1>     ;Now compute checksum to verify its not an accident
   282 00000EFE 30C0                <1>     xor al, al
   283 00000F00 B908000000          <1>     mov ecx, 8
   284                              <1> .checksumTest:
   285 00000F05 00D0                <1>     add al, dl
   286 00000F07 48C1CA08            <1>     ror rdx, 8
   287 00000F0B FFC9                <1>     dec ecx
   288 00000F0D 75F6                <1>     jnz .checksumTest
   289 00000F0F 84C0                <1>     test al, al     ;This should be 0
   290 00000F11 751A                <1>     jnz .noReturn
   291                              <1>  ;Now we are truly in a RETURN
   292 00000F13 48C1EA28            <1>     shr rdx, 5*8    ;Bring return information down to the lower three bytes
   293                              <1>     ;Clean the struc from the stack
   294 00000F17 B901000000          <1>     mov ecx, gosubStruct_size/8
   295                              <1>     cleanSpaceOnStack rcx
   114                              <2> 
   115 00000F1C 58                  <2>  pop rax
   116 00000F1D 48C1E103            <2>  shl %1, 3
   117 00000F21 4801CC              <2>  add rsp, %1
   118 00000F24 50                  <2>  push rax
   296 00000F25 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   297 00000F2C C3                  <1>     ret
   298                              <1> .noReturn:
   299 00000F2D 488D2D9A070000      <1>     lea rbp, noReturn
   300 00000F34 E9A5F1FFFF          <1>     jmp criticalError
   301                              <1> forLoop:
   302                              <1> ;This saves the following struc on the stack
   303                              <1> ;------------Hi stack addr-------------
   304                              <1> ;stepValue (qword), default 1
   305                              <1> ;limitValue (qword), to which value do we loop
   306                              <1> ;ptr to counter variable (qword)
   307                              <1> ;Special qword:
   308                              <1> ; Byte 7 = Offset into the line for next instruction
   309                              <1> ; Bytes[6:5] = Line number of portion after FOR (either FOR line or line after FOR)
   310                              <1> ; Byte 4 = Offset into the line for next instruction
   311                              <1> ; Bytes[3:2] = Line number of portion after NEXT (either NEXT line or line after NEXT)
   312                              <1> ; Byte 1 = Parity check sum for the qword, makes the sum of the bytes in qword 0
   313                              <1> ; Byte 0 = FOR signature
   314                              <1> ;------------Low stack addr------------
   315                              <1> ;rsp -> Return address
   316                              <1>     ;First check we have a NEXT following this FOR
   317 00000F39 E87DFEFFFF          <1>     call nextScan
   318 00000F3E 4881FAFFFFFFFF      <1>     cmp rdx, -1
   319 00000F45 0F84F5000000        <1>     je .critError
   320                              <1>     ;Here we make space on the stack.
   321 00000F4B B904000000          <1>     mov ecx, forStruct_size/8
   322                              <1>     makeSpaceOnStack rcx  ;Make four qwords of space on the stack
    96                              <2> 
    97                              <2> 
    98                              <2> 
    99 00000F50 58                  <2>  pop rax
   100 00000F51 48C1E103            <2>  shl %1, 3
   101 00000F55 4829CC              <2>  sub rsp, %1
   102 00000F58 488D2D(50000000)    <2>  lea rbp, stack
   103 00000F5F 4839EC              <2>  cmp rsp, rbp
   104 00000F62 770C                <2>  ja .macroNotOverflow
   105 00000F64 488D2D02070000      <2>  lea rbp, stkOvflw
   106 00000F6B E96EF1FFFF          <2>  jmp criticalError
   107                              <2> .macroNotOverflow:
   108                              <2> 
   109                              <2> 
   110 00000F70 50                  <2>  push rax
   323 00000F71 4889E5              <1>     mov rbp, rsp
   324 00000F74 4881C508000000      <1>     add rbp, 8  ;Make rbp point to the base of the new struc
   325 00000F7B 48895500            <1>     mov qword [rbp + forStruct.specQword], rdx  ;Move rdx into its place on the stack
   326 00000F7F 56                  <1>     push rsi   ;rsi points to first byte after FOR. The first word should now be a var
   327 00000F80 B820544F20          <1>     mov eax, " TO " ;First find the TO and STEP values
   328                              <1> .flScanTo:
   329 00000F85 803E00              <1>     cmp byte [rsi], 0   ;ASCII null w/o a TO? Syntax Error
   330 00000F88 0F84AB000000        <1>     je .syntaxError
   331 00000F8E 803E3A              <1>     cmp byte [rsi], ":" ;Save for a next statement delimiter
   332 00000F91 0F84A2000000        <1>     je .syntaxError
   333 00000F97 3906                <1>     cmp dword [rsi], eax
   334 00000F99 7405                <1>     je .flToFound
   335 00000F9B 48FFC6              <1>     inc rsi ;Go forwards by a byte
   336 00000F9E EBE5                <1>     jmp short .flScanTo
   337                              <1> .flToFound:
   338                              <1>     ;rsi points to the preceeding space so add 3 to go to trailing space
   339 00000FA0 4881C603000000      <1>     add rsi, 3
   340 00000FA7 E8AAF3FFFF          <1>     call spaceSkip  ;Go to expression to evaluate
   341 00000FAC E8F8F3FFFF          <1>     call handleAlgebraicExpression  ;Get in rax the limit value
   342 00000FB1 48894510            <1>     mov qword [rbp + forStruct.limitValue], rax
   343                              <1>     ;rsi now points to the next word, this should be step, otherwise ignore the word
   344 00000FB5 AD                  <1>     lodsd   ;Get the word in eax
   345 00000FB6 3D53544550          <1>     cmp eax, "STEP"
   346 00000FBB 754F                <1>     jne .defaultStep
   347                              <1>     ;Check it is a "STEP "
   348 00000FBD AC                  <1>     lodsb
   349 00000FBE 3C20                <1>     cmp al, " "
   350 00000FC0 754A                <1>     jne .defaultStep
   351                              <1>     ;rsi points to a "STEP "
   352 00000FC2 E88FF3FFFF          <1>     call spaceSkip  ;Go to expression to evaluate
   353 00000FC7 E8DDF3FFFF          <1>     call handleAlgebraicExpression  ;Get in rax the step value
   354 00000FCC 48894518            <1>     mov qword [rbp + forStruct.stepValue], rax
   355                              <1> .flVariable:
   356 00000FD0 5E                  <1>     pop rsi ;Get back OG rsi position immediately after FOR
   357 00000FD1 E880F3FFFF          <1>     call spaceSkip ;Skip intermediate spaces
   358 00000FD6 56                  <1>     push rsi
   359 00000FD7 E863F9FFFF          <1>     call variableAssignment ;Make the variable assignment, trashes rsi
   360 00000FDC 5E                  <1>     pop rsi ;rsi points to the start of the variable again
   361 00000FDD E87FF3FFFF          <1>     call getVarNameLength
   362 00000FE2 E88F030000          <1>     call findVariable   ;Get the variable pointer in rbx
   363 00000FE7 48895D08            <1>     mov qword [rbp + forStruct.cntrPtr], rbx    ;Save variable pointer
   364                              <1>     ;Now check whether we should run the loop at all?
   365 00000FEB 488B5D08            <1>     mov rbx, qword [rbp + forStruct.cntrPtr]
   366 00000FEF 488B4B04            <1>     mov rcx, qword [rbx + varBlock.qValue]  ;Get the variable value
   367 00000FF3 488B5D10            <1>     mov rbx, qword [rbp + forStruct.limitValue]
   368                              <1>     ;if rcx >= rbx, branch to after NEXT
   369 00000FF7 4839D9              <1>     cmp rcx, rbx
   370 00000FFA 7D1A                <1>     jge .dontRunFor
   371 00000FFC 488B5500            <1>     mov rdx, qword [rbp + forStruct.specQword]
   372 00001000 48C1EA28            <1>     shr rdx, 5*8    ;Upper bytes will be cleared, needed for the "branch"
   373                              <1> .exit:
   374                              <1>     ;Recall edx must have the correct three bytes in it from the special qword
   375 00001004 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   376 0000100B C3                  <1>     ret
   377                              <1> .defaultStep:
   378 0000100C 48C7451801000000    <1>     mov qword [rbp + forStruct.stepValue], 1
   379 00001014 EBBA                <1>     jmp short .flVariable
   380                              <1> .dontRunFor:
   381                              <1>     ;Move the bytes from the NEXT to edx 
   382 00001016 488B5500            <1>     mov rdx, qword [rbp + forStruct.specQword]
   383 0000101A 48C1EA10            <1>     shr rdx, 2*8    ;Upper bytes will be cleared
   384 0000101E 09D2                <1>     or edx, edx     ;This should zero the upper dword
   385                              <1>     ;Need to also reclaim the stack space
   386 00001020 B904000000          <1>     mov ecx, forStruct_size/8
   387                              <1>     cleanSpaceOnStack rcx
   114                              <2> 
   115 00001025 58                  <2>  pop rax
   116 00001026 48C1E103            <2>  shl %1, 3
   117 0000102A 4801CC              <2>  add rsp, %1
   118 0000102D 50                  <2>  push rax
   388 0000102E EBD4                <1>     jmp short .exit
   389                              <1> ;Errors
   390                              <1> .unknownError:
   391 00001030 488D2DAE060000      <1>     lea rbp, uknowner
   392 00001037 EB07                <1>     jmp short .critError
   393                              <1> .syntaxError:
   394 00001039 488D2DEC050000      <1>     lea rbp, syntax
   395                              <1> .critError:
   396                              <1>     ;called with rbp already pointing to error string
   397 00001040 E999F0FFFF          <1>     jmp criticalError
   398                              <1> 
   399                              <1> next:
   400                              <1>     ;Verify that the structure on the stack is a FOR structure
   401 00001045 4889E5              <1>     mov rbp, rsp    ;Dont need to save rbp so trash it
   402 00001048 4881C508000000      <1>     add rbp, 8  ;Make it point to the base of the struc past the return address
   403                              <1>     ;Read the qword on stack, verify it is a FORstruct and passes checksum test
   404 0000104F 488B5500            <1>     mov rdx, qword [rbp + forStruct.specQword]
   405 00001053 80FA5A              <1>     cmp dl, FORsig
   406 00001056 7555                <1>     jne .noForNext
   407                              <1>     ;Now compute checksum to verify its not an accident
   408 00001058 30C0                <1>     xor al, al
   409 0000105A B908000000          <1>     mov ecx, 8
   410                              <1> .checksumTest:
   411 0000105F 00D0                <1>     add al, dl
   412 00001061 48C1EA08            <1>     shr rdx, 8
   413 00001065 FFC9                <1>     dec ecx
   414 00001067 75F6                <1>     jnz .checksumTest
   415 00001069 84C0                <1>     test al, al     ;This should be 0
   416 0000106B 7540                <1>     jnz .noForNext
   417                              <1>     ;Now we are truly in a FOR loop
   418 0000106D 488B5D08            <1>     mov rbx, qword [rbp + forStruct.cntrPtr]    ;Get variable pointer
   419 00001071 488B4304            <1>     mov rax, qword [rbx + varBlock.qValue]      ;Get variable value
   420 00001075 483B4510            <1>     cmp rax, qword [rbp + forStruct.limitValue] ;Compare current var value to limit
   421 00001079 7D18                <1>     jge .noMoreLooping
   422 0000107B 48034518            <1>     add rax, qword [rbp + forStruct.stepValue]  ;Add the step
   423 0000107F 48894304            <1>     mov qword [rbx + varBlock.qValue], rax      ;Update the variable value
   424                              <1>     ;Now go back to line after FOR
   425 00001083 488B5500            <1>     mov rdx, qword [rbp + forStruct.specQword]
   426 00001087 48C1EA28            <1>     shr rdx, 5*8    ;Move upper three bytes to lower three bytes of edx
   427                              <1> .exit:
   428                              <1>     ;Recall edx must have the correct three bytes in it from the special qword
   429 0000108B 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   430 00001092 C3                  <1>     ret
   431                              <1> .noMoreLooping:
   432                              <1>     ;No need to update the variable, it is already above
   433 00001093 488B5500            <1>     mov rdx, qword [rbp + forStruct.specQword]
   434 00001097 48C1EA10            <1>     shr rdx, 2*8    ;Move bytes 4:2 to lower three bytes of edx
   435 0000109B 09D2                <1>     or edx, edx     ;Remove upper bits
   436                              <1>     ;Need to also reclaim the stack space
   437 0000109D B904000000          <1>     mov ecx, forStruct_size/8
   438                              <1>     cleanSpaceOnStack rcx
   114                              <2> 
   115 000010A2 58                  <2>  pop rax
   116 000010A3 48C1E103            <2>  shl %1, 3
   117 000010A7 4801CC              <2>  add rsp, %1
   118 000010AA 50                  <2>  push rax
   439 000010AB EBDE                <1>     jmp short .exit
   440                              <1> .noForNext:
   441 000010AD 488D2DF4050000      <1>     lea rbp, noFor
   442 000010B4 E925F0FFFF          <1>     jmp criticalError
   443                              <1> 
   444                              <1> while:
   445                              <1>     ;First check we have a WEND following this WHILE
   446 000010B9 E82BFCFFFF          <1>     call wendScan
   447 000010BE 4881FAFFFFFFFF      <1>     cmp rdx, -1
   448 000010C5 7464                <1>     je .critError
   449                              <1>     ;Here we make space on the stack.
   450 000010C7 B901000000          <1>     mov ecx, whileStruct_size/8
   451                              <1>     makeSpaceOnStack rcx  ;Make a qword of space on the stack
    96                              <2> 
    97                              <2> 
    98                              <2> 
    99 000010CC 58                  <2>  pop rax
   100 000010CD 48C1E103            <2>  shl %1, 3
   101 000010D1 4829CC              <2>  sub rsp, %1
   102 000010D4 488D2D(50000000)    <2>  lea rbp, stack
   103 000010DB 4839EC              <2>  cmp rsp, rbp
   104 000010DE 770C                <2>  ja .macroNotOverflow
   105 000010E0 488D2D86050000      <2>  lea rbp, stkOvflw
   106 000010E7 E9F2EFFFFF          <2>  jmp criticalError
   107                              <2> .macroNotOverflow:
   108                              <2> 
   109                              <2> 
   110 000010EC 50                  <2>  push rax
   452 000010ED 4889E5              <1>     mov rbp, rsp
   453 000010F0 4881C508000000      <1>     add rbp, 8  ;Make rbp point to the base of the new struc
   454 000010F7 48895500            <1>     mov qword [rbp + whileStruct.specQword], rdx  ;Move rdx into its place on the stack
   455                              <1>     ;rsi should point after the WHILE
   456 000010FB E8A9F2FFFF          <1>     call handleAlgebraicExpression  ;Get result of expression in rax
   457 00001100 488B5500            <1>     mov rdx, qword [rbp + whileStruct.specQword]    ;Get special qword back into rdx
   458 00001104 4885C0              <1>     test rax, rax   ;Zero is FALSE
   459 00001107 740C                <1>     jz .conditionFalse
   460 00001109 48C1EA28            <1>     shr rdx, 5*8    ;Bring the upper three bytes down to eax
   461                              <1> .exit:
   462 0000110D 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   463 00001114 C3                  <1>     ret
   464                              <1> .conditionFalse:
   465                              <1>     ;If condition is false, jump to the instruction after WEND
   466                              <1>     ;Here we reclaim the space from the stack.
   467 00001115 B901000000          <1>     mov ecx, whileStruct_size/8
   468                              <1>     cleanSpaceOnStack rcx  ;Clean a qword of space on the stack
   114                              <2> 
   115 0000111A 58                  <2>  pop rax
   116 0000111B 48C1E103            <2>  shl %1, 3
   117 0000111F 4801CC              <2>  add rsp, %1
   118 00001122 50                  <2>  push rax
   469 00001123 48C1EA10            <1>     shr rdx, 2*8    ;Bring bytes 4:2 down to bytes 2:0
   470 00001127 09D2                <1>     or edx, edx     ;Zero the rest of it
   471 00001129 EBE2                <1>     jmp short .exit
   472                              <1> .critError:
   473                              <1>     ;called with rbp already pointing to error string
   474 0000112B E9AEEFFFFF          <1>     jmp criticalError
   475                              <1> wend:
   476                              <1>     ;Find the While on the WHILE line and evaluate the expression
   477                              <1>     ;if true, branch to the WHILE three bytes in specialQword
   478                              <1>     ;if false, branch to WEND three bytes in specialQword and clean stack
   479                              <1>     ;First verify we have a While structure on the stack
   480 00001130 4889E5              <1>     mov rbp, rsp    ;Dont need to save rbp so trash it
   481 00001133 4881C508000000      <1>     add rbp, 8  ;Make it point to the base of the struc past the return address
   482 0000113A 488B5500            <1>     mov rdx, qword [rbp + whileStruct.specQword]
   483 0000113E 80FA55              <1>     cmp dl, WHILEsig
   484 00001141 0F858D000000        <1>     jne .noWhile
   485                              <1>     ;Now compute checksum to verify its not an accident
   486 00001147 30C0                <1>     xor al, al
   487 00001149 B908000000          <1>     mov ecx, 8
   488                              <1> .checksumTest:
   489 0000114E 00D0                <1>     add al, dl
   490 00001150 48C1CA08            <1>     ror rdx, 8
   491 00001154 FFC9                <1>     dec ecx
   492 00001156 75F6                <1>     jnz .checksumTest
   493 00001158 84C0                <1>     test al, al     ;This should be 0
   494 0000115A 7578                <1>     jnz .noWhile
   495                              <1>     ;Now we are truly in a WHILE loop
   496                              <1>     ;Search the While line for the WHILE keyword and evaluate the expression after it
   497                              <1>     ;rdx is as normal
   498 0000115C 48C1EA28            <1>     shr rdx, 5*8    ;Get upper three bytes down low
   499 00001160 81E2FFFF0000        <1>     and edx, 0FFFFh ;Save only dx
   500 00001166 E87B020000          <1>     call searchForProgramLine
   501 0000116B 4881FBFFFFFFFF      <1>     cmp rbx, -1
   502 00001172 7454                <1>     je .error
   503 00001174 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Point to start of string
   504                              <1> .whileScan:
   505 00001178 803E00              <1>     cmp byte [rsi], 0   ;Are we at the end of the line
   506 0000117B 7457                <1>     je .noWhile ;If so, we have gotten to the end of the line without a while
   507 0000117D 488D3DC8F6FFFF      <1>     lea rdi, whileStr   ;Point to the while string in the table, 6 chars long
   508 00001184 B906000000          <1>     mov ecx, 6
   509                              <1> .scanning:
   510 00001189 A6                  <1>     cmpsb
   511 0000118A 75EC                <1>     jne .whileScan
   512 0000118C FFC9                <1>     dec ecx
   513 0000118E 75F9                <1>     jnz .scanning
   514                              <1>     ;Here is equal, rsi points past the space in "WHILE "
   515 00001190 48FFCE              <1>     dec rsi
   516 00001193 E8BEF1FFFF          <1>     call spaceSkip  ;Skip all spaces
   517 00001198 E80CF2FFFF          <1>     call handleAlgebraicExpression  ;Get algebraic expression in rax
   518 0000119D 488B5500            <1>     mov rdx, qword [rbp + whileStruct.specQword]    ;Get special qword back into rdx
   519 000011A1 4885C0              <1>     test rax, rax
   520 000011A4 740C                <1>     jz .conditionFalse
   521 000011A6 48C1EA28            <1>     shr rdx, 5*8    ;Bring the upper three bytes down to eax
   522                              <1> .exit:
   523 000011AA 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   524 000011B1 C3                  <1>     ret
   525                              <1> .conditionFalse:
   526                              <1>     ;If condition is false, go to the instruction after WEND
   527                              <1>     ;Here we reclaim the space from the stack.
   528 000011B2 B901000000          <1>     mov ecx, whileStruct_size/8
   529                              <1>     cleanSpaceOnStack rcx  ;Clean a qword of space on the stack
   114                              <2> 
   115 000011B7 58                  <2>  pop rax
   116 000011B8 48C1E103            <2>  shl %1, 3
   117 000011BC 4801CC              <2>  add rsp, %1
   118 000011BF 50                  <2>  push rax
   530 000011C0 48C1EA10            <1>     shr rdx, 2*8    ;Bring bytes 4:2 down to bytes 2:0
   531 000011C4 09D2                <1>     or edx, edx     ;Zero the rest of it
   532 000011C6 EBE2                <1>     jmp short .exit
   533                              <1> .error:
   534 000011C8 488D2D16050000      <1>     lea rbp, uknowner
   535 000011CF E90AEFFFFF          <1>     jmp criticalError
   536                              <1> .noWhile:
   537 000011D4 488D2DB8040000      <1>     lea rbp, noWhile
   538 000011DB E9FEEEFFFF          <1>     jmp criticalError
   539                              <1> 
   540                              <1> handleIf:
   541                              <1> ;Evaluate the string. The IF,THEN/GOTO,ELSE statement must ALL be on one line
   542                              <1> ;IF exp1 THEN statement ELSE statement
   543                              <1> ;IF exp1 GOTO linenumber ELSE statement
   544                              <1> ;rsi points to first char AFTER function name
   545 000011E0 E871F1FFFF          <1>     call spaceSkip
   546 000011E5 E8BFF1FFFF          <1>     call handleAlgebraicExpression
   547 000011EA 4885C0              <1>     test rax, rax  ;If this is 0, go to the else
   548 000011ED 7425                <1>     jz .else
   549 000011EF E862F1FFFF          <1>     call spaceSkip
   550 000011F4 AD                  <1>     lodsd   ;Get the whole word, must be either "THEN " or "GOTO "
   551 000011F5 3D5448454E          <1>     cmp eax, "THEN"
   552 000011FA 7442                <1>     je .hi0   ; Go past THEN, to process statement
   553 000011FC 3D474F544F          <1>     cmp eax, "GOTO"
   554 00001201 7569                <1>     jne .error
   555 00001203 803E20              <1>     cmp byte [rsi], " " ;is the next char a space?
   556 00001206 7564                <1>     jne .error
   557 00001208 E980FCFFFF          <1>     jmp goto
   558                              <1> .candidatethen:
   559 0000120D 803E20              <1>     cmp byte [rsi], " " ;is the next char a space?
   560 00001210 742C                <1>     je .hi0
   561 00001212 EB58                <1>     jmp short .error
   562                              <1> .else:
   563                              <1>     ;Search for the ELSE, it has to be preceeded with a space and have a space after
   564 00001214 803E00              <1>     cmp byte [rsi], 0 ;Are we at end of line?
   565 00001217 7452                <1>     je .noElse
   566 00001219 803E3A              <1>     cmp byte [rsi], ":" ;Are we at end line segment?
   567 0000121C 744D                <1>     je .noElse
   568 0000121E 48FFC6              <1>     inc rsi
   569 00001221 813E20454C53        <1>     cmp dword [rsi], " ELS"
   570 00001227 75EB                <1>     jne .else
   571 00001229 4881C604000000      <1>     add rsi, 4  ;Skip those four chars, we have a candidate
   572 00001230 66813E4520          <1>     cmp word [rsi], "E "
   573 00001235 75DD                <1>     jne .else   ;If not equal failed to match pattern
   574 00001237 4881C602000000      <1>     add rsi, 2  ;Else its the ELSE we are looking for, move rsi to first space past it
   575                              <1> .hi0:
   576                              <1> ;Now we do the branchy stuff, branch to the same line just further down
   577 0000123E 668B15(F40E0000)    <1>     mov dx, word [currentLine]
   578 00001245 E89C010000          <1>     call searchForProgramLine
   579 0000124A 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Does the line not exist somehow?
   580 00001251 7419                <1>     je .error
   581 00001253 4889F0              <1>     mov rax, rsi    ;Save pointer in rax
   582 00001256 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine] ;Get the difference in chars
   583 0000125A 4829C8              <1>     sub rax, rcx
   584 0000125D 24FF                <1>     and al, -1  ;Save only bottom byte as the difference should be less than 255
   585 0000125F C1E010              <1>     shl eax, 10h ;Shift to byte 3
   586 00001262 09C2                <1>     or edx, eax ;Save the offset into byte 3
   587 00001264 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   588                              <1> .noElse:
   589                              <1> ;If no else, simply return
   590 0000126B C3                  <1>     ret
   591                              <1> .error:
   592 0000126C 488D1DB9030000      <1>     lea rbx, syntax
   593 00001273 E966EEFFFF          <1>     jmp criticalError
    16                                  %include "MATH.ASM"
    17                              <1> decimalToHex:
    18                              <1>     ;Takes ASCII encoded decimal number and 
    19                              <1>     ;returns its hex value
    20                              <1>     ;Input: rsi = Start of numeric ONLY string
    21                              <1>     ;Output: rax = Number
    22                              <1>     ;        rsi = First non-numeric char past end of number
    23 00001278 53                  <1>     push rbx
    24 00001279 51                  <1>     push rcx
    25 0000127A 52                  <1>     push rdx
    26 0000127B 31DB                <1>     xor ebx, ebx    ;Start with rbx = 0
    27                              <1> .processDigits:    
    28 0000127D AC                  <1>     lodsb           ;Get the first digit in al
    29 0000127E 2C30                <1>     sub al, 30h     ;Reduce to value
    30 00001280 31D2                <1>     xor edx, edx    ;Clear for multiplication
    31 00001282 3C0A                <1>     cmp al, 10      ;Digit valid? Propagte CF
    32 00001284 480FB6C0            <1>     movzx rax, al   ;Clear upper bits
    33 00001288 4893                <1>     xchg rax, rbx
    34 0000128A 730D                <1>     jnc .exit       ;Digit was not valid, exit
    35 0000128C B90A000000          <1>     mov ecx, 10     ;Multiply result by 10
    36 00001291 48F7E1              <1>     mul rcx
    37 00001294 4801C3              <1>     add rbx, rax    ;Add the new digits
    38 00001297 EBE4                <1>     jmp short .processDigits
    39                              <1> .exit:
    40 00001299 48FFCE              <1>     dec rsi         ;rsi points to first non-digit
    41 0000129C 5A                  <1>     pop rdx
    42 0000129D 59                  <1>     pop rcx
    43 0000129E 5B                  <1>     pop rbx
    44 0000129F C3                  <1>     ret
    45                              <1> 
    46                              <1> printdecimalword:
    47                              <1> ;Takes the qword in rax and prints its signed decimal representation
    48 000012A0 50                  <1>     push rax
    49 000012A1 53                  <1>     push rbx
    50 000012A2 488D3D(980E0000)    <1>     lea rdi, digitString   ;Use the default line as a buffer
    51                              <1>     ;Sanitise the digit buffer
    52 000012A9 57                  <1>     push rdi
    53 000012AA 51                  <1>     push rcx
    54 000012AB 50                  <1>     push rax
    55                              <1> 
    56 000012AC B906000000          <1>     mov ecx, digitStringLen/8
    57 000012B1 F348AB              <1>     rep stosq
    58 000012B4 58                  <1>     pop rax
    59 000012B5 59                  <1>     pop rcx
    60 000012B6 5F                  <1>     pop rdi
    61                              <1> 
    62 000012B7 50                  <1>     push rax    ;Save rax for the sign bit later
    63 000012B8 48D1C0              <1>     rol rax, 1  ;Test the sign bit
    64 000012BB A801                <1>     test al, 1
    65 000012BD 48D1C8              <1>     ror rax, 1  ;Undo the roll
    66 000012C0 7403                <1>     jz .noCompliment
    67 000012C2 48F7D8              <1>     neg rax     ;Get the 2's compliment of rax
    68                              <1> ;Clear the sign bit, print the number from bits 62:0
    69                              <1> .noCompliment:
    70 000012C5 48D1E0              <1>     shl rax, 1  ;Go past the edge
    71 000012C8 48D1E8              <1>     shr rax, 1  ;Return zero extended
    72 000012CB 4881C72F000000      <1>     add rdi, digitStringLen - 1 ;Go to the end of the buffer
    73 000012D2 FD                  <1>     std ;Reverse string ops
    74 000012D3 50                  <1>     push rax
    75 000012D4 30C0                <1>     xor al, al  ;Place delimiter
    76 000012D6 AA                  <1>     stosb
    77 000012D7 58                  <1>     pop rax
    78 000012D8 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
    78 000012E1 00                  <1>
    79                              <1> .pdw0:
    80 000012E2 31D2                <1>     xor edx, edx
    81 000012E4 48F7F3              <1>     div rbx
    82 000012E7 80C230              <1>     add dl, '0'
    83 000012EA 80FA39              <1>     cmp dl, '9'
    84 000012ED 7603                <1>     jbe .pdw1
    85 000012EF 80C207              <1>     add dl, 'A'-'0'-10
    86                              <1> .pdw1:
    87 000012F2 50                  <1>     push rax
    88 000012F3 88D0                <1>     mov al, dl    ;Save remainder byte
    89 000012F5 AA                  <1>     stosb   ;Store the byte and sub one from rdi
    90 000012F6 58                  <1>     pop rax
    91 000012F7 4885C0              <1>     test rax, rax
    92 000012FA 75E6                <1>     jnz .pdw0
    93                              <1> 
    94                              <1>     ;Now add a minus sign if sign bit set
    95 000012FC 58                  <1>     pop rax ;Get the original for the sign bit
    96 000012FD 48D1C0              <1>     rol rax, 1  ;Bring the sign bit low
    97 00001300 A801                <1>     test al, 1
    98 00001302 7403                <1>     jz .printString
    99 00001304 B02D                <1>     mov al, "-"
   100 00001306 AA                  <1>     stosb   ;Store minus sign and decrement rdi
   101                              <1> .printString:
   102 00001307 FC                  <1>     cld ;Return string ops to normal
   103 00001308 48FFC7              <1>     inc rdi ;Skip the extra 0 that was inserted
   104 0000130B 4889FD              <1>     mov rbp, rdi    ;Point rbp to the head of the string
   105 0000130E E8A2EEFFFF          <1>     call ttyOutString
   106 00001313 5B                  <1>     pop rbx
   107 00001314 58                  <1>     pop rax
   108 00001315 C3                  <1>     ret
    17                                  %include "MEMORY.ASM"
    18                              <1> allocateBlock:
    19                              <1> ;Allocates a program memory block, the caller then fixes the specifics
    20                              <1> ;Output: rbx = Pointer to generic memory block, or -1 if memory full
    21                              <1> ;       Caller needs to fill in, block size, block type and specifics
    22 00001316 52                  <1>     push rdx
    23                              <1> .ab0:
    24 00001317 488B1D(E20E0000)    <1>     mov rbx, qword [lastBlock]    ;Get the last block in the chain
    25 0000131E 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;First allocation?
    26 00001325 742F                <1>     je .firstAllocation
    27 00001327 C60374              <1>     mov byte [rbx + memBlock.bSignature], notLastMemBlock ;Make it not be the last
    28 0000132A 480FB75301          <1>     movzx rdx, word [rbx + memBlock.wBlockSize] ;Goto end of block
    29 0000132F 4801D3              <1>     add rbx, rdx    ;Move rbx over the previous last block
    30 00001332 488B15(D00E0000)    <1>     mov rdx, qword [maxMemAddr]
    31 00001339 4839D3              <1>     cmp rbx, rdx ;rbx above maxmemory? 
    32 0000133C 770C                <1>     ja .memoryFull
    33 0000133E 48891D(E20E0000)    <1>     mov qword [lastBlock], rbx  ;New last block
    34 00001345 C60372              <1>     mov byte [rbx + memBlock.bSignature], lastMemBlock
    35                              <1> .exit:
    36 00001348 5A                  <1>     pop rdx
    37 00001349 C3                  <1>     ret
    38                              <1> .memoryFull:
    39 0000134A 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    39 00001353 FF                  <1>
    40 00001354 EBF2                <1>     jmp short .exit
    41                              <1> .firstAllocation:
    42                              <1> ;Deal with first allocation
    43 00001356 488D1D(00000000)    <1>     lea rbx, section.programArea.vstart   ;Get this as the head of the chain
    44 0000135D 48891D(E20E0000)    <1>     mov qword [lastBlock], rbx
    45 00001364 48891D(DA0E0000)    <1>     mov qword [mcbChain], rbx
    46 0000136B C60372              <1>     mov byte [rbx + memBlock.bSignature], lastMemBlock
    47 0000136E 66C743010000        <1>     mov word [rbx + memBlock.wBlockSize], 0 ;Dummy block
    48 00001374 EBD2                <1>     jmp short .exit
    49                              <1> 
    50                              <1> findVariable:
    51                              <1> ;Input: rsi = Source string for variable name
    52                              <1> ;       ecx = Length of variable name (max 40)
    53                              <1> ;Output: rbx = ptr to varBlock/strBlock OR -1 if doesnt exist
    54 00001376 50                  <1>     push rax
    55 00001377 51                  <1>     push rcx
    56 00001378 52                  <1>     push rdx
    57 00001379 56                  <1>     push rsi
    58 0000137A 57                  <1>     push rdi
    59 0000137B 488B1D(DA0E0000)    <1>     mov rbx, qword [mcbChain]   ;Start of the chain
    60 00001382 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Chain empty?
    61 00001389 7446                <1>     je .exit
    62                              <1> .search:
    63 0000138B 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
    64 0000138F 7415                <1>     je .varFound    ;We found a numerical variable
    65 00001391 807B0302            <1>     cmp byte [rbx + memBlock.bBlockType], datBlockType
    66 00001395 741E                <1>     je .datFound    ;We found a string variable
    67                              <1> .invalid:
    68                              <1>     ;Are we at the end of the chain?
    69 00001397 803B72              <1>     cmp byte [rbx + memBlock.bSignature], lastMemBlock
    70 0000139A 742B                <1>     je .varNotFound ;At the end of the chain and var not found? Error!
    71 0000139C 480FB75301          <1>     movzx rdx, word [rbx + memBlock.wBlockSize]
    72 000013A1 4801D3              <1>     add rbx, rdx    ;Goto next block
    73 000013A4 EBE5                <1>     jmp short .search
    74                              <1> .varFound:
    75                              <1>     ;Compare to see the var is our var
    76 000013A6 488D7B0C            <1>     lea rdi, qword [rbx + varBlock.sVarName] ;point rdi to the name string
    77 000013AA 51                  <1>     push rcx
    78 000013AB 56                  <1>     push rsi
    79 000013AC F3A6                <1>     repe cmpsb  ;Compare one byte at a time
    80 000013AE 5E                  <1>     pop rsi
    81 000013AF 59                  <1>     pop rcx
    82 000013B0 75E5                <1>     jne .invalid
    83 000013B2 F8                  <1>     clc
    84 000013B3 EB1C                <1>     jmp short .exit
    85                              <1> .datFound:
    86 000013B5 488DBB04010000      <1>     lea rdi, qword [rbx + stringBlock.sVarName] ;point rdi to the name string
    87 000013BC 51                  <1>     push rcx
    88 000013BD 56                  <1>     push rsi
    89 000013BE F3A6                <1>     repe cmpsb  ;Compare one byte at a time
    90 000013C0 5E                  <1>     pop rsi
    91 000013C1 59                  <1>     pop rcx
    92 000013C2 75D3                <1>     jne .invalid
    93 000013C4 F8                  <1>     clc
    94 000013C5 EB0A                <1>     jmp short .exit
    95                              <1> .varNotFound:
    96 000013C7 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    96 000013D0 FF                  <1>
    97                              <1> .exit:
    98 000013D1 5F                  <1>     pop rdi
    99 000013D2 5E                  <1>     pop rsi
   100 000013D3 5A                  <1>     pop rdx
   101 000013D4 59                  <1>     pop rcx
   102 000013D5 58                  <1>     pop rax
   103 000013D6 C3                  <1>     ret
   104                              <1> 
   105                              <1> findFirstLine:
   106                              <1> ;Output: rbx = Pointer to the first program block
   107                              <1> ;         dx = Number of the first line
   108 000013D7 488B1D(EA0E0000)    <1>     mov rbx, qword [firstLinPtr]
   109 000013DE 668B15(F20E0000)    <1>     mov dx, word [firstLinNum]
   110 000013E5 C3                  <1>     ret
   111                              <1> 
   112                              <1> ;FIRST SEARCH FOR A LINE NUMBER BEFORE INSERTING IT INTO THE CHAIN
   113                              <1> ;IF THE LINE NUMBER IS FOUND, REPLACE THE COMMAND STRING
   114                              <1> 
   115                              <1> searchForProgramLine:
   116                              <1> ;Walk the program chain looking to see if a line number exists. If it does,
   117                              <1> ; return a pointer to the block in rbx. If it doesn't, return -1 in rbx
   118                              <1> ;Input: dx = Line number
   119                              <1> ;Output: rbx = Pointer to program block 
   120 000013E6 488B1D(EA0E0000)    <1>     mov rbx, qword [firstLinPtr]
   121 000013ED 4881FBFFFFFFFF      <1>     cmp rbx, -1
   122 000013F4 7413                <1>     je .lineFound
   123                              <1> .search:
   124 000013F6 66395304            <1>     cmp word [rbx + progLineBlock.wLineNum], dx ;Equal line numbers?
   125 000013FA 740D                <1>     je .lineFound
   126 000013FC 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr]   ;Walk chain
   127 00001400 4881FBFFFFFFFF      <1>     cmp rbx, -1
   128 00001407 75ED                <1>     jne .search ;Not -1? Keep searching
   129                              <1> .lineFound:
   130 00001409 C3                  <1>     ret
   131                              <1> 
   132                              <1> insertProgramLine:
   133                              <1> ;Walk the program chain looking for the biggest number less than our
   134                              <1> ; line number. Once we have reached the end of the chain, insert the block there, or
   135                              <1> ; if there is no block, then we are the last in the chain
   136                              <1> ;Input: rsi = New Program Block to be added
   137 0000140A 50                  <1>     push rax
   138 0000140B 53                  <1>     push rbx
   139 0000140C 51                  <1>     push rcx
   140 0000140D 52                  <1>     push rdx
   141 0000140E 57                  <1>     push rdi
   142 0000140F E8C3FFFFFF          <1>     call findFirstLine  ;Get start of program in rbx and line number in dx
   143                              <1> ;First check if we should be the first line
   144                              <1> 
   145 00001414 668B4E04            <1>     mov cx, word [rsi + progLineBlock.wLineNum] ;Save line number in cx
   146 00001418 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Empty program marker
   147 0000141F 744D                <1>     je .first
   148 00001421 6639D1              <1>     cmp cx, dx  ;If cx is below dx, then our entry is first
   149 00001424 7248                <1>     jb .first    
   150                              <1> ;Use ax as the best line number and rdi as the pointer to that block
   151 00001426 66B8FFFF            <1>     mov ax, -1  ;Marker to indicate no insertion
   152                              <1> .walk:
   153 0000142A 48817B06FFFFFFFF    <1>     cmp qword [rbx + progLineBlock.qPtr], -1    ;We are at the end
   154 00001432 7419                <1>     je .sort
   155 00001434 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Walk chain in rbx
   156 00001438 663B4B04            <1>     cmp cx, word [rbx + progLineBlock.wLineNum]
   157 0000143C 77EC                <1>     ja .walk    ;If line number is above my line number, keep walking
   158                              <1> .candidate:
   159                              <1>     ;If the new line number is below the old line number, reject
   160 0000143E 663B4304            <1>     cmp ax, word [rbx + progLineBlock.wLineNum]
   161 00001442 72E6                <1>     jb .walk
   162 00001444 4889DF              <1>     mov rdi, rbx
   163 00001447 668B4304            <1>     mov ax, word [rbx + progLineBlock.wLineNum]
   164 0000144B EBDD                <1>     jmp short .walk
   165                              <1> .sort:
   166 0000144D 66FFC0              <1>     inc ax  ;If no candidates, exit
   167 00001450 740E                <1>     jz .skipLink
   168                              <1>     ;rdi points to the previous line to link to
   169 00001452 488B5706            <1>     mov rdx, qword [rdi + progLineBlock.qPtr]
   170 00001456 48897706            <1>     mov qword [rdi + progLineBlock.qPtr], rsi   ;Insert self here
   171 0000145A 48895606            <1>     mov qword [rsi + progLineBlock.qPtr], rdx   ;Link new block to next line
   172 0000145E EB20                <1>     jmp short .exit
   173                              <1> .skipLink:
   174 00001460 48897306            <1>     mov qword [rbx + progLineBlock.qPtr], rsi   ;Link rsi to last element in list
   175 00001464 48C74606FFFFFFFF    <1>     mov qword [rsi + progLineBlock.qPtr], -1    ;End of chain marker
   176 0000146C EB12                <1>     jmp short .exit
   177                              <1> .first:
   178 0000146E 488935(EA0E0000)    <1>     mov qword [firstLinPtr], rsi
   179 00001475 66890D(F20E0000)    <1>     mov word [firstLinNum], cx
   180 0000147C 48895E06            <1>     mov qword [rsi + progLineBlock.qPtr], rbx   ;Put the old first line as second line
   181                              <1> .exit:
   182 00001480 5F                  <1>     pop rdi
   183 00001481 5A                  <1>     pop rdx
   184 00001482 59                  <1>     pop rcx
   185 00001483 5B                  <1>     pop rbx
   186 00001484 58                  <1>     pop rax
   187 00001485 C3                  <1>     ret
   188                              <1> 
   189                              <1> makeEditInteger:
   190                              <1> ;Will make a variable if it is new name, or edit the value if it already exists
   191                              <1> ;Input: rsi = Var name
   192                              <1> ;       (e)cx = Length of varname, max 40 chars
   193                              <1> ;       rax = Value
   194 00001486 E8EBFEFFFF          <1>     call findVariable   ;rbx returned with var block or -1
   195 0000148B 4881FBFFFFFFFF      <1>     cmp rbx, -1
   196 00001492 7405                <1>     je .newVar
   197 00001494 48894304            <1>     mov qword [rbx + varBlock.qValue], rax
   198 00001498 C3                  <1>     ret
   199                              <1> .newVar:
   200 00001499 E878FEFFFF          <1>     call allocateBlock
   201 0000149E 4881FBFFFFFFFF      <1>     cmp rbx, -1
   202 000014A5 741E                <1>     je .error
   203 000014A7 48894304            <1>     mov qword [rbx + varBlock.qValue], rax  ;Save value
   204 000014AB 66894B01            <1>     mov word [rbx + varBlock.wBlockSize], cx    ;Save length of name
   205 000014AF 668143010C00        <1>     add word [rbx + varBlock.wBlockSize], varBlock_size ;Add full block size
   206 000014B5 C6430301            <1>     mov byte [rbx + varBlock.bBlockType], varBlockType  ;Block type
   207 000014B9 57                  <1>     push rdi
   208 000014BA 488D7B0C            <1>     lea rdi, qword [rbx + varBlock.sVarName]
   209 000014BE E87B000000          <1>     call strcpy ;Copy the string name into block buffer
   210 000014C3 5F                  <1>     pop rdi
   211 000014C4 C3                  <1>     ret
   212                              <1> .error:
   213 000014C5 488D2D50010000      <1>     lea rbp, noMem
   214 000014CC E90DECFFFF          <1>     jmp criticalError
   215                              <1> makeEditString:
   216                              <1> ;Will make a string if it is new name, or replace the string. Strings are null termin
   217                              <1> ;Input: rsi = Var name
   218                              <1> ;       ecx = Length of varname, max 40 chars
   219                              <1> ;       rdx = Ptr to string itself
   220 000014D1 57                  <1>     push rdi
   221 000014D2 56                  <1>     push rsi
   222 000014D3 50                  <1>     push rax
   223 000014D4 53                  <1>     push rbx
   224 000014D5 E89CFEFFFF          <1>     call findVariable   ;rbx returned with string block or -1
   225 000014DA 4881FBFFFFFFFF      <1>     cmp rbx, -1
   226 000014E1 7528                <1>     jne .strcopy
   227 000014E3 E82EFEFFFF          <1>     call allocateBlock
   228 000014E8 4881FBFFFFFFFF      <1>     cmp rbx, -1
   229 000014EF 742E                <1>     je .error
   230 000014F1 66894B01            <1>     mov word [rbx + stringBlock.wBlockSize], cx    ;Save length of name
   231 000014F5 668143010401        <1>     add word [rbx + stringBlock.wBlockSize], stringBlock_size ;Add full block size
   232 000014FB C6430302            <1>     mov byte [rbx + stringBlock.bBlockType], datBlockType  ;Block type
   233 000014FF 488DBB04010000      <1>     lea rdi, qword [rbx + stringBlock.sVarName]
   234 00001506 E833000000          <1>     call strcpy ;Copy the string name into block buffer
   235                              <1> .strcopy:
   236 0000150B 488D7B04            <1>     lea rdi, qword [rbx + stringBlock.string]   ;point to string space
   237 0000150F 4889D6              <1>     mov rsi, rdx    ;Point rsi to the string itself
   238 00001512 E814000000          <1>     call terminatedstrcpy
   239 00001517 30C0                <1>     xor al, al
   240 00001519 AA                  <1>     stosb   ;Store the null delimiter
   241 0000151A 5B                  <1>     pop rbx
   242 0000151B 58                  <1>     pop rax
   243 0000151C 5E                  <1>     pop rsi
   244 0000151D 5F                  <1>     pop rdi
   245 0000151E C3                  <1>     ret
   246                              <1> .error:
   247 0000151F 488D2DF6000000      <1>     lea rbp, noMem
   248 00001526 E9B3EBFFFF          <1>     jmp criticalError
   249                              <1> ;------------------------------------------------:
   250                              <1> ;  The below are misc memory related functions   :
   251                              <1> ;------------------------------------------------:
   252                              <1> terminatedstrcpy:
   253                              <1> ;rdi = Destination String
   254                              <1> ;rsi = Source String
   255                              <1> ;Copy a terminated string
   256 0000152B 50                  <1>     push rax
   257                              <1> .copy:
   258 0000152C AC                  <1>     lodsb   ;Get char in al and inc rsi
   259 0000152D 3C00                <1>     cmp al, 0
   260 0000152F 740B                <1>     je .exit
   261 00001531 3C3A                <1>     cmp al, ":"
   262 00001533 7407                <1>     je .exit
   263 00001535 3C22                <1>     cmp al, 22h ;Speechmark
   264 00001537 7403                <1>     je .exit
   265 00001539 AA                  <1>     stosb   ;Save char from al and inc rdi
   266 0000153A EBF0                <1>     jmp short .copy 
   267                              <1> .exit:
   268 0000153C 58                  <1>     pop rax
   269 0000153D C3                  <1>     ret
   270                              <1> strcpy:
   271                              <1> ;rdi = Destination string
   272                              <1> ;rsi = Source string
   273                              <1> ;rcx = Number of Chars to copy
   274 0000153E 57                  <1>     push rdi
   275 0000153F 56                  <1>     push rsi
   276 00001540 51                  <1>     push rcx
   277 00001541 F3A4                <1>     rep movsb
   278 00001543 59                  <1>     pop rcx
   279 00001544 5E                  <1>     pop rsi
   280 00001545 5F                  <1>     pop rdi
   281 00001546 C3                  <1>     ret
   282                              <1> strlen:
   283                              <1> ;Input: rsi = String start
   284                              <1> ;Output: rsi = String start
   285                              <1> ;        ecx = String length, inclusive of NULL char
   286 00001547 50                  <1>     push rax
   287 00001548 56                  <1>     push rsi
   288 00001549 31C9                <1>     xor ecx, ecx    ;Clear counter
   289                              <1> .search:
   290 0000154B AC                  <1>     lodsb
   291 0000154C FFC1                <1>     inc ecx
   292 0000154E 84C0                <1>     test al, al ;Is this a null char?
   293 00001550 75F9                <1>     jnz .search ;Null not found
   294                              <1> .exit:
   295 00001552 5E                  <1>     pop rsi
   296 00001553 58                  <1>     pop rax
   297 00001554 C3                  <1>     ret
   298                              <1> 
   299                              <1> memoryDetection:
   300 00001555 B820E80000          <1>     mov eax, 0E820h
   301 0000155A CD35                <1>     int 35h     ;rax = ptr to start, rsi = ptr to data table, each entry 24 bytes
   302 0000155C EB07                <1>     jmp short .fsa1
   303                              <1> .findStartAddr:
   304 0000155E 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   305                              <1> .fsa1:
   306 00001565 6685C9              <1>     test cx, cx
   307 00001568 742C                <1>     jz .worstCase
   308 0000156A 66FFC9              <1>     dec cx
   309 0000156D 488B1E              <1>     mov rbx, qword [rsi]    ;Get the address entry into rbx
   310 00001570 4839C3              <1>     cmp rbx, rax    
   311 00001573 75E9                <1>     jne .findStartAddr
   312 00001575 488B4608            <1>     mov rax, qword [rsi + 8] ;Get the number of bytes saved into rax
   313                              <1> 
   314 00001579 488D15(00000000)    <1>     lea rdx, section.programArea.vstart
   315 00001580 4829DA              <1>     sub rdx, rbx    ;Get the size of the interpreter and internal data area
   316 00001583 4829D0              <1>     sub rax, rdx    ;Remove the number of bytes reserved to the interpreter
   317 00001586 E815FDFFFF          <1>     call printdecimalword
   318 0000158B 4801C3              <1>     add rbx, rax    ;Add number of bytes to start address
   319 0000158E 48891D(D00E0000)    <1>     mov qword [maxMemAddr], rbx ;Save this address
   320                              <1> .exit:
   321 00001595 C3                  <1>     ret
   322                              <1> .worstCase:
   323                              <1> ;Assume 2Mb MAX memory, rax has base address
   324 00001596 48BB00002000000000- <1>     mov rbx, 200000h    ;2Mb value
   324 0000159F 00                  <1>
   325 000015A0 4829C3              <1>     sub rbx, rax
   326 000015A3 4889D8              <1>     mov rax, rbx    ;Get value in rax
   327 000015A6 E8F5FCFFFF          <1>     call printdecimalword
   328 000015AB 48C705(D00E0000)00- <1>     mov qword [maxMemAddr], 200000h
   328 000015B3 002000              <1>
   329 000015B6 C3                  <1>     ret
   330                              <1> 
    18                                  %include "BASICDAT.ASM"
    19 000015B7 4F6B0A0D00          <1> prompt  db "Ok",0Ah,0Dh,0
    20 000015BC 53435220494E544241- <1> mainmsg db "SCR INTBASIC/64 v0.1",0Ah,0Dh,0
    20 000015C5 5349432F3634207630- <1>
    20 000015CE 2E310A0D00          <1>
    21 000015D3 204279746573206672- <1> bytemsg db " Bytes free",0Ah,0Dh,0
    21 000015DC 65650A0D00          <1>
    22 000015E1 0A0D00              <1> crlf    db 0Ah,0Dh,0
    23 000015E4 4572726F720A0D00    <1> errmsg  db "Error",0Ah,0Dh,0
    24 000015EC 303132333435363738- <1> numbers db "0123456789"
    24 000015F5 39                  <1>
    25                              <1> ;startVarChars db "ABCDEFGHIJKLMNOPQRSTUVWXYZ" ;Valid starting chars for a var name
    26                              <1> ;numStartVarChars equ $ - startVarChars
    27 000015F6 414243444546474849- <1> varChrs db "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789%$" ;Valid inner chars for var name
    27 000015FF 4A4B4C4D4E4F505152- <1>
    27 00001608 535455565758595A30- <1>
    27 00001611 313233343536373839- <1>
    27 0000161A 2524                <1>
    28                              <1> numVarChars equ $ - varChrs
    29                              <1> ;% => Integer variable (8 bytes)
    30                              <1> ;! => Single-Precision, Unused and ignored
    31                              <1> ;# => Double-Precision, Unused and ignored
    32                              <1> ;$ => String variable
    33                              <1> 
    34                              <1> ;Error Messages
    35 0000161C 4F7574206F66206D65- <1> noMem   db "Out of memory",0Ah,0Dh,0
    35 00001625 6D6F72790A0D00      <1>
    36 0000162C 53796E746178206572- <1> syntax  db "Syntax error",0Ah,0Dh,0
    36 00001635 726F720A0D00        <1>
    37 0000163B 54797065206D69736D- <1> typeError   db "Type mismatch",0Ah,0Dh,0
    37 00001644 617463680A0D00      <1>
    38 0000164B 556E646566696E6564- <1> lineNoXist  db "Undefined line number",0Ah,0Dh,0
    38 00001654 206C696E65206E756D- <1>
    38 0000165D 6265720A0D00        <1>
    39 00001663 427265616B20696E20- <1> breakmsg db "Break in ",0
    39 0000166C 00                  <1>
    40 0000166D 537461636B206F7665- <1> stkOvflw db "Stack overflow",0Ah,0Dh,0
    40 00001676 72666C6F770A0D00    <1>
    41                              <1> 
    42 0000167E 5748494C4520776974- <1> noWend   db "WHILE without WEND", 0Ah, 0Dh, 0
    42 00001687 686F75742057454E44- <1>
    42 00001690 0A0D00              <1>
    43 00001693 57454E442077697468- <1> noWhile  db "WEND without WHILE", 0Ah, 0Dh, 0
    43 0000169C 6F7574205748494C45- <1>
    43 000016A5 0A0D00              <1>
    44 000016A8 4E4558542077697468- <1> noFor    db "NEXT without FOR", 0Ah, 0Dh, 0
    44 000016B1 6F757420464F520A0D- <1>
    44 000016BA 00                  <1>
    45 000016BB 464F5220776974686F- <1> noNext   db "FOR without NEXT", 0Ah, 0Dh, 0
    45 000016C4 7574204E4558540A0D- <1>
    45 000016CD 00                  <1>
    46 000016CE 52455455524E207769- <1> noReturn db "RETURN without GOSUB", 0Ah, 0Dh, 0
    46 000016D7 74686F757420474F53- <1>
    46 000016E0 55420A0D00          <1>
    47 000016E5 556E7072696E746162- <1> uknowner db "Unprintable error", 0Ah, 0Dh, 0
    47 000016EE 6C65206572726F720A- <1>
    47 000016F7 0D00                <1>
    48                              <1> 
    49 000016F9 4469766973696F6E20- <1> divZer   db "Division by zero", 0Ah, 0Dh, 0
    49 00001702 6279207A65726F0A0D- <1>
    49 0000170B 00                  <1>
    19                                  Segment programArea follows=resSeg align=1 vfollows=resSeg valign=1
    20                                  ENDOFPROGRAM:

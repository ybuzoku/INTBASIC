     1                                      [map all BASIC.MAP]
     2                                      [DEFAULT REL]
     3                                      BITS 64
     4                                  %include "MEM.INC"
     5                              <1> 
     6                              <1> progLineBlockType   equ 0   ;Program Line
     7                              <1> varBlockType        equ 1   ;Variable block
     8                              <1> datBlockType        equ 2   ;Data block (i.e. a string block)
     9                              <1> 
    10                              <1> notLastMemBlock equ "t" ;Used for blocks that are not the last block
    11                              <1> lastMemBlock    equ "r" ;Used by the last block to indicate end of chain
    12                              <1> 
    13                              <1> %macro memBlockM 0 ;Memory block Macro
    14                              <1>     .bSignature resb 1      ;Valid Signature
    15                              <1>     .wBlockSize resw 1      ;Total block size in bytes
    16                              <1>     .bBlockType resb 1      ;Block type, program line, variable or string
    17                              <1> %endmacro
    18                              <1> 
    19                              <1> struc memBlock
    20                              <1>     memBlockM
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    21                              <1> endstruc
    22                              <1> 
    23                              <1> struc progLineBlock
    24                              <1>     memBlockM               ;Common memory block header
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    25 00000004 ????                <1>     .wLineNum   resw 1      ;Line number, up to 65535
    26 00000006 ????????????????    <1>     .qPtr       resq 1      ;Pointer to the next line, or -1 if last line
    27 0000000E <res 100h>          <1>     .sLine      resb maxLineLen  ;Maximum length 255, keep null char but 
    28                              <1>     ;                             NOT LINE NUMBER OR PRECEEDING SPACES
    29                              <1> endstruc
    30                              <1> 
    31                              <1> struc varBlock
    32                              <1>     memBlockM               ;Common memory block header
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    33 00000004 ????????????????    <1>     .qValue     resq 1      ;One value qword
    34                              <1>     .sVarName:              ;Up to 40 chars for the var name
    35                              <1> endstruc
    36                              <1> 
    37                              <1> struc stringBlock
    38                              <1>     memBlockM
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    39 00000004 <res 100h>          <1>     .string     resb maxLineLen    ;Strings allocate 256 chars
    40                              <1>     .sVarName:              ;Up to 40 chars for the var name
    41                              <1> endstruc
    42                              <1> 
    43                              <1> ;Variable equates
    44                              <1> intEquate  equ 0
    45                              <1> strEquate  equ 1
    46                              <1> 
    47                              <1> ;Status Equates
    48                              <1> breakBit    equ 1    ;Set means on
    49                              <1> traceBit    equ 2    ;Set means TRON, Clear means TROFF
    50                              <1> indirectBit equ 3    ;Set means indirect/program mode, Clear means direct/line mode
     5                                  Segment .text align=1
     6                                  %include "RELOC.ASM"
     7 00000000 55AA                <1>     dw 0AA55h 
     8                              <1> ;First verify I have Enough RAM for my program and then run
     9 00000002 B801E80000          <1>     mov eax, 0E801h ;Get low memory count in ax
    10 00000007 CD35                <1>     int 35h
    11 00000009 663D0008            <1>     cmp ax, 200000h/400h ;Divide 2Mb into 1Kb chunks.
    12 0000000D 722A                <1>     jb bad
    13 0000000F B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    14 00000014 0F32                <1>     rdmsr
    15 00000016 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    16 00000018 48C1E720            <1>     shl rdi, 20h        ;Shift high
    17 0000001C 89C7                <1>     mov edi, eax        ;Get the low dword in
    18 0000001E 4889F8              <1>     mov rax, rdi
    19 00000021 488D35(00000000)    <1>     lea rsi, section.resSeg.start
    20 00000028 4881C7[26110000]    <1>     add rdi, bssLen
    21 0000002F B900100000          <1>     mov ecx, 1000h
    22 00000034 F348A5              <1>     rep movsq
    23 00000037 FFE0                <1>     jmp qword rax
    24                              <1> bad:
    25 00000039 488D2D0D000000      <1>     lea rbp, badmsg
    26 00000040 B804130000          <1>     mov eax, 1304h
    27 00000045 CD30                <1>     int 30h
    28 00000047 30E4                <1>     xor ah, ah
    29 00000049 CD36                <1>     int 36h
    30 0000004B CD38                <1>     int 38h
    31 0000004D 4E6F7420456E6F7567- <1> badmsg: db "Not Enough Memory. Press any key to enter SYSDEBUG...",0
    31 00000056 68204D656D6F72792E- <1>
    31 0000005F 20507265737320616E- <1>
    31 00000068 79206B657920746F20- <1>
    31 00000071 656E74657220535953- <1>
    31 0000007A 44454255472E2E2E00  <1>
     7                                  Segment dSeg nobits align=1 start=0
     8                                  %include "BSS.ASM"
     9 00000000 <res FC0h>          <1> stack       resq 200h - 8  ;Save 4Kb stack space
    10 00000FC0 ????????????????    <1> stacktop    resq 1
    11                              <1> 
    12                              <1> maxLineLen  equ 256
    13 00000FC8 <res 100h>          <1> inString    resb maxLineLen         ;256 character input string
    14                              <1> 
    15                              <1> ;This string is used for printing long numbers and saving
    16                              <1> ; the variable names for string comparisons
    17                              <1> digitStringLen  equ 48
    18 000010C8 <res 30h>           <1> digitString resb digitStringLen     
    19                              <1> 
    20 000010F8 ????????????????    <1> minMemAddr  resq 1  ;Pointer from where to start allocating memory blocks
    21 00001100 ????????????????    <1> maxMemAddr  resq 1  ;Pointer to the byte past which we cannot allocate anything
    22                              <1> ;==============================================================================
    23                              <1> ;This is the SDA for each program and must be included in the program area
    24                              <1> ; once we add the ability to save the program to disk.
    25                              <1> ;==============================================================================
    26                              <1> 
    27                              <1> ;void* mcbChain, lastBlock, firstLinPtr = -1 => New program, empty entries
    28                              <1> 
    29 00001108 ??                  <1> strLen      resb 1  ;Counter for number of chars entered in string
    30 00001109 ??                  <1> stateByte   resb 1  ;Bit 0 => Break Set, stop processing after end of current line
    31 0000110A ????????????????    <1> mcbChain    resq 1  ;Pointer to the start of the chain
    32 00001112 ????????????????    <1> lastBlock   resq 1  ;Pointer to the last block
    33 0000111A ????????????????    <1> firstLinPtr resq 1  ;Pointer to the programs' first line 
    34 00001122 ????                <1> firstLinNum resw 1  ;Line number of the first line of the program
    35 00001124 ????                <1> currentLine resw 1  ;Currently being executed line number
    36                              <1> 
    37                              <1> bssLen: ;Needed to compute the resident portion load location
     9                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1
    10                                  %include "MAIN.ASM"
    11                              <1> start:
    12 00000000 B801C50000          <1>     mov eax, 0C501h
    13 00000005 CD35                <1>     int 35h         ;Connect the debugger
    14 00000007 E89A010000          <1>     call ttyClear   ;Clear the teletype
    15                              <1>     ;Set the CtrlBreak Handler
    16 0000000C 488D3DC0000000      <1>     lea rdi, ctrlBreakHandler
    17 00000013 B03B                <1>     mov al, 3Bh
    18 00000015 E8C2000000          <1>     call setHandler
    19                              <1> 
    20                              <1>     ;Memory stuff
    21 0000001A 488D2D8C0B0000      <1>     lea rbp, mainmsg
    22 00000021 E873010000          <1>     call ttyOutString
    23 00000026 E81B0B0000          <1>     call memoryDetection
    24 0000002B 488D2D8F0B0000      <1>     lea rbp, bytemsg
    25 00000032 E862010000          <1>     call ttyOutString
    26 00000037 E8A2050000          <1>     call newProgram         ;Use this to reset program pointers
    27                              <1> mainLoop:
    28 0000003C FC                  <1>     cld                 ;Set default string op direction
    29 0000003D 488D25(C00F0000)    <1>     lea rsp, stacktop    ;Reinitialize stack pointer
    30 00000044 488D05F1FFFFFF      <1>     lea rax, mainLoop
    31 0000004B 8025(09110000)FE    <1>     and byte [stateByte], 0FEh  ;Clear the break bit
    32 00000052 50                  <1>     push rax    ;Save address on stack
    33 00000053 488D2D4E0B0000      <1>     lea rbp, prompt
    34 0000005A E83A010000          <1>     call ttyOutString
    35                              <1> .ml0:
    36                              <1> ;This section will execute an input line if it is an interactive expression
    37                              <1> ; or store it in the program if it has a line number.
    38                              <1> ;It will keep accepting lines until a line is entered without a line number
    39 0000005F E898000000          <1>     call getLineInput
    40 00000064 E81D080000          <1>     call decimalToHex   ;Check to see if we have a valid line number
    41 00000069 6685C0              <1>     test ax, ax
    42 0000006C 750C                <1>     jnz .saveLine
    43                              <1> ;Here we execute the line, move rsi to the start of the line
    44 0000006E 488D35(C80F0000)    <1>     lea rsi, inString
    45 00000075 E945010000          <1>     jmp mainProcessor
    46                              <1> .saveLine:
    47                              <1>     ;ax has the line number
    48 0000007A 6689C2              <1>     mov dx, ax
    49 0000007D E855090000          <1>     call searchForProgramLine
    50 00000082 4881FBFFFFFFFF      <1>     cmp rbx, -1
    51 00000089 751D                <1>     jne .commonProc ;If not equal, line must exist, continue
    52 0000008B E8FA010000          <1>     call spaceSkip  ;Skip all the prceeding spaces
    53 00000090 803E00              <1>     cmp byte [rsi], 0  ;Is the first non space char the end of the string?
    54 00000093 742D                <1>     je .lineDoesntExist
    55                              <1>     ;So we have a new line that isn't empty, allocate a new block for this line
    56 00000095 E86D080000          <1>     call allocateBlock  ;Return a default block in rbx
    57 0000009A C6430300            <1>     mov byte [rbx + progLineBlock.bBlockType], progLineBlockType
    58 0000009E 66894304            <1>     mov word [rbx + progLineBlock.wLineNum], ax
    59 000000A2 66C743010E01        <1>     mov word [rbx + progLineBlock.wBlockSize], progLineBlock_size
    60                              <1> .commonProc:
    61                              <1>     ;If the line already exists, simply override the stored string
    62                              <1>     ;rbx has a pointer to the block
    63 000000A8 E88B0A0000          <1>     call strlen ;Get the string length
    64 000000AD 488D7B0E            <1>     lea rdi, qword [rbx + progLineBlock.sLine]  ;Get address here
    65 000000B1 E8790A0000          <1>     call strcpy ;Copy the program string to the program block
    66 000000B6 56                  <1>     push rsi
    67 000000B7 4889DE              <1>     mov rsi, rbx    ;Move the block into rsi
    68 000000BA E83C090000          <1>     call insertProgramLine
    69 000000BF 5E                  <1>     pop rsi
    70 000000C0 EB9D                <1>     jmp short .ml0
    71                              <1> .lineDoesntExist:
    72 000000C2 488D2D700B0000      <1>     lea rbp, lineNoXist
    73                              <1> ;For any error, syntax or otherwise, come here
    74                              <1> criticalError:
    75                              <1> ;Called with rbp pointing at error message
    76 000000C9 E8CB000000          <1>     call ttyOutString
    77 000000CE E969FFFFFF          <1>     jmp mainLoop    ;Trash input line, restart line input
    78                              <1> 
    79                              <1> ctrlBreakHandler:
    80 000000D3 800D(09110000)01    <1>     or byte [stateByte], 1  ;Set the byte
    81 000000DA 48CF                <1>     iretq
    82                              <1> setHandler:
    83                              <1> ;Called with:
    84                              <1> ;   rdi = Pointer to interrupt handler
    85                              <1> ;   al = Interrupt number
    86 000000DC 89C5                <1>     mov ebp, eax    ;al has interrupt number which we need to save
    87 000000DE 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
    88                              <1> ;First call to get default BIOS segement selector and attribute word
    89 000000E4 88C3                <1>     mov bl, al  ;Set interrupt number 
    90 000000E6 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
    91 000000EB CD35                <1>     int 35h
    92 000000ED 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
    93 000000EF 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
    94                              <1> ;dx preserves the attribute word
    95 000000F1 4889FB              <1>     mov rbx, rdi  ;Pointer passed in rdi
    96 000000F4 B808F00000          <1>     mov eax, 0F008h ;Set descriptor
    97 000000F9 CD35                <1>     int 35h
    98                              <1>     
    99 000000FB C3                  <1>     ret
    11                                  %include "TTY.ASM"
    12                              <1> getLineInput:
    13                              <1>     ;Sets rsi to the inputstring
    14 000000FC 30E4                <1>     xor ah, ah
    15 000000FE 8825(08110000)      <1>     mov byte [strLen], ah   ;Zero the char counter
    16 00000104 488D3D(C80F0000)    <1>     lea rdi, inString   ;Move to start of line
    17 0000010B 4889FE              <1>     mov rsi, rdi
    18 0000010E 57                  <1>     push rdi
    19 0000010F B900010000          <1>     mov ecx, maxLineLen
    20 00000114 30C0                <1>     xor al, al    ;Ensure the input line is sanitised
    21 00000116 F3AA                <1>     rep stosb
    22 00000118 5F                  <1>     pop rdi
    23                              <1> .getChar:
    24 00000119 E883000000          <1>     call ttyIn
    25 0000011E 3C0D                <1>     cmp al, 0Dh ;Line Feed
    26 00000120 7456                <1>     je .gliExit
    27 00000122 3C08                <1>     cmp al, 08h ;Bspace
    28 00000124 740F                <1>     je .glibspace
    29 00000126 803D(08110000)FE    <1>     cmp byte [strLen], -2   ;If at max length (255 chars), simply beep and wait for either bspace or enter
    30 0000012D 7459                <1>     je .gliFull 
    31 0000012F 84C0                <1>     test al, al
    32 00000131 7443                <1>     je .gliExtendedChar
    33 00000133 EB29                <1>     jmp short .gliCheckCase
    34                              <1> .glibspace:
    35 00000135 F605(08110000)FF    <1>     test byte [strLen], -1  ;This will only be zero if strLen=0
    36 0000013C 74DB                <1>     jz .getChar
    37 0000013E 48FFCF              <1>     dec rdi ;Go back by one position in the input line
    38 00000141 FE0D(08110000)      <1>     dec byte [strLen]
    39 00000147 B008                <1>     mov al, 08h
    40 00000149 E846000000          <1>     call ttyOutChar
    41 0000014E B020                <1>     mov al, 20h  
    42 00000150 E83F000000          <1>     call ttyOutChar
    43 00000155 B008                <1>     mov al, 08h
    44 00000157 E838000000          <1>     call ttyOutChar
    45 0000015C EBBB                <1>     jmp short .getChar
    46                              <1> .gliCheckCase:
    47                              <1>     ;al has char
    48 0000015E E831000000          <1>     call ttyOutChar ;Echo the char as is, but store it uppercase
    49 00000163 3C61                <1>     cmp al, "a"
    50 00000165 7206                <1>     jb .gliccStore
    51 00000167 3C7A                <1>     cmp al, "z"
    52 00000169 7702                <1>     ja .gliccStore
    53 0000016B 2C20                <1>     sub al, 20h
    54                              <1> .gliccStore:
    55 0000016D AA                  <1>     stosb   ;Increment the pointer, add char to buffer
    56 0000016E FE05(08110000)      <1>     inc byte [strLen]   ;Inc char count
    57 00000174 EBA3                <1>     jmp short .getChar
    58                              <1> .gliExtendedChar:
    59                              <1>     ;Currently, extended chars do nothing, 
    60                              <1>     ; eventually add F1-F10 functionality
    61                              <1>     ; and arrow key support
    62 00000176 EBA1                <1>     jmp short .getChar
    63                              <1> .gliExit:
    64 00000178 488D2D500A0000      <1>     lea rbp, crlf
    65 0000017F E815000000          <1>     call ttyOutString
    66 00000184 C60700              <1>     mov byte [rdi], 0   ;Null terminate string here
    67 00000187 C3                  <1>     ret
    68                              <1> .gliFull:
    69 00000188 B007                <1>     mov al, 07h
    70 0000018A E805000000          <1>     call ttyOutChar
    71 0000018F E985FFFFFF          <1>     jmp .getChar
    72                              <1> 
    73                              <1> ttyOutChar:
    74 00000194 B40E                <1>     mov ah, 0Eh
    75 00000196 CD30                <1>     int 30h
    76 00000198 C3                  <1>     ret
    77                              <1> ttyOutString:
    78                              <1> ;Print 0 terminated strings
    79 00000199 B804130000          <1>     mov eax, 1304h
    80 0000019E CD30                <1>     int 30h
    81 000001A0 C3                  <1>     ret
    82                              <1> ttyIn:
    83 000001A1 30E4                <1>     xor ah, ah
    84 000001A3 CD36                <1>     int 36h
    85 000001A5 C3                  <1>     ret
    86                              <1> ttyClear:
    87 000001A6 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
    88 000001AB CD30                <1>     int 30h
    89 000001AD B402                <1>     mov ah, 02h
    90 000001AF 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
    91 000001B1 88D7                <1>     mov bh, dl      ;Set cursor for page 0
    92 000001B3 CD30                <1>     int 30h
    93 000001B5 B707                <1>     mov bh, 07h     ;Grey/Black attribs
    94 000001B7 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
    95 000001BC CD30                <1>     int 30h
    96 000001BE C3                  <1>     ret
    12                                  %include "PROCESS.ASM"
    13                              <1> mainProcessor:
    14                              <1> ;rsi must point to the start of the portion of the line to execute
    15 000001BF E8C6000000          <1>     call spaceSkip  ;Skip any leading spaces
    16 000001C4 803E00              <1>     cmp byte [rsi], 0   ;Null terminated line, empty line?
    17 000001C7 7469                <1>     je .exit
    18                              <1>     ;rsi now points to function
    19 000001C9 488D3DB0020000      <1>     lea rdi, funTbl     ;Point rdi to the function table
    20                              <1> .functionFinderLoop:
    21 000001D0 0FB60F              <1>     movzx ecx, byte [rdi]  ;Get the string length  
    22 000001D3 80F9FF              <1>     cmp cl, -1  ;-1 is the end of table marker, either Var assignment or error
    23 000001D6 745B                <1>     je .notLetVarAssignment ;No key word found, consider variable assignment
    24 000001D8 56                  <1>     push rsi    ;Save ptr to start of string on stack 
    25 000001D9 57                  <1>     push rdi
    26 000001DA 48FFC7              <1>     inc rdi             ;Goto first char in function name
    27 000001DD F3A6                <1>     repe cmpsb
    28 000001DF 5F                  <1>     pop rdi
    29 000001E0 5E                  <1>     pop rsi     ;Return ptr to start of string pointer from stack
    30 000001E1 84C9                <1>     test cl, cl ;Did all the chars match?
    31 000001E3 740F                <1>     jz .functionFound
    32 000001E5 480FB607            <1>     movzx rax, byte [rdi]    ;Skip unnecessary function pointer
    33 000001E9 480502000000        <1>     add rax, 2      ;Add 2 to skip relative pointer
    34 000001EF 4801C7              <1>     add rdi, rax
    35 000001F2 EBDC                <1>     jmp short .functionFinderLoop
    36                              <1> .functionFound:
    37                              <1>     ;Function found! Execute!
    38                              <1>     ;rsi points to start of expression to evaluate for function
    39                              <1>     ;rdi points to table entry
    40 000001F4 488D1D85020000      <1>     lea rbx, funTbl         ;Get table address
    41 000001FB 480FB617            <1>     movzx rdx, byte [rdi]   ;Get pascal string length
    42 000001FF 0FB70C17            <1>     movzx ecx, word [rdi + rdx] ;Add pascal strlen to table entry and get word offset
    43 00000203 4801CB              <1>     add rbx, rcx    ;Add word offset to table base
    44 00000206 48FFCA              <1>     dec rdx         ;Get number of chars in function name
    45 00000209 4801D6              <1>     add rsi, rdx    ;rsi points to first char AFTER function name
    46                              <1> .runFunction:
    47                              <1>     ;rsi points to string to begin processing
    48                              <1>     ;Run bit tests
    49 0000020C F605(09110000)01    <1>     test byte [stateByte], breakBit ;Is break set before exec?
    50 00000213 754C                <1>     jnz .break
    51 00000215 F605(09110000)02    <1>     test byte [stateByte], traceBit ;Are we TRON?
    52 0000021C 751E                <1>     jnz .tron
    53                              <1> .mp0:
    54                              <1> ;EXEC   LINE
    55                              <1>     ;Get the address of the next line and push it on stack
    56                              <1>     ;This allows a program to modify the return address or even add 
    57                              <1>     ; more addresses to the stack
    58 0000021E FFD3                <1>     call rbx        ;Call the function pointer in rbx
    59                              <1>     ;Pop it off the stack here
    60                              <1>     ;cmp the address to -1, if equal, exit
    61                              <1> ;EXEC COMPLETE
    62 00000220 F605(09110000)01    <1>     test byte [stateByte], breakBit ;Is break set after exec?
    63 00000227 7538                <1>     jnz .break
    64                              <1> 
    65 00000229 E848020000          <1>     call findOtherExpressionsOnLine ;See if there are any other expressions
    66 0000022E 84C0                <1>     test al, al ;If al is null, no more expressions on the line
    67                              <1>     ;If not null, keep executing expressions, rsi points to first char after :
    68 00000230 758D                <1>     jnz mainProcessor 
    69                              <1> .exit:
    70 00000232 C3                  <1>     ret
    71                              <1> .notLetVarAssignment:
    72 00000233 488D1D26030000      <1>     lea rbx, variableAssignment
    73 0000023A EBD0                <1>     jmp short .runFunction  ;Now call the function as if it was found from the table
    74                              <1> 
    75                              <1> .tron:
    76                              <1> ;Print the line number about to be executed
    77 0000023C F605(09110000)03    <1>     test byte [stateByte], indirectBit  ;Tron should only work in indirect mode
    78 00000243 74D9                <1>     jz .mp0
    79 00000245 B05B                <1>     mov al, "["
    80 00000247 E848FFFFFF          <1>     call ttyOutChar
    81 0000024C 0FB705(24110000)    <1>     movzx eax, word [currentLine]
    82 00000253 E856060000          <1>     call printdecimalword
    83 00000258 B05D                <1>     mov al, "]"
    84 0000025A E835FFFFFF          <1>     call ttyOutChar
    85 0000025F EBBD                <1>     jmp short .mp0
    86                              <1> .break:
    87 00000261 488D2DE9090000      <1>     lea rbp, breakmsg
    88 00000268 E82CFFFFFF          <1>     call ttyOutString
    89 0000026D 0FB705(24110000)    <1>     movzx eax, word [currentLine]
    90 00000274 E835060000          <1>     call printdecimalword
    91 00000279 488D2D4F090000      <1>     lea rbp, crlf
    92 00000280 E814FFFFFF          <1>     call ttyOutString
    93 00000285 E9B2FDFFFF          <1>     jmp mainLoop    ;Exit processing
    94                              <1> 
    95                              <1> 
    13                                  %include "PARSE.ASM"
    14                              <1> ;Main Parsing Routines go here
    15                              <1> 
    16                              <1> spaceSkip:
    17                              <1> ;Allows us to skip spaces that might have been placed for
    18                              <1> ; ease of reading by the user without modifying any registers
    19                              <1> ; except for rsi.
    20                              <1> ;Input: rsi = Pointer to string
    21                              <1> ;Output: rsi = First non space character encountered
    22 0000028A 803E20              <1>     cmp byte [rsi], " "
    23 0000028D 7505                <1>     jne .exit
    24 0000028F 48FFC6              <1>     inc rsi
    25 00000292 EBF6                <1>     jmp short spaceSkip
    26                              <1> .exit:
    27 00000294 C3                  <1>     ret
    28                              <1> 
    29                              <1> getVarNameLength:
    30                              <1> ;Called pointing to the buffer with the var name in it
    31                              <1> ;Input: rsi = Start of var name
    32                              <1> ;Output: ecx = Length of varname
    33 00000295 50                  <1>     push rax
    34 00000296 56                  <1>     push rsi
    35 00000297 57                  <1>     push rdi
    36 00000298 53                  <1>     push rbx
    37 00000299 52                  <1>     push rdx
    38 0000029A 31D2                <1>     xor edx, edx    ;Clear counter of chars
    39 0000029C 488D1D41090000      <1>     lea rbx, varChrs    ;Get the list of valid variable name chars
    40                              <1> .search:
    41 000002A3 4889DF              <1>     mov rdi, rbx    ;Save pointer in rbx
    42 000002A6 AC                  <1>     lodsb       ;Get the first char into al
    43 000002A7 B926000000          <1>     mov ecx, numVarChars
    44 000002AC F2AE                <1>     repne scasb       ;Look for char in the valid chars list
    45 000002AE 750A                <1>     jne .exit   ;Char not found, drop it
    46 000002B0 FFC2                <1>     inc edx     ;Add one to number of chars found
    47 000002B2 81FA28000000        <1>     cmp edx, 40 ;At position for char 40?
    48 000002B8 72E9                <1>     jb .search  ;Whilst below, keep going
    49                              <1> .exit:
    50 000002BA 89D1                <1>     mov ecx, edx
    51 000002BC 5A                  <1>     pop rdx
    52 000002BD 5B                  <1>     pop rbx
    53 000002BE 5F                  <1>     pop rdi
    54 000002BF 5E                  <1>     pop rsi
    55 000002C0 58                  <1>     pop rax
    56 000002C1 C3                  <1>     ret
    57                              <1> 
    58                              <1> getVarType:
    59                              <1> ;Input: rsi = Start of var name
    60                              <1> ;       rcx = Length of varname
    61                              <1> ;Output: ebx = 0 => Integer
    62                              <1> ;        ebx = 1 => String
    63                              <1> ;        ebx = -1 => Var doesnt exist, caller handles
    64 000002C2 50                  <1>     push rax
    65 000002C3 51                  <1>     push rcx
    66 000002C4 56                  <1>     push rsi
    67 000002C5 E89D060000          <1>     call findVariable
    68 000002CA 4881FBFFFFFFFF      <1>     cmp rbx, -1
    69 000002D1 7406                <1>     je .exit
    70 000002D3 0FB65B03            <1>     movzx ebx, byte [rbx + memBlock.bBlockType]
    71 000002D7 FFCB                <1>     dec ebx
    72                              <1> .exit:
    73 000002D9 5E                  <1>     pop rsi
    74 000002DA 59                  <1>     pop rcx
    75 000002DB 58                  <1>     pop rax
    76 000002DC C3                  <1>     ret
    77                              <1> 
    78                              <1> handleAlgebraicExpression:
    79                              <1> ;Input: rsi = Points to a mathematical expression
    80                              <1> ;Output: rax = Result of said expression
    81                              <1> ;Declares a syntax error if weird chars found
    82                              <1> ;Declares a type error if a string variable found
    83                              <1>     ;Handle Logical Connectives here
    84                              <1>     ;call .handleThirdLevel
    85 000002DD 66813E4E4F          <1>     cmp word [rsi], "NO"
    86 000002E2 7504                <1>     jne .hae0
    87 000002E4 807E0254            <1>     cmp byte [rsi + 2], "T"
    88                              <1> ;    je .not
    89                              <1> .hae0:
    90 000002E8 66813E414E          <1>     cmp word [rsi], "AN"
    91 000002ED 7504                <1>     jne .hae1
    92 000002EF 807E0244            <1>     cmp byte [rsi + 2], "D"
    93                              <1> ;    je .and
    94                              <1> .hae1:
    95 000002F3 66813E4F52          <1>     cmp word [rsi], "OR"
    96                              <1> ;    je .or
    97 000002F8 66813E584F          <1>     cmp word [rsi], "XO"
    98 000002FD 7504                <1>     jne .hae2
    99 000002FF 807E0252            <1>     cmp byte [rsi + 2], "R"
   100                              <1> ;    je .xor
   101                              <1> .hae2:
   102 00000303 66813E494D          <1>     cmp word [rsi], "IM"
   103 00000308 7504                <1>     jne .relationals
   104 0000030A 807E0250            <1>     cmp byte [rsi + 2], "P"
   105                              <1> ;    je .implicaton
   106                              <1> ;Level 3, Relational Connectives
   107                              <1> ;.handleThirdLevel:
   108                              <1> ;   call .handleSecondLevel
   109                              <1> .relationals:
   110                              <1>     ;Handle Relational connectives
   111 0000030E 803E3D              <1>     cmp byte [rsi], "="
   112                              <1> ;    je .equivalence
   113 00000311 66813E3C3E          <1>     cmp word [rsi], "<>"
   114                              <1> ;    je .neq
   115 00000316 66813E3E3C          <1>     cmp word [rsi], "><"
   116                              <1> ;    je .neq
   117 0000031B 803E3C              <1>     cmp byte [rsi], "<"
   118                              <1> ;    je .less
   119 0000031E 803E3E              <1>     cmp byte [rsi], ">"
   120                              <1> ;    je .greater
   121 00000321 66813E3C3D          <1>     cmp word [rsi], "<="
   122                              <1> ;    je .leq
   123 00000326 66813E3E3D          <1>     cmp word [rsi], ">="
   124                              <1> ;    je .geq
   125                              <1> ;Level 2, Addition and Subtraction
   126                              <1> .handleSecondLevel:
   127 0000032B E828000000          <1>     call .handleFirstLevel
   128                              <1> .parseAdditiveOperators:    
   129 00000330 803E2D              <1>     cmp byte [rsi], '-'
   130 00000333 7415                <1>     je .processMinus
   131 00000335 803E2B              <1>     cmp byte [rsi], '+'
   132 00000338 0F8592000000        <1>     jne .exit              ;No operators, expression evaluated, exit
   133 0000033E 50                  <1>     push rax
   134 0000033F E811000000          <1>     call .handleFirstLevelSkip   ;Parse first level
   135                              <1> .processAdd:    
   136 00000344 59                  <1>     pop rcx
   137 00000345 4801C8              <1>     add rax, rcx           ;Add the two numbers
   138 00000348 EBE6                <1>     jmp short .parseAdditiveOperators  ;Search again for + or -
   139                              <1> .processMinus:
   140 0000034A 50                  <1>     push rax
   141 0000034B E805000000          <1>     call .handleFirstLevelSkip   ;Parse first level
   142 00000350 48F7D8              <1>     neg rax              ;Change a - b to a + -b
   143 00000353 EBEF                <1>     jmp short .processAdd
   144                              <1> 
   145                              <1> ;Level 1, Division and multiplication
   146                              <1> 
   147                              <1> .handleFirstLevelSkip:
   148 00000355 48FFC6              <1>     inc rsi              ;Skip the op symbol
   149                              <1> .handleFirstLevel:
   150 00000358 E82C000000          <1>     call .handleZerothLevel      ;Call third level
   151                              <1> .parseProductOperators:   
   152 0000035D 803E2F              <1>     cmp byte [rsi], '/'
   153 00000360 7411                <1>     je .processDiv
   154 00000362 803E2A              <1>     cmp byte [rsi], '*'
   155 00000365 7569                <1>     jne .exit           ;Neither multiplication or division, return up a level
   156                              <1> 
   157 00000367 50                  <1>     push rax
   158 00000368 E819000000          <1>     call .handleZerothLevelSkip   ;Call zeroth level
   159 0000036D 59                  <1>     pop rcx
   160 0000036E 48F7E9              <1>     imul rcx             ; Multiplication
   161 00000371 EBEA                <1>     jmp short .parseProductOperators   ;Search again for * or /
   162                              <1> 
   163                              <1> .processDiv:
   164 00000373 50                  <1>     push rax
   165 00000374 E80D000000          <1>     call .handleZerothLevelSkip   ;Call zeroth level
   166 00000379 59                  <1>     pop rcx
   167 0000037A 4891                <1>     xchg rax, rcx
   168 0000037C 31D2                <1>     xor edx, edx         ;Clear rdx for rdx:rax
   169 0000037E 48F7F9              <1>     idiv rcx             ;Signed division
   170 00000381 E9D7FFFFFF          <1>     jmp .parseProductOperators         ;Search again for * or /
   171                              <1> 
   172                              <1> ;Level 0, Brackets, numbers and vars.
   173                              <1> 
   174                              <1> .handleZerothLevelSkip:
   175 00000386 48FFC6              <1>     inc rsi             ;Skip the op symbol
   176                              <1> .handleZerothLevel:
   177 00000389 E8FCFEFFFF          <1>     call spaceSkip
   178 0000038E AC                  <1>     lodsb               ;Read char and adv rsi
   179 0000038F 3C28                <1>     cmp al, '('
   180 00000391 750C                <1>     jne .notBracket
   181 00000393 E845FFFFFF          <1>     call handleAlgebraicExpression  ;Parse the inner expression
   182 00000398 803E29              <1>     cmp byte [rsi], ')'   
   183 0000039B 744D                <1>     je .closeBracket     ;If close bracket, goto skip spaces
   184 0000039D EB53                <1>     jmp short .error     ;Otherwise, error
   185                              <1> 
   186                              <1> .notBracket:    
   187 0000039F 3C5E                <1>     cmp al, "^"
   188 000003A1 742E                <1>     je .exponentFound
   189                              <1> .varConstCheck:
   190 000003A3 3C41                <1>     cmp al, "A"       ;Alphabetical first char?
   191 000003A5 730D                <1>     jae .varOrRNDFound      ;Yes, variable found or rnd function or error
   192 000003A7 48FFCE              <1>     dec rsi            ;Else back one symbol 
   193 000003AA E8D7040000          <1>     call decimalToHex  ;to read number into rax
   194 000003AF E9D6FEFFFF          <1>     jmp spaceSkip
   195                              <1> 
   196                              <1> .varOrRNDFound:
   197 000003B4 3C5A                <1>     cmp al, "Z"  
   198 000003B6 773A                <1>     ja .error   ;Syntax error if char not between A-Z  
   199 000003B8 3C52                <1>     cmp al, "R"
   200 000003BA 7517                <1>     jne .varFound
   201 000003BC 803E4E              <1>     cmp byte [rsi], "N" ;rsi was advanced by 1, check 
   202 000003BF 7512                <1>     jne .varFound
   203 000003C1 807E0144            <1>     cmp byte [rsi+1], "D"
   204 000003C5 750C                <1>     jne .varFound
   205 000003C7 66AD                <1>     lodsw               ;Advance rsi by 3
   206 000003C9 AC                  <1>     lodsb
   207 000003CA E440                <1>     in al, 40h         ;Read timer counter 0
   208 000003CC 480FB6C0            <1>     movzx rax, al
   209                              <1> .exit:
   210 000003D0 C3                  <1>     ret                ;Return
   211                              <1> .exponentFound:
   212 000003D1 EBD0                <1>    jmp short .varConstCheck
   213                              <1> .varFound:    
   214 000003D3 48FFCE              <1>     dec rsi ;Back a char
   215 000003D6 51                  <1>     push rcx
   216 000003D7 E8B9FEFFFF          <1>     call getVarNameLength
   217 000003DC E81D000000          <1>     call getNumericVariable ;Get variable value in rax
   218 000003E1 4801CE              <1>     add rsi, rcx    ;Go past the edge of the name
   219 000003E4 59                  <1>     pop rcx
   220 000003E5 E9A0FEFFFF          <1>     jmp spaceSkip
   221                              <1> 
   222                              <1> .closeBracket:
   223 000003EA 48FFC6              <1>     inc rsi
   224 000003ED E998FEFFFF          <1>     jmp spaceSkip
   225                              <1> .error:
   226 000003F2 488D2D21080000      <1>     lea rbp, syntax
   227 000003F9 E9CBFCFFFF          <1>     jmp criticalError
   228                              <1> 
   229                              <1> 
   230                              <1> getNumericVariable:
   231                              <1> ;Gets the value stored in a variable into rax 
   232                              <1> ;Input: rsi = Pointer to first char of a variable name
   233                              <1> ;Output: rax = Variable Value
   234                              <1> ;        rsi = Pointer to first char of a variable name
   235 000003FE 56                  <1>     push rsi
   236 000003FF 51                  <1>     push rcx
   237 00000400 53                  <1>     push rbx
   238 00000401 E88FFEFFFF          <1>     call getVarNameLength   ;Returns the length of the var name in cx
   239 00000406 E85C050000          <1>     call findVariable       ;Returns a pointer to the variable block in rbx
   240 0000040B 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Variable doesnt exist? Pretend it is 0
   241 00000412 740E                <1>     je .noVar
   242 00000414 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
   243 00000418 750C                <1>     jne .stringFoundError
   244 0000041A 488B4304            <1>     mov rax, qword [rbx + varBlock.qValue]
   245                              <1> .exit:
   246 0000041E 5B                  <1>     pop rbx
   247 0000041F 59                  <1>     pop rcx
   248 00000420 5E                  <1>     pop rsi
   249 00000421 C3                  <1>     ret
   250                              <1> .noVar:
   251 00000422 31C0                <1>     xor eax, eax
   252 00000424 EBF8                <1>     jmp short .exit
   253                              <1> .stringFoundError:
   254 00000426 488D2DFC070000      <1>     lea rbp, typeError
   255 0000042D E997FCFFFF          <1>     jmp criticalError
   256                              <1> 
   257                              <1> setNumericVariable:
   258                              <1> ;Sets the value stored in a variable
   259                              <1> ;Input: rsi = Pointer to first char of a variable name
   260                              <1> ;       rax = Variable value
   261                              <1> ;Output: rsi = Pointer to first char of variable name
   262 00000432 56                  <1>     push rsi
   263 00000433 51                  <1>     push rcx
   264 00000434 53                  <1>     push rbx
   265                              <1> 
   266 00000435 E85BFEFFFF          <1>     call getVarNameLength   ;Returns the length of the var name in cx
   267 0000043A E828050000          <1>     call findVariable       ;Returns a pointer to the variable block in rbx
   268 0000043F 4881FBFFFFFFFF      <1>     cmp rbx, -1             ;Variable doesnt exit?
   269 00000446 740E                <1>     je .makeEditInteger      ;Make one!
   270 00000448 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
   271 0000044C 750F                <1>     jne .stringFoundError
   272 0000044E 48894304            <1>     mov qword [rbx + varBlock.qValue], rax  ;Save value
   273                              <1> .exit:
   274 00000452 5B                  <1>     pop rbx
   275 00000453 59                  <1>     pop rcx
   276 00000454 5E                  <1>     pop rsi
   277 00000455 C3                  <1>     ret
   278                              <1> .makeEditInteger:
   279 00000456 E81C060000          <1>     call makeEditInteger
   280 0000045B EBF5                <1>     jmp short .exit
   281                              <1> .stringFoundError:
   282 0000045D 488D2DC5070000      <1>     lea rbp, typeError
   283 00000464 E960FCFFFF          <1>     jmp criticalError
   284                              <1> 
   285                              <1> setStringVariable:
   286                              <1> ;Sets the string pointed to by rdx
   287                              <1> ;Input: rsi = Pointer to first char of a variable name
   288                              <1> ;       rdx = Start of string
   289                              <1> ;Output: rsi = Pointer to first char of variable name
   290                              <1> ;Keeps adding characters until a 0, : or " encountered
   291                              <1> ;Adds a 0 to the end
   292 00000469 51                  <1>     push rcx
   293 0000046A E826FEFFFF          <1>     call getVarNameLength   ;Gets the length of the var name in cx
   294 0000046F E84E060000          <1>     call makeEditString     ;Returns a ptr to the var block in rbx
   295 00000474 59                  <1>     pop rcx
   296 00000475 C3                  <1>     ret
   297                              <1> 
   298                              <1> findOtherExpressionsOnLine:
   299                              <1> ;Input: rsi = start of line portion
   300                              <1> ;Output: rsi = points to first char after first ":" found
   301                              <1> ;         al = : if it was found or 00 if not
   302 00000476 AC                  <1>     lodsb
   303 00000477 3C00                <1>     cmp al, 0   ;Null hit, RIP procedure
   304 00000479 7404                <1>     je .exit
   305 0000047B 3C3A                <1>     cmp al, ":" ;Strings can be terminated with a :
   306 0000047D 75F7                <1>     jne findOtherExpressionsOnLine
   307                              <1> .exit:
   308 0000047F C3                  <1>     ret
    14                                  %include "COMMANDS.ASM"
    15                              <1> 
    16                              <1> funTbl:
    17                              <1> ;Use PASCAL strings to know how long the comparisons need to be
    18                              <1> ;All function pointers are saved as distances from the head
    19                              <1> ; of the function table
    20 00000480 044C4554            <1>     db 4, "LET"     ;DONE
    21 00000484 DB00                <1>     dw oldSchoolAssignemnt - funTbl
    22                              <1> 
    23 00000486 044E4557            <1>     db 4, "NEW"     ;DONE
    24 0000048A 5E01                <1>     dw newProgram - funTbl 
    25                              <1> 
    26 0000048C 06434C454152        <1>     db 6, "CLEAR"   ;DONE
    27 00000492 5E01                <1>     dw newProgram - funTbl 
    28                              <1> 
    29 00000494 054C495354          <1>     db 5, "LIST"    ;DONE
    30 00000499 C001                <1>     dw listProgram - funTbl 
    31                              <1> 
    32 0000049B 0452554E            <1>     db 4, "RUN"     ;DONE
    33 0000049F FC01                <1>     dw runProgram - funTbl
    34                              <1> 
    35 000004A1 075052494E5424      <1>     db 7, "PRINT$"    ;Not implemented yet
    36 000004A8 FC01                <1>     dw printStatement - funTbl
    37                              <1> 
    38 000004AA 065052494E54        <1>     db 6, "PRINT"    ;DONE
    39 000004B0 FC01                <1>     dw printStatement - funTbl
    40                              <1> 
    41 000004B2 023F                <1>     db 2, "?"        ;DONE, alias Print
    42 000004B4 FC01                <1>     dw printStatement - funTbl
    43                              <1> 
    44 000004B6 06494E505554        <1>     db 6, "INPUT"
    45 000004BC 9702                <1>     dw getInput - funTbl
    46                              <1> 
    47 000004BE 034946              <1>     db 3, "IF"      ;DONE, needs to be tested
    48 000004C1 3903                <1>     dw handleIf - funTbl
    49                              <1> 
    50 000004C3 05474F544F          <1>     db 5, "GOTO"    ;DONE
    51 000004C8 7703                <1>     dw goto - funTbl
    52                              <1> 
    53 000004CA 0753595354454D      <1>     db 7, "SYSTEM"  ;DONE
    54 000004D1 AC03                <1>     dw returnToDOS - funTbl
    55                              <1> 
    56 000004D3 04464F52            <1>     db 4, "FOR"
    57 000004D7 A903                <1>     dw forLoop - funTbl
    58                              <1> 
    59 000004D9 04434C53            <1>     db 4, "CLS"     ;DONE
    60 000004DD B803                <1>     dw cls - funTbl
    61                              <1> 
    62 000004DF 064445425547        <1>     db 6, "DEBUG"   ;DONE
    63 000004E5 BD03                <1>     dw dbgr - funTbl
    64                              <1> 
    65 000004E7 0554524F4E          <1>     db 5, "TRON"    ;DONE
    66 000004EC CA00                <1>     dw tron - funTbl
    67                              <1> 
    68 000004EE 0654524F4646        <1>     db 6, "TROFF"   ;DONE
    69 000004F4 D200                <1>     dw troff - funTbl
    70                              <1> 
    71 000004F6 04454E44            <1>     db 4, "END"     ;DONE
    72 000004FA C500                <1>     dw endProg - funTbl
    73                              <1> 
    74 000004FC 0553544F50          <1>     db 5, "STOP"    ;DONE
    75 00000501 C500                <1>     dw endProg - funTbl
    76                              <1> 
    77 00000503 07455343415045      <1>     db 7, "ESCAPE"  ;DONE
    78 0000050A C500                <1>     dw endProg - funTbl
    79                              <1> thenStr:
    80 0000050C 055448454E          <1>     db 5, "THEN"    ;DONE
    81 00000511 B900                <1>     dw badCmd - funTbl
    82                              <1> elseStr:
    83 00000513 05454C5345          <1>     db 5, "ELSE"    ;DONE
    84 00000518 B900                <1>     dw badCmd - funTbl
    85                              <1> 
    86 0000051A 06455045454B        <1>     db 6, "EPEEK"
    87 00000520 DA00                <1>     dw memRead - funTbl
    88                              <1> 
    89 00000522 0645504F4B45        <1>     db 6, "EPOKE"
    90 00000528 DA00                <1>     dw memWrite - funTbl
    91                              <1> 
    92 0000052A 055045454B          <1>     db 5, "PEEK"
    93 0000052F DA00                <1>     dw byteRead - funTbl
    94                              <1> 
    95 00000531 05504F4B45          <1>     db 5, "POKE"
    96 00000536 DA00                <1>     dw byteWrite - funTbl
    97                              <1> 
    98 00000538 FF                  <1>     db -1    ;Demarkate the end of the table
    99                              <1> ;End of Table
   100                              <1> badCmd:
   101 00000539 488D2DDA060000      <1>     lea rbp, syntax
   102 00000540 E884FBFFFF          <1>     call criticalError 
   103                              <1> endProg:
   104 00000545 E9F2FAFFFF          <1>     jmp mainLoop
   105                              <1> tron:
   106 0000054A 800D(09110000)02    <1>     or byte [stateByte], traceBit   ;Set the traceBit
   107 00000551 C3                  <1>     ret
   108                              <1> troff:
   109 00000552 8025(09110000)FD    <1>     and byte [stateByte], ~traceBit ;Clear the traceBit
   110 00000559 C3                  <1>     ret
   111                              <1> memRead:
   112                              <1> memWrite:
   113                              <1> byteRead:
   114                              <1> byteWrite:
   115 0000055A C3                  <1>     ret
   116                              <1> 
   117                              <1> oldSchoolAssignemnt:
   118                              <1> ;Assign with a LET directive
   119                              <1> ;rsi points to first char AFTER function name
   120 0000055B E82AFDFFFF          <1>     call spaceSkip  ;Goto var assignment as if at start of line
   121                              <1> variableAssignment: ;Assignment without a LET directive
   122                              <1>     ;Establish if the string is a variable assignment or not
   123                              <1>     ;rsi points to start of string
   124 00000560 E830FDFFFF          <1>     call getVarNameLength   ;Get the variable name length
   125 00000565 4889F7              <1>     mov rdi, rsi    ;Save ptr to start of string in rdi
   126 00000568 4801CE              <1>     add rsi, rcx    ;Go to end of string
   127 0000056B E81AFDFFFF          <1>     call spaceSkip  ;Skip spaces after the end of the var name
   128 00000570 AC                  <1>     lodsb   ;Get the first char after the spaces. This must be a =
   129 00000571 3C3D                <1>     cmp al, "="
   130 00000573 7551                <1>     jne .syntaxError
   131 00000575 4889FE              <1>     mov rsi, rdi    ;Return rsi to the start of the string name
   132 00000578 4801CE              <1>     add rsi, rcx    ;Go to end of var name
   133 0000057B 48FFCE              <1>     dec rsi
   134 0000057E AC                  <1>     lodsb   ;Get last char into al and inc rsi
   135 0000057F 3C24                <1>     cmp al, "$"
   136 00000581 7420                <1>     je .stringAssignment
   137 00000583 E802FDFFFF          <1>     call spaceSkip  ;Skip any spaces
   138 00000588 48FFC6              <1>     inc rsi         ;Go past the equality sign
   139 0000058B E8FAFCFFFF          <1>     call spaceSkip  ;Skip any spaces
   140 00000590 803E22              <1>     cmp byte [rsi], 22h ;Open speech mark
   141 00000593 743D                <1>     je .typError    ;Integers cant have speechmarks
   142 00000595 E843FDFFFF          <1>     call handleAlgebraicExpression  ;Get the result of the expression into rax
   143 0000059A 4889FE              <1>     mov rsi, rdi    ;Return the start of the string into rsi
   144 0000059D E890FEFFFF          <1>     call setNumericVariable
   145 000005A2 C3                  <1>     ret
   146                              <1> .stringAssignment:
   147                              <1> ;This simply copies the string which is either speech mark, 0 or : terminated
   148                              <1> ;First allocate a string
   149                              <1> ;rsi = First char after the end of the variable name
   150                              <1> ;rdi = start of variable name 
   151                              <1> ;rcx = char count for var name
   152 000005A3 E8E2FCFFFF          <1>     call spaceSkip  ;Skip any spaces
   153 000005A8 48FFC6              <1>     inc rsi         ;Go past the equality sign
   154 000005AB E8DAFCFFFF          <1>     call spaceSkip  ;Skip any spaces
   155 000005B0 803E22              <1>     cmp byte [rsi], 22h ;Open speechmark check again
   156 000005B3 751D                <1>     jne .typError    ;Assigning a number to a string is a type error
   157                              <1>     ;rsi now points to the start of the string to save
   158 000005B5 48FFC6              <1>     inc rsi ;Go past the speech mark
   159 000005B8 4889F2              <1>     mov rdx, rsi    ;save start of string data in rdx
   160 000005BB 4889FE              <1>     mov rsi, rdi
   161 000005BE 57                  <1>     push rdi
   162 000005BF E8A5FEFFFF          <1>     call setStringVariable
   163 000005C4 5E                  <1>     pop rsi ;Save the start of the assignment in rsi
   164 000005C5 C3                  <1>     ret
   165                              <1> 
   166                              <1> .syntaxError:
   167 000005C6 488D2D4D060000      <1>     lea rbp, syntax ;Syntax error, keyword a bit confused
   168 000005CD E9F7FAFFFF          <1>     jmp criticalError
   169                              <1> .typError:
   170 000005D2 488D2D50060000      <1>     lea rbp, typeError
   171 000005D9 E9EBFAFFFF          <1>     jmp criticalError
   172                              <1> 
   173                              <1> 
   174                              <1> newProgram: 
   175                              <1> ;Simply reset the program pointers
   176 000005DE 488D05(00000000)    <1>     lea rax, section.programArea.vstart
   177 000005E5 488905(F8100000)    <1>     mov qword [minMemAddr], rax
   178 000005EC 488905(12110000)    <1>     mov qword [lastBlock], rax  ;Start writing at this location
   179 000005F3 488905(0A110000)    <1>     mov qword [mcbChain], rax   ;Create a mock MCB here
   180                              <1> 
   181 000005FA 4889C2              <1>     mov rdx, rax
   182 000005FD 668B4801            <1>     mov cx, word [rax + memBlock.wBlockSize]
   183 00000601 4889C7              <1>     mov rdi, rax
   184 00000604 30C0                <1>     xor al, al
   185 00000606 F3AA                <1>     rep stosb   ;Sanitise the old first allocation
   186                              <1> 
   187 00000608 C60272              <1>     mov byte [rdx + memBlock.bSignature], lastMemBlock
   188 0000060B 66C742010000        <1>     mov word [rdx + memBlock.wBlockSize], 0 ;Dummy block, no size, gets overwritten
   189 00000611 31C0                <1>     xor eax, eax
   190 00000613 8805(08110000)      <1>     mov byte [strLen], al
   191 00000619 488D3D(C80F0000)    <1>     lea rdi, inString
   192 00000620 B900010000          <1>     mov ecx, maxLineLen
   193 00000625 F3AA                <1>     rep stosb
   194 00000627 C605(24110000)0A    <1>     mov byte [currentLine], 10  ;Default to line 10
   195 0000062E 48FFC8              <1>     dec rax ;rax = -1
   196 00000631 488905(1A110000)    <1>     mov qword [firstLinPtr], rax ;No program in memory
   197 00000638 668905(22110000)    <1>     mov word [firstLinNum], ax
   198 0000063F C3                  <1>     ret
   199                              <1> listProgram:
   200                              <1> ;Go line by line and echo the program lines, inserting a crlf after each
   201                              <1> ;First print the line number, then add a space
   202 00000640 488B1D(1A110000)    <1>     mov rbx, qword [firstLinPtr]    ;Get a pointer to the first program line
   203                              <1> .printLines:
   204 00000647 488D2D81050000      <1>     lea rbp, crlf           ;New line
   205 0000064E E846FBFFFF          <1>     call ttyOutString
   206 00000653 4881FBFFFFFFFF      <1>     cmp rbx, -1
   207 0000065A 741F                <1>     je .exit
   208 0000065C 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]
   209 00000660 E849020000          <1>     call printdecimalword
   210 00000665 B020                <1>     mov al, " "
   211 00000667 E828FBFFFF          <1>     call ttyOutChar ;Print a space
   212 0000066C 488D6B0E            <1>     lea rbp, qword [rbx + progLineBlock.sLine]  ;Null terminated string
   213 00000670 E824FBFFFF          <1>     call ttyOutString
   214 00000675 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr]   ;Walk list of program lines
   215 00000679 EBCC                <1>     jmp short .printLines
   216                              <1> .exit:
   217 0000067B C3                  <1>     ret
   218                              <1> runProgram:
   219                              <1> ;Set the bit if it is clear. 
   220                              <1> ;Return in rbx the block of the first line for the program to run
   221                              <1> 
   222                              <1> 
   223                              <1> printStatement:
   224                              <1> ;Strings must be "" delimited or a string variable must be used
   225                              <1> ;rsi points to first char AFTER function name
   226                              <1> .printStart:
   227 0000067C E809FCFFFF          <1>     call spaceSkip  ;move rsi to the start of the expression
   228 00000681 AC                  <1>     lodsb
   229 00000682 84C0                <1>     test al, al     ;Is this a null string?
   230 00000684 746B                <1>     jz .psvexit
   231                              <1> 
   232 00000686 3C22                <1>     cmp al, 022h    ;22h = ASCII Speechmarks
   233 00000688 7449                <1>     je .stringPrint
   234                              <1>     ;Here we check if the first char is ASCII, if it is, check if its a string var
   235 0000068A 3C41                <1>     cmp al, "A"
   236 0000068C 7204                <1>     jb .printExpr
   237 0000068E 3C5A                <1>     cmp al, "Z"
   238 00000690 7214                <1>     jb .printStringVar
   239                              <1> .printExpr:
   240 00000692 48FFCE              <1>     dec rsi ;Return to the start of the string
   241                              <1> .printExpr1:    ;Return without dec rsi
   242 00000695 E843FCFFFF          <1>     call handleAlgebraicExpression ;Gets value of a var and/or algebraic operation
   243 0000069A E80F020000          <1>     call printdecimalword
   244 0000069F E8E6FBFFFF          <1>     call spaceSkip
   245 000006A4 EB2D                <1>     jmp short .stringPrint
   246                              <1> .printStringVar:
   247                              <1>     ;Check if it is a string var
   248 000006A6 48FFCE              <1>     dec rsi
   249 000006A9 E8E7FBFFFF          <1>     call getVarNameLength
   250 000006AE E80FFCFFFF          <1>     call getVarType
   251 000006B3 81FB01000000        <1>     cmp ebx, strEquate
   252 000006B9 75DA                <1>     jne .printExpr1  ;rsi points to the same point as initially
   253 000006BB E8A7020000          <1>     call findVariable   ;ecx has string length, get block ptr in rbx
   254 000006C0 55                  <1>     push rbp
   255 000006C1 488D6B04            <1>     lea rbp, qword [rbx + stringBlock.string]
   256 000006C5 E8CFFAFFFF          <1>     call ttyOutString
   257 000006CA 5D                  <1>     pop rbp
   258 000006CB 4801CE              <1>     add rsi, rcx    ;Go past variable
   259 000006CE E8B7FBFFFF          <1>     call spaceSkip
   260                              <1> .stringPrint:
   261 000006D3 AC                  <1>     lodsb
   262 000006D4 3C00                <1>     cmp al, 0
   263 000006D6 7419                <1>     je .psvexit
   264 000006D8 3C3A                <1>     cmp al, ":"
   265 000006DA 7412                <1>     je .psvexitColon
   266 000006DC 3C22                <1>     cmp al, 022h    ;Close Speech marks, check next char
   267 000006DE 741E                <1>     je .closespeechmarks
   268 000006E0 3C3B                <1>     cmp al, ";"     ;Semicolon means print next section on same line
   269 000006E2 7429                <1>     je .continue
   270 000006E4 E8ABFAFFFF          <1>     call ttyOutChar
   271 000006E9 EBE8                <1>     jmp short .stringPrint
   272                              <1> .openSpeechMark:
   273 000006EB 48FFC6              <1>     inc rsi ;Go back a char
   274                              <1> .psvexitColon:
   275 000006EE 48FFCE              <1>     dec rsi ;Go back a char
   276                              <1> .psvexit:
   277 000006F1 488D2DD7040000      <1>     lea rbp, crlf
   278 000006F8 E89CFAFFFF          <1>     call ttyOutString
   279 000006FD C3                  <1>     ret
   280                              <1> .closespeechmarks:
   281 000006FE E887FBFFFF          <1>     call spaceSkip
   282 00000703 AC                  <1>     lodsb
   283 00000704 3C3B                <1>     cmp al, ";" ;only exception to exiting if next non space char is a semicolon
   284 00000706 74CB                <1>     je .stringPrint
   285 00000708 48FFCE              <1>     dec rsi ;Go back a step
   286 0000070B EBE4                <1>     jmp short .psvexit
   287                              <1> .continue:
   288 0000070D E878FBFFFF          <1>     call spaceSkip
   289 00000712 E965FFFFFF          <1>     jmp .printStart
   290                              <1> getInput:
   291                              <1> ;Take a string as a prompt
   292                              <1> ;rdi points just past the end of the command line
   293                              <1> ;rsi points to first char AFTER function name
   294                              <1> ;Input prompt strings must be speech mark delimited on both sides!
   295 00000717 E86EFBFFFF          <1>     call spaceSkip
   296                              <1>     ;Now check to see if the user has specified a custom prompt
   297 0000071C AC                  <1>     lodsb   ;Get first symbol and go past it
   298 0000071D 3C22                <1>     cmp al, 22h ;Speechmark?
   299 0000071F 7535                <1>     jne .defaultPrompt ;If no speechmark, print default prompt
   300                              <1> .customPrompt:
   301 00000721 4889F7              <1>     mov rdi, rsi    ;Save start of string in rdi
   302                              <1> .cp0:
   303 00000724 AC                  <1>     lodsb           ;Now search for end of string speech marks or null terminator
   304 00000725 3C22                <1>     cmp al, 22h     ;Is al a speech mark?
   305 00000727 7410                <1>     je .printCustomPrompt
   306 00000729 84C0                <1>     test al, al     ;Is al null?
   307 0000072B 75F7                <1>     jnz .cp0        ;No, keep searching for terminator
   308                              <1> .error:
   309 0000072D 488D2DE6040000      <1>     lea rbp, syntax
   310 00000734 E990F9FFFF          <1>     jmp criticalError
   311                              <1> .printCustomPrompt:
   312 00000739 4889FE              <1>     mov rsi, rdi    ;rsi points to the first char of the string
   313                              <1> .pcp0:
   314 0000073C AC                  <1>     lodsb
   315 0000073D 3C22                <1>     cmp al, 22h     ;Speechmark?
   316 0000073F 7407                <1>     je .stopPrompt
   317 00000741 E84EFAFFFF          <1>     call ttyOutChar
   318 00000746 EBF4                <1>     jmp short .pcp0
   319                              <1> .stopPrompt:
   320 00000748 E83DFBFFFF          <1>     call spaceSkip  ;Skip spaces
   321 0000074D AC                  <1>     lodsb   ;Get first non space char after closing speechmark
   322 0000074E 3C3B                <1>     cmp al, ";" ;Semicolon means no default prompt
   323 00000750 740E                <1>     je .noDefaultPrompt
   324 00000752 3C2C                <1>     cmp al, "," ;Comma also means no default prompt
   325 00000754 740A                <1>     je .noDefaultPrompt
   326                              <1> .defaultPrompt:
   327 00000756 48FFCE              <1>     dec rsi
   328 00000759 B03F                <1>     mov al, "?"
   329 0000075B E834FAFFFF          <1>     call ttyOutChar
   330                              <1> .noDefaultPrompt:
   331 00000760 B020                <1>     mov al, " " ;space
   332 00000762 E82DFAFFFF          <1>     call ttyOutChar
   333 00000767 E81EFBFFFF          <1>     call spaceSkip  ;Skip spaces after default supressor to get to var name
   334 0000076C E824FBFFFF          <1>     call getVarNameLength   ;Get var name length in ecx
   335 00000771 488D3D(C8100000)    <1>     lea rdi, digitString    ;Buffer has 48 chars, string names are max 40
   336 00000778 E8B2030000          <1>     call strcpy     ;rsi points to var name
   337 0000077D 57                  <1>     push rdi    ;rdi points to first char of variable
   338 0000077E 51                  <1>     push rcx
   339 0000077F E878F9FFFF          <1>     call getLineInput   ;Get input from the user in inString, null terminated
   340                              <1>     ;This will sanitise in direct mode meaning input cannot have any more statements
   341                              <1>     ; after it.
   342 00000784 59                  <1>     pop rcx
   343 00000785 5F                  <1>     pop rdi 
   344 00000786 6687DB              <1>     xchg bx, bx
   345 00000789 4889FE              <1>     mov rsi, rdi    ;Save the start of the var name in rsi
   346 0000078C 4801CE              <1>     add rsi, rcx    ;Go to end of var
   347 0000078F 48FFCE              <1>     dec rsi
   348 00000792 AC                  <1>     lodsb   ;Are we a string variable?
   349 00000793 488D35(C80F0000)    <1>     lea rsi, inString   ;Move rsi to start of user input
   350 0000079A 3C24                <1>     cmp al, "$"
   351 0000079C 740F                <1>     je .handleString
   352                              <1> .handleNumeric:
   353 0000079E E83AFBFFFF          <1>     call handleAlgebraicExpression  ;Get the result of the expression into rax
   354 000007A3 4889FE              <1>     mov rsi, rdi    ;Return the start of the string into rsi
   355 000007A6 E887FCFFFF          <1>     call setNumericVariable
   356 000007AB EB0B                <1>     jmp short .commonExit
   357                              <1> .handleString:
   358                              <1>     ;IF a string variable, come here
   359                              <1>     ;rdi has the start of the variable name
   360                              <1> 
   361                              <1>     ;rdx must point to the start of the string
   362                              <1>     ;rsi must point to the start of the variable name
   363 000007AD 4889F2              <1>     mov rdx, rsi
   364 000007B0 4889FE              <1>     mov rsi, rdi    ;Return start of user name in rsi
   365 000007B3 E8B1FCFFFF          <1>     call setStringVariable
   366                              <1> .commonExit:
   367 000007B8 C3                  <1>     ret
   368                              <1> handleIf:
   369                              <1> ;Evaluate the string. The IF,THEN/GOTO,ELSE statement must ALL be on one line
   370                              <1> ;IF exp1 THEN statement ELSE statement
   371                              <1> ;IF exp1 GOTO linenumber ELSE statement
   372                              <1> ;rsi points to first char AFTER function name
   373                              <1> 
   374 000007B9 E8CCFAFFFF          <1>     call spaceSkip
   375 000007BE E81AFBFFFF          <1>     call handleAlgebraicExpression
   376                              <1> ;THIS WORKS ON CONTRALOGIC. If the algebraic expression evaluates to 0,
   377                              <1> ; it is currently taken to be true (as that is a condition I can test for
   378                              <1> ; easily). Once Proper logical operators are introduced, then I will have to
   379                              <1> ; switch it so that test rax, rax -> jz .else
   380 000007C3 4885C0              <1>     test rax, rax  ;If this is NOT 0, go to the else
   381 000007C6 751C                <1>     jnz .else   ;CONTRALOGIC, TO BE SWITCHED IN LATER VERSIONS TO JZ 
   382 000007C8 E8BDFAFFFF          <1>     call spaceSkip
   383                              <1>     ;Now check if it is a THEN or a GOTO
   384                              <1>     ;If it is a THEN, go past the then and let mainProcessing handle it
   385                              <1>     ;If it is a GOTO, dont go past the GOTO and let mainProcessing handle it
   386                              <1>     ;In both cases JUMP to mainProcessing to avoid stack growth
   387                              <1>     ;If no GOTO or THEN, then syntax error
   388 000007CD AD                  <1>     lodsd   ;Get the whole word
   389 000007CE 3D5448454E          <1>     cmp eax, "THEN"
   390 000007D3 740E                <1>     je .hi0   ; Go past THEN, to process statement
   391 000007D5 3D474F544F          <1>     cmp eax, "GOTO"
   392 000007DA 750F                <1>     jne .error
   393 000007DC 4881EE04000000      <1>     sub rsi, 4  ;Go back four spaces to process GOTO
   394                              <1> .hi0:
   395 000007E3 C3                  <1>     ret
   396                              <1> .else:
   397 000007E4 B8454C5345          <1>     mov eax, "ELSE" ;Lucky for us, ELSE fits in eax
   398 000007E9 C3                  <1>     ret
   399                              <1> .noElse0:
   400                              <1> ;If there is no ELSE, simply ret
   401                              <1> .noElse:
   402 000007EA C3                  <1>     ret
   403                              <1> .error:
   404 000007EB 488D1D28040000      <1>     lea rbx, syntax
   405 000007F2 E9D2F8FFFF          <1>     jmp criticalError
   406                              <1> 
   407                              <1> goto:
   408                              <1> ;GOTO, works by replacing the address after the return address on the stack
   409                              <1> ;rdi points just past the end of the command line
   410                              <1> ;rsi points to first char AFTER function name
   411 000007F7 E88EFAFFFF          <1>     call spaceSkip  ;Skip all preceeding spaces
   412 000007FC E8DCFAFFFF          <1>     call handleAlgebraicExpression  ;Turn the expression into a number in ax
   413 00000801 0FB7D0              <1>     movzx edx, ax   ;Line number into dx
   414 00000804 E8CE010000          <1>     call searchForProgramLine   ;Get pointer to line in rbx
   415 00000809 4881FBFFFFFFFF      <1>     cmp rbx, -1
   416 00000810 7406                <1>     je .unknownLineNumber
   417 00000812 48895C2408          <1>     mov qword [rsp + 8], rbx
   418 00000817 C3                  <1>     ret
   419                              <1> .unknownLineNumber:
   420 00000818 488D2D1A040000      <1>     lea rbp, lineNoXist
   421 0000081F E875F9FFFF          <1>     call ttyOutString
   422 00000824 E913F8FFFF          <1>     jmp mainLoop
   423                              <1> 
   424                              <1> forLoop:
   425 00000829 B009                <1>     mov al, 9
   426 0000082B C3                  <1>     ret
   427                              <1> ;==========================================================:
   428                              <1> ;==========================================================:
   429                              <1> ;==========================================================:
   430                              <1> ;          Functions Related to Program Management         :
   431                              <1> ;==========================================================:
   432                              <1> ;==========================================================:
   433                              <1> ;==========================================================:
   434                              <1> returnToDOS:
   435 0000082C B007                <1>     mov al, 07h
   436 0000082E E861F9FFFF          <1>     call ttyOutChar
   437 00000833 E9C8F7FFFF          <1>     jmp start   ;Reset the interpreter
   438                              <1> cls:
   439 00000838 E969F9FFFF          <1>     jmp ttyClear
   440                              <1> dbgr:
   441                              <1>     ;Hook int 40h to main prog EP to allow returning 
   442                              <1> ;First call to get default BIOS segement selector and attribute word
   443 0000083D B340                <1>     mov bl, 40h
   444 0000083F B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   445 00000844 CD35                <1>     int 35h
   446 00000846 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   447 00000848 B940000000          <1>     mov ecx, 40h    ;Interrupt number
   448                              <1> ;dx preserves the attribute word
   449 0000084D 488D1D09000000      <1>     lea rbx, .farReturn  ;Pointer passed in
   450 00000854 B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   451 00000859 CD35                <1>     int 35h
   452 0000085B CD38                <1>     int 38h ;Call debugger
   453                              <1> .farReturn:
   454                              <1>     ;Reconnect CTRL+BREAK handler
   455 0000085D 48BC-               <1>     mov rsp, stacktop   ;Immediately reset stack
   455 0000085F [C00F000000000000]  <1>
   456 00000867 488D3D65F8FFFF      <1>     lea rdi, ctrlBreakHandler
   457 0000086E B03B                <1>     mov al, 3Bh
   458 00000870 E867F8FFFF          <1>     call setHandler
   459                              <1>     
   460 00000875 488D2D53030000      <1>     lea rbp, crlf
   461 0000087C E818F9FFFF          <1>     call ttyOutString
   462 00000881 E9B6F7FFFF          <1>     jmp mainLoop
    15                                  %include "MATH.ASM"
    16                              <1> decimalToHex:
    17                              <1>     ;Takes ASCII encoded decimal number and 
    18                              <1>     ;returns its hex value
    19                              <1>     ;Input: rsi = Start of numeric ONLY string
    20                              <1>     ;Output: rax = Number
    21                              <1>     ;        rsi = First non-numeric char past end of number
    22 00000886 53                  <1>     push rbx
    23 00000887 51                  <1>     push rcx
    24 00000888 52                  <1>     push rdx
    25 00000889 31DB                <1>     xor ebx, ebx    ;Start with rbx = 0
    26                              <1> .processDigits:    
    27 0000088B AC                  <1>     lodsb           ;Get the first digit in al
    28 0000088C 2C30                <1>     sub al, 30h     ;Reduce to value
    29 0000088E 31D2                <1>     xor edx, edx    ;Clear for multiplication
    30 00000890 3C0A                <1>     cmp al, 10      ;Digit valid? Propagte CF
    31 00000892 480FB6C0            <1>     movzx rax, al   ;Clear upper bits
    32 00000896 4893                <1>     xchg rax, rbx
    33 00000898 730D                <1>     jnc .exit       ;Digit was not valid, exit
    34 0000089A B90A000000          <1>     mov ecx, 10     ;Multiply result by 10
    35 0000089F 48F7E1              <1>     mul rcx
    36 000008A2 4801C3              <1>     add rbx, rax    ;Add the new digits
    37 000008A5 EBE4                <1>     jmp short .processDigits
    38                              <1> .exit:
    39 000008A7 48FFCE              <1>     dec rsi         ;rsi points to first non-digit
    40 000008AA 5A                  <1>     pop rdx
    41 000008AB 59                  <1>     pop rcx
    42 000008AC 5B                  <1>     pop rbx
    43 000008AD C3                  <1>     ret
    44                              <1> 
    45                              <1> printdecimalword:
    46                              <1> ;Takes the qword in rax and prints its decimal representation
    47 000008AE 50                  <1>     push rax
    48 000008AF 53                  <1>     push rbx
    49 000008B0 488D3D(C8100000)    <1>     lea rdi, digitString   ;Use the default line as a buffer
    50                              <1>     ;Sanitise the digit buffer
    51 000008B7 57                  <1>     push rdi
    52 000008B8 51                  <1>     push rcx
    53 000008B9 50                  <1>     push rax
    54 000008BA 31C0                <1>     xor eax, eax
    55 000008BC B906000000          <1>     mov ecx, digitStringLen/8
    56 000008C1 F348AB              <1>     rep stosq
    57 000008C4 58                  <1>     pop rax
    58 000008C5 59                  <1>     pop rcx
    59 000008C6 5F                  <1>     pop rdi
    60                              <1> 
    61 000008C7 4881C72F000000      <1>     add rdi, digitStringLen - 1 ;Go to the end of the buffer
    62 000008CE FD                  <1>     std ;Reverse string ops
    63 000008CF 50                  <1>     push rax
    64 000008D0 30C0                <1>     xor al, al  ;Place delimiter
    65 000008D2 AA                  <1>     stosb
    66 000008D3 58                  <1>     pop rax
    67 000008D4 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
    67 000008DD 00                  <1>
    68                              <1> .pdw0:
    69 000008DE 31D2                <1>     xor edx, edx
    70 000008E0 48F7F3              <1>     div rbx
    71 000008E3 80C230              <1>     add dl, '0'
    72 000008E6 80FA39              <1>     cmp dl, '9'
    73 000008E9 7603                <1>     jbe .pdw1
    74 000008EB 80C207              <1>     add dl, 'A'-'0'-10
    75                              <1> .pdw1:
    76 000008EE 50                  <1>     push rax
    77 000008EF 88D0                <1>     mov al, dl    ;Save remainder byte
    78 000008F1 AA                  <1>     stosb   ;Store the byte and add one to rdi
    79 000008F2 58                  <1>     pop rax
    80 000008F3 4885C0              <1>     test rax, rax
    81 000008F6 75E6                <1>     jnz .pdw0
    82 000008F8 FC                  <1>     cld ;Return string ops to normal
    83 000008F9 48FFC7              <1>     inc rdi ;Skip the extra 0 that was inserted
    84 000008FC 4889FD              <1>     mov rbp, rdi    ;Point rbp to the head of the string
    85 000008FF E895F8FFFF          <1>     call ttyOutString
    86 00000904 5B                  <1>     pop rbx
    87 00000905 58                  <1>     pop rax
    88 00000906 C3                  <1>     ret
    16                                  %include "MEMORY.ASM"
    17                              <1> allocateBlock:
    18                              <1> ;Allocates a program memory block, the caller then fixes the specifics
    19                              <1> ;Output: rbx = Pointer to generic memory block, or -1 if memory full
    20                              <1> ;       Caller needs to fill in, block size, block type and specifics
    21 00000907 52                  <1>     push rdx
    22                              <1> .ab0:
    23 00000908 488B1D(12110000)    <1>     mov rbx, qword [lastBlock]    ;Get the last block in the chain
    24 0000090F 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;First allocation?
    25 00000916 742F                <1>     je .firstAllocation
    26 00000918 C60374              <1>     mov byte [rbx + memBlock.bSignature], notLastMemBlock ;Make it not be the last
    27 0000091B 480FB75301          <1>     movzx rdx, word [rbx + memBlock.wBlockSize] ;Goto end of block
    28 00000920 4801D3              <1>     add rbx, rdx    ;Move rbx over the previous last block
    29 00000923 488B15(00110000)    <1>     mov rdx, qword [maxMemAddr]
    30 0000092A 4839D3              <1>     cmp rbx, rdx ;rbx above maxmemory? 
    31 0000092D 770C                <1>     ja .memoryFull
    32 0000092F 48891D(12110000)    <1>     mov qword [lastBlock], rbx  ;New last block
    33 00000936 C60372              <1>     mov byte [rbx + memBlock.bSignature], lastMemBlock
    34                              <1> .exit:
    35 00000939 5A                  <1>     pop rdx
    36 0000093A C3                  <1>     ret
    37                              <1> .memoryFull:
    38 0000093B 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    38 00000944 FF                  <1>
    39 00000945 EBF2                <1>     jmp short .exit
    40                              <1> .firstAllocation:
    41                              <1> ;Deal with first allocation
    42 00000947 488D1D(00000000)    <1>     lea rbx, section.programArea.vstart   ;Get this as the head of the chain
    43 0000094E 48891D(12110000)    <1>     mov qword [lastBlock], rbx
    44 00000955 48891D(0A110000)    <1>     mov qword [mcbChain], rbx
    45 0000095C C60372              <1>     mov byte [rbx + memBlock.bSignature], lastMemBlock
    46 0000095F 66C743010000        <1>     mov word [rbx + memBlock.wBlockSize], 0 ;Dummy block
    47 00000965 EBD2                <1>     jmp short .exit
    48                              <1> 
    49                              <1> findVariable:
    50                              <1> ;Input: rsi = Source string for variable name
    51                              <1> ;       ecx = Length of variable name (max 40)
    52                              <1> ;Output: rbx = ptr to varBlock/strBlock OR -1 if doesnt exist
    53 00000967 50                  <1>     push rax
    54 00000968 51                  <1>     push rcx
    55 00000969 52                  <1>     push rdx
    56 0000096A 56                  <1>     push rsi
    57 0000096B 57                  <1>     push rdi
    58 0000096C 488B1D(0A110000)    <1>     mov rbx, qword [mcbChain]   ;Start of the chain
    59 00000973 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Chain empty?
    60 0000097A 7446                <1>     je .exit
    61                              <1> .search:
    62 0000097C 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
    63 00000980 7415                <1>     je .varFound    ;We found a numerical variable
    64 00000982 807B0302            <1>     cmp byte [rbx + memBlock.bBlockType], datBlockType
    65 00000986 741E                <1>     je .datFound    ;We found a string variable
    66                              <1> .invalid:
    67                              <1>     ;Are we at the end of the chain?
    68 00000988 803B72              <1>     cmp byte [rbx + memBlock.bSignature], lastMemBlock
    69 0000098B 742B                <1>     je .varNotFound ;At the end of the chain and var not found? Error!
    70 0000098D 480FB75301          <1>     movzx rdx, word [rbx + memBlock.wBlockSize]
    71 00000992 4801D3              <1>     add rbx, rdx    ;Goto next block
    72 00000995 EBE5                <1>     jmp short .search
    73                              <1> .varFound:
    74                              <1>     ;Compare to see the var is our var
    75 00000997 488D7B0C            <1>     lea rdi, qword [rbx + varBlock.sVarName] ;point rdi to the name string
    76 0000099B 51                  <1>     push rcx
    77 0000099C 56                  <1>     push rsi
    78 0000099D F3A6                <1>     repe cmpsb  ;Compare one byte at a time
    79 0000099F 5E                  <1>     pop rsi
    80 000009A0 59                  <1>     pop rcx
    81 000009A1 75E5                <1>     jne .invalid
    82 000009A3 F8                  <1>     clc
    83 000009A4 EB1C                <1>     jmp short .exit
    84                              <1> .datFound:
    85 000009A6 488DBB04010000      <1>     lea rdi, qword [rbx + stringBlock.sVarName] ;point rdi to the name string
    86 000009AD 51                  <1>     push rcx
    87 000009AE 56                  <1>     push rsi
    88 000009AF F3A6                <1>     repe cmpsb  ;Compare one byte at a time
    89 000009B1 5E                  <1>     pop rsi
    90 000009B2 59                  <1>     pop rcx
    91 000009B3 75D3                <1>     jne .invalid
    92 000009B5 F8                  <1>     clc
    93 000009B6 EB0A                <1>     jmp short .exit
    94                              <1> .varNotFound:
    95 000009B8 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    95 000009C1 FF                  <1>
    96                              <1> .exit:
    97 000009C2 5F                  <1>     pop rdi
    98 000009C3 5E                  <1>     pop rsi
    99 000009C4 5A                  <1>     pop rdx
   100 000009C5 59                  <1>     pop rcx
   101 000009C6 58                  <1>     pop rax
   102 000009C7 C3                  <1>     ret
   103                              <1> 
   104                              <1> findFirstLine:
   105                              <1> ;Output: rbx = Pointer to the first program block
   106                              <1> ;         dx = Number of the first line
   107 000009C8 488B1D(1A110000)    <1>     mov rbx, qword [firstLinPtr]
   108 000009CF 668B15(22110000)    <1>     mov dx, word [firstLinNum]
   109 000009D6 C3                  <1>     ret
   110                              <1> 
   111                              <1> ;FIRST SEARCH FOR A LINE NUMBER BEFORE INSERTING IT INTO THE CHAIN
   112                              <1> ;IF THE LINE NUMBER IS FOUND, REPLACE THE COMMAND STRING
   113                              <1> 
   114                              <1> searchForProgramLine:
   115                              <1> ;Walk the program chain looking to see if a line number exists. If it does,
   116                              <1> ; return a pointer to the block in rbx. If it doesn't, return -1 in rbx
   117                              <1> ;Input: dx = Line number
   118                              <1> ;Output: rbx = Pointer to program block 
   119 000009D7 488B1D(1A110000)    <1>     mov rbx, qword [firstLinPtr]
   120 000009DE 4881FBFFFFFFFF      <1>     cmp rbx, -1
   121 000009E5 7413                <1>     je .lineFound
   122                              <1> .search:
   123 000009E7 66395304            <1>     cmp word [rbx + progLineBlock.wLineNum], dx ;Equal line numbers?
   124 000009EB 740D                <1>     je .lineFound
   125 000009ED 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr]   ;Walk chain
   126 000009F1 4881FBFFFFFFFF      <1>     cmp rbx, -1
   127 000009F8 75ED                <1>     jne .search ;Not -1? Keep searching
   128                              <1> .lineFound:
   129 000009FA C3                  <1>     ret
   130                              <1> 
   131                              <1> insertProgramLine:
   132                              <1> ;Walk the program chain looking for the biggest number less than our
   133                              <1> ; line number. Once we have reached the end of the chain, insert the block there, or
   134                              <1> ; if there is no block, then we are the last in the chain
   135                              <1> ;Input: rsi = New Program Block to be added
   136 000009FB 50                  <1>     push rax
   137 000009FC 53                  <1>     push rbx
   138 000009FD 51                  <1>     push rcx
   139 000009FE 52                  <1>     push rdx
   140 000009FF 57                  <1>     push rdi
   141 00000A00 E8C3FFFFFF          <1>     call findFirstLine  ;Get start of program in rbx and line number in dx
   142                              <1> ;First check if we should be the first line
   143                              <1> 
   144 00000A05 668B4E04            <1>     mov cx, word [rsi + progLineBlock.wLineNum] ;Save line number in cx
   145 00000A09 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Empty program marker
   146 00000A10 744D                <1>     je .first
   147 00000A12 6639D1              <1>     cmp cx, dx  ;If cx is below dx, then our entry is first
   148 00000A15 7248                <1>     jb .first    
   149                              <1> ;Use ax as the best line number and rdi as the pointer to that block
   150 00000A17 66B8FFFF            <1>     mov ax, -1  ;Marker to indicate no insertion
   151                              <1> .walk:
   152 00000A1B 48817B06FFFFFFFF    <1>     cmp qword [rbx + progLineBlock.qPtr], -1    ;We are at the end
   153 00000A23 7419                <1>     je .sort
   154 00000A25 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Walk chain in rbx
   155 00000A29 663B4B04            <1>     cmp cx, word [rbx + progLineBlock.wLineNum]
   156 00000A2D 77EC                <1>     ja .walk    ;If line number is above my line number, keep walking
   157                              <1> .candidate:
   158                              <1>     ;If the new line number is below the old line number, reject
   159 00000A2F 663B4304            <1>     cmp ax, word [rbx + progLineBlock.wLineNum]
   160 00000A33 72E6                <1>     jb .walk
   161 00000A35 4889DF              <1>     mov rdi, rbx
   162 00000A38 668B4304            <1>     mov ax, word [rbx + progLineBlock.wLineNum]
   163 00000A3C EBDD                <1>     jmp short .walk
   164                              <1> .sort:
   165 00000A3E 66FFC0              <1>     inc ax  ;If no candidates, exit
   166 00000A41 740E                <1>     jz .skipLink
   167                              <1>     ;rdi points to the previous line to link to
   168 00000A43 488B5706            <1>     mov rdx, qword [rdi + progLineBlock.qPtr]
   169 00000A47 48897706            <1>     mov qword [rdi + progLineBlock.qPtr], rsi   ;Insert self here
   170 00000A4B 48895606            <1>     mov qword [rsi + progLineBlock.qPtr], rdx   ;Link new block to next line
   171 00000A4F EB20                <1>     jmp short .exit
   172                              <1> .skipLink:
   173 00000A51 48897306            <1>     mov qword [rbx + progLineBlock.qPtr], rsi   ;Link rsi to last element in list
   174 00000A55 48C74606FFFFFFFF    <1>     mov qword [rsi + progLineBlock.qPtr], -1    ;End of chain marker
   175 00000A5D EB12                <1>     jmp short .exit
   176                              <1> .first:
   177 00000A5F 488935(1A110000)    <1>     mov qword [firstLinPtr], rsi
   178 00000A66 66890D(22110000)    <1>     mov word [firstLinNum], cx
   179 00000A6D 48895E06            <1>     mov qword [rsi + progLineBlock.qPtr], rbx   ;Put the old first line as second line
   180                              <1> .exit:
   181 00000A71 5F                  <1>     pop rdi
   182 00000A72 5A                  <1>     pop rdx
   183 00000A73 59                  <1>     pop rcx
   184 00000A74 5B                  <1>     pop rbx
   185 00000A75 58                  <1>     pop rax
   186 00000A76 C3                  <1>     ret
   187                              <1> 
   188                              <1> makeEditInteger:
   189                              <1> ;Will make a variable if it is new name, or edit the value if it already exists
   190                              <1> ;Input: rsi = Var name
   191                              <1> ;       (e)cx = Length of varname, max 40 chars
   192                              <1> ;       rax = Value
   193 00000A77 E8EBFEFFFF          <1>     call findVariable   ;rbx returned with var block or -1
   194 00000A7C 4881FBFFFFFFFF      <1>     cmp rbx, -1
   195 00000A83 7405                <1>     je .newVar
   196 00000A85 48894304            <1>     mov qword [rbx + varBlock.qValue], rax
   197 00000A89 C3                  <1>     ret
   198                              <1> .newVar:
   199 00000A8A E878FEFFFF          <1>     call allocateBlock
   200 00000A8F 4881FBFFFFFFFF      <1>     cmp rbx, -1
   201 00000A96 741E                <1>     je .error
   202 00000A98 48894304            <1>     mov qword [rbx + varBlock.qValue], rax  ;Save value
   203 00000A9C 66894B01            <1>     mov word [rbx + varBlock.wBlockSize], cx    ;Save length of name
   204 00000AA0 668143010C00        <1>     add word [rbx + varBlock.wBlockSize], varBlock_size ;Add full block size
   205 00000AA6 C6430301            <1>     mov byte [rbx + varBlock.bBlockType], varBlockType  ;Block type
   206 00000AAA 57                  <1>     push rdi
   207 00000AAB 488D7B0C            <1>     lea rdi, qword [rbx + varBlock.sVarName]
   208 00000AAF E87B000000          <1>     call strcpy ;Copy the string name into block buffer
   209 00000AB4 5F                  <1>     pop rdi
   210 00000AB5 C3                  <1>     ret
   211                              <1> .error:
   212 00000AB6 488D2D4D010000      <1>     lea rbp, noMem
   213 00000ABD E907F6FFFF          <1>     jmp criticalError
   214                              <1> makeEditString:
   215                              <1> ;Will make a string if it is new name, or replace the string. Strings are null termin
   216                              <1> ;Input: rsi = Var name
   217                              <1> ;       ecx = Length of varname, max 40 chars
   218                              <1> ;       rdx = Ptr to string itself
   219 00000AC2 57                  <1>     push rdi
   220 00000AC3 56                  <1>     push rsi
   221 00000AC4 50                  <1>     push rax
   222 00000AC5 53                  <1>     push rbx
   223 00000AC6 E89CFEFFFF          <1>     call findVariable   ;rbx returned with string block or -1
   224 00000ACB 4881FBFFFFFFFF      <1>     cmp rbx, -1
   225 00000AD2 7528                <1>     jne .strcopy
   226 00000AD4 E82EFEFFFF          <1>     call allocateBlock
   227 00000AD9 4881FBFFFFFFFF      <1>     cmp rbx, -1
   228 00000AE0 742E                <1>     je .error
   229 00000AE2 66894B01            <1>     mov word [rbx + stringBlock.wBlockSize], cx    ;Save length of name
   230 00000AE6 668143010401        <1>     add word [rbx + stringBlock.wBlockSize], stringBlock_size ;Add full block size
   231 00000AEC C6430302            <1>     mov byte [rbx + stringBlock.bBlockType], datBlockType  ;Block type
   232 00000AF0 488DBB04010000      <1>     lea rdi, qword [rbx + stringBlock.sVarName]
   233 00000AF7 E833000000          <1>     call strcpy ;Copy the string name into block buffer
   234                              <1> .strcopy:
   235 00000AFC 488D7B04            <1>     lea rdi, qword [rbx + stringBlock.string]   ;point to string space
   236 00000B00 4889D6              <1>     mov rsi, rdx    ;Point rsi to the string itself
   237 00000B03 E814000000          <1>     call terminatedstrcpy
   238 00000B08 30C0                <1>     xor al, al
   239 00000B0A AA                  <1>     stosb   ;Store the null delimiter
   240 00000B0B 5B                  <1>     pop rbx
   241 00000B0C 58                  <1>     pop rax
   242 00000B0D 5E                  <1>     pop rsi
   243 00000B0E 5F                  <1>     pop rdi
   244 00000B0F C3                  <1>     ret
   245                              <1> .error:
   246 00000B10 488D2DF3000000      <1>     lea rbp, noMem
   247 00000B17 E9ADF5FFFF          <1>     jmp criticalError
   248                              <1> ;------------------------------------------------:
   249                              <1> ;  The below are misc memory related functions   :
   250                              <1> ;------------------------------------------------:
   251                              <1> terminatedstrcpy:
   252                              <1> ;rdi = Destination String
   253                              <1> ;rsi = Source String
   254                              <1> ;Copy a terminated string
   255 00000B1C 50                  <1>     push rax
   256                              <1> .copy:
   257 00000B1D AC                  <1>     lodsb   ;Get char in al and inc rsi
   258 00000B1E 3C00                <1>     cmp al, 0
   259 00000B20 740B                <1>     je .exit
   260 00000B22 3C3A                <1>     cmp al, ":"
   261 00000B24 7407                <1>     je .exit
   262 00000B26 3C22                <1>     cmp al, 22h ;Speechmark
   263 00000B28 7403                <1>     je .exit
   264 00000B2A AA                  <1>     stosb   ;Save char from al and inc rdi
   265 00000B2B EBF0                <1>     jmp short .copy 
   266                              <1> .exit:
   267 00000B2D 58                  <1>     pop rax
   268 00000B2E C3                  <1>     ret
   269                              <1> strcpy:
   270                              <1> ;rdi = Destination string
   271                              <1> ;rsi = Source string
   272                              <1> ;rcx = Number of Chars to copy
   273 00000B2F 57                  <1>     push rdi
   274 00000B30 56                  <1>     push rsi
   275 00000B31 51                  <1>     push rcx
   276 00000B32 F3A4                <1>     rep movsb
   277 00000B34 59                  <1>     pop rcx
   278 00000B35 5E                  <1>     pop rsi
   279 00000B36 5F                  <1>     pop rdi
   280 00000B37 C3                  <1>     ret
   281                              <1> strlen:
   282                              <1> ;Input: rsi = String start
   283                              <1> ;Output: rsi = String start
   284                              <1> ;        ecx = String length, inclusive of NULL char
   285 00000B38 50                  <1>     push rax
   286 00000B39 56                  <1>     push rsi
   287 00000B3A 31C9                <1>     xor ecx, ecx    ;Clear counter
   288                              <1> .search:
   289 00000B3C AC                  <1>     lodsb
   290 00000B3D FFC1                <1>     inc ecx
   291 00000B3F 84C0                <1>     test al, al ;Is this a null char?
   292 00000B41 75F9                <1>     jnz .search ;Null not found
   293                              <1> .exit:
   294 00000B43 5E                  <1>     pop rsi
   295 00000B44 58                  <1>     pop rax
   296 00000B45 C3                  <1>     ret
   297                              <1> 
   298                              <1> memoryDetection:
   299 00000B46 B820E80000          <1>     mov eax, 0E820h
   300 00000B4B CD35                <1>     int 35h     ;rax = ptr to start, rsi = ptr to data table, each entry 24 bytes
   301 00000B4D EB07                <1>     jmp short .fsa1
   302                              <1> .findStartAddr:
   303 00000B4F 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   304                              <1> .fsa1:
   305 00000B56 6685C9              <1>     test cx, cx
   306 00000B59 742C                <1>     jz .worstCase
   307 00000B5B 66FFC9              <1>     dec cx
   308 00000B5E 488B1E              <1>     mov rbx, qword [rsi]    ;Get the address entry into rbx
   309 00000B61 4839C3              <1>     cmp rbx, rax    
   310 00000B64 75E9                <1>     jne .findStartAddr
   311 00000B66 488B4608            <1>     mov rax, qword [rsi + 8] ;Get the number of bytes saved into rax
   312                              <1> 
   313 00000B6A 488D15(00000000)    <1>     lea rdx, section.programArea.vstart
   314 00000B71 4829DA              <1>     sub rdx, rbx    ;Get the size of the interpreter and internal data area
   315 00000B74 4829D0              <1>     sub rax, rdx    ;Remove the number of bytes reserved to the interpreter
   316 00000B77 E832FDFFFF          <1>     call printdecimalword
   317 00000B7C 4801C3              <1>     add rbx, rax    ;Add number of bytes to start address
   318 00000B7F 48891D(00110000)    <1>     mov qword [maxMemAddr], rbx ;Save this address
   319                              <1> .exit:
   320 00000B86 C3                  <1>     ret
   321                              <1> .worstCase:
   322                              <1> ;Assume 2Mb MAX memory, rax has base address
   323 00000B87 48BB00002000000000- <1>     mov rbx, 200000h    ;2Mb value
   323 00000B90 00                  <1>
   324 00000B91 4829C3              <1>     sub rbx, rax
   325 00000B94 4889D8              <1>     mov rax, rbx    ;Get value in rax
   326 00000B97 E812FDFFFF          <1>     call printdecimalword
   327 00000B9C 48C705(00110000)00- <1>     mov qword [maxMemAddr], 200000h
   327 00000BA4 002000              <1>
   328 00000BA7 C3                  <1>     ret
   329                              <1> 
    17                                  %include "BASICDAT.ASM"
    18 00000BA8 4F6B0A0D00          <1> prompt  db "Ok",0Ah,0Dh,0
    19 00000BAD 5343522036342D4241- <1> mainmsg db "SCR 64-BASIC v0.1",0Ah,0Dh,0
    19 00000BB6 5349432076302E310A- <1>
    19 00000BBF 0D00                <1>
    20 00000BC1 204279746573206672- <1> bytemsg db " Bytes free",0Ah,0Dh,0
    20 00000BCA 65650A0D00          <1>
    21 00000BCF 0A0D00              <1> crlf    db 0Ah,0Dh,0
    22 00000BD2 4572726F720A0D00    <1> errmsg  db "Error",0Ah,0Dh,0
    23 00000BDA 303132333435363738- <1> numbers db "0123456789"
    23 00000BE3 39                  <1>
    24                              <1> ;startVarChars db "ABCDEFGHIJKLMNOPQRSTUVWXYZ" ;Valid starting chars for a var name
    25                              <1> ;numStartVarChars equ $ - startVarChars
    26 00000BE4 414243444546474849- <1> varChrs db "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789%$" ;Valid inner chars for var name
    26 00000BED 4A4B4C4D4E4F505152- <1>
    26 00000BF6 535455565758595A30- <1>
    26 00000BFF 313233343536373839- <1>
    26 00000C08 2524                <1>
    27                              <1> numVarChars equ $ - varChrs
    28                              <1> ;% => Integer variable (8 bytes)
    29                              <1> ;! => Single-Precision, Unused and ignored
    30                              <1> ;# => Double-Precision, Unused and ignored
    31                              <1> ;$ => String variable
    32                              <1> 
    33                              <1> ;Error Messages
    34 00000C0A 4F7574206F66206D65- <1> noMem   db "Out of memory",0Ah,0Dh,0
    34 00000C13 6D6F72790A0D00      <1>
    35 00000C1A 53796E746178206572- <1> syntax  db "Syntax error",0Ah,0Dh,0
    35 00000C23 726F720A0D00        <1>
    36 00000C29 54797065206D69736D- <1> typeError   db "Type mismatch",0Ah,0Dh,0
    36 00000C32 617463680A0D00      <1>
    37 00000C39 556E646566696E6564- <1> lineNoXist  db "Undefined line number",0Ah,0Dh,0
    37 00000C42 206C696E65206E756D- <1>
    37 00000C4B 6265720A0D00        <1>
    38 00000C51 427265616B20696E20- <1> breakmsg db "Break in ",0
    38 00000C5A 00                  <1>
    18                                  Segment programArea follows=resSeg align=1 vfollows=resSeg valign=1
    19                                  ENDOFPROGRAM:

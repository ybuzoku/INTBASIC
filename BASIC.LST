     1                                      [map all BASIC.MAP]
     2                                      [DEFAULT REL]
     3                                      BITS 64
     4                                  %include "MEM.INC"
     5                              <1> 
     6                              <1> progLineBlockType   equ 0   ;Program Line
     7                              <1> varBlockType        equ 1   ;Variable block
     8                              <1> datBlockType        equ 2   ;Data block (i.e. a string block)
     9                              <1> 
    10                              <1> notLastMemBlock equ "t" ;Used for blocks that are not the last block
    11                              <1> lastMemBlock    equ "r" ;Used by the last block to indicate end of chain
    12                              <1> 
    13                              <1> %macro memBlockM 0 ;Memory block Macro
    14                              <1>     .bSignature resb 1      ;Valid Signature
    15                              <1>     .wBlockSize resw 1      ;Total block size in bytes
    16                              <1>     .bBlockType resb 1      ;Block type, program line, variable or string
    17                              <1> %endmacro
    18                              <1> 
    19                              <1> struc memBlock
    20                              <1>     memBlockM
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    21                              <1> endstruc
    22                              <1> 
    23                              <1> struc progLineBlock
    24                              <1>     memBlockM               ;Common memory block header
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    25 00000004 ????                <1>     .wLineNum   resw 1      ;Line number, up to 65535
    26 00000006 ????????????????    <1>     .qPtr       resq 1      ;Pointer to the next line, or -1 if last line
    27 0000000E <res 100h>          <1>     .sLine      resb maxLineLen  ;Maximum length 255, keep null char but 
    28                              <1>     ;                             NOT LINE NUMBER OR PRECEEDING SPACES
    29                              <1> endstruc
    30                              <1> 
    31                              <1> struc varBlock
    32                              <1>     memBlockM               ;Common memory block header
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    33 00000004 ????????????????    <1>     .qValue     resq 1      ;One value qword
    34                              <1>     .sVarName:              ;Up to 40 chars for the var name
    35                              <1> endstruc
    36                              <1> 
    37                              <1> struc stringBlock
    38                              <1>     memBlockM
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    39 00000004 <res 100h>          <1>     .string     resb maxLineLen    ;Strings allocate 256 chars
    40                              <1>     .sVarName:              ;Up to 40 chars for the var name
    41                              <1> endstruc
    42                              <1> 
    43                              <1> ;Variable equates
    44                              <1> intEquate   equ 0
    45                              <1> strEquate   equ 1
    46                              <1> 
    47                              <1> ;State byte equates
    48                              <1> breakBit    equ 1    ;Set means on
    49                              <1> traceBit    equ 2    ;Set means TRON, Clear means TROFF
    50                              <1> indirectBit equ 4    ;Set means indirect/program mode, Clear means direct/line mode
    51                              <1> ctrlFlow    equ 8    ;Set means do not find other expression on current line
    52                              <1> 
    53                              <1> ;Control Instruction Signatures
    54                              <1> WHILEsig    equ 055h
    55                              <1> FORsig      equ 05Ah
    56                              <1> GOSUBsig    equ 0A5h
    57                              <1> ;Control stack data structures
    58                              <1> 
    59                              <1> struc forStruct
    60 00000000 ????????????????    <1>     .specQword  resq 1  ;Special qword (see function description)
    61 00000008 ????????????????    <1>     .cntrPtr    resq 1  ;Pointer to counter variable
    62 00000010 ????????????????    <1>     .limitValue resq 1  ;At what value, or after, do we stop the loop 
    63 00000018 ????????????????    <1>     .stepValue  resq 1  ;By how much do we increase on each iteration
    64                              <1> ;Special qword:
    65                              <1> ; Byte 7 = Offset into the line for next instruction after FOR
    66                              <1> ; Bytes[6:5] = Line number of portion after FOR (either FOR line or line after FOR)
    67                              <1> ; Byte 4 = Offset into the line for next instruction after NEXT
    68                              <1> ; Bytes[3:2] = Line number of portion after NEXT (either NEXT line or line after NEXT)
    69                              <1> ; Byte 1 = Parity check sum for the qword, makes the sum of the bytes in qword 0
    70                              <1> ; Byte 0 = FOR signature
    71                              <1> endstruc
    72                              <1> 
    73                              <1> struc whileStruct
    74 00000000 ????????????????    <1>     .specQword  resq 1  ;Special qword
    75                              <1> ;Special qword:
    76                              <1> ; Byte 7 = Offset into the line for the condition to evaluate
    77                              <1> ; Bytes[6:5] = Line number of WHILE 
    78                              <1> ; Byte 4 = Offset in line for either first : after WEND or ASCII NULL (end of line)
    79                              <1> ; Bytes[3:2] = Line number of WEND
    80                              <1> ; Byte 1 = Parity check sum for the qword, makes the sum of the bytes in qword 0
    81                              <1> ; Byte 0 = WHILE signature
    82                              <1> endstruc
    83                              <1> 
    84                              <1> struc gosubStruct
    85 00000000 ????????????????    <1>     .specQword  resq 1  ;Special qword
    86                              <1> ;Special qword:
    87                              <1> ; Byte 7 =  Offset in line for either first : after GOSUB or ASCII NULL (end of line)
    88                              <1> ; Bytes[6:5] = Line number of GOSUB 
    89                              <1> ; Bytes[4:2] = 055AA55h space filler signature
    90                              <1> ; Byte 1 = Parity check sum for the qword, makes the sum of the bytes in qword 0
    91                              <1> ; Byte 0 = GOSUB signature
    92                              <1> endstruc
    93                              <1> 
    94                              <1> ;Stack based macros
    95                              <1> %macro makeSpaceOnStack 1
    96                              <1>     ;The argument is to specify how much space to make on the stack
    97                              <1>     ;It will check to ensure that we dont go past the stack minimum.
    98                              <1>     ;If we do, call stack overflow!
    99                              <1>     pop rax    ;Get the return address qword into rax
   100                              <1>     shl %1, 3  ;Multiply argument register by 8
   101                              <1>     sub rsp, %1 ;Clear space on the stack plus one qword for ret addr
   102                              <1>     lea rbp, stack
   103                              <1>     cmp rsp, rbp
   104                              <1>     ja .macroNotOverflow ;If rsp above overflow buffer, its oki
   105                              <1>     lea rbp, stkOvflw
   106                              <1>     jmp criticalError
   107                              <1> .macroNotOverflow:
   108                              <1>     ;rsp now points to the start of the cleared space
   109                              <1>     ;Put the return address back on the stack
   110                              <1>     push rax
   111                              <1> %endmacro
   112                              <1> 
   113                              <1> %macro cleanSpaceOnStack 1
   114                              <1>     ;The argument is to specify how much space to reclaim from the stack
   115                              <1>     pop rax
   116                              <1>     shl %1, 3   ;Multiply argument register by 8
   117                              <1>     add rsp, %1
   118                              <1>     push rax
   119                              <1> %endmacro
     5                                  Segment .text align=1
     6                                  %include "RELOC.ASM"
     7 00000000 55AA                <1>     dw 0AA55h 
     8                              <1> ;First verify I have Enough RAM for my program and then run
     9 00000002 B801E80000          <1>     mov eax, 0E801h ;Get low memory count in ax
    10 00000007 CD35                <1>     int 35h
    11 00000009 663D0008            <1>     cmp ax, 200000h/400h ;Divide 2Mb into 1Kb chunks.
    12 0000000D 722A                <1>     jb bad
    13 0000000F B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    14 00000014 0F32                <1>     rdmsr
    15 00000016 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    16 00000018 48C1E720            <1>     shl rdi, 20h        ;Shift high
    17 0000001C 89C7                <1>     mov edi, eax        ;Get the low dword in
    18 0000001E 4889F8              <1>     mov rax, rdi
    19 00000021 488D35(00000000)    <1>     lea rsi, section.resSeg.start
    20 00000028 4881C7[F60E0000]    <1>     add rdi, bssLen
    21 0000002F B900100000          <1>     mov ecx, 1000h
    22 00000034 F348A5              <1>     rep movsq
    23 00000037 FFE0                <1>     jmp qword rax
    24                              <1> bad:
    25 00000039 488D2D0D000000      <1>     lea rbp, badmsg
    26 00000040 B804130000          <1>     mov eax, 1304h
    27 00000045 CD30                <1>     int 30h
    28 00000047 30E4                <1>     xor ah, ah
    29 00000049 CD36                <1>     int 36h
    30 0000004B CD38                <1>     int 38h
    31 0000004D 4E6F7420456E6F7567- <1> badmsg: db "Not Enough Memory. Press any key to enter SYSDEBUG...",0
    31 00000056 68204D656D6F72792E- <1>
    31 0000005F 20507265737320616E- <1>
    31 00000068 79206B657920746F20- <1>
    31 00000071 656E74657220535953- <1>
    31 0000007A 44454255472E2E2E00  <1>
     7                                  Segment dSeg nobits align=1 start=0
     8                                  %include "BSS.ASM"
     9 00000000 <res 50h>           <1> oflowbuff   resq 10        ;10 Qwords of overflow buffer
    10                              <1> ;rsp should never get here when operating in a program.
    11                              <1> ;Only acceptable to be used when processing a line
    12 00000050 <res D40h>          <1> stack       resq 200h - 8 - 10*8  ;Save total 4Kb stack space
    13 00000D90 ????????????????    <1> stacktop    resq 1
    14                              <1> 
    15                              <1> maxLineLen  equ 256
    16 00000D98 <res 100h>          <1> inString    resb maxLineLen         ;256 character input string
    17                              <1> 
    18                              <1> ;This string is used for printing long numbers and saving
    19                              <1> ; the variable names for string comparisons
    20                              <1> digitStringLen  equ 48
    21 00000E98 <res 30h>           <1> digitString resb digitStringLen     
    22                              <1> 
    23 00000EC8 ????????????????    <1> minMemAddr  resq 1  ;Pointer from where to start allocating memory blocks
    24 00000ED0 ????????????????    <1> maxMemAddr  resq 1  ;Pointer to the byte past which we cannot allocate anything
    25                              <1> ;==============================================================================
    26                              <1> ;This is the SDA for each program and must be included in the program area
    27                              <1> ; once we add the ability to save the program to disk.
    28                              <1> ;==============================================================================
    29                              <1> 
    30                              <1> ;void* mcbChain, lastBlock, firstLinPtr = -1 => New program, empty entries
    31                              <1> 
    32 00000ED8 ??                  <1> strLen      resb 1  ;Counter for number of chars entered in string
    33 00000ED9 ??                  <1> stateByte   resb 1  ;Bit 0 => Break Set, stop processing after end of current line
    34 00000EDA ????????????????    <1> mcbChain    resq 1  ;Pointer to the start of the chain
    35 00000EE2 ????????????????    <1> lastBlock   resq 1  ;Pointer to the last block
    36 00000EEA ????????????????    <1> firstLinPtr resq 1  ;Pointer to the programs' first line 
    37 00000EF2 ????                <1> firstLinNum resw 1  ;Line number of the first line of the program
    38 00000EF4 ????                <1> currentLine resw 1  ;Currently being executed line number
    39                              <1> 
    40                              <1> bssLen: ;Needed to compute the resident portion load location
     9                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1
    10                                  %include "MAIN.ASM"
    11                              <1> start:
    12 00000000 B801C50000          <1>     mov eax, 0C501h
    13 00000005 CD35                <1>     int 35h         ;Connect the debugger
    14 00000007 E8AF010000          <1>     call ttyClear   ;Clear the teletype
    15                              <1>     ;Set the CtrlBreak Handler
    16 0000000C 488D3DD5000000      <1>     lea rdi, ctrlBreakHandler
    17 00000013 B03B                <1>     mov al, 3Bh
    18 00000015 E8D7000000          <1>     call setHandler
    19                              <1> 
    20                              <1>     ;Memory stuff
    21 0000001A 488D2D6F150000      <1>     lea rbp, mainmsg
    22 00000021 E888010000          <1>     call ttyOutString
    23 00000026 E8FE140000          <1>     call memoryDetection
    24 0000002B 488D2D75150000      <1>     lea rbp, bytemsg
    25 00000032 E877010000          <1>     call ttyOutString
    26 00000037 E855090000          <1>     call newProgram         ;Use this to reset program pointers
    27                              <1> mainLoop:
    28                              <1> ;Entering here resets the program counter but doesnt remove the program from memory
    29 0000003C 668B05(F20E0000)    <1>     mov ax, word [firstLinNum]  ;Error occured, restart the program counter
    30 00000043 668905(F40E0000)    <1>     mov word [currentLine], ax
    31                              <1> 
    32 0000004A FC                  <1>     cld                 ;Set default string op direction
    33 0000004B 488D25(900D0000)    <1>     lea rsp, stacktop    ;Reinitialize stack pointer
    34 00000052 8025(D90E0000)FE    <1>     and byte [stateByte], 0FEh  ;Clear the break bit
    35 00000059 488D2D2B150000      <1>     lea rbp, prompt
    36 00000060 E849010000          <1>     call ttyOutString
    37 00000065 488D05D0FFFFFF      <1>     lea rax, mainLoop
    38 0000006C 50                  <1>     push rax    ;Save address on stack
    39                              <1> .ml0:
    40                              <1> ;This section will execute an input line if it is an interactive expression
    41                              <1> ; or store it in the program if it has a line number.
    42                              <1> ;It will keep accepting lines until a line is entered without a line number
    43 0000006D E89F000000          <1>     call getLineInput
    44 00000072 E8D5110000          <1>     call decimalToHex   ;Check to see if we have a valid line number
    45 00000077 6685C0              <1>     test ax, ax
    46 0000007A 750C                <1>     jnz .saveLine
    47                              <1> ;Here we execute the line, move rsi to the start of the line
    48 0000007C 488D35(980D0000)    <1>     lea rsi, inString
    49 00000083 E9AE010000          <1>     jmp runLine
    50                              <1> .saveLine:
    51                              <1>     ;ax has the line number
    52 00000088 6689C2              <1>     mov dx, ax
    53 0000008B E82A130000          <1>     call searchForProgramLine
    54 00000090 4881FBFFFFFFFF      <1>     cmp rbx, -1
    55 00000097 751D                <1>     jne .commonProc ;If not equal, line must exist, continue
    56 00000099 E8B1020000          <1>     call spaceSkip  ;Skip all the prceeding spaces
    57 0000009E 803E00              <1>     cmp byte [rsi], 0  ;Is the first non space char the end of the string?
    58 000000A1 742D                <1>     je .lineDoesntExist
    59                              <1>     ;So we have a new line that isn't empty, allocate a new block for this line
    60 000000A3 E842120000          <1>     call allocateBlock  ;Return a default block in rbx
    61 000000A8 C6430300            <1>     mov byte [rbx + progLineBlock.bBlockType], progLineBlockType
    62 000000AC 66894304            <1>     mov word [rbx + progLineBlock.wLineNum], ax
    63 000000B0 66C743010E01        <1>     mov word [rbx + progLineBlock.wBlockSize], progLineBlock_size
    64                              <1> .commonProc:
    65                              <1>     ;If the line already exists, simply override the stored string
    66                              <1>     ;rbx has a pointer to the block
    67 000000B6 E860140000          <1>     call strlen ;Get the string length
    68 000000BB 488D7B0E            <1>     lea rdi, qword [rbx + progLineBlock.sLine]  ;Get address here
    69 000000BF E84E140000          <1>     call strcpy ;Copy the program string to the program block
    70 000000C4 56                  <1>     push rsi
    71 000000C5 4889DE              <1>     mov rsi, rbx    ;Move the block into rsi
    72 000000C8 E811130000          <1>     call insertProgramLine
    73 000000CD 5E                  <1>     pop rsi
    74 000000CE EB9D                <1>     jmp short .ml0
    75                              <1> .lineDoesntExist:
    76 000000D0 488D2D48150000      <1>     lea rbp, lineNoXist
    77                              <1> ;For any error, syntax or otherwise, come here
    78                              <1> criticalError:
    79                              <1> ;Called with rbp pointing at error message
    80 000000D7 E8D2000000          <1>     call ttyOutString
    81 000000DC C605(D90E0000)00    <1>     mov byte [stateByte], 0 ;Reset the state byte
    82 000000E3 E954FFFFFF          <1>     jmp mainLoop    ;Trash input line, restart line input
    83                              <1> 
    84                              <1> ctrlBreakHandler:
    85 000000E8 800D(D90E0000)01    <1>     or byte [stateByte], 1  ;Set the byte
    86 000000EF 48CF                <1>     iretq
    87                              <1> setHandler:
    88                              <1> ;Called with:
    89                              <1> ;   rdi = Pointer to interrupt handler
    90                              <1> ;   al = Interrupt number
    91 000000F1 89C5                <1>     mov ebp, eax    ;al has interrupt number which we need to save
    92 000000F3 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
    93                              <1> ;First call to get default BIOS segement selector and attribute word
    94 000000F9 88C3                <1>     mov bl, al  ;Set interrupt number 
    95 000000FB B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
    96 00000100 CD35                <1>     int 35h
    97 00000102 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
    98 00000104 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
    99                              <1> ;dx preserves the attribute word
   100 00000106 4889FB              <1>     mov rbx, rdi  ;Pointer passed in rdi
   101 00000109 B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   102 0000010E CD35                <1>     int 35h
   103                              <1>     
   104 00000110 C3                  <1>     ret
    11                                  %include "TTY.ASM"
    12                              <1> getLineInput:
    13                              <1>     ;Sets rsi to the inputstring
    14 00000111 30E4                <1>     xor ah, ah
    15 00000113 8825(D80E0000)      <1>     mov byte [strLen], ah   ;Zero the char counter
    16 00000119 488D3D(980D0000)    <1>     lea rdi, inString   ;Move to start of line
    17 00000120 4889FE              <1>     mov rsi, rdi
    18 00000123 57                  <1>     push rdi
    19 00000124 B900010000          <1>     mov ecx, maxLineLen
    20 00000129 30C0                <1>     xor al, al    ;Ensure the input line is sanitised
    21 0000012B F3AA                <1>     rep stosb
    22 0000012D 5F                  <1>     pop rdi
    23                              <1> .getChar:
    24 0000012E E883000000          <1>     call ttyIn
    25 00000133 3C0D                <1>     cmp al, 0Dh ;Line Feed
    26 00000135 7456                <1>     je .gliExit
    27 00000137 3C08                <1>     cmp al, 08h ;Bspace
    28 00000139 740F                <1>     je .glibspace
    29 0000013B 803D(D80E0000)FE    <1>     cmp byte [strLen], -2   ;If at max length (255 chars), simply beep and wait for either bspace or enter
    30 00000142 7459                <1>     je .gliFull 
    31 00000144 84C0                <1>     test al, al
    32 00000146 7443                <1>     je .gliExtendedChar
    33 00000148 EB29                <1>     jmp short .gliCheckCase
    34                              <1> .glibspace:
    35 0000014A F605(D80E0000)FF    <1>     test byte [strLen], -1  ;This will only be zero if strLen=0
    36 00000151 74DB                <1>     jz .getChar
    37 00000153 48FFCF              <1>     dec rdi ;Go back by one position in the input line
    38 00000156 FE0D(D80E0000)      <1>     dec byte [strLen]
    39 0000015C B008                <1>     mov al, 08h
    40 0000015E E846000000          <1>     call ttyOutChar
    41 00000163 B020                <1>     mov al, 20h  
    42 00000165 E83F000000          <1>     call ttyOutChar
    43 0000016A B008                <1>     mov al, 08h
    44 0000016C E838000000          <1>     call ttyOutChar
    45 00000171 EBBB                <1>     jmp short .getChar
    46                              <1> .gliCheckCase:
    47                              <1>     ;al has char
    48 00000173 E831000000          <1>     call ttyOutChar ;Echo the char as is, but store it uppercase
    49 00000178 3C61                <1>     cmp al, "a"
    50 0000017A 7206                <1>     jb .gliccStore
    51 0000017C 3C7A                <1>     cmp al, "z"
    52 0000017E 7702                <1>     ja .gliccStore
    53 00000180 2C20                <1>     sub al, 20h
    54                              <1> .gliccStore:
    55 00000182 AA                  <1>     stosb   ;Increment the pointer, add char to buffer
    56 00000183 FE05(D80E0000)      <1>     inc byte [strLen]   ;Inc char count
    57 00000189 EBA3                <1>     jmp short .getChar
    58                              <1> .gliExtendedChar:
    59                              <1>     ;Currently, extended chars do nothing, 
    60                              <1>     ; eventually add F1-F10 functionality
    61                              <1>     ; and arrow key support
    62 0000018B EBA1                <1>     jmp short .getChar
    63                              <1> .gliExit:
    64 0000018D 488D2D21140000      <1>     lea rbp, crlf
    65 00000194 E815000000          <1>     call ttyOutString
    66 00000199 C60700              <1>     mov byte [rdi], 0   ;Null terminate string here
    67 0000019C C3                  <1>     ret
    68                              <1> .gliFull:
    69 0000019D B007                <1>     mov al, 07h
    70 0000019F E805000000          <1>     call ttyOutChar
    71 000001A4 E985FFFFFF          <1>     jmp .getChar
    72                              <1> 
    73                              <1> ttyOutChar:
    74 000001A9 B40E                <1>     mov ah, 0Eh
    75 000001AB CD30                <1>     int 30h
    76 000001AD C3                  <1>     ret
    77                              <1> ttyOutString:
    78                              <1> ;Print 0 terminated strings
    79 000001AE B804130000          <1>     mov eax, 1304h
    80 000001B3 CD30                <1>     int 30h
    81 000001B5 C3                  <1>     ret
    82                              <1> ttyIn:
    83 000001B6 30E4                <1>     xor ah, ah
    84 000001B8 CD36                <1>     int 36h
    85 000001BA C3                  <1>     ret
    86                              <1> ttyClear:
    87 000001BB B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
    88 000001C0 CD30                <1>     int 30h
    89 000001C2 B402                <1>     mov ah, 02h
    90 000001C4 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
    91 000001C6 88D7                <1>     mov bh, dl      ;Set cursor for page 0
    92 000001C8 CD30                <1>     int 30h
    93 000001CA B707                <1>     mov bh, 07h     ;Grey/Black attribs
    94 000001CC B800060000          <1>     mov eax, 0600h  ;Clear whole screen
    95 000001D1 CD30                <1>     int 30h
    96 000001D3 C3                  <1>     ret
    12                                  %include "PROCESS.ASM"
    13                              <1> keywordParser:
    14                              <1> ;rsi must point to the start of the portion of the line to execute
    15 000001D4 E876010000          <1>     call spaceSkip  ;Skip any leading spaces
    16 000001D9 803E00              <1>     cmp byte [rsi], 0   ;Null terminated line, empty line?
    17 000001DC 7444                <1>     je .exitEmpty
    18                              <1>     ;rsi now points to function
    19 000001DE 488D3DB2050000      <1>     lea rdi, funTbl     ;Point rdi to the function table
    20                              <1> .functionFinderLoop:
    21 000001E5 0FB60F              <1>     movzx ecx, byte [rdi]  ;Get the string length  
    22 000001E8 80F9FF              <1>     cmp cl, -1  ;-1 is the end of table marker, either Var assignment or error
    23 000001EB 7440                <1>     je .notLetVarAssignment ;No key word found, consider variable assignment
    24 000001ED 56                  <1>     push rsi    ;Save ptr to start of string on stack 
    25 000001EE 57                  <1>     push rdi
    26 000001EF 48FFC7              <1>     inc rdi             ;Goto first char in function name
    27 000001F2 F3A6                <1>     repe cmpsb
    28 000001F4 5F                  <1>     pop rdi
    29 000001F5 5E                  <1>     pop rsi     ;Return ptr to start of string pointer from stack
    30 000001F6 84C9                <1>     test cl, cl ;Did all the chars match?
    31 000001F8 740F                <1>     jz .functionFound
    32 000001FA 480FB607            <1>     movzx rax, byte [rdi]    ;Skip unnecessary function pointer
    33 000001FE 480502000000        <1>     add rax, 2      ;Add 2 to skip relative pointer
    34 00000204 4801C7              <1>     add rdi, rax
    35 00000207 EBDC                <1>     jmp short .functionFinderLoop
    36                              <1> .functionFound:
    37                              <1>     ;Function found! Execute!
    38                              <1>     ;rsi points to start of expression to evaluate for function
    39                              <1>     ;rdi points to table entry
    40 00000209 488D1D87050000      <1>     lea rbx, funTbl         ;Get table address
    41 00000210 480FB617            <1>     movzx rdx, byte [rdi]   ;Get pascal string length
    42 00000214 0FB70C17            <1>     movzx ecx, word [rdi + rdx] ;Add pascal strlen to table entry and get word offset
    43 00000218 4801CB              <1>     add rbx, rcx    ;Add word offset to table base
    44 0000021B 48FFCA              <1>     dec rdx         ;Get number of chars in function name
    45 0000021E 4801D6              <1>     add rsi, rdx    ;rsi points to first char AFTER function name
    46                              <1> .exit:
    47 00000221 C3                  <1>     ret 
    48                              <1> .exitEmpty:
    49 00000222 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    49 0000022B FF                  <1>
    50 0000022C C3                  <1>     ret
    51                              <1>     ;rbx has the function pointer, 
    52                              <1>     ;rsi points to the first char after the keyword (e.g. PRINT, INPUT etc)
    53                              <1> .notLetVarAssignment:
    54 0000022D 488D1DDF060000      <1>     lea rbx, variableAssignment
    55 00000234 EBEB                <1>     jmp short .exit  ;Now call the function as if it was found from the table
    56                              <1> 
    57                              <1> runLine:
    58                              <1> ;New lines begin here, rsi point to the start of the program line
    59 00000236 F605(D90E0000)02    <1>     test byte [stateByte], traceBit ;Are we TRON?
    60 0000023D 0F85B0000000        <1>     jnz .tron
    61                              <1> .stringPortionProcess:
    62                              <1>     ;rsi points to string portion to begin processing
    63 00000243 E88CFFFFFF          <1>     call keywordParser
    64                              <1>     ;rbx has the function pointer, if rbx is -1, line was empty
    65                              <1>     ;rsi points to the first char after the keyword (e.g. PRINT, INPUT etc)
    66 00000248 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If the line is empty, rbx has a -1 so skip the line
    67 0000024F 7437                <1>     je .gotoNextLine
    68 00000251 F605(D90E0000)01    <1>     test byte [stateByte], breakBit ;Is break set before exec?
    69 00000258 0F85C1000000        <1>     jnz .break
    70                              <1> ;EXEC   LINE    PORTION
    71 0000025E FFD3                <1>     call rbx        ;Call the function pointer in rbx
    72                              <1>     ;rsi should be pointing to the next portion of the line or the end of the line
    73                              <1> ;EXEC COMPLETE
    74 00000260 F605(D90E0000)01    <1>     test byte [stateByte], breakBit ;Is break set after exec?
    75 00000267 0F85B2000000        <1>     jnz .break
    76 0000026D F605(D90E0000)04    <1>     test byte [stateByte], indirectBit
    77 00000274 7448                <1>     jz .exit    ;IF in direct mode, just return to command line
    78 00000276 F605(D90E0000)08    <1>     test byte [stateByte], ctrlFlow ;Ctrl Flow =>ignore other expressions temporarily
    79 0000027D 7540                <1>     jnz .ctrlFlowHandler
    80                              <1> 
    81 0000027F E809050000          <1>     call findOtherExpressionsOnLine ;See if there are any other expressions
    82 00000284 84C0                <1>     test al, al ;If al is null, no more expressions on the line
    83                              <1>     ;If not null, keep executing expressions on same line
    84                              <1>     ;rsi points to first char after :
    85 00000286 75BB                <1>     jnz .stringPortionProcess ;If a : found, keep processing
    86                              <1> .gotoNextLine:
    87 00000288 668B15(F40E0000)    <1>     mov dx, word [currentLine]  ;Get in rbx the ptr to current line
    88 0000028F E826110000          <1>     call searchForProgramLine
    89 00000294 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Does the line not exist somehow?
    90 0000029B 7421                <1>     je .exit
    91 0000029D 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Walk chain
    92 000002A1 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Are we at the end of the chain?
    93 000002A8 7414                <1>     je .exit
    94 000002AA 668B5304            <1>     mov dx, word [rbx + progLineBlock.wLineNum] ;Save the new line number
    95 000002AE 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Point rsi to the start of the next line
    96                              <1> .gotoNextLineCommon:
    97 000002B2 668915(F40E0000)    <1>     mov word [currentLine], dx
    98 000002B9 E978FFFFFF          <1>     jmp runLine
    99                              <1> .exit:
   100 000002BE C3                  <1>     ret
   101                              <1> .ctrlFlowHandler:
   102                              <1>     ;The stack pointer should be pointing now at the block
   103                              <1>     ; control flow data block. 
   104                              <1>     ;The functions which return with this bit set, also have placed
   105                              <1>     ; the next line number in dx, offset into line in byte three of edx
   106 000002BF 8025(D90E0000)F7    <1>     and byte [stateByte], ~ctrlFlow ;First clear the ctrlflow bit
   107 000002C6 E8EF100000          <1>     call searchForProgramLine   ;Get pointer to line
   108 000002CB 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Does the line not exist?
   109 000002D2 74DE                <1>     je .gotoNextLineCommon
   110 000002D4 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Point rsi to the start of the next line
   111 000002D8 89D0                <1>     mov eax, edx    ;Isolate the offset into the line
   112 000002DA C1E810              <1>     shr eax, 10h    ;Get byte three into byte 1
   113 000002DD 25FF000000          <1>     and eax, 0FFh   ;Save only the bottom byte
   114 000002E2 4801C6              <1>     add rsi, rax    ;Add the offset into the string to rsi
   115 000002E5 EBCB                <1>     jmp short .gotoNextLineCommon
   116                              <1> .badLineNumber:
   117 000002E7 488D2D31130000      <1>     lea rbp, lineNoXist
   118 000002EE E9E4FDFFFF          <1>     jmp criticalError
   119                              <1> 
   120                              <1> .tron:
   121                              <1> ;Print the line number about to be executed
   122 000002F3 F605(D90E0000)04    <1>     test byte [stateByte], indirectBit  ;Tron should only work in indirect mode
   123 000002FA 0F8443FFFFFF        <1>     jz .stringPortionProcess
   124 00000300 B05B                <1>     mov al, "["
   125 00000302 E8A2FEFFFF          <1>     call ttyOutChar
   126 00000307 0FB705(F40E0000)    <1>     movzx eax, word [currentLine]
   127 0000030E E8610F0000          <1>     call printdecimalword
   128 00000313 B05D                <1>     mov al, "]"
   129 00000315 E88FFEFFFF          <1>     call ttyOutChar
   130 0000031A E924FFFFFF          <1>     jmp .stringPortionProcess
   131                              <1> .break:
   132 0000031F 488D2D11130000      <1>     lea rbp, breakmsg
   133 00000326 E883FEFFFF          <1>     call ttyOutString
   134 0000032B 0FB705(F40E0000)    <1>     movzx eax, word [currentLine]
   135 00000332 E83D0F0000          <1>     call printdecimalword
   136 00000337 488D2D77120000      <1>     lea rbp, crlf
   137 0000033E E86BFEFFFF          <1>     call ttyOutString
   138                              <1>     ;Preserve only bit 2 of the state byte
   139 00000343 8025(D90E0000)02    <1>     and byte [stateByte], traceBit
   140 0000034A E9EDFCFFFF          <1>     jmp mainLoop    ;Exit processing
    13                                  %include "PARSE.ASM"
    14                              <1> ;Main Parsing Routines go here
    15                              <1> 
    16                              <1> spaceSkip:
    17                              <1> ;Allows us to skip spaces that might have been placed for
    18                              <1> ; ease of reading by the user without modifying any registers
    19                              <1> ; except for rsi.
    20                              <1> ;Input: rsi = Pointer to string
    21                              <1> ;Output: rsi = First non space character encountered
    22 0000034F 803E20              <1>     cmp byte [rsi], " "
    23 00000352 7505                <1>     jne .exit
    24 00000354 48FFC6              <1>     inc rsi
    25 00000357 EBF6                <1>     jmp short spaceSkip
    26                              <1> .exit:
    27 00000359 C3                  <1>     ret
    28                              <1> 
    29                              <1> getVarNameLength:
    30                              <1> ;Called pointing to the buffer with the var name in it
    31                              <1> ;Input: rsi = Start of var name
    32                              <1> ;Output: ecx = Length of varname
    33 0000035A 50                  <1>     push rax
    34 0000035B 56                  <1>     push rsi
    35 0000035C 57                  <1>     push rdi
    36 0000035D 53                  <1>     push rbx
    37 0000035E 52                  <1>     push rdx
    38 0000035F 31D2                <1>     xor edx, edx    ;Clear counter of chars
    39 00000361 488D1D62120000      <1>     lea rbx, varChrs    ;Get the list of valid variable name chars
    40                              <1> .search:
    41 00000368 4889DF              <1>     mov rdi, rbx    ;Save pointer in rbx
    42 0000036B AC                  <1>     lodsb       ;Get the first char into al
    43 0000036C B926000000          <1>     mov ecx, numVarChars
    44 00000371 F2AE                <1>     repne scasb       ;Look for char in the valid chars list
    45 00000373 750A                <1>     jne .exit   ;Char not found, drop it
    46 00000375 FFC2                <1>     inc edx     ;Add one to number of chars found
    47 00000377 81FA28000000        <1>     cmp edx, 40 ;At position for char 40?
    48 0000037D 72E9                <1>     jb .search  ;Whilst below, keep going
    49                              <1> .exit:
    50 0000037F 89D1                <1>     mov ecx, edx
    51 00000381 5A                  <1>     pop rdx
    52 00000382 5B                  <1>     pop rbx
    53 00000383 5F                  <1>     pop rdi
    54 00000384 5E                  <1>     pop rsi
    55 00000385 58                  <1>     pop rax
    56 00000386 C3                  <1>     ret
    57                              <1> 
    58                              <1> getVarType:
    59                              <1> ;Input: rsi = Start of var name
    60                              <1> ;       rcx = Length of varname
    61                              <1> ;Output: ebx = 0 => Integer
    62                              <1> ;        ebx = 1 => String
    63                              <1> ;        ebx = -1 => Var doesnt exist, caller handles
    64 00000387 50                  <1>     push rax
    65 00000388 51                  <1>     push rcx
    66 00000389 56                  <1>     push rsi
    67 0000038A E8BB0F0000          <1>     call findVariable
    68 0000038F 4881FBFFFFFFFF      <1>     cmp rbx, -1
    69 00000396 7406                <1>     je .exit
    70 00000398 0FB65B03            <1>     movzx ebx, byte [rbx + memBlock.bBlockType]
    71 0000039C FFCB                <1>     dec ebx
    72                              <1> .exit:
    73 0000039E 5E                  <1>     pop rsi
    74 0000039F 59                  <1>     pop rcx
    75 000003A0 58                  <1>     pop rax
    76 000003A1 C3                  <1>     ret
    77                              <1> 
    78                              <1> handleAlgebraicExpression:
    79                              <1> ;Input: rsi = Points to a mathematical expression
    80                              <1> ;Output: rax = Result of said expression
    81                              <1> ;Declares a syntax error if weird chars found
    82                              <1> ;Declares a type error if a string variable found
    83                              <1> ;Declares a stack overflow if less than 20 stack words available
    84 000003A2 50                  <1>     push rax
    85 000003A3 488D05(50000000)    <1>     lea rax, stack
    86 000003AA 480550000000        <1>     add rax, 10*8   ;Be extra careful
    87 000003B0 4839C4              <1>     cmp rsp, rax
    88                              <1>     ;if rsp is below rax, fail
    89 000003B3 0F8250030000        <1>     jb .stack
    90 000003B9 58                  <1>     pop rax
    91                              <1> .handleFourthLevel:
    92 000003BA E807010000          <1>     call .handleThirdLevel
    93                              <1> .parseLogicals:
    94 000003BF 813E414E4420        <1>     cmp dword [rsi], "AND "
    95 000003C5 0F84B2000000        <1>     je .and
    96 000003CB 66813E4F52          <1>     cmp word [rsi], "OR"
    97 000003D0 0F84B6000000        <1>     je .or
    98 000003D6 813E584F5220        <1>     cmp dword [rsi], "XOR "
    99 000003DC 0F84BC000000        <1>     je .xor
   100 000003E2 813E45515620        <1>     cmp dword [rsi], "EQV "
   101 000003E8 0F84BF000000        <1>     je .eqv
   102 000003EE 813E494D5020        <1>     cmp dword [rsi], "IMP "
   103 000003F4 7468                <1>     je .imp
   104 000003F6 813E524F4C20        <1>     cmp dword [rsi], "ROL "
   105 000003FC 744F                <1>     je .leftRoll
   106 000003FE 813E524F5220        <1>     cmp dword [rsi], "ROR "
   107 00000404 7436                <1>     je .rightRoll
   108 00000406 813E53484C20        <1>     cmp dword [rsi], "SHL "
   109 0000040C 741D                <1>     je .leftShift
   110 0000040E 813E53485220        <1>     cmp dword [rsi], "SHR "
   111 00000414 0F85C3020000        <1>     jne .exit
   112                              <1> .rightShift:
   113                              <1> ;Shift count is truncated to between 1 and 255 for shift and Roll
   114 0000041A 50                  <1>     push rax
   115 0000041B E89F000000          <1>     call .handleThirdLevelSkip
   116 00000420 59                  <1>     pop rcx
   117 00000421 4891                <1>     xchg rax, rcx   ;Move count into rcx, and shift target to rax
   118 00000423 48D3E8              <1>     shr rax, cl
   119 00000426 E994FFFFFF          <1>     jmp .parseLogicals
   120                              <1> 
   121                              <1> .leftShift:
   122 0000042B 50                  <1>     push rax
   123 0000042C E88E000000          <1>     call .handleThirdLevelSkip
   124 00000431 59                  <1>     pop rcx
   125 00000432 4891                <1>     xchg rax, rcx   ;Move count into rcx, and shift target to rax
   126 00000434 48D3E0              <1>     shl rax, cl
   127 00000437 E983FFFFFF          <1>     jmp .parseLogicals
   128                              <1> 
   129                              <1> .rightRoll:
   130 0000043C 50                  <1>     push rax
   131 0000043D E87D000000          <1>     call .handleThirdLevelSkip
   132 00000442 59                  <1>     pop rcx
   133 00000443 4891                <1>     xchg rax, rcx   ;Move count into rcx, and shift target to rax
   134 00000445 48D3C8              <1>     ror rax, cl
   135 00000448 E972FFFFFF          <1>     jmp .parseLogicals
   136                              <1> 
   137                              <1> .leftRoll:
   138 0000044D 50                  <1>     push rax
   139 0000044E E86C000000          <1>     call .handleThirdLevelSkip
   140 00000453 59                  <1>     pop rcx
   141 00000454 4891                <1>     xchg rax, rcx   ;Move count into rcx, and shift target to rax
   142 00000456 48D3C0              <1>     rol rax, cl
   143 00000459 E961FFFFFF          <1>     jmp .parseLogicals
   144                              <1> 
   145                              <1> .imp:
   146                              <1>     ;A => B == ¬A OR B
   147 0000045E 50                  <1>     push rax
   148 0000045F E85B000000          <1>     call .handleThirdLevelSkip
   149 00000464 59                  <1>     pop rcx ;rcx has A
   150 00000465 48F7D1              <1>     not rcx
   151 00000468 4809C8              <1>     or rax, rcx
   152 0000046B E94FFFFFFF          <1>     jmp .parseLogicals
   153                              <1> 
   154                              <1> .not:
   155 00000470 E84A000000          <1>     call .handleThirdLevelSkip  ;Get result in rax
   156 00000475 48F7D0              <1>     not rax ;Save 1's compliment in rax
   157 00000478 E942FFFFFF          <1>     jmp .parseLogicals
   158                              <1> .and:
   159 0000047D 50                  <1>     push rax
   160 0000047E E83C000000          <1>     call .handleThirdLevelSkip
   161 00000483 59                  <1>     pop rcx
   162 00000484 4821C8              <1>     and rax, rcx
   163 00000487 E933FFFFFF          <1>     jmp .parseLogicals
   164                              <1> .or:
   165 0000048C 48FFCE              <1>     dec rsi ;handle third level skips skips one too many for or
   166 0000048F 50                  <1>     push rax
   167 00000490 E82A000000          <1>     call .handleThirdLevelSkip
   168 00000495 59                  <1>     pop rcx
   169 00000496 4809C8              <1>     or rax, rcx
   170 00000499 E921FFFFFF          <1>     jmp .parseLogicals
   171                              <1> .xor:
   172 0000049E 50                  <1>     push rax
   173 0000049F E81B000000          <1>     call .handleThirdLevelSkip
   174 000004A4 59                  <1>     pop rcx
   175 000004A5 4831C8              <1>     xor rax, rcx
   176 000004A8 E912FFFFFF          <1>     jmp .parseLogicals
   177                              <1> .eqv:
   178                              <1> ;Not XOR, ie only if the two bits are equal do we set it
   179 000004AD 50                  <1>     push rax
   180 000004AE E80C000000          <1>     call .handleThirdLevelSkip
   181 000004B3 59                  <1>     pop rcx
   182 000004B4 4831C8              <1>     xor rax, rcx
   183 000004B7 48F7D0              <1>     not rax
   184 000004BA E900FFFFFF          <1>     jmp .parseLogicals
   185                              <1> 
   186                              <1> ;Level 3, Relational Connectives
   187                              <1> .handleThirdLevelSkip:
   188 000004BF 4881C603000000      <1>     add rsi, 3  ;Go past the end of the word
   189                              <1> .handleThirdLevel:
   190 000004C6 E80B010000          <1>    call .handleSecondLevel
   191                              <1> .parseRelationals:
   192                              <1>     ;Handle Relational connectives
   193 000004CB 803E3D              <1>     cmp byte [rsi], "="
   194 000004CE 0F84BA000000        <1>     je .processEq
   195 000004D4 66813E3C3E          <1>     cmp word [rsi], "<>"
   196 000004D9 0F84D0000000        <1>     je .processNeq
   197 000004DF 66813E3E3C          <1>     cmp word [rsi], "><"
   198 000004E4 0F84C5000000        <1>     je .processNeq
   199 000004EA 803E3C              <1>     cmp byte [rsi], "<"
   200 000004ED 7430                <1>     je .processLess
   201 000004EF 803E3E              <1>     cmp byte [rsi], ">"
   202 000004F2 0F85E5010000        <1>     jne .exit
   203                              <1> .processGreater:
   204 000004F8 807E013D            <1>     cmp byte [rsi + 1], "=" ;Is this a GEQ
   205 000004FC 7448                <1>     je .processGeq
   206 000004FE 50                  <1>     push rax
   207 000004FF E8CF000000          <1>     call .handleSecondLevelSkip
   208 00000504 59                  <1>     pop rcx ;lhs, rax has rhs of >
   209                              <1> 
   210 00000505 53                  <1>     push rbx
   211 00000506 31DB                <1>     xor ebx, ebx
   212 00000508 4839C1              <1>     cmp rcx, rax
   213 0000050B 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1 ;Default to true
   213 00000514 FF                  <1>
   214 00000515 480F4EC3            <1>     cmovle rax, rbx  ;Move the false value if less than
   215 00000519 5B                  <1>     pop rbx
   216 0000051A E9ACFFFFFF          <1>     jmp .parseRelationals
   217                              <1> .processLess:
   218 0000051F 807E013D            <1>     cmp byte [rsi + 1], "=" ;Is this a LEQ
   219 00000523 7445                <1>     je .processLeq
   220 00000525 50                  <1>     push rax
   221 00000526 E8A8000000          <1>     call .handleSecondLevelSkip
   222 0000052B 59                  <1>     pop rcx ;lhs, rax has rhs of <
   223                              <1> 
   224 0000052C 53                  <1>     push rbx
   225 0000052D 31DB                <1>     xor ebx, ebx
   226 0000052F 4839C1              <1>     cmp rcx, rax
   227 00000532 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1 ;Default to true
   227 0000053B FF                  <1>
   228 0000053C 480F4DC3            <1>     cmovge rax, rbx  ;Move the false value if greater than or equal to
   229 00000540 5B                  <1>     pop rbx
   230 00000541 E985FFFFFF          <1>     jmp .parseRelationals
   231                              <1> 
   232                              <1> .processGeq:
   233                              <1> ;Symbol has two chars so skip second char
   234 00000546 48FFC6              <1>     inc rsi ;Skip first symbol
   235 00000549 50                  <1>     push rax
   236 0000054A E884000000          <1>     call .handleSecondLevelSkip
   237 0000054F 59                  <1>     pop rcx ;lhs, rax has rhs of >=
   238                              <1> 
   239 00000550 53                  <1>     push rbx
   240 00000551 31DB                <1>     xor ebx, ebx
   241 00000553 4839C1              <1>     cmp rcx, rax
   242 00000556 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1 ;Default to true
   242 0000055F FF                  <1>
   243 00000560 480F4CC3            <1>     cmovl rax, rbx  ;Move the false value if less than
   244 00000564 5B                  <1>     pop rbx
   245 00000565 E961FFFFFF          <1>     jmp .parseRelationals
   246                              <1> 
   247                              <1> .processLeq:
   248                              <1> ;Symbol has two chars so skip second char
   249 0000056A 48FFC6              <1>     inc rsi
   250 0000056D 50                  <1>     push rax
   251 0000056E E860000000          <1>     call .handleSecondLevelSkip
   252 00000573 59                  <1>     pop rcx ;lhs, rax has rhs of <=
   253                              <1> 
   254 00000574 53                  <1>     push rbx
   255 00000575 31DB                <1>     xor ebx, ebx
   256 00000577 4839C1              <1>     cmp rcx, rax
   257 0000057A 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1 ;Default to true
   257 00000583 FF                  <1>
   258 00000584 480F4FC3            <1>     cmovg rax, rbx  ;Move the false value if greater than
   259 00000588 5B                  <1>     pop rbx
   260 00000589 E93DFFFFFF          <1>     jmp .parseRelationals
   261                              <1> 
   262                              <1> .processEq:
   263 0000058E 50                  <1>     push rax
   264 0000058F E83F000000          <1>     call .handleSecondLevelSkip
   265 00000594 59                  <1>     pop rcx ;lhs, rax has rhs of =
   266                              <1> 
   267 00000595 53                  <1>     push rbx 
   268 00000596 31DB                <1>     xor ebx, ebx
   269 00000598 4839C1              <1>     cmp rcx, rax
   270 0000059B 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1
   270 000005A4 FF                  <1>
   271 000005A5 480F45C3            <1>     cmovne rax, rbx ;Only set rax to 0 if not equal
   272 000005A9 5B                  <1>     pop rbx
   273 000005AA E91CFFFFFF          <1>     jmp .parseRelationals
   274                              <1> 
   275                              <1> .processNeq:
   276                              <1> ;Symbol has two chars so skip second char
   277 000005AF 48FFC6              <1>     inc rsi
   278 000005B2 50                  <1>     push rax
   279 000005B3 E81B000000          <1>     call .handleSecondLevelSkip
   280 000005B8 59                  <1>     pop rcx ;lhs, rax has rhs of <>
   281                              <1> 
   282 000005B9 53                  <1>     push rbx 
   283 000005BA 31DB                <1>     xor ebx, ebx
   284 000005BC 4839C1              <1>     cmp rcx, rax
   285 000005BF 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1 ;Assume true, not equal
   285 000005C8 FF                  <1>
   286 000005C9 480F44C3            <1>     cmove rax, rbx ;Only set rax to 0 if equal
   287 000005CD 5B                  <1>     pop rbx
   288 000005CE E9F8FEFFFF          <1>     jmp .parseRelationals
   289                              <1> 
   290                              <1> ;Level 2, Addition and Subtraction
   291                              <1> .handleSecondLevelSkip:
   292 000005D3 48FFC6              <1>     inc rsi
   293                              <1> .handleSecondLevel:
   294 000005D6 E828000000          <1>     call .handleFirstLevel
   295                              <1> .parseAdditiveOperators:    
   296 000005DB 803E2D              <1>     cmp byte [rsi], "-"
   297 000005DE 7415                <1>     je .processMinus
   298 000005E0 803E2B              <1>     cmp byte [rsi], "+"
   299 000005E3 0F85F4000000        <1>     jne .exit              ;No operators, expression evaluated, exit
   300 000005E9 50                  <1>     push rax
   301 000005EA E811000000          <1>     call .handleFirstLevelSkip   ;Parse first level
   302                              <1> .processAdd:    
   303 000005EF 59                  <1>     pop rcx
   304 000005F0 4801C8              <1>     add rax, rcx           ;Add the two numbers
   305 000005F3 EBE6                <1>     jmp short .parseAdditiveOperators  ;Search again for + or -
   306                              <1> .processMinus:
   307 000005F5 50                  <1>     push rax
   308 000005F6 E805000000          <1>     call .handleFirstLevelSkip   ;Parse first level
   309 000005FB 48F7D8              <1>     neg rax              ;Change a - b to a + -b
   310 000005FE EBEF                <1>     jmp short .processAdd
   311                              <1> 
   312                              <1> ;Level 1, Exponent, Division and multiplication
   313                              <1> 
   314                              <1> .handleFirstLevelSkip:
   315 00000600 48FFC6              <1>     inc rsi              ;Skip the op symbol
   316                              <1> .handleFirstLevel:
   317 00000603 E87D000000          <1>     call .handleZerothLevel      ;Call third level
   318                              <1> .parseProductOperators:
   319 00000608 803E5E              <1>     cmp byte [rsi], "^"
   320 0000060B 7452                <1>     je .exponentFound
   321 0000060D 803E2F              <1>     cmp byte [rsi], "/"
   322 00000610 743A                <1>     je .processDiv
   323 00000612 803E2A              <1>     cmp byte [rsi], "*"
   324 00000615 7429                <1>     je .processMult
   325 00000617 813E4D4F4420        <1>     cmp dword [rsi], "MOD "
   326 0000061D 0F85BA000000        <1>     jne .exit     ;Neither exp, multiplication, division or MOD, return up a level
   327                              <1> 
   328 00000623 4881C603000000      <1>     add rsi, 3  ;Skip the MOD part
   329 0000062A 50                  <1>     push rax
   330 0000062B E852000000          <1>     call .handleZerothLevelSkip   ;Call zeroth level
   331 00000630 59                  <1>     pop rcx
   332 00000631 4891                <1>     xchg rax, rcx
   333 00000633 31D2                <1>     xor edx, edx         ;Clear rdx for rdx:rax
   334 00000635 48F7F9              <1>     idiv rcx             ;Signed division
   335 00000638 4889D0              <1>     mov rax, rdx         ;Save remainder in rax
   336 0000063B E9C8FFFFFF          <1>     jmp .parseProductOperators         ;Search again for * or /
   337                              <1>     
   338                              <1> .processMult:
   339 00000640 50                  <1>     push rax
   340 00000641 E83C000000          <1>     call .handleZerothLevelSkip   ;Call zeroth level
   341 00000646 59                  <1>     pop rcx
   342 00000647 48F7E9              <1>     imul rcx             ; Multiplication
   343 0000064A EBBC                <1>     jmp short .parseProductOperators   ;Search again for * or /
   344                              <1> 
   345                              <1> .processDiv:
   346 0000064C 50                  <1>     push rax
   347 0000064D E830000000          <1>     call .handleZerothLevelSkip   ;Call zeroth level
   348 00000652 59                  <1>     pop rcx
   349 00000653 4891                <1>     xchg rax, rcx
   350 00000655 31D2                <1>     xor edx, edx         ;Clear rdx for rdx:rax
   351 00000657 48F7F9              <1>     idiv rcx             ;Signed division
   352 0000065A E9A9FFFFFF          <1>     jmp .parseProductOperators         ;Search again for * or /
   353                              <1> 
   354                              <1> .exponentFound:
   355                              <1>     ;rax has the number to exponentiate
   356 0000065F 6687DB              <1>     xchg bx, bx
   357 00000662 50                  <1>     push rax
   358 00000663 E81A000000          <1>     call .handleZerothLevelSkip  ;Parse the inner expression
   359 00000668 59                  <1>     pop rcx
   360 00000669 4891                <1>     xchg rcx, rax
   361                              <1>     ;rax has the number to exponentiate, rcx has the number of times to loop imul
   362 0000066B 53                  <1>     push rbx
   363 0000066C 4889C3              <1>     mov rbx, rax    ;Save a copy of rax in rbx
   364 0000066F 48FFC9              <1>     dec rcx
   365                              <1> .imulLoop:
   366 00000672 31D2                <1>     xor edx, edx
   367 00000674 48F7EB              <1>     imul rbx
   368 00000677 48FFC9              <1>     dec rcx
   369 0000067A 75F6                <1>     jnz .imulLoop
   370 0000067C 5B                  <1>     pop rbx
   371 0000067D E986FFFFFF          <1>     jmp .parseProductOperators
   372                              <1> 
   373                              <1> ;Level 0, Brackets, numbers and vars.
   374                              <1> 
   375                              <1> .handleZerothLevelSkip:
   376 00000682 48FFC6              <1>     inc rsi             ;Skip the op symbol
   377                              <1> .handleZerothLevel:
   378 00000685 E8C5FCFFFF          <1>     call spaceSkip
   379 0000068A AC                  <1>     lodsb               ;Read char and adv rsi
   380 0000068B 3C28                <1>     cmp al, '('
   381 0000068D 750F                <1>     jne .varConstCheck
   382 0000068F E80EFDFFFF          <1>     call handleAlgebraicExpression  ;Parse the inner expression
   383 00000694 803E29              <1>     cmp byte [rsi], ')'   
   384 00000697 745C                <1>     je .closeBracket     ;If close bracket, goto skip spaces
   385 00000699 E95F000000          <1>     jmp .error     ;Otherwise, error
   386                              <1>   
   387                              <1> .varConstCheck:
   388 0000069E 3C41                <1>     cmp al, "A"       ;Alphabetical first char?
   389 000006A0 730D                <1>     jae .varOrRNDFound      ;Yes, variable found or rnd function or error
   390 000006A2 48FFCE              <1>     dec rsi            ;Else back one symbol 
   391 000006A5 E8A20B0000          <1>     call decimalToHex  ;to read number into rax
   392 000006AA E9A0FCFFFF          <1>     jmp spaceSkip
   393                              <1> 
   394                              <1> .varOrRNDFound:
   395 000006AF 48FFCE              <1>     dec rsi
   396                              <1> ;Evaluate UNARY operators here in reverse stack order of importance
   397 000006B2 813E4E4F5420        <1>     cmp dword [rsi], "NOT "
   398 000006B8 0F84B2FDFFFF        <1>     je .not
   399 000006BE 48FFC6              <1>     inc rsi
   400 000006C1 3C5A                <1>     cmp al, "Z"  
   401 000006C3 7738                <1>     ja .error   ;Syntax error if char not between A-Z  
   402 000006C5 3C52                <1>     cmp al, "R"
   403 000006C7 7515                <1>     jne .varFound
   404 000006C9 803E4E              <1>     cmp byte [rsi], "N" ;rsi was advanced by 1, check 
   405 000006CC 7510                <1>     jne .varFound
   406 000006CE 807E0144            <1>     cmp byte [rsi+1], "D"
   407 000006D2 750A                <1>     jne .varFound
   408 000006D4 66AD                <1>     lodsw               ;Advance rsi by 3
   409 000006D6 AC                  <1>     lodsb
   410 000006D7 E440                <1>     in al, 40h         ;Read timer counter 0
   411 000006D9 480FB6C0            <1>     movzx rax, al
   412                              <1> .exit:
   413 000006DD C3                  <1>     ret                ;Return
   414                              <1> 
   415                              <1> .varFound:    
   416 000006DE 48FFCE              <1>     dec rsi ;Back a char
   417 000006E1 51                  <1>     push rcx
   418 000006E2 E873FCFFFF          <1>     call getVarNameLength
   419 000006E7 E829000000          <1>     call getNumericVariable ;Get variable value in rax
   420 000006EC 4801CE              <1>     add rsi, rcx    ;Go past the edge of the name
   421 000006EF 59                  <1>     pop rcx
   422 000006F0 E95AFCFFFF          <1>     jmp spaceSkip
   423                              <1> 
   424                              <1> .closeBracket:
   425 000006F5 48FFC6              <1>     inc rsi
   426 000006F8 E952FCFFFF          <1>     jmp spaceSkip
   427                              <1> .error:
   428 000006FD 488D2DFC0E0000      <1>     lea rbp, syntax
   429 00000704 E9CEF9FFFF          <1>     jmp criticalError
   430                              <1> .stack:
   431 00000709 488D2D310F0000      <1>     lea rbp, stkOvflw
   432 00000710 E9C2F9FFFF          <1>     jmp criticalError
   433                              <1> 
   434                              <1> 
   435                              <1> getNumericVariable:
   436                              <1> ;Gets the value stored in a variable into rax 
   437                              <1> ;Input: rsi = Pointer to first char of a variable name
   438                              <1> ;Output: rax = Variable Value
   439                              <1> ;        rsi = Pointer to first char of a variable name
   440 00000715 56                  <1>     push rsi
   441 00000716 51                  <1>     push rcx
   442 00000717 53                  <1>     push rbx
   443 00000718 E83DFCFFFF          <1>     call getVarNameLength   ;Returns the length of the var name in cx
   444 0000071D E8280C0000          <1>     call findVariable       ;Returns a pointer to the variable block in rbx
   445 00000722 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Variable doesnt exist? Pretend it is 0
   446 00000729 740E                <1>     je .noVar
   447 0000072B 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
   448 0000072F 750C                <1>     jne .stringFoundError
   449 00000731 488B4304            <1>     mov rax, qword [rbx + varBlock.qValue]
   450                              <1> .exit:
   451 00000735 5B                  <1>     pop rbx
   452 00000736 59                  <1>     pop rcx
   453 00000737 5E                  <1>     pop rsi
   454 00000738 C3                  <1>     ret
   455                              <1> .noVar:
   456 00000739 31C0                <1>     xor eax, eax
   457 0000073B EBF8                <1>     jmp short .exit
   458                              <1> .stringFoundError:
   459 0000073D 488D2DCB0E0000      <1>     lea rbp, typeError
   460 00000744 E98EF9FFFF          <1>     jmp criticalError
   461                              <1> 
   462                              <1> setNumericVariable:
   463                              <1> ;Sets the value stored in a variable
   464                              <1> ;Input: rsi = Pointer to first char of a variable name
   465                              <1> ;       rax = Variable value
   466                              <1> ;Output: rsi = Pointer to first char of variable name
   467 00000749 56                  <1>     push rsi
   468 0000074A 51                  <1>     push rcx
   469 0000074B 53                  <1>     push rbx
   470                              <1> 
   471 0000074C E809FCFFFF          <1>     call getVarNameLength   ;Returns the length of the var name in cx
   472 00000751 E8F40B0000          <1>     call findVariable       ;Returns a pointer to the variable block in rbx
   473 00000756 4881FBFFFFFFFF      <1>     cmp rbx, -1             ;Variable doesnt exit?
   474 0000075D 740E                <1>     je .makeEditInteger      ;Make one!
   475 0000075F 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
   476 00000763 750F                <1>     jne .stringFoundError
   477 00000765 48894304            <1>     mov qword [rbx + varBlock.qValue], rax  ;Save value
   478                              <1> .exit:
   479 00000769 5B                  <1>     pop rbx
   480 0000076A 59                  <1>     pop rcx
   481 0000076B 5E                  <1>     pop rsi
   482 0000076C C3                  <1>     ret
   483                              <1> .makeEditInteger:
   484 0000076D E8E80C0000          <1>     call makeEditInteger
   485 00000772 EBF5                <1>     jmp short .exit
   486                              <1> .stringFoundError:
   487 00000774 488D2D940E0000      <1>     lea rbp, typeError
   488 0000077B E957F9FFFF          <1>     jmp criticalError
   489                              <1> 
   490                              <1> setStringVariable:
   491                              <1> ;Sets the string pointed to by rdx
   492                              <1> ;Input: rsi = Pointer to first char of a variable name
   493                              <1> ;       rdx = Start of string
   494                              <1> ;Output: rsi = Pointer to first char of variable name
   495                              <1> ;Keeps adding characters until a 0, : or " encountered
   496                              <1> ;Adds a 0 to the end
   497 00000780 51                  <1>     push rcx
   498 00000781 E8D4FBFFFF          <1>     call getVarNameLength   ;Gets the length of the var name in cx
   499 00000786 E81A0D0000          <1>     call makeEditString     ;Returns a ptr to the var block in rbx
   500 0000078B 59                  <1>     pop rcx
   501 0000078C C3                  <1>     ret
   502                              <1> 
   503                              <1> findOtherExpressionsOnLine:
   504                              <1> ;Input: rsi = start of line portion
   505                              <1> ;Output: rsi = points to first char after first ":" found
   506                              <1> ;         al = : if it was found or 00 if not
   507 0000078D AC                  <1>     lodsb
   508 0000078E 3C00                <1>     cmp al, 0   ;Null hit, RIP procedure
   509 00000790 7404                <1>     je .exit
   510 00000792 3C3A                <1>     cmp al, ":" ;Strings can be terminated with a :
   511 00000794 75F7                <1>     jne findOtherExpressionsOnLine
   512                              <1> .exit:
   513 00000796 C3                  <1>     ret
    14                                  %include "COMMANDS.ASM"
    15                              <1> 
    16                              <1> funTbl:
    17                              <1> ;Use PASCAL strings to know how long the comparisons need to be
    18                              <1> ;All function pointers are saved as distances from the head
    19                              <1> ; of the function table
    20                              <1> ;BASIC instructions are space terminated
    21                              <1> ;Interpreter instructions are null terminated
    22 00000797 044C4554            <1>     db 4, "LET"     ;DONE
    23 0000079B 7701                <1>     dw oldSchoolAssignemnt - funTbl
    24                              <1> 
    25 0000079D 054E455700          <1>     db 5, "NEW",0     ;DONE
    26 000007A2 FA01                <1>     dw newProgram - funTbl 
    27                              <1> 
    28 000007A4 07434C45415200      <1>     db 7, "CLEAR",0   ;DONE
    29 000007AB FA01                <1>     dw newProgram - funTbl 
    30                              <1> 
    31 000007AD 064C49535400        <1>     db 6, "LIST",0    ;DONE
    32 000007B3 5E02                <1>     dw listProgram - funTbl 
    33                              <1> 
    34 000007B5 0552554E00          <1>     db 5, "RUN",0     ;DONE
    35 000007BA 9A02                <1>     dw runProgram - funTbl
    36                              <1> 
    37 000007BC 085052494E542420    <1>     db 8, "PRINT$ "    ;Not implemented yet
    38 000007C4 CB02                <1>     dw printStatement - funTbl
    39                              <1> 
    40 000007C6 075052494E5420      <1>     db 7, "PRINT "    ;DONE
    41 000007CD CB02                <1>     dw printStatement - funTbl
    42                              <1> 
    43 000007CF 033F20              <1>     db 3, "? "        ;DONE, alias Print
    44 000007D2 CB02                <1>     dw printStatement - funTbl
    45                              <1> 
    46 000007D4 07494E50555420      <1>     db 7, "INPUT "
    47 000007DB 6A03                <1>     dw getInput - funTbl
    48                              <1> 
    49 000007DD 04494620            <1>     db 4, "IF "      ;DONE, needs to be tested
    50 000007E1 1D0A                <1>     dw handleIf - funTbl
    51                              <1> 
    52 000007E3 06474F544F20        <1>     db 6, "GOTO "    ;DONE
    53 000007E9 CA06                <1>     dw goto - funTbl
    54                              <1> 
    55 000007EB 07474F53554220      <1>     db 7, "GOSUB "
    56 000007F2 DF06                <1>     dw gosub - funTbl
    57                              <1> 
    58 000007F4 0852455455524E20    <1>     db 8, "RETURN "
    59 000007FC 2807                <1>     dw return - funTbl
    60                              <1> 
    61 000007FE 0852455455524E00    <1>     db 8, "RETURN",0
    62 00000806 2807                <1>     dw return - funTbl
    63                              <1> 
    64 00000808 05464F5220          <1>     db 5, "FOR "
    65 0000080D 7607                <1>     dw forLoop - funTbl
    66                              <1> 
    67 0000080F 064E45585400        <1>     db 6, "NEXT",0
    68 00000815 8208                <1>     dw next - funTbl
    69                              <1> 
    70 00000817 064E45585420        <1>     db 6, "NEXT "
    71 0000081D 8208                <1>     dw next - funTbl
    72                              <1> 
    73 0000081F 07                  <1>     db 7
    74                              <1> whileStr:
    75 00000820 5748494C4520        <1>     db "WHILE "
    76 00000826 F608                <1>     dw while - funTbl
    77                              <1> 
    78 00000828 0657454E4420        <1>     db 6, "WEND "
    79 0000082E 6D09                <1>     dw wend - funTbl    
    80 00000830 0657454E4400        <1>     db 6, "WEND",0
    81 00000836 6D09                <1>     dw wend - funTbl   
    82                              <1> thenStr:
    83 00000838 065448454E20        <1>     db 6, "THEN "    ;DONE
    84 0000083E 4401                <1>     dw badCmd - funTbl
    85                              <1> elseStr:
    86 00000840 06454C534520        <1>     db 6, "ELSE "    ;DONE
    87 00000846 4401                <1>     dw badCmd - funTbl
    88                              <1> 
    89 00000848 0853595354454D00    <1>     db 8, "SYSTEM",0  ;DONE
    90 00000850 0904                <1>     dw returnToDOS - funTbl
    91                              <1> 
    92 00000852 05434C5300          <1>     db 5, "CLS",0     ;DONE
    93 00000857 1504                <1>     dw cls - funTbl
    94 00000859 05434C5320          <1>     db 5, "CLS "      ;DONE
    95 0000085E 1504                <1>     dw cls - funTbl
    96                              <1> 
    97 00000860 07444542554700      <1>     db 7, "DEBUG",0   ;DONE
    98 00000867 1A04                <1>     dw dbgr - funTbl
    99                              <1> 
   100 00000869 0654524F4E00        <1>     db 6, "TRON",0    ;DONE
   101 0000086F 5501                <1>     dw tron - funTbl
   102                              <1> 
   103 00000871 0754524F464600      <1>     db 7, "TROFF",0   ;DONE
   104 00000878 5D01                <1>     dw troff - funTbl
   105                              <1> 
   106 0000087A 05454E4420          <1>     db 5, "END "     ;DONE
   107 0000087F 5001                <1>     dw endProg - funTbl
   108 00000881 05454E4400          <1>     db 5, "END",0     ;DONE
   109 00000886 5001                <1>     dw endProg - funTbl
   110                              <1> 
   111 00000888 0653544F5020        <1>     db 6, "STOP "    ;DONE
   112 0000088E 5001                <1>     dw endProg - funTbl
   113 00000890 0653544F5000        <1>     db 6, "STOP",0    ;DONE
   114 00000896 5001                <1>     dw endProg - funTbl
   115                              <1> 
   116 00000898 0845534341504520    <1>     db 8, "ESCAPE "  ;DONE
   117 000008A0 5001                <1>     dw endProg - funTbl
   118 000008A2 0845534341504500    <1>     db 8, "ESCAPE",0  ;DONE
   119 000008AA 5001                <1>     dw endProg - funTbl
   120                              <1> 
   121 000008AC 07455045454B20      <1>     db 7, "EPEEK "
   122 000008B3 6D01                <1>     dw memRead - funTbl
   123                              <1> 
   124 000008B5 0745504F4B4520      <1>     db 7, "EPOKE "
   125 000008BC 6D01                <1>     dw memWrite - funTbl
   126                              <1> 
   127 000008BE 065045454B20        <1>     db 6, "PEEK "
   128 000008C4 6D01                <1>     dw byteRead - funTbl
   129                              <1> 
   130 000008C6 06504F4B4520        <1>     db 6, "POKE "
   131 000008CC 6D01                <1>     dw byteWrite - funTbl
   132                              <1> 
   133 000008CE 0552454D20          <1>     db 5, "REM "
   134 000008D3 6E01                <1>     dw remark - funTbl
   135 000008D5 032720              <1>     db 3, "' "
   136 000008D8 6E01                <1>     dw remark - funTbl
   137                              <1> 
   138 000008DA FF                  <1>     db -1    ;Demarkate the end of the table
   139                              <1> ;End of Table
   140                              <1> badCmd:
   141 000008DB 488D2D1E0D0000      <1>     lea rbp, syntax
   142 000008E2 E8F0F7FFFF          <1>     call criticalError 
   143                              <1> endProg:
   144 000008E7 E96A010000          <1>     jmp runProgram.endProgramPoint
   145                              <1> tron:
   146 000008EC 800D(D90E0000)02    <1>     or byte [stateByte], traceBit   ;Set the traceBit
   147 000008F3 C3                  <1>     ret
   148                              <1> troff:
   149 000008F4 8025(D90E0000)FD    <1>     and byte [stateByte], ~traceBit ;Clear the traceBit
   150 000008FB C3                  <1>     ret
   151                              <1> notWrapper:
   152 000008FC 6687DB              <1>     xchg bx, bx
   153 000008FF E96CFBFFFF          <1>     jmp handleAlgebraicExpression.not
   154                              <1> memRead:
   155                              <1> memWrite:
   156                              <1> byteRead:
   157                              <1> byteWrite:
   158 00000904 C3                  <1>     ret
   159                              <1> remark:
   160                              <1> ;Comment code, keep looping until end of line
   161 00000905 AC                  <1>     lodsb
   162 00000906 84C0                <1>     test al, al 
   163 00000908 75FB                <1>     jnz remark
   164 0000090A 48FFCE              <1>     dec rsi ;When al = 0, rsi points past it, move it back by one
   165 0000090D C3                  <1>     ret
   166                              <1> 
   167                              <1> oldSchoolAssignemnt:
   168                              <1> ;Assign with a LET directive
   169                              <1> ;rsi points to first char AFTER function name
   170 0000090E E83CFAFFFF          <1>     call spaceSkip  ;Goto var assignment as if at start of line
   171                              <1> variableAssignment: ;Assignment without a LET directive
   172                              <1>     ;Establish if the string is a variable assignment or not
   173                              <1>     ;rsi points to start of string
   174 00000913 E842FAFFFF          <1>     call getVarNameLength   ;Get the variable name length
   175 00000918 4889F7              <1>     mov rdi, rsi    ;Save ptr to start of string in rdi
   176 0000091B 4801CE              <1>     add rsi, rcx    ;Go to end of string
   177 0000091E E82CFAFFFF          <1>     call spaceSkip  ;Skip spaces after the end of the var name
   178 00000923 AC                  <1>     lodsb   ;Get the first char after the spaces. This must be a =
   179 00000924 3C3D                <1>     cmp al, "="
   180 00000926 7551                <1>     jne .syntaxError
   181 00000928 4889FE              <1>     mov rsi, rdi    ;Return rsi to the start of the string name
   182 0000092B 4801CE              <1>     add rsi, rcx    ;Go to end of var name
   183 0000092E 48FFCE              <1>     dec rsi
   184 00000931 AC                  <1>     lodsb   ;Get last char into al and inc rsi
   185 00000932 3C24                <1>     cmp al, "$"
   186 00000934 7420                <1>     je .stringAssignment
   187 00000936 E814FAFFFF          <1>     call spaceSkip  ;Skip any spaces
   188 0000093B 48FFC6              <1>     inc rsi         ;Go past the equality sign
   189 0000093E E80CFAFFFF          <1>     call spaceSkip  ;Skip any spaces
   190 00000943 803E22              <1>     cmp byte [rsi], 22h ;Open speech mark
   191 00000946 743D                <1>     je .typError    ;Integers cant have speechmarks
   192 00000948 E855FAFFFF          <1>     call handleAlgebraicExpression  ;Get the result of the expression into rax
   193 0000094D 4889FE              <1>     mov rsi, rdi    ;Return the start of the string into rsi
   194 00000950 E8F4FDFFFF          <1>     call setNumericVariable
   195 00000955 C3                  <1>     ret
   196                              <1> .stringAssignment:
   197                              <1> ;This simply copies the string which is either speech mark, 0 or : terminated
   198                              <1> ;First allocate a string
   199                              <1> ;rsi = First char after the end of the variable name
   200                              <1> ;rdi = start of variable name 
   201                              <1> ;rcx = char count for var name
   202 00000956 E8F4F9FFFF          <1>     call spaceSkip  ;Skip any spaces
   203 0000095B 48FFC6              <1>     inc rsi         ;Go past the equality sign
   204 0000095E E8ECF9FFFF          <1>     call spaceSkip  ;Skip any spaces
   205 00000963 803E22              <1>     cmp byte [rsi], 22h ;Open speechmark check again
   206 00000966 751D                <1>     jne .typError    ;Assigning a number to a string is a type error
   207                              <1>     ;rsi now points to the start of the string to save
   208 00000968 48FFC6              <1>     inc rsi ;Go past the speech mark
   209 0000096B 4889F2              <1>     mov rdx, rsi    ;save start of string data in rdx
   210 0000096E 4889FE              <1>     mov rsi, rdi
   211 00000971 57                  <1>     push rdi
   212 00000972 E809FEFFFF          <1>     call setStringVariable
   213 00000977 5E                  <1>     pop rsi ;Save the start of the assignment in rsi
   214 00000978 C3                  <1>     ret
   215                              <1> 
   216                              <1> .syntaxError:
   217 00000979 488D2D800C0000      <1>     lea rbp, syntax ;Syntax error, keyword a bit confused
   218 00000980 E952F7FFFF          <1>     jmp criticalError
   219                              <1> .typError:
   220 00000985 488D2D830C0000      <1>     lea rbp, typeError
   221 0000098C E946F7FFFF          <1>     jmp criticalError
   222                              <1> 
   223                              <1> 
   224                              <1> newProgram: 
   225                              <1> ;Simply reset the program pointers
   226 00000991 488D05(00000000)    <1>     lea rax, section.programArea.vstart
   227 00000998 488905(C80E0000)    <1>     mov qword [minMemAddr], rax
   228 0000099F 488905(E20E0000)    <1>     mov qword [lastBlock], rax  ;Start writing at this location
   229 000009A6 488905(DA0E0000)    <1>     mov qword [mcbChain], rax   ;Create a mock MCB here
   230                              <1> 
   231 000009AD 4889C2              <1>     mov rdx, rax
   232 000009B0 668B4801            <1>     mov cx, word [rax + memBlock.wBlockSize]
   233 000009B4 4889C7              <1>     mov rdi, rax
   234 000009B7 30C0                <1>     xor al, al
   235 000009B9 F3AA                <1>     rep stosb   ;Sanitise the old first allocation
   236                              <1> 
   237 000009BB C60272              <1>     mov byte [rdx + memBlock.bSignature], lastMemBlock
   238 000009BE 66C742010000        <1>     mov word [rdx + memBlock.wBlockSize], 0 ;Dummy block, no size, gets overwritten
   239 000009C4 31C0                <1>     xor eax, eax
   240 000009C6 8805(D80E0000)      <1>     mov byte [strLen], al
   241 000009CC 488D3D(980D0000)    <1>     lea rdi, inString
   242 000009D3 B900010000          <1>     mov ecx, maxLineLen
   243 000009D8 F3AA                <1>     rep stosb
   244 000009DA C605(F40E0000)0A    <1>     mov byte [currentLine], 10  ;Default to line 10
   245 000009E1 31C0                <1>     xor eax, eax,
   246 000009E3 48FFC8              <1>     dec rax ;rax = -1
   247 000009E6 488905(EA0E0000)    <1>     mov qword [firstLinPtr], rax ;No program in memory
   248 000009ED 668905(F20E0000)    <1>     mov word [firstLinNum], ax
   249 000009F4 C3                  <1>     ret
   250                              <1> listProgram:
   251                              <1> ;Go line by line and echo the program lines, inserting a crlf after each
   252                              <1> ;First print the line number, then add a space
   253 000009F5 488B1D(EA0E0000)    <1>     mov rbx, qword [firstLinPtr]    ;Get a pointer to the first program line
   254                              <1> .printLines:
   255 000009FC 488D2DB20B0000      <1>     lea rbp, crlf           ;New line
   256 00000A03 E8A6F7FFFF          <1>     call ttyOutString
   257 00000A08 4881FBFFFFFFFF      <1>     cmp rbx, -1
   258 00000A0F 741F                <1>     je .exit
   259 00000A11 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]
   260 00000A15 E85A080000          <1>     call printdecimalword
   261 00000A1A B020                <1>     mov al, " "
   262 00000A1C E888F7FFFF          <1>     call ttyOutChar ;Print a space
   263 00000A21 488D6B0E            <1>     lea rbp, qword [rbx + progLineBlock.sLine]  ;Null terminated string
   264 00000A25 E884F7FFFF          <1>     call ttyOutString
   265 00000A2A 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr]   ;Walk list of program lines
   266 00000A2E EBCC                <1>     jmp short .printLines
   267                              <1> .exit:
   268 00000A30 C3                  <1>     ret
   269                              <1> runProgram:
   270                              <1>     ;Runs the machine in indirect mode
   271 00000A31 800D(D90E0000)04    <1>     or byte [stateByte], indirectBit    ;Entering indirect mode
   272                              <1>     ;rsi must point to the first line
   273 00000A38 668B15(F20E0000)    <1>     mov dx, word [firstLinNum]
   274 00000A3F 668915(F40E0000)    <1>     mov word [currentLine], dx ;Reset the current line back to the start
   275 00000A46 488B1D(EA0E0000)    <1>     mov rbx, qword [firstLinPtr]
   276 00000A4D 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine]
   277 00000A51 E8E0F7FFFF          <1>     call runLine
   278                              <1> .endProgramPoint:
   279 00000A56 8025(D90E0000)FB    <1>     and byte [stateByte], ~indirectBit  ;Exit indirect mode
   280 00000A5D E9DAF5FFFF          <1>     jmp mainLoop    ;Resets the stack if exit mid loop to avoid stkoverflow
   281                              <1> 
   282                              <1> printStatement:
   283                              <1> ;Strings must be "" delimited or a string variable must be used
   284                              <1> ;rsi points to first char AFTER function name
   285                              <1> .printStart:
   286 00000A62 E8E8F8FFFF          <1>     call spaceSkip  ;move rsi to the start of the expression
   287 00000A67 AC                  <1>     lodsb
   288                              <1> 
   289 00000A68 84C0                <1>     test al, al     ;Is this a null string?
   290 00000A6A 746B                <1>     jz .psvexit
   291 00000A6C 3C22                <1>     cmp al, 022h    ;22h = ASCII Speechmarks
   292 00000A6E 7449                <1>     je .stringPrint
   293                              <1>     ;Here we check if the first char is ASCII, if it is, check if its a string var
   294 00000A70 3C41                <1>     cmp al, "A"
   295 00000A72 7204                <1>     jb .printExpr
   296 00000A74 3C5A                <1>     cmp al, "Z"
   297 00000A76 7214                <1>     jb .printStringVar
   298                              <1> .printExpr:
   299 00000A78 48FFCE              <1>     dec rsi ;Return to the start of the string
   300                              <1> .printExpr1:    ;Return without dec rsi
   301 00000A7B E822F9FFFF          <1>     call handleAlgebraicExpression ;Gets value of a var and/or algebraic operation
   302 00000A80 E8EF070000          <1>     call printdecimalword
   303 00000A85 E8C5F8FFFF          <1>     call spaceSkip
   304 00000A8A EB2D                <1>     jmp short .stringPrint
   305                              <1> .printStringVar:
   306                              <1>     ;Check if it is a string var or a unary function
   307 00000A8C 48FFCE              <1>     dec rsi
   308 00000A8F E8C6F8FFFF          <1>     call getVarNameLength
   309 00000A94 E8EEF8FFFF          <1>     call getVarType
   310 00000A99 81FB01000000        <1>     cmp ebx, strEquate
   311 00000A9F 75DA                <1>     jne .printExpr1  ;rsi points to the same point as initially
   312 00000AA1 E8A4080000          <1>     call findVariable   ;ecx has string length, get block ptr in rbx
   313 00000AA6 55                  <1>     push rbp
   314 00000AA7 488D6B04            <1>     lea rbp, qword [rbx + stringBlock.string]
   315 00000AAB E8FEF6FFFF          <1>     call ttyOutString
   316 00000AB0 5D                  <1>     pop rbp
   317 00000AB1 4801CE              <1>     add rsi, rcx    ;Go past variable
   318 00000AB4 E896F8FFFF          <1>     call spaceSkip
   319                              <1> .stringPrint:
   320 00000AB9 AC                  <1>     lodsb
   321 00000ABA 3C00                <1>     cmp al, 0
   322 00000ABC 7419                <1>     je .psvexit
   323 00000ABE 3C3A                <1>     cmp al, ":"
   324 00000AC0 7412                <1>     je .psvexitColon
   325 00000AC2 3C22                <1>     cmp al, 022h    ;Close Speech marks, check next char
   326 00000AC4 741E                <1>     je .closespeechmarks
   327 00000AC6 3C3B                <1>     cmp al, ";"     ;Semicolon means print next section on same line
   328 00000AC8 742D                <1>     je .continue
   329 00000ACA E8DAF6FFFF          <1>     call ttyOutChar
   330 00000ACF EBE8                <1>     jmp short .stringPrint
   331                              <1> .openSpeechMark:
   332 00000AD1 48FFC6              <1>     inc rsi ;Go back a char
   333                              <1> .psvexitColon:
   334 00000AD4 48FFCE              <1>     dec rsi ;Go back a char
   335                              <1> .psvexit:
   336 00000AD7 488D2DD70A0000      <1>     lea rbp, crlf
   337 00000ADE E8CBF6FFFF          <1>     call ttyOutString
   338 00000AE3 C3                  <1>     ret
   339                              <1> .closespeechmarks:
   340 00000AE4 E866F8FFFF          <1>     call spaceSkip
   341 00000AE9 AC                  <1>     lodsb
   342 00000AEA 3C3B                <1>     cmp al, ";" ;only exception to exiting if next non space char is a semicolon
   343 00000AEC 0F8470FFFFFF        <1>     je .printStart
   344 00000AF2 48FFCE              <1>     dec rsi ;Go back a step
   345 00000AF5 EBE0                <1>     jmp short .psvexit
   346                              <1> .continue:
   347 00000AF7 E853F8FFFF          <1>     call spaceSkip
   348 00000AFC E961FFFFFF          <1>     jmp .printStart
   349                              <1> getInput:
   350                              <1> ;Take a string as a prompt
   351                              <1> ;rdi points just past the end of the command line
   352                              <1> ;rsi points to first char AFTER function name
   353                              <1> ;Input prompt strings must be speech mark delimited on both sides!
   354 00000B01 E849F8FFFF          <1>     call spaceSkip
   355                              <1>     ;Now check to see if the user has specified a custom prompt
   356 00000B06 AC                  <1>     lodsb   ;Get first symbol and go past it
   357 00000B07 3C22                <1>     cmp al, 22h ;Speechmark?
   358 00000B09 7535                <1>     jne .defaultPrompt ;If no speechmark, print default prompt
   359                              <1> .customPrompt:
   360 00000B0B 4889F7              <1>     mov rdi, rsi    ;Save start of string in rdi
   361                              <1> .cp0:
   362 00000B0E AC                  <1>     lodsb           ;Now search for end of string speech marks or null terminator
   363 00000B0F 3C22                <1>     cmp al, 22h     ;Is al a speech mark?
   364 00000B11 7410                <1>     je .printCustomPrompt
   365 00000B13 84C0                <1>     test al, al     ;Is al null?
   366 00000B15 75F7                <1>     jnz .cp0        ;No, keep searching for terminator
   367                              <1> .error:
   368 00000B17 488D2DE20A0000      <1>     lea rbp, syntax
   369 00000B1E E9B4F5FFFF          <1>     jmp criticalError
   370                              <1> .printCustomPrompt:
   371 00000B23 4889FE              <1>     mov rsi, rdi    ;rsi points to the first char of the string
   372                              <1> .pcp0:
   373 00000B26 AC                  <1>     lodsb
   374 00000B27 3C22                <1>     cmp al, 22h     ;Speechmark?
   375 00000B29 7407                <1>     je .stopPrompt
   376 00000B2B E879F6FFFF          <1>     call ttyOutChar
   377 00000B30 EBF4                <1>     jmp short .pcp0
   378                              <1> .stopPrompt:
   379 00000B32 E818F8FFFF          <1>     call spaceSkip  ;Skip spaces
   380 00000B37 AC                  <1>     lodsb   ;Get first non space char after closing speechmark
   381 00000B38 3C3B                <1>     cmp al, ";" ;Semicolon means no default prompt
   382 00000B3A 740E                <1>     je .noDefaultPrompt
   383 00000B3C 3C2C                <1>     cmp al, "," ;Comma also means no default prompt
   384 00000B3E 740A                <1>     je .noDefaultPrompt
   385                              <1> .defaultPrompt:
   386 00000B40 48FFCE              <1>     dec rsi
   387 00000B43 B03F                <1>     mov al, "?"
   388 00000B45 E85FF6FFFF          <1>     call ttyOutChar
   389                              <1> .noDefaultPrompt:
   390 00000B4A B020                <1>     mov al, " " ;space
   391 00000B4C E858F6FFFF          <1>     call ttyOutChar
   392 00000B51 E8F9F7FFFF          <1>     call spaceSkip  ;Skip spaces after default supressor to get to var name
   393 00000B56 E8FFF7FFFF          <1>     call getVarNameLength   ;Get var name length in ecx
   394 00000B5B 488D3D(980E0000)    <1>     lea rdi, digitString    ;Buffer has 48 chars, string names are max 40
   395 00000B62 E8AB090000          <1>     call strcpy     ;rsi points to var name
   396 00000B67 57                  <1>     push rdi    ;rdi points to first char of variable
   397 00000B68 51                  <1>     push rcx
   398 00000B69 E8A3F5FFFF          <1>     call getLineInput   ;Get input from the user in inString, null terminated
   399                              <1>     ;This will sanitise in direct mode meaning input cannot have any more statements
   400                              <1>     ; after it.
   401 00000B6E 59                  <1>     pop rcx
   402 00000B6F 5F                  <1>     pop rdi 
   403 00000B70 4889FE              <1>     mov rsi, rdi    ;Save the start of the var name in rsi
   404 00000B73 4801CE              <1>     add rsi, rcx    ;Go to end of var
   405 00000B76 48FFCE              <1>     dec rsi
   406 00000B79 AC                  <1>     lodsb   ;Are we a string variable?
   407 00000B7A 488D35(980D0000)    <1>     lea rsi, inString   ;Move rsi to start of user input
   408 00000B81 3C24                <1>     cmp al, "$"
   409 00000B83 740F                <1>     je .handleString
   410                              <1> .handleNumeric:
   411 00000B85 E818F8FFFF          <1>     call handleAlgebraicExpression  ;Get the result of the expression into rax
   412 00000B8A 4889FE              <1>     mov rsi, rdi    ;Return the start of the string into rsi
   413 00000B8D E8B7FBFFFF          <1>     call setNumericVariable
   414 00000B92 EB0B                <1>     jmp short .commonExit
   415                              <1> .handleString:
   416                              <1>     ;IF a string variable, come here
   417                              <1>     ;rdi has the start of the variable name
   418                              <1> 
   419                              <1>     ;rdx must point to the start of the string
   420                              <1>     ;rsi must point to the start of the variable name
   421 00000B94 4889F2              <1>     mov rdx, rsi
   422 00000B97 4889FE              <1>     mov rsi, rdi    ;Return start of user name in rsi
   423 00000B9A E8E1FBFFFF          <1>     call setStringVariable
   424                              <1> .commonExit:
   425 00000B9F C3                  <1>     ret
   426                              <1> 
   427                              <1> ;==========================================================:
   428                              <1> ;==========================================================:
   429                              <1> ;==========================================================:
   430                              <1> ;          Functions Related to Program Management         :
   431                              <1> ;==========================================================:
   432                              <1> ;==========================================================:
   433                              <1> ;==========================================================:
   434                              <1> returnToDOS:
   435 00000BA0 B007                <1>     mov al, 07h
   436 00000BA2 E802F6FFFF          <1>     call ttyOutChar
   437 00000BA7 E954F4FFFF          <1>     jmp start   ;Reset the interpreter
   438                              <1> cls:
   439 00000BAC E90AF6FFFF          <1>     jmp ttyClear
   440                              <1> dbgr:
   441                              <1>     ;Hook int 40h to main prog EP to allow returning 
   442                              <1> ;First call to get default BIOS segement selector and attribute word
   443 00000BB1 B340                <1>     mov bl, 40h
   444 00000BB3 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   445 00000BB8 CD35                <1>     int 35h
   446 00000BBA 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   447 00000BBC B940000000          <1>     mov ecx, 40h    ;Interrupt number
   448                              <1> ;dx preserves the attribute word
   449 00000BC1 488D1D09000000      <1>     lea rbx, .farReturn  ;Pointer passed in
   450 00000BC8 B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   451 00000BCD CD35                <1>     int 35h
   452 00000BCF CD38                <1>     int 38h ;Call debugger
   453                              <1> .farReturn:
   454                              <1>     ;Reconnect CTRL+BREAK handler
   455 00000BD1 48BC-               <1>     mov rsp, stacktop   ;Immediately reset stack
   455 00000BD3 [900D000000000000]  <1>
   456 00000BDB 488D3D06F5FFFF      <1>     lea rdi, ctrlBreakHandler
   457 00000BE2 B03B                <1>     mov al, 3Bh
   458 00000BE4 E808F5FFFF          <1>     call setHandler
   459                              <1>     
   460 00000BE9 488D2DC5090000      <1>     lea rbp, crlf
   461 00000BF0 E8B9F5FFFF          <1>     call ttyOutString
   462 00000BF5 E942F4FFFF          <1>     jmp mainLoop
    15                                  %include "CTRLFLOW.ASM"
    16                              <1> 
    17                              <1> ;Handles all the specific functions related to control flow such as scanning 
    18                              <1> ; lines for WEND, RETURN, NEXT
    19                              <1> retScan:
    20                              <1> ;Gets the current line address and starts searching program from current prog line
    21                              <1> ; for a return
    22 00000BFA 56                  <1>     push rsi
    23 00000BFB 668B15(F40E0000)    <1>     mov dx, word [currentLine]  ;pre-load dx with the current line number
    24 00000C02 E8B3070000          <1>     call searchForProgramLine   ;Get program block pointer into rbx
    25 00000C07 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If for some reason line doesnt exist?
    26 00000C0E 0F8493000000        <1>     je .error   ;Unknown Error
    27                              <1> ;Now pack for the first portion/line after the GOSUB
    28                              <1> ;rsi points just after the GOSUB itself
    29 00000C14 56                  <1>     push rsi    ;Save the first point after the WHILE itself
    30 00000C15 E873FBFFFF          <1>     call findOtherExpressionsOnLine     ;Get the first : or ASCII NUL
    31 00000C1A 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]  ;Get the line number
    32 00000C1E 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine]  ;Load ptr to start of string in rsi
    33 00000C22 4829CE              <1>     sub rsi, rcx    ;Compute difference from start of string
    34 00000C25 89F1                <1>     mov ecx, esi    ;Should just be low byte of si so cl
    35 00000C27 81E1FF000000        <1>     and ecx, 0FFh   ;Save only bottom byte just in case of garbage
    36 00000C2D C1E110              <1>     shl ecx, 2*8    ;Move to the third byte in the dword
    37 00000C30 09C8                <1>     or eax, ecx     ;Add byte three to eax
    38 00000C32 89C2                <1>     mov edx, eax    ;Save in edx
    39 00000C34 48C1E228            <1>     shl rdx, 5*8    ;Shift three bytes to top of qword
    40 00000C38 5E                  <1>     pop rsi
    41                              <1> .initialSearch:
    42                              <1>     ;First look for a ASCII NUL or RETURN
    43 00000C39 803E00              <1>     cmp byte [rsi], 0
    44 00000C3C 7415                <1>     je .gotoNextLine
    45 00000C3E 813E52455455        <1>     cmp dword [rsi], "RETU"
    46 00000C44 7508                <1>     jne .notCandidate
    47 00000C46 66817E04524E        <1>     cmp word [rsi + 4], "RN"
    48 00000C4C 7418                <1>     je .wordFound
    49                              <1> .notCandidate:
    50 00000C4E 48FFC6              <1>     inc rsi ;Now search up until the end of the line for a RETURN
    51 00000C51 EBE6                <1>     jmp short .initialSearch
    52                              <1> .gotoNextLine:
    53 00000C53 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Get pointer to next program line
    54 00000C57 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Now, when walking if it gives a value of -1, no NEXT found
    55 00000C5E 7431                <1>     je .noRet
    56 00000C60 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Load pointer to string rsi
    57 00000C64 EBD3                <1>     jmp short .initialSearch
    58                              <1> .wordFound:
    59                              <1>     ;Here, RETURN found! Huzzah! Now pack edx correctly
    60                              <1>     ;Add 055AA55h in bytes 4:2
    61 00000C66 48B8000055AA550000- <1>     mov rax, 055AA550000h
    61 00000C6F 00                  <1>
    62 00000C70 4809C2              <1>     or rdx, rax
    63                              <1>     ;Compute checksum now
    64 00000C73 31C0                <1>     xor eax, eax
    65 00000C75 B0A5                <1>     mov al, GOSUBsig 
    66 00000C77 6689C2              <1>     mov dx, ax  ;Zero checksum byte
    67 00000C7A 31C0                <1>     xor eax, eax
    68 00000C7C B908000000          <1>     mov ecx, 8  ;8 times
    69                              <1> .csumLoop:
    70                              <1>     ;Spin rdx 8 times adding each byte to al
    71 00000C81 00D0                <1>     add al, dl
    72 00000C83 48C1C208            <1>     rol rdx, 8  ;Rotate left by 8 bits
    73 00000C87 FFC9                <1>     dec ecx
    74 00000C89 75F6                <1>     jnz .csumLoop
    75 00000C8B F6D8                <1>     neg al ;Get twos compliment of sum (FFh - al)
    76 00000C8D 88C6                <1>     mov dh, al  ;Save in checksum byte
    77                              <1> .exit:
    78 00000C8F 5E                  <1>     pop rsi
    79 00000C90 C3                  <1>     ret
    80                              <1> .noRet:
    81 00000C91 488D2D0A0A0000      <1>     lea rbp, noReturn
    82 00000C98 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
    82 00000CA1 FF                  <1>
    83 00000CA2 E9E8FFFFFF          <1>     jmp .exit
    84                              <1> .error:
    85 00000CA7 488D2D0B0A0000      <1>     lea rbp, uknowner
    86 00000CAE 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
    86 00000CB7 FF                  <1>
    87 00000CB8 E9D2FFFFFF          <1>     jmp .exit
    88                              <1> 
    89                              <1> wendScan:
    90                              <1> ; Gets the current line address and starts searching program from the current line
    91                              <1> ; for a WEND
    92                              <1> ; Puts the packed specialQword into rdx if a WEND is found
    93                              <1> ; Returns rdx = -1 if an error occured with rbp pointing to the error string
    94 00000CBD 56                  <1>     push rsi
    95 00000CBE 668B15(F40E0000)    <1>     mov dx, word [currentLine]  ;pre-load dx with the current line number
    96 00000CC5 E8F0060000          <1>     call searchForProgramLine   ;Get program block pointer into rbx
    97 00000CCA 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If for some reason line doesnt exist?
    98 00000CD1 0F84A2000000        <1>     je .error   ;Unknown Error
    99                              <1> ;Now pack for the first portion/line after the for loop
   100                              <1> ;rsi points just after the FOR itself
   101 00000CD7 56                  <1>     push rsi    ;Save the first point after the WHILE itself
   102 00000CD8 E8B0FAFFFF          <1>     call findOtherExpressionsOnLine     ;Get the first : or ASCII NUL
   103 00000CDD 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]  ;Get the line number
   104 00000CE1 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine]  ;Load ptr to start of string in rsi
   105 00000CE5 4829CE              <1>     sub rsi, rcx    ;Compute difference from start of string
   106 00000CE8 89F1                <1>     mov ecx, esi    ;Should just be low byte of si so cl
   107 00000CEA 81E1FF000000        <1>     and ecx, 0FFh   ;Save only bottom byte just in case of garbage
   108 00000CF0 C1E110              <1>     shl ecx, 2*8    ;Move to the third byte in the dword
   109 00000CF3 09C8                <1>     or eax, ecx     ;Add byte three to eax
   110 00000CF5 89C2                <1>     mov edx, eax    ;Save in edx
   111 00000CF7 48C1E228            <1>     shl rdx, 5*8    ;Shift three bytes to top of qword
   112 00000CFB 5E                  <1>     pop rsi
   113                              <1> .initialSearch:
   114                              <1>     ;First look for a : or a ASCII NUL to leave the WHILE part of the line
   115 00000CFC 803E00              <1>     cmp byte [rsi], 0
   116 00000CFF 740D                <1>     je .gotoNextLine
   117 00000D01 813E57454E44        <1>     cmp dword [rsi], "WEND"
   118 00000D07 7418                <1>     je .wordFound
   119 00000D09 48FFC6              <1>     inc rsi ;Now search up until the end of the line for a WEND
   120                              <1>     ;"WEND" found here!
   121 00000D0C EBEE                <1>     jmp short .initialSearch
   122                              <1> .gotoNextLine:
   123 00000D0E 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Get pointer to next program line
   124 00000D12 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Now, when walking if it gives a value of -1, no NEXT found
   125 00000D19 7448                <1>     je .noWend
   126 00000D1B 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Load pointer to string rsi
   127 00000D1F EBDB                <1>     jmp short .initialSearch
   128                              <1> .wordFound:
   129                              <1>     ;Here, word found! Huzzah! Now pack edx correctly
   130                              <1>     ;rsi points to the N in "WEND "
   131 00000D21 E867FAFFFF          <1>     call findOtherExpressionsOnLine 
   132                              <1>     ;make rsi point to next expression on the line or the end of the line
   133 00000D26 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]  ;Get the line number
   134 00000D2A 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine]  ;Load ptr to start of string in rsi
   135 00000D2E 4829CE              <1>     sub rsi, rcx    ;Compute difference from start of string
   136 00000D31 89F1                <1>     mov ecx, esi    ;Should just be low byte of si so cl
   137 00000D33 81E1FF000000        <1>     and ecx, 0FFh   ;Save only bottom byte just in case of garbage
   138 00000D39 C1E110              <1>     shl ecx, 2*8    ;Move to the third byte in the dword
   139 00000D3C 09C8                <1>     or eax, ecx     ;Add byte three to eax
   140 00000D3E 48C1E010            <1>     shl rax, 8*2    ;Shift three bytes to byte 4 of qword
   141 00000D42 4809C2              <1>     or rdx, rax     ;Add bytes [4:2] to rdx
   142                              <1>     ;Compute checksum now
   143 00000D45 31C0                <1>     xor eax, eax
   144 00000D47 B055                <1>     mov al, WHILEsig 
   145 00000D49 6689C2              <1>     mov dx, ax  ;Zero checksum byte
   146 00000D4C 31C0                <1>     xor eax, eax
   147 00000D4E B908000000          <1>     mov ecx, 8  ;8 times
   148                              <1> .csumLoop:
   149                              <1>     ;Spin rdx 8 times adding each byte to al
   150 00000D53 00D0                <1>     add al, dl
   151 00000D55 48C1C208            <1>     rol rdx, 8  ;Rotate left by 8 bits
   152 00000D59 FFC9                <1>     dec ecx
   153 00000D5B 75F6                <1>     jnz .csumLoop
   154 00000D5D F6D8                <1>     neg al ;Get twos compliment of sum (FFh - al)
   155 00000D5F 88C6                <1>     mov dh, al  ;Save in checksum byte
   156                              <1> .exit:
   157 00000D61 5E                  <1>     pop rsi
   158 00000D62 C3                  <1>     ret
   159                              <1> .noWend:
   160 00000D63 488D2DE8080000      <1>     lea rbp, noWend
   161 00000D6A 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
   161 00000D73 FF                  <1>
   162 00000D74 E9E8FFFFFF          <1>     jmp .exit
   163                              <1> .error:
   164 00000D79 488D2D39090000      <1>     lea rbp, uknowner
   165 00000D80 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
   165 00000D89 FF                  <1>
   166 00000D8A E9D2FFFFFF          <1>     jmp .exit
   167                              <1> nextScan:
   168                              <1> ; Gets the current line address and starts searching program from the current line
   169                              <1> ; for a NEXT
   170                              <1> ; Puts the packed specialQword into rdx if a NEXT is found
   171                              <1> ; Returns rdx = -1 if an error occured with rbp pointing to the error string
   172 00000D8F 56                  <1>     push rsi
   173 00000D90 668B15(F40E0000)    <1>     mov dx, word [currentLine]  ;pre-load dx with the current line number
   174 00000D97 E81E060000          <1>     call searchForProgramLine   ;Get program block pointer into rbx
   175 00000D9C 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If for some reason line doesnt exist?
   176 00000DA3 0F84A2000000        <1>     je .error   ;Unknown Error
   177                              <1> ;Now pack for the first portion/line after the for loop
   178                              <1> ;rsi points just after the FOR itself
   179 00000DA9 56                  <1>     push rsi    ;Save the first point after the FOR itself
   180 00000DAA E8DEF9FFFF          <1>     call findOtherExpressionsOnLine     ;Get the first : or ASCII NUL
   181 00000DAF 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]  ;Get the line number
   182 00000DB3 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine]  ;Load ptr to start of string in rsi
   183 00000DB7 4829CE              <1>     sub rsi, rcx    ;Compute difference from start of string
   184 00000DBA 89F1                <1>     mov ecx, esi    ;Should just be low byte of si so cl
   185 00000DBC 81E1FF000000        <1>     and ecx, 0FFh   ;Save only bottom byte just in case of garbage
   186 00000DC2 C1E110              <1>     shl ecx, 2*8    ;Move to the third byte in the dword
   187 00000DC5 09C8                <1>     or eax, ecx     ;Add byte three to eax
   188 00000DC7 89C2                <1>     mov edx, eax    ;Save in edx
   189 00000DC9 48C1E228            <1>     shl rdx, 5*8    ;Shift three bytes to top of qword
   190 00000DCD 5E                  <1>     pop rsi
   191                              <1> .initialSearch:
   192                              <1>     ;First look for a : or a ASCII NUL to leave the FOR part of the line
   193 00000DCE 803E00              <1>     cmp byte [rsi], 0
   194 00000DD1 740D                <1>     je .gotoNextLine
   195 00000DD3 813E4E455854        <1>     cmp dword [rsi], "NEXT"
   196 00000DD9 7418                <1>     je .wordFound
   197 00000DDB 48FFC6              <1>     inc rsi ;Now search up until the end of the line for a NEXT
   198                              <1>     ;"NEXT" found here!
   199 00000DDE EBEE                <1>     jmp short .initialSearch
   200                              <1> .gotoNextLine:
   201 00000DE0 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Get pointer to next program line
   202 00000DE4 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Now, when walking if it gives a value of -1, no NEXT found
   203 00000DEB 7448                <1>     je .noNext
   204 00000DED 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Load pointer to string rsi
   205 00000DF1 EBDB                <1>     jmp short .initialSearch
   206                              <1> .wordFound:
   207                              <1>     ;Here, word found! Huzzah! Now pack edx correctly
   208                              <1>     ;rsi points to the N in "NEXT "
   209 00000DF3 E895F9FFFF          <1>     call findOtherExpressionsOnLine 
   210                              <1>     ;make rsi point to next expression on the line or the end of the line
   211 00000DF8 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]  ;Get the line number
   212 00000DFC 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine]  ;Load ptr to start of string in rsi
   213 00000E00 4829CE              <1>     sub rsi, rcx    ;Compute difference from start of string
   214 00000E03 89F1                <1>     mov ecx, esi    ;Should just be low byte of si so cl
   215 00000E05 81E1FF000000        <1>     and ecx, 0FFh   ;Save only bottom byte just in case of garbage
   216 00000E0B C1E110              <1>     shl ecx, 2*8    ;Move to the third byte in the dword
   217 00000E0E 09C8                <1>     or eax, ecx     ;Add byte three to eax
   218 00000E10 48C1E010            <1>     shl rax, 8*2    ;Shift three bytes to byte 4 of qword
   219 00000E14 4809C2              <1>     or rdx, rax     ;Add bytes [4:2] to rdx
   220                              <1>     ;Compute checksum now
   221 00000E17 31C0                <1>     xor eax, eax
   222 00000E19 B05A                <1>     mov al, FORsig 
   223 00000E1B 6689C2              <1>     mov dx, ax  ;Zero checksum byte
   224 00000E1E 31C0                <1>     xor eax, eax
   225 00000E20 B908000000          <1>     mov ecx, 8  ;8 times
   226                              <1> .csumLoop:
   227                              <1>     ;Spin rdx 8 times adding each byte to al
   228 00000E25 00D0                <1>     add al, dl
   229 00000E27 48C1C208            <1>     rol rdx, 8  ;Rotate left by 8 bits
   230 00000E2B FFC9                <1>     dec ecx
   231 00000E2D 75F6                <1>     jnz .csumLoop
   232 00000E2F F6D8                <1>     neg al ;Get twos compliment of sum (FFh - al)
   233 00000E31 88C6                <1>     mov dh, al  ;Save in checksum byte
   234                              <1> .exit:
   235 00000E33 5E                  <1>     pop rsi
   236 00000E34 C3                  <1>     ret
   237                              <1> .noNext:
   238 00000E35 488D2D53080000      <1>     lea rbp, noNext
   239 00000E3C 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
   239 00000E45 FF                  <1>
   240 00000E46 E9E8FFFFFF          <1>     jmp .exit
   241                              <1> .error:
   242 00000E4B 488D2D67080000      <1>     lea rbp, uknowner
   243 00000E52 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
   243 00000E5B FF                  <1>
   244 00000E5C E9D2FFFFFF          <1>     jmp .exit
   245                              <1> ;=======================================
   246                              <1> ;  ACTUAL CONTROL FLOW FUNCTIONS HERE  :
   247                              <1> ;=======================================
   248                              <1> ;All below functions return the line number in dx and the offset into the line
   249                              <1> ; to start reading at in byte three of edx
   250                              <1> goto:
   251                              <1> ;GOTO, works by replacing the address after the return address on the stack
   252                              <1> ;rsi points to first char AFTER function name
   253 00000E61 E8E9F4FFFF          <1>     call spaceSkip  ;Skip all preceeding spaces
   254 00000E66 E837F5FFFF          <1>     call handleAlgebraicExpression  ;Turn the expression into a number in ax
   255 00000E6B 0FB7D0              <1>     movzx edx, ax   ;Line number into dx, start at beginning of line
   256 00000E6E 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   257 00000E75 C3                  <1>     ret
   258                              <1> 
   259                              <1> gosub:
   260 00000E76 E87FFDFFFF          <1>     call retScan
   261 00000E7B 4881FAFFFFFFFF      <1>     cmp rdx, -1
   262 00000E82 7436                <1>     je .error
   263 00000E84 B901000000          <1>     mov ecx, gosubStruct_size/8
   264                              <1>     makeSpaceOnStack rcx  ;Make four qwords of space on the stack
    96                              <2> 
    97                              <2> 
    98                              <2> 
    99 00000E89 58                  <2>  pop rax
   100 00000E8A 48C1E103            <2>  shl %1, 3
   101 00000E8E 4829CC              <2>  sub rsp, %1
   102 00000E91 488D2D(50000000)    <2>  lea rbp, stack
   103 00000E98 4839EC              <2>  cmp rsp, rbp
   104 00000E9B 770C                <2>  ja .macroNotOverflow
   105 00000E9D 488D2D9D070000      <2>  lea rbp, stkOvflw
   106 00000EA4 E92EF2FFFF          <2>  jmp criticalError
   107                              <2> .macroNotOverflow:
   108                              <2> 
   109                              <2> 
   110 00000EA9 50                  <2>  push rax
   265 00000EAA 4889E5              <1>     mov rbp, rsp
   266 00000EAD 4881C508000000      <1>     add rbp, 8  ;Make rbp point to the base of the new struc
   267 00000EB4 48895500            <1>     mov qword [rbp + forStruct.specQword], rdx  ;Move rdx into its place on the stack
   268                              <1>     ;rsi points just past the GOSUB
   269 00000EB8 EBA7                <1>     jmp short goto ;Now behave like GOTO
   270                              <1> .error:
   271 00000EBA E918F2FFFF          <1>     jmp criticalError
   272                              <1> 
   273                              <1> return:
   274                              <1> ;First verify the GOSUB struc is on the stack
   275 00000EBF 4889E5              <1>     mov rbp, rsp    ;Dont need to save rbp so trash it
   276 00000EC2 4881C508000000      <1>     add rbp, 8  ;Make it point to the base of the struc past the return address
   277                              <1>     ;Read the qword on stack, verify it is a GOSUBstruc and passes checksum test
   278 00000EC9 488B5500            <1>     mov rdx, qword [rbp + gosubStruct.specQword]
   279 00000ECD 80FAA5              <1>     cmp dl, GOSUBsig
   280 00000ED0 752F                <1>     jne .noReturn
   281                              <1>     ;Now compute checksum to verify its not an accident
   282 00000ED2 30C0                <1>     xor al, al
   283 00000ED4 B908000000          <1>     mov ecx, 8
   284                              <1> .checksumTest:
   285 00000ED9 00D0                <1>     add al, dl
   286 00000EDB 48C1CA08            <1>     ror rdx, 8
   287 00000EDF FFC9                <1>     dec ecx
   288 00000EE1 75F6                <1>     jnz .checksumTest
   289 00000EE3 84C0                <1>     test al, al     ;This should be 0
   290 00000EE5 751A                <1>     jnz .noReturn
   291                              <1>  ;Now we are truly in a RETURN
   292 00000EE7 48C1EA28            <1>     shr rdx, 5*8    ;Bring return information down to the lower three bytes
   293                              <1>     ;Clean the struc from the stack
   294 00000EEB B901000000          <1>     mov ecx, gosubStruct_size/8
   295                              <1>     cleanSpaceOnStack rcx
   114                              <2> 
   115 00000EF0 58                  <2>  pop rax
   116 00000EF1 48C1E103            <2>  shl %1, 3
   117 00000EF5 4801CC              <2>  add rsp, %1
   118 00000EF8 50                  <2>  push rax
   296 00000EF9 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   297 00000F00 C3                  <1>     ret
   298                              <1> .noReturn:
   299 00000F01 488D2D9A070000      <1>     lea rbp, noReturn
   300 00000F08 E9CAF1FFFF          <1>     jmp criticalError
   301                              <1> forLoop:
   302                              <1> ;This saves the following struc on the stack
   303                              <1> ;------------Hi stack addr-------------
   304                              <1> ;stepValue (qword), default 1
   305                              <1> ;limitValue (qword), to which value do we loop
   306                              <1> ;ptr to counter variable (qword)
   307                              <1> ;Special qword:
   308                              <1> ; Byte 7 = Offset into the line for next instruction
   309                              <1> ; Bytes[6:5] = Line number of portion after FOR (either FOR line or line after FOR)
   310                              <1> ; Byte 4 = Offset into the line for next instruction
   311                              <1> ; Bytes[3:2] = Line number of portion after NEXT (either NEXT line or line after NEXT)
   312                              <1> ; Byte 1 = Parity check sum for the qword, makes the sum of the bytes in qword 0
   313                              <1> ; Byte 0 = FOR signature
   314                              <1> ;------------Low stack addr------------
   315                              <1> ;rsp -> Return address
   316                              <1>     ;First check we have a NEXT following this FOR
   317 00000F0D E87DFEFFFF          <1>     call nextScan
   318 00000F12 4881FAFFFFFFFF      <1>     cmp rdx, -1
   319 00000F19 0F84F5000000        <1>     je .critError
   320                              <1>     ;Here we make space on the stack.
   321 00000F1F B904000000          <1>     mov ecx, forStruct_size/8
   322                              <1>     makeSpaceOnStack rcx  ;Make four qwords of space on the stack
    96                              <2> 
    97                              <2> 
    98                              <2> 
    99 00000F24 58                  <2>  pop rax
   100 00000F25 48C1E103            <2>  shl %1, 3
   101 00000F29 4829CC              <2>  sub rsp, %1
   102 00000F2C 488D2D(50000000)    <2>  lea rbp, stack
   103 00000F33 4839EC              <2>  cmp rsp, rbp
   104 00000F36 770C                <2>  ja .macroNotOverflow
   105 00000F38 488D2D02070000      <2>  lea rbp, stkOvflw
   106 00000F3F E993F1FFFF          <2>  jmp criticalError
   107                              <2> .macroNotOverflow:
   108                              <2> 
   109                              <2> 
   110 00000F44 50                  <2>  push rax
   323 00000F45 4889E5              <1>     mov rbp, rsp
   324 00000F48 4881C508000000      <1>     add rbp, 8  ;Make rbp point to the base of the new struc
   325 00000F4F 48895500            <1>     mov qword [rbp + forStruct.specQword], rdx  ;Move rdx into its place on the stack
   326 00000F53 56                  <1>     push rsi   ;rsi points to first byte after FOR. The first word should now be a var
   327 00000F54 B820544F20          <1>     mov eax, " TO " ;First find the TO and STEP values
   328                              <1> .flScanTo:
   329 00000F59 803E00              <1>     cmp byte [rsi], 0   ;ASCII null w/o a TO? Syntax Error
   330 00000F5C 0F84AB000000        <1>     je .syntaxError
   331 00000F62 803E3A              <1>     cmp byte [rsi], ":" ;Save for a next statement delimiter
   332 00000F65 0F84A2000000        <1>     je .syntaxError
   333 00000F6B 3906                <1>     cmp dword [rsi], eax
   334 00000F6D 7405                <1>     je .flToFound
   335 00000F6F 48FFC6              <1>     inc rsi ;Go forwards by a byte
   336 00000F72 EBE5                <1>     jmp short .flScanTo
   337                              <1> .flToFound:
   338                              <1>     ;rsi points to the preceeding space so add 3 to go to trailing space
   339 00000F74 4881C603000000      <1>     add rsi, 3
   340 00000F7B E8CFF3FFFF          <1>     call spaceSkip  ;Go to expression to evaluate
   341 00000F80 E81DF4FFFF          <1>     call handleAlgebraicExpression  ;Get in rax the limit value
   342 00000F85 48894510            <1>     mov qword [rbp + forStruct.limitValue], rax
   343                              <1>     ;rsi now points to the next word, this should be step, otherwise ignore the word
   344 00000F89 AD                  <1>     lodsd   ;Get the word in eax
   345 00000F8A 3D53544550          <1>     cmp eax, "STEP"
   346 00000F8F 754F                <1>     jne .defaultStep
   347                              <1>     ;Check it is a "STEP "
   348 00000F91 AC                  <1>     lodsb
   349 00000F92 3C20                <1>     cmp al, " "
   350 00000F94 754A                <1>     jne .defaultStep
   351                              <1>     ;rsi points to a "STEP "
   352 00000F96 E8B4F3FFFF          <1>     call spaceSkip  ;Go to expression to evaluate
   353 00000F9B E802F4FFFF          <1>     call handleAlgebraicExpression  ;Get in rax the step value
   354 00000FA0 48894518            <1>     mov qword [rbp + forStruct.stepValue], rax
   355                              <1> .flVariable:
   356 00000FA4 5E                  <1>     pop rsi ;Get back OG rsi position immediately after FOR
   357 00000FA5 E8A5F3FFFF          <1>     call spaceSkip ;Skip intermediate spaces
   358 00000FAA 56                  <1>     push rsi
   359 00000FAB E863F9FFFF          <1>     call variableAssignment ;Make the variable assignment, trashes rsi
   360 00000FB0 5E                  <1>     pop rsi ;rsi points to the start of the variable again
   361 00000FB1 E8A4F3FFFF          <1>     call getVarNameLength
   362 00000FB6 E88F030000          <1>     call findVariable   ;Get the variable pointer in rbx
   363 00000FBB 48895D08            <1>     mov qword [rbp + forStruct.cntrPtr], rbx    ;Save variable pointer
   364                              <1>     ;Now check whether we should run the loop at all?
   365 00000FBF 488B5D08            <1>     mov rbx, qword [rbp + forStruct.cntrPtr]
   366 00000FC3 488B4B04            <1>     mov rcx, qword [rbx + varBlock.qValue]  ;Get the variable value
   367 00000FC7 488B5D10            <1>     mov rbx, qword [rbp + forStruct.limitValue]
   368                              <1>     ;if rcx >= rbx, branch to after NEXT
   369 00000FCB 4839D9              <1>     cmp rcx, rbx
   370 00000FCE 7D1A                <1>     jge .dontRunFor
   371 00000FD0 488B5500            <1>     mov rdx, qword [rbp + forStruct.specQword]
   372 00000FD4 48C1EA28            <1>     shr rdx, 5*8    ;Upper bytes will be cleared, needed for the "branch"
   373                              <1> .exit:
   374                              <1>     ;Recall edx must have the correct three bytes in it from the special qword
   375 00000FD8 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   376 00000FDF C3                  <1>     ret
   377                              <1> .defaultStep:
   378 00000FE0 48C7451801000000    <1>     mov qword [rbp + forStruct.stepValue], 1
   379 00000FE8 EBBA                <1>     jmp short .flVariable
   380                              <1> .dontRunFor:
   381                              <1>     ;Move the bytes from the NEXT to edx 
   382 00000FEA 488B5500            <1>     mov rdx, qword [rbp + forStruct.specQword]
   383 00000FEE 48C1EA10            <1>     shr rdx, 2*8    ;Upper bytes will be cleared
   384 00000FF2 09D2                <1>     or edx, edx     ;This should zero the upper dword
   385                              <1>     ;Need to also reclaim the stack space
   386 00000FF4 B904000000          <1>     mov ecx, forStruct_size/8
   387                              <1>     cleanSpaceOnStack rcx
   114                              <2> 
   115 00000FF9 58                  <2>  pop rax
   116 00000FFA 48C1E103            <2>  shl %1, 3
   117 00000FFE 4801CC              <2>  add rsp, %1
   118 00001001 50                  <2>  push rax
   388 00001002 EBD4                <1>     jmp short .exit
   389                              <1> ;Errors
   390                              <1> .unknownError:
   391 00001004 488D2DAE060000      <1>     lea rbp, uknowner
   392 0000100B EB07                <1>     jmp short .critError
   393                              <1> .syntaxError:
   394 0000100D 488D2DEC050000      <1>     lea rbp, syntax
   395                              <1> .critError:
   396                              <1>     ;called with rbp already pointing to error string
   397 00001014 E9BEF0FFFF          <1>     jmp criticalError
   398                              <1> 
   399                              <1> next:
   400                              <1>     ;Verify that the structure on the stack is a FOR structure
   401 00001019 4889E5              <1>     mov rbp, rsp    ;Dont need to save rbp so trash it
   402 0000101C 4881C508000000      <1>     add rbp, 8  ;Make it point to the base of the struc past the return address
   403                              <1>     ;Read the qword on stack, verify it is a FORstruct and passes checksum test
   404 00001023 488B5500            <1>     mov rdx, qword [rbp + forStruct.specQword]
   405 00001027 80FA5A              <1>     cmp dl, FORsig
   406 0000102A 7555                <1>     jne .noForNext
   407                              <1>     ;Now compute checksum to verify its not an accident
   408 0000102C 30C0                <1>     xor al, al
   409 0000102E B908000000          <1>     mov ecx, 8
   410                              <1> .checksumTest:
   411 00001033 00D0                <1>     add al, dl
   412 00001035 48C1EA08            <1>     shr rdx, 8
   413 00001039 FFC9                <1>     dec ecx
   414 0000103B 75F6                <1>     jnz .checksumTest
   415 0000103D 84C0                <1>     test al, al     ;This should be 0
   416 0000103F 7540                <1>     jnz .noForNext
   417                              <1>     ;Now we are truly in a FOR loop
   418 00001041 488B5D08            <1>     mov rbx, qword [rbp + forStruct.cntrPtr]    ;Get variable pointer
   419 00001045 488B4304            <1>     mov rax, qword [rbx + varBlock.qValue]      ;Get variable value
   420 00001049 483B4510            <1>     cmp rax, qword [rbp + forStruct.limitValue] ;Compare current var value to limit
   421 0000104D 7D18                <1>     jge .noMoreLooping
   422 0000104F 48034518            <1>     add rax, qword [rbp + forStruct.stepValue]  ;Add the step
   423 00001053 48894304            <1>     mov qword [rbx + varBlock.qValue], rax      ;Update the variable value
   424                              <1>     ;Now go back to line after FOR
   425 00001057 488B5500            <1>     mov rdx, qword [rbp + forStruct.specQword]
   426 0000105B 48C1EA28            <1>     shr rdx, 5*8    ;Move upper three bytes to lower three bytes of edx
   427                              <1> .exit:
   428                              <1>     ;Recall edx must have the correct three bytes in it from the special qword
   429 0000105F 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   430 00001066 C3                  <1>     ret
   431                              <1> .noMoreLooping:
   432                              <1>     ;No need to update the variable, it is already above
   433 00001067 488B5500            <1>     mov rdx, qword [rbp + forStruct.specQword]
   434 0000106B 48C1EA10            <1>     shr rdx, 2*8    ;Move bytes 4:2 to lower three bytes of edx
   435 0000106F 09D2                <1>     or edx, edx     ;Remove upper bits
   436                              <1>     ;Need to also reclaim the stack space
   437 00001071 B904000000          <1>     mov ecx, forStruct_size/8
   438                              <1>     cleanSpaceOnStack rcx
   114                              <2> 
   115 00001076 58                  <2>  pop rax
   116 00001077 48C1E103            <2>  shl %1, 3
   117 0000107B 4801CC              <2>  add rsp, %1
   118 0000107E 50                  <2>  push rax
   439 0000107F EBDE                <1>     jmp short .exit
   440                              <1> .noForNext:
   441 00001081 488D2DF4050000      <1>     lea rbp, noFor
   442 00001088 E94AF0FFFF          <1>     jmp criticalError
   443                              <1> 
   444                              <1> while:
   445                              <1>     ;First check we have a WEND following this WHILE
   446 0000108D E82BFCFFFF          <1>     call wendScan
   447 00001092 4881FAFFFFFFFF      <1>     cmp rdx, -1
   448 00001099 7464                <1>     je .critError
   449                              <1>     ;Here we make space on the stack.
   450 0000109B B901000000          <1>     mov ecx, whileStruct_size/8
   451                              <1>     makeSpaceOnStack rcx  ;Make a qword of space on the stack
    96                              <2> 
    97                              <2> 
    98                              <2> 
    99 000010A0 58                  <2>  pop rax
   100 000010A1 48C1E103            <2>  shl %1, 3
   101 000010A5 4829CC              <2>  sub rsp, %1
   102 000010A8 488D2D(50000000)    <2>  lea rbp, stack
   103 000010AF 4839EC              <2>  cmp rsp, rbp
   104 000010B2 770C                <2>  ja .macroNotOverflow
   105 000010B4 488D2D86050000      <2>  lea rbp, stkOvflw
   106 000010BB E917F0FFFF          <2>  jmp criticalError
   107                              <2> .macroNotOverflow:
   108                              <2> 
   109                              <2> 
   110 000010C0 50                  <2>  push rax
   452 000010C1 4889E5              <1>     mov rbp, rsp
   453 000010C4 4881C508000000      <1>     add rbp, 8  ;Make rbp point to the base of the new struc
   454 000010CB 48895500            <1>     mov qword [rbp + whileStruct.specQword], rdx  ;Move rdx into its place on the stack
   455                              <1>     ;rsi should point after the WHILE
   456 000010CF E8CEF2FFFF          <1>     call handleAlgebraicExpression  ;Get result of expression in rax
   457 000010D4 488B5500            <1>     mov rdx, qword [rbp + whileStruct.specQword]    ;Get special qword back into rdx
   458 000010D8 4885C0              <1>     test rax, rax   ;Zero is FALSE
   459 000010DB 740C                <1>     jz .conditionFalse
   460 000010DD 48C1EA28            <1>     shr rdx, 5*8    ;Bring the upper three bytes down to eax
   461                              <1> .exit:
   462 000010E1 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   463 000010E8 C3                  <1>     ret
   464                              <1> .conditionFalse:
   465                              <1>     ;If condition is false, jump to the instruction after WEND
   466                              <1>     ;Here we reclaim the space from the stack.
   467 000010E9 B901000000          <1>     mov ecx, whileStruct_size/8
   468                              <1>     cleanSpaceOnStack rcx  ;Clean a qword of space on the stack
   114                              <2> 
   115 000010EE 58                  <2>  pop rax
   116 000010EF 48C1E103            <2>  shl %1, 3
   117 000010F3 4801CC              <2>  add rsp, %1
   118 000010F6 50                  <2>  push rax
   469 000010F7 48C1EA10            <1>     shr rdx, 2*8    ;Bring bytes 4:2 down to bytes 2:0
   470 000010FB 09D2                <1>     or edx, edx     ;Zero the rest of it
   471 000010FD EBE2                <1>     jmp short .exit
   472                              <1> .critError:
   473                              <1>     ;called with rbp already pointing to error string
   474 000010FF E9D3EFFFFF          <1>     jmp criticalError
   475                              <1> wend:
   476                              <1>     ;Find the While on the WHILE line and evaluate the expression
   477                              <1>     ;if true, branch to the WHILE three bytes in specialQword
   478                              <1>     ;if false, branch to WEND three bytes in specialQword and clean stack
   479                              <1>     ;First verify we have a While structure on the stack
   480 00001104 4889E5              <1>     mov rbp, rsp    ;Dont need to save rbp so trash it
   481 00001107 4881C508000000      <1>     add rbp, 8  ;Make it point to the base of the struc past the return address
   482 0000110E 488B5500            <1>     mov rdx, qword [rbp + whileStruct.specQword]
   483 00001112 80FA55              <1>     cmp dl, WHILEsig
   484 00001115 0F858D000000        <1>     jne .noWhile
   485                              <1>     ;Now compute checksum to verify its not an accident
   486 0000111B 30C0                <1>     xor al, al
   487 0000111D B908000000          <1>     mov ecx, 8
   488                              <1> .checksumTest:
   489 00001122 00D0                <1>     add al, dl
   490 00001124 48C1CA08            <1>     ror rdx, 8
   491 00001128 FFC9                <1>     dec ecx
   492 0000112A 75F6                <1>     jnz .checksumTest
   493 0000112C 84C0                <1>     test al, al     ;This should be 0
   494 0000112E 7578                <1>     jnz .noWhile
   495                              <1>     ;Now we are truly in a WHILE loop
   496                              <1>     ;Search the While line for the WHILE keyword and evaluate the expression after it
   497                              <1>     ;rdx is as normal
   498 00001130 48C1EA28            <1>     shr rdx, 5*8    ;Get upper three bytes down low
   499 00001134 81E2FFFF0000        <1>     and edx, 0FFFFh ;Save only dx
   500 0000113A E87B020000          <1>     call searchForProgramLine
   501 0000113F 4881FBFFFFFFFF      <1>     cmp rbx, -1
   502 00001146 7454                <1>     je .error
   503 00001148 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Point to start of string
   504                              <1> .whileScan:
   505 0000114C 803E00              <1>     cmp byte [rsi], 0   ;Are we at the end of the line
   506 0000114F 7457                <1>     je .noWhile ;If so, we have gotten to the end of the line without a while
   507 00001151 488D3DC8F6FFFF      <1>     lea rdi, whileStr   ;Point to the while string in the table, 6 chars long
   508 00001158 B906000000          <1>     mov ecx, 6
   509                              <1> .scanning:
   510 0000115D A6                  <1>     cmpsb
   511 0000115E 75EC                <1>     jne .whileScan
   512 00001160 FFC9                <1>     dec ecx
   513 00001162 75F9                <1>     jnz .scanning
   514                              <1>     ;Here is equal, rsi points past the space in "WHILE "
   515 00001164 48FFCE              <1>     dec rsi
   516 00001167 E8E3F1FFFF          <1>     call spaceSkip  ;Skip all spaces
   517 0000116C E831F2FFFF          <1>     call handleAlgebraicExpression  ;Get algebraic expression in rax
   518 00001171 488B5500            <1>     mov rdx, qword [rbp + whileStruct.specQword]    ;Get special qword back into rdx
   519 00001175 4885C0              <1>     test rax, rax
   520 00001178 740C                <1>     jz .conditionFalse
   521 0000117A 48C1EA28            <1>     shr rdx, 5*8    ;Bring the upper three bytes down to eax
   522                              <1> .exit:
   523 0000117E 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   524 00001185 C3                  <1>     ret
   525                              <1> .conditionFalse:
   526                              <1>     ;If condition is false, go to the instruction after WEND
   527                              <1>     ;Here we reclaim the space from the stack.
   528 00001186 B901000000          <1>     mov ecx, whileStruct_size/8
   529                              <1>     cleanSpaceOnStack rcx  ;Clean a qword of space on the stack
   114                              <2> 
   115 0000118B 58                  <2>  pop rax
   116 0000118C 48C1E103            <2>  shl %1, 3
   117 00001190 4801CC              <2>  add rsp, %1
   118 00001193 50                  <2>  push rax
   530 00001194 48C1EA10            <1>     shr rdx, 2*8    ;Bring bytes 4:2 down to bytes 2:0
   531 00001198 09D2                <1>     or edx, edx     ;Zero the rest of it
   532 0000119A EBE2                <1>     jmp short .exit
   533                              <1> .error:
   534 0000119C 488D2D16050000      <1>     lea rbp, uknowner
   535 000011A3 E92FEFFFFF          <1>     jmp criticalError
   536                              <1> .noWhile:
   537 000011A8 488D2DB8040000      <1>     lea rbp, noWhile
   538 000011AF E923EFFFFF          <1>     jmp criticalError
   539                              <1> 
   540                              <1> handleIf:
   541                              <1> ;Evaluate the string. The IF,THEN/GOTO,ELSE statement must ALL be on one line
   542                              <1> ;IF exp1 THEN statement ELSE statement
   543                              <1> ;IF exp1 GOTO linenumber ELSE statement
   544                              <1> ;rsi points to first char AFTER function name
   545 000011B4 E896F1FFFF          <1>     call spaceSkip
   546 000011B9 E8E4F1FFFF          <1>     call handleAlgebraicExpression
   547 000011BE 4885C0              <1>     test rax, rax  ;If this is 0, go to the else
   548 000011C1 7425                <1>     jz .else
   549 000011C3 E887F1FFFF          <1>     call spaceSkip
   550 000011C8 AD                  <1>     lodsd   ;Get the whole word, must be either "THEN " or "GOTO "
   551 000011C9 3D5448454E          <1>     cmp eax, "THEN"
   552 000011CE 7442                <1>     je .hi0   ; Go past THEN, to process statement
   553 000011D0 3D474F544F          <1>     cmp eax, "GOTO"
   554 000011D5 7569                <1>     jne .error
   555 000011D7 803E20              <1>     cmp byte [rsi], " " ;is the next char a space?
   556 000011DA 7564                <1>     jne .error
   557 000011DC E980FCFFFF          <1>     jmp goto
   558                              <1> .candidatethen:
   559 000011E1 803E20              <1>     cmp byte [rsi], " " ;is the next char a space?
   560 000011E4 742C                <1>     je .hi0
   561 000011E6 EB58                <1>     jmp short .error
   562                              <1> .else:
   563                              <1>     ;Search for the ELSE, it has to be preceeded with a space and have a space after
   564 000011E8 803E00              <1>     cmp byte [rsi], 0 ;Are we at end of line?
   565 000011EB 7452                <1>     je .noElse
   566 000011ED 803E3A              <1>     cmp byte [rsi], ":" ;Are we at end line segment?
   567 000011F0 744D                <1>     je .noElse
   568 000011F2 48FFC6              <1>     inc rsi
   569 000011F5 813E20454C53        <1>     cmp dword [rsi], " ELS"
   570 000011FB 75EB                <1>     jne .else
   571 000011FD 4881C604000000      <1>     add rsi, 4  ;Skip those four chars, we have a candidate
   572 00001204 66813E4520          <1>     cmp word [rsi], "E "
   573 00001209 75DD                <1>     jne .else   ;If not equal failed to match pattern
   574 0000120B 4881C602000000      <1>     add rsi, 2  ;Else its the ELSE we are looking for, move rsi to first space past it
   575                              <1> .hi0:
   576                              <1> ;Now we do the branchy stuff, branch to the same line just further down
   577 00001212 668B15(F40E0000)    <1>     mov dx, word [currentLine]
   578 00001219 E89C010000          <1>     call searchForProgramLine
   579 0000121E 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Does the line not exist somehow?
   580 00001225 7419                <1>     je .error
   581 00001227 4889F0              <1>     mov rax, rsi    ;Save pointer in rax
   582 0000122A 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine] ;Get the difference in chars
   583 0000122E 4829C8              <1>     sub rax, rcx
   584 00001231 24FF                <1>     and al, -1  ;Save only bottom byte as the difference should be less than 255
   585 00001233 C1E010              <1>     shl eax, 10h ;Shift to byte 3
   586 00001236 09C2                <1>     or edx, eax ;Save the offset into byte 3
   587 00001238 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   588                              <1> .noElse:
   589                              <1> ;If no else, simply return
   590 0000123F C3                  <1>     ret
   591                              <1> .error:
   592 00001240 488D1DB9030000      <1>     lea rbx, syntax
   593 00001247 E98BEEFFFF          <1>     jmp criticalError
    16                                  %include "MATH.ASM"
    17                              <1> decimalToHex:
    18                              <1>     ;Takes ASCII encoded decimal number and 
    19                              <1>     ;returns its hex value
    20                              <1>     ;Input: rsi = Start of numeric ONLY string
    21                              <1>     ;Output: rax = Number
    22                              <1>     ;        rsi = First non-numeric char past end of number
    23 0000124C 53                  <1>     push rbx
    24 0000124D 51                  <1>     push rcx
    25 0000124E 52                  <1>     push rdx
    26 0000124F 31DB                <1>     xor ebx, ebx    ;Start with rbx = 0
    27                              <1> .processDigits:    
    28 00001251 AC                  <1>     lodsb           ;Get the first digit in al
    29 00001252 2C30                <1>     sub al, 30h     ;Reduce to value
    30 00001254 31D2                <1>     xor edx, edx    ;Clear for multiplication
    31 00001256 3C0A                <1>     cmp al, 10      ;Digit valid? Propagte CF
    32 00001258 480FB6C0            <1>     movzx rax, al   ;Clear upper bits
    33 0000125C 4893                <1>     xchg rax, rbx
    34 0000125E 730D                <1>     jnc .exit       ;Digit was not valid, exit
    35 00001260 B90A000000          <1>     mov ecx, 10     ;Multiply result by 10
    36 00001265 48F7E1              <1>     mul rcx
    37 00001268 4801C3              <1>     add rbx, rax    ;Add the new digits
    38 0000126B EBE4                <1>     jmp short .processDigits
    39                              <1> .exit:
    40 0000126D 48FFCE              <1>     dec rsi         ;rsi points to first non-digit
    41 00001270 5A                  <1>     pop rdx
    42 00001271 59                  <1>     pop rcx
    43 00001272 5B                  <1>     pop rbx
    44 00001273 C3                  <1>     ret
    45                              <1> 
    46                              <1> printdecimalword:
    47                              <1> ;Takes the qword in rax and prints its signed decimal representation
    48 00001274 50                  <1>     push rax
    49 00001275 53                  <1>     push rbx
    50 00001276 488D3D(980E0000)    <1>     lea rdi, digitString   ;Use the default line as a buffer
    51                              <1>     ;Sanitise the digit buffer
    52 0000127D 57                  <1>     push rdi
    53 0000127E 51                  <1>     push rcx
    54 0000127F 50                  <1>     push rax
    55                              <1> 
    56 00001280 B906000000          <1>     mov ecx, digitStringLen/8
    57 00001285 F348AB              <1>     rep stosq
    58 00001288 58                  <1>     pop rax
    59 00001289 59                  <1>     pop rcx
    60 0000128A 5F                  <1>     pop rdi
    61                              <1> 
    62 0000128B 50                  <1>     push rax    ;Save rax for the sign bit later
    63 0000128C 48D1C0              <1>     rol rax, 1  ;Test the sign bit
    64 0000128F A801                <1>     test al, 1
    65 00001291 48D1C8              <1>     ror rax, 1  ;Undo the roll
    66 00001294 7403                <1>     jz .noCompliment
    67 00001296 48F7D8              <1>     neg rax     ;Get the 2's compliment of rax
    68                              <1> ;Clear the sign bit, print the number from bits 62:0
    69                              <1> .noCompliment:
    70 00001299 48D1E0              <1>     shl rax, 1  ;Go past the edge
    71 0000129C 48D1E8              <1>     shr rax, 1  ;Return zero extended
    72 0000129F 4881C72F000000      <1>     add rdi, digitStringLen - 1 ;Go to the end of the buffer
    73 000012A6 FD                  <1>     std ;Reverse string ops
    74 000012A7 50                  <1>     push rax
    75 000012A8 30C0                <1>     xor al, al  ;Place delimiter
    76 000012AA AA                  <1>     stosb
    77 000012AB 58                  <1>     pop rax
    78 000012AC 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
    78 000012B5 00                  <1>
    79                              <1> .pdw0:
    80 000012B6 31D2                <1>     xor edx, edx
    81 000012B8 48F7F3              <1>     div rbx
    82 000012BB 80C230              <1>     add dl, '0'
    83 000012BE 80FA39              <1>     cmp dl, '9'
    84 000012C1 7603                <1>     jbe .pdw1
    85 000012C3 80C207              <1>     add dl, 'A'-'0'-10
    86                              <1> .pdw1:
    87 000012C6 50                  <1>     push rax
    88 000012C7 88D0                <1>     mov al, dl    ;Save remainder byte
    89 000012C9 AA                  <1>     stosb   ;Store the byte and sub one from rdi
    90 000012CA 58                  <1>     pop rax
    91 000012CB 4885C0              <1>     test rax, rax
    92 000012CE 75E6                <1>     jnz .pdw0
    93                              <1> 
    94                              <1>     ;Now add a minus sign if sign bit set
    95 000012D0 58                  <1>     pop rax ;Get the original for the sign bit
    96 000012D1 48D1C0              <1>     rol rax, 1  ;Bring the sign bit low
    97 000012D4 A801                <1>     test al, 1
    98 000012D6 7403                <1>     jz .printString
    99 000012D8 B02D                <1>     mov al, "-"
   100 000012DA AA                  <1>     stosb   ;Store minus sign and decrement rdi
   101                              <1> .printString:
   102 000012DB FC                  <1>     cld ;Return string ops to normal
   103 000012DC 48FFC7              <1>     inc rdi ;Skip the extra 0 that was inserted
   104 000012DF 4889FD              <1>     mov rbp, rdi    ;Point rbp to the head of the string
   105 000012E2 E8C7EEFFFF          <1>     call ttyOutString
   106 000012E7 5B                  <1>     pop rbx
   107 000012E8 58                  <1>     pop rax
   108 000012E9 C3                  <1>     ret
    17                                  %include "MEMORY.ASM"
    18                              <1> allocateBlock:
    19                              <1> ;Allocates a program memory block, the caller then fixes the specifics
    20                              <1> ;Output: rbx = Pointer to generic memory block, or -1 if memory full
    21                              <1> ;       Caller needs to fill in, block size, block type and specifics
    22 000012EA 52                  <1>     push rdx
    23                              <1> .ab0:
    24 000012EB 488B1D(E20E0000)    <1>     mov rbx, qword [lastBlock]    ;Get the last block in the chain
    25 000012F2 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;First allocation?
    26 000012F9 742F                <1>     je .firstAllocation
    27 000012FB C60374              <1>     mov byte [rbx + memBlock.bSignature], notLastMemBlock ;Make it not be the last
    28 000012FE 480FB75301          <1>     movzx rdx, word [rbx + memBlock.wBlockSize] ;Goto end of block
    29 00001303 4801D3              <1>     add rbx, rdx    ;Move rbx over the previous last block
    30 00001306 488B15(D00E0000)    <1>     mov rdx, qword [maxMemAddr]
    31 0000130D 4839D3              <1>     cmp rbx, rdx ;rbx above maxmemory? 
    32 00001310 770C                <1>     ja .memoryFull
    33 00001312 48891D(E20E0000)    <1>     mov qword [lastBlock], rbx  ;New last block
    34 00001319 C60372              <1>     mov byte [rbx + memBlock.bSignature], lastMemBlock
    35                              <1> .exit:
    36 0000131C 5A                  <1>     pop rdx
    37 0000131D C3                  <1>     ret
    38                              <1> .memoryFull:
    39 0000131E 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    39 00001327 FF                  <1>
    40 00001328 EBF2                <1>     jmp short .exit
    41                              <1> .firstAllocation:
    42                              <1> ;Deal with first allocation
    43 0000132A 488D1D(00000000)    <1>     lea rbx, section.programArea.vstart   ;Get this as the head of the chain
    44 00001331 48891D(E20E0000)    <1>     mov qword [lastBlock], rbx
    45 00001338 48891D(DA0E0000)    <1>     mov qword [mcbChain], rbx
    46 0000133F C60372              <1>     mov byte [rbx + memBlock.bSignature], lastMemBlock
    47 00001342 66C743010000        <1>     mov word [rbx + memBlock.wBlockSize], 0 ;Dummy block
    48 00001348 EBD2                <1>     jmp short .exit
    49                              <1> 
    50                              <1> findVariable:
    51                              <1> ;Input: rsi = Source string for variable name
    52                              <1> ;       ecx = Length of variable name (max 40)
    53                              <1> ;Output: rbx = ptr to varBlock/strBlock OR -1 if doesnt exist
    54 0000134A 50                  <1>     push rax
    55 0000134B 51                  <1>     push rcx
    56 0000134C 52                  <1>     push rdx
    57 0000134D 56                  <1>     push rsi
    58 0000134E 57                  <1>     push rdi
    59 0000134F 488B1D(DA0E0000)    <1>     mov rbx, qword [mcbChain]   ;Start of the chain
    60 00001356 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Chain empty?
    61 0000135D 7446                <1>     je .exit
    62                              <1> .search:
    63 0000135F 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
    64 00001363 7415                <1>     je .varFound    ;We found a numerical variable
    65 00001365 807B0302            <1>     cmp byte [rbx + memBlock.bBlockType], datBlockType
    66 00001369 741E                <1>     je .datFound    ;We found a string variable
    67                              <1> .invalid:
    68                              <1>     ;Are we at the end of the chain?
    69 0000136B 803B72              <1>     cmp byte [rbx + memBlock.bSignature], lastMemBlock
    70 0000136E 742B                <1>     je .varNotFound ;At the end of the chain and var not found? Error!
    71 00001370 480FB75301          <1>     movzx rdx, word [rbx + memBlock.wBlockSize]
    72 00001375 4801D3              <1>     add rbx, rdx    ;Goto next block
    73 00001378 EBE5                <1>     jmp short .search
    74                              <1> .varFound:
    75                              <1>     ;Compare to see the var is our var
    76 0000137A 488D7B0C            <1>     lea rdi, qword [rbx + varBlock.sVarName] ;point rdi to the name string
    77 0000137E 51                  <1>     push rcx
    78 0000137F 56                  <1>     push rsi
    79 00001380 F3A6                <1>     repe cmpsb  ;Compare one byte at a time
    80 00001382 5E                  <1>     pop rsi
    81 00001383 59                  <1>     pop rcx
    82 00001384 75E5                <1>     jne .invalid
    83 00001386 F8                  <1>     clc
    84 00001387 EB1C                <1>     jmp short .exit
    85                              <1> .datFound:
    86 00001389 488DBB04010000      <1>     lea rdi, qword [rbx + stringBlock.sVarName] ;point rdi to the name string
    87 00001390 51                  <1>     push rcx
    88 00001391 56                  <1>     push rsi
    89 00001392 F3A6                <1>     repe cmpsb  ;Compare one byte at a time
    90 00001394 5E                  <1>     pop rsi
    91 00001395 59                  <1>     pop rcx
    92 00001396 75D3                <1>     jne .invalid
    93 00001398 F8                  <1>     clc
    94 00001399 EB0A                <1>     jmp short .exit
    95                              <1> .varNotFound:
    96 0000139B 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    96 000013A4 FF                  <1>
    97                              <1> .exit:
    98 000013A5 5F                  <1>     pop rdi
    99 000013A6 5E                  <1>     pop rsi
   100 000013A7 5A                  <1>     pop rdx
   101 000013A8 59                  <1>     pop rcx
   102 000013A9 58                  <1>     pop rax
   103 000013AA C3                  <1>     ret
   104                              <1> 
   105                              <1> findFirstLine:
   106                              <1> ;Output: rbx = Pointer to the first program block
   107                              <1> ;         dx = Number of the first line
   108 000013AB 488B1D(EA0E0000)    <1>     mov rbx, qword [firstLinPtr]
   109 000013B2 668B15(F20E0000)    <1>     mov dx, word [firstLinNum]
   110 000013B9 C3                  <1>     ret
   111                              <1> 
   112                              <1> ;FIRST SEARCH FOR A LINE NUMBER BEFORE INSERTING IT INTO THE CHAIN
   113                              <1> ;IF THE LINE NUMBER IS FOUND, REPLACE THE COMMAND STRING
   114                              <1> 
   115                              <1> searchForProgramLine:
   116                              <1> ;Walk the program chain looking to see if a line number exists. If it does,
   117                              <1> ; return a pointer to the block in rbx. If it doesn't, return -1 in rbx
   118                              <1> ;Input: dx = Line number
   119                              <1> ;Output: rbx = Pointer to program block 
   120 000013BA 488B1D(EA0E0000)    <1>     mov rbx, qword [firstLinPtr]
   121 000013C1 4881FBFFFFFFFF      <1>     cmp rbx, -1
   122 000013C8 7413                <1>     je .lineFound
   123                              <1> .search:
   124 000013CA 66395304            <1>     cmp word [rbx + progLineBlock.wLineNum], dx ;Equal line numbers?
   125 000013CE 740D                <1>     je .lineFound
   126 000013D0 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr]   ;Walk chain
   127 000013D4 4881FBFFFFFFFF      <1>     cmp rbx, -1
   128 000013DB 75ED                <1>     jne .search ;Not -1? Keep searching
   129                              <1> .lineFound:
   130 000013DD C3                  <1>     ret
   131                              <1> 
   132                              <1> insertProgramLine:
   133                              <1> ;Walk the program chain looking for the biggest number less than our
   134                              <1> ; line number. Once we have reached the end of the chain, insert the block there, or
   135                              <1> ; if there is no block, then we are the last in the chain
   136                              <1> ;Input: rsi = New Program Block to be added
   137 000013DE 50                  <1>     push rax
   138 000013DF 53                  <1>     push rbx
   139 000013E0 51                  <1>     push rcx
   140 000013E1 52                  <1>     push rdx
   141 000013E2 57                  <1>     push rdi
   142 000013E3 E8C3FFFFFF          <1>     call findFirstLine  ;Get start of program in rbx and line number in dx
   143                              <1> ;First check if we should be the first line
   144                              <1> 
   145 000013E8 668B4E04            <1>     mov cx, word [rsi + progLineBlock.wLineNum] ;Save line number in cx
   146 000013EC 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Empty program marker
   147 000013F3 744D                <1>     je .first
   148 000013F5 6639D1              <1>     cmp cx, dx  ;If cx is below dx, then our entry is first
   149 000013F8 7248                <1>     jb .first    
   150                              <1> ;Use ax as the best line number and rdi as the pointer to that block
   151 000013FA 66B8FFFF            <1>     mov ax, -1  ;Marker to indicate no insertion
   152                              <1> .walk:
   153 000013FE 48817B06FFFFFFFF    <1>     cmp qword [rbx + progLineBlock.qPtr], -1    ;We are at the end
   154 00001406 7419                <1>     je .sort
   155 00001408 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Walk chain in rbx
   156 0000140C 663B4B04            <1>     cmp cx, word [rbx + progLineBlock.wLineNum]
   157 00001410 77EC                <1>     ja .walk    ;If line number is above my line number, keep walking
   158                              <1> .candidate:
   159                              <1>     ;If the new line number is below the old line number, reject
   160 00001412 663B4304            <1>     cmp ax, word [rbx + progLineBlock.wLineNum]
   161 00001416 72E6                <1>     jb .walk
   162 00001418 4889DF              <1>     mov rdi, rbx
   163 0000141B 668B4304            <1>     mov ax, word [rbx + progLineBlock.wLineNum]
   164 0000141F EBDD                <1>     jmp short .walk
   165                              <1> .sort:
   166 00001421 66FFC0              <1>     inc ax  ;If no candidates, exit
   167 00001424 740E                <1>     jz .skipLink
   168                              <1>     ;rdi points to the previous line to link to
   169 00001426 488B5706            <1>     mov rdx, qword [rdi + progLineBlock.qPtr]
   170 0000142A 48897706            <1>     mov qword [rdi + progLineBlock.qPtr], rsi   ;Insert self here
   171 0000142E 48895606            <1>     mov qword [rsi + progLineBlock.qPtr], rdx   ;Link new block to next line
   172 00001432 EB20                <1>     jmp short .exit
   173                              <1> .skipLink:
   174 00001434 48897306            <1>     mov qword [rbx + progLineBlock.qPtr], rsi   ;Link rsi to last element in list
   175 00001438 48C74606FFFFFFFF    <1>     mov qword [rsi + progLineBlock.qPtr], -1    ;End of chain marker
   176 00001440 EB12                <1>     jmp short .exit
   177                              <1> .first:
   178 00001442 488935(EA0E0000)    <1>     mov qword [firstLinPtr], rsi
   179 00001449 66890D(F20E0000)    <1>     mov word [firstLinNum], cx
   180 00001450 48895E06            <1>     mov qword [rsi + progLineBlock.qPtr], rbx   ;Put the old first line as second line
   181                              <1> .exit:
   182 00001454 5F                  <1>     pop rdi
   183 00001455 5A                  <1>     pop rdx
   184 00001456 59                  <1>     pop rcx
   185 00001457 5B                  <1>     pop rbx
   186 00001458 58                  <1>     pop rax
   187 00001459 C3                  <1>     ret
   188                              <1> 
   189                              <1> makeEditInteger:
   190                              <1> ;Will make a variable if it is new name, or edit the value if it already exists
   191                              <1> ;Input: rsi = Var name
   192                              <1> ;       (e)cx = Length of varname, max 40 chars
   193                              <1> ;       rax = Value
   194 0000145A E8EBFEFFFF          <1>     call findVariable   ;rbx returned with var block or -1
   195 0000145F 4881FBFFFFFFFF      <1>     cmp rbx, -1
   196 00001466 7405                <1>     je .newVar
   197 00001468 48894304            <1>     mov qword [rbx + varBlock.qValue], rax
   198 0000146C C3                  <1>     ret
   199                              <1> .newVar:
   200 0000146D E878FEFFFF          <1>     call allocateBlock
   201 00001472 4881FBFFFFFFFF      <1>     cmp rbx, -1
   202 00001479 741E                <1>     je .error
   203 0000147B 48894304            <1>     mov qword [rbx + varBlock.qValue], rax  ;Save value
   204 0000147F 66894B01            <1>     mov word [rbx + varBlock.wBlockSize], cx    ;Save length of name
   205 00001483 668143010C00        <1>     add word [rbx + varBlock.wBlockSize], varBlock_size ;Add full block size
   206 00001489 C6430301            <1>     mov byte [rbx + varBlock.bBlockType], varBlockType  ;Block type
   207 0000148D 57                  <1>     push rdi
   208 0000148E 488D7B0C            <1>     lea rdi, qword [rbx + varBlock.sVarName]
   209 00001492 E87B000000          <1>     call strcpy ;Copy the string name into block buffer
   210 00001497 5F                  <1>     pop rdi
   211 00001498 C3                  <1>     ret
   212                              <1> .error:
   213 00001499 488D2D50010000      <1>     lea rbp, noMem
   214 000014A0 E932ECFFFF          <1>     jmp criticalError
   215                              <1> makeEditString:
   216                              <1> ;Will make a string if it is new name, or replace the string. Strings are null termin
   217                              <1> ;Input: rsi = Var name
   218                              <1> ;       ecx = Length of varname, max 40 chars
   219                              <1> ;       rdx = Ptr to string itself
   220 000014A5 57                  <1>     push rdi
   221 000014A6 56                  <1>     push rsi
   222 000014A7 50                  <1>     push rax
   223 000014A8 53                  <1>     push rbx
   224 000014A9 E89CFEFFFF          <1>     call findVariable   ;rbx returned with string block or -1
   225 000014AE 4881FBFFFFFFFF      <1>     cmp rbx, -1
   226 000014B5 7528                <1>     jne .strcopy
   227 000014B7 E82EFEFFFF          <1>     call allocateBlock
   228 000014BC 4881FBFFFFFFFF      <1>     cmp rbx, -1
   229 000014C3 742E                <1>     je .error
   230 000014C5 66894B01            <1>     mov word [rbx + stringBlock.wBlockSize], cx    ;Save length of name
   231 000014C9 668143010401        <1>     add word [rbx + stringBlock.wBlockSize], stringBlock_size ;Add full block size
   232 000014CF C6430302            <1>     mov byte [rbx + stringBlock.bBlockType], datBlockType  ;Block type
   233 000014D3 488DBB04010000      <1>     lea rdi, qword [rbx + stringBlock.sVarName]
   234 000014DA E833000000          <1>     call strcpy ;Copy the string name into block buffer
   235                              <1> .strcopy:
   236 000014DF 488D7B04            <1>     lea rdi, qword [rbx + stringBlock.string]   ;point to string space
   237 000014E3 4889D6              <1>     mov rsi, rdx    ;Point rsi to the string itself
   238 000014E6 E814000000          <1>     call terminatedstrcpy
   239 000014EB 30C0                <1>     xor al, al
   240 000014ED AA                  <1>     stosb   ;Store the null delimiter
   241 000014EE 5B                  <1>     pop rbx
   242 000014EF 58                  <1>     pop rax
   243 000014F0 5E                  <1>     pop rsi
   244 000014F1 5F                  <1>     pop rdi
   245 000014F2 C3                  <1>     ret
   246                              <1> .error:
   247 000014F3 488D2DF6000000      <1>     lea rbp, noMem
   248 000014FA E9D8EBFFFF          <1>     jmp criticalError
   249                              <1> ;------------------------------------------------:
   250                              <1> ;  The below are misc memory related functions   :
   251                              <1> ;------------------------------------------------:
   252                              <1> terminatedstrcpy:
   253                              <1> ;rdi = Destination String
   254                              <1> ;rsi = Source String
   255                              <1> ;Copy a terminated string
   256 000014FF 50                  <1>     push rax
   257                              <1> .copy:
   258 00001500 AC                  <1>     lodsb   ;Get char in al and inc rsi
   259 00001501 3C00                <1>     cmp al, 0
   260 00001503 740B                <1>     je .exit
   261 00001505 3C3A                <1>     cmp al, ":"
   262 00001507 7407                <1>     je .exit
   263 00001509 3C22                <1>     cmp al, 22h ;Speechmark
   264 0000150B 7403                <1>     je .exit
   265 0000150D AA                  <1>     stosb   ;Save char from al and inc rdi
   266 0000150E EBF0                <1>     jmp short .copy 
   267                              <1> .exit:
   268 00001510 58                  <1>     pop rax
   269 00001511 C3                  <1>     ret
   270                              <1> strcpy:
   271                              <1> ;rdi = Destination string
   272                              <1> ;rsi = Source string
   273                              <1> ;rcx = Number of Chars to copy
   274 00001512 57                  <1>     push rdi
   275 00001513 56                  <1>     push rsi
   276 00001514 51                  <1>     push rcx
   277 00001515 F3A4                <1>     rep movsb
   278 00001517 59                  <1>     pop rcx
   279 00001518 5E                  <1>     pop rsi
   280 00001519 5F                  <1>     pop rdi
   281 0000151A C3                  <1>     ret
   282                              <1> strlen:
   283                              <1> ;Input: rsi = String start
   284                              <1> ;Output: rsi = String start
   285                              <1> ;        ecx = String length, inclusive of NULL char
   286 0000151B 50                  <1>     push rax
   287 0000151C 56                  <1>     push rsi
   288 0000151D 31C9                <1>     xor ecx, ecx    ;Clear counter
   289                              <1> .search:
   290 0000151F AC                  <1>     lodsb
   291 00001520 FFC1                <1>     inc ecx
   292 00001522 84C0                <1>     test al, al ;Is this a null char?
   293 00001524 75F9                <1>     jnz .search ;Null not found
   294                              <1> .exit:
   295 00001526 5E                  <1>     pop rsi
   296 00001527 58                  <1>     pop rax
   297 00001528 C3                  <1>     ret
   298                              <1> 
   299                              <1> memoryDetection:
   300 00001529 B820E80000          <1>     mov eax, 0E820h
   301 0000152E CD35                <1>     int 35h     ;rax = ptr to start, rsi = ptr to data table, each entry 24 bytes
   302 00001530 EB07                <1>     jmp short .fsa1
   303                              <1> .findStartAddr:
   304 00001532 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   305                              <1> .fsa1:
   306 00001539 6685C9              <1>     test cx, cx
   307 0000153C 742C                <1>     jz .worstCase
   308 0000153E 66FFC9              <1>     dec cx
   309 00001541 488B1E              <1>     mov rbx, qword [rsi]    ;Get the address entry into rbx
   310 00001544 4839C3              <1>     cmp rbx, rax    
   311 00001547 75E9                <1>     jne .findStartAddr
   312 00001549 488B4608            <1>     mov rax, qword [rsi + 8] ;Get the number of bytes saved into rax
   313                              <1> 
   314 0000154D 488D15(00000000)    <1>     lea rdx, section.programArea.vstart
   315 00001554 4829DA              <1>     sub rdx, rbx    ;Get the size of the interpreter and internal data area
   316 00001557 4829D0              <1>     sub rax, rdx    ;Remove the number of bytes reserved to the interpreter
   317 0000155A E815FDFFFF          <1>     call printdecimalword
   318 0000155F 4801C3              <1>     add rbx, rax    ;Add number of bytes to start address
   319 00001562 48891D(D00E0000)    <1>     mov qword [maxMemAddr], rbx ;Save this address
   320                              <1> .exit:
   321 00001569 C3                  <1>     ret
   322                              <1> .worstCase:
   323                              <1> ;Assume 2Mb MAX memory, rax has base address
   324 0000156A 48BB00002000000000- <1>     mov rbx, 200000h    ;2Mb value
   324 00001573 00                  <1>
   325 00001574 4829C3              <1>     sub rbx, rax
   326 00001577 4889D8              <1>     mov rax, rbx    ;Get value in rax
   327 0000157A E8F5FCFFFF          <1>     call printdecimalword
   328 0000157F 48C705(D00E0000)00- <1>     mov qword [maxMemAddr], 200000h
   328 00001587 002000              <1>
   329 0000158A C3                  <1>     ret
   330                              <1> 
    18                                  %include "BASICDAT.ASM"
    19 0000158B 4F6B0A0D00          <1> prompt  db "Ok",0Ah,0Dh,0
    20 00001590 53435220494E544241- <1> mainmsg db "SCR INTBASIC/64 v0.1",0Ah,0Dh,0
    20 00001599 5349432F3634207630- <1>
    20 000015A2 2E310A0D00          <1>
    21 000015A7 204279746573206672- <1> bytemsg db " Bytes free",0Ah,0Dh,0
    21 000015B0 65650A0D00          <1>
    22 000015B5 0A0D00              <1> crlf    db 0Ah,0Dh,0
    23 000015B8 4572726F720A0D00    <1> errmsg  db "Error",0Ah,0Dh,0
    24 000015C0 303132333435363738- <1> numbers db "0123456789"
    24 000015C9 39                  <1>
    25                              <1> ;startVarChars db "ABCDEFGHIJKLMNOPQRSTUVWXYZ" ;Valid starting chars for a var name
    26                              <1> ;numStartVarChars equ $ - startVarChars
    27 000015CA 414243444546474849- <1> varChrs db "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789%$" ;Valid inner chars for var name
    27 000015D3 4A4B4C4D4E4F505152- <1>
    27 000015DC 535455565758595A30- <1>
    27 000015E5 313233343536373839- <1>
    27 000015EE 2524                <1>
    28                              <1> numVarChars equ $ - varChrs
    29                              <1> ;% => Integer variable (8 bytes)
    30                              <1> ;! => Single-Precision, Unused and ignored
    31                              <1> ;# => Double-Precision, Unused and ignored
    32                              <1> ;$ => String variable
    33                              <1> 
    34                              <1> ;Error Messages
    35 000015F0 4F7574206F66206D65- <1> noMem   db "Out of memory",0Ah,0Dh,0
    35 000015F9 6D6F72790A0D00      <1>
    36 00001600 53796E746178206572- <1> syntax  db "Syntax error",0Ah,0Dh,0
    36 00001609 726F720A0D00        <1>
    37 0000160F 54797065206D69736D- <1> typeError   db "Type mismatch",0Ah,0Dh,0
    37 00001618 617463680A0D00      <1>
    38 0000161F 556E646566696E6564- <1> lineNoXist  db "Undefined line number",0Ah,0Dh,0
    38 00001628 206C696E65206E756D- <1>
    38 00001631 6265720A0D00        <1>
    39 00001637 427265616B20696E20- <1> breakmsg db "Break in ",0
    39 00001640 00                  <1>
    40 00001641 537461636B206F7665- <1> stkOvflw db "Stack overflow",0Ah,0Dh,0
    40 0000164A 72666C6F770A0D00    <1>
    41                              <1> 
    42 00001652 5748494C4520776974- <1> noWend   db "WHILE without WEND", 0Ah, 0Dh, 0
    42 0000165B 686F75742057454E44- <1>
    42 00001664 0A0D00              <1>
    43 00001667 57454E442077697468- <1> noWhile  db "WEND without WHILE", 0Ah, 0Dh, 0
    43 00001670 6F7574205748494C45- <1>
    43 00001679 0A0D00              <1>
    44 0000167C 4E4558542077697468- <1> noFor    db "NEXT without FOR", 0Ah, 0Dh, 0
    44 00001685 6F757420464F520A0D- <1>
    44 0000168E 00                  <1>
    45 0000168F 464F5220776974686F- <1> noNext   db "FOR without NEXT", 0Ah, 0Dh, 0
    45 00001698 7574204E4558540A0D- <1>
    45 000016A1 00                  <1>
    46 000016A2 52455455524E207769- <1> noReturn db "RETURN without GOSUB", 0Ah, 0Dh, 0
    46 000016AB 74686F757420474F53- <1>
    46 000016B4 55420A0D00          <1>
    47 000016B9 556E7072696E746162- <1> uknowner db "Unprintable error", 0Ah, 0Dh, 0
    47 000016C2 6C65206572726F720A- <1>
    47 000016CB 0D00                <1>
    19                                  Segment programArea follows=resSeg align=1 vfollows=resSeg valign=1
    20                                  ENDOFPROGRAM:

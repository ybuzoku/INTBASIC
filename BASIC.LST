     1                                      [map all BASIC.MAP]
     2                                      [DEFAULT REL]
     3                                      BITS 64
     4                                  %include "MEM.INC"
     5                              <1> 
     6                              <1> progLineBlockType   equ 0   ;Program Line
     7                              <1> varBlockType        equ 1   ;Variable block
     8                              <1> datBlockType        equ 2   ;Data block (i.e. a string block)
     9                              <1> 
    10                              <1> notLastMemBlock equ "t" ;Used for blocks that are not the last block
    11                              <1> lastMemBlock    equ "r" ;Used by the last block to indicate end of chain
    12                              <1> 
    13                              <1> %macro memBlockM 0 ;Memory block Macro
    14                              <1>     .bSignature resb 1      ;Valid Signature
    15                              <1>     .wBlockSize resw 1      ;Total block size in bytes
    16                              <1>     .bBlockType resb 1      ;Block type, program line, variable or string
    17                              <1> %endmacro
    18                              <1> 
    19                              <1> struc memBlock
    20                              <1>     memBlockM
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    21                              <1> endstruc
    22                              <1> 
    23                              <1> struc progLineBlock
    24                              <1>     memBlockM               ;Common memory block header
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    25 00000004 ????                <1>     .wLineNum   resw 1      ;Line number, up to 65535
    26 00000006 ????????????????    <1>     .qPtr       resq 1      ;Pointer to the next line, or -1 if last line
    27 0000000E <res 100h>          <1>     .sLine      resb maxLineLen  ;Maximum length 255, keep null char but 
    28                              <1>     ;                             NOT LINE NUMBER OR PRECEEDING SPACES
    29                              <1> endstruc
    30                              <1> 
    31                              <1> struc varBlock
    32                              <1>     memBlockM               ;Common memory block header
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    33 00000004 ????????????????    <1>     .qValue     resq 1      ;One value qword
    34                              <1>     .sVarName:              ;Up to 40 chars for the var name
    35                              <1> endstruc
    36                              <1> 
    37                              <1> struc stringBlock
    38                              <1>     memBlockM
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    39 00000004 <res 100h>          <1>     .string     resb maxLineLen    ;Strings allocate 256 chars
    40                              <1>     .sVarName:              ;Up to 40 chars for the var name
    41                              <1> endstruc
    42                              <1> 
    43                              <1> ;Variable equates
    44                              <1> intEquate   equ 0
    45                              <1> strEquate   equ 1
    46                              <1> 
    47                              <1> ;State byte equates
    48                              <1> breakBit    equ 1    ;Set means on
    49                              <1> traceBit    equ 2    ;Set means TRON, Clear means TROFF
    50                              <1> indirectBit equ 4    ;Set means indirect/program mode, Clear means direct/line mode
    51                              <1> ctrlFlow    equ 8    ;Set means do not find other expression on current line
    52                              <1> 
    53                              <1> ;Control Instruction Signatures
    54                              <1> WHILEsig    equ 055h
    55                              <1> FORsig      equ 05Ah
    56                              <1> GOSUBsig    equ 0A5h
    57                              <1> ;Control stack data structures
    58                              <1> 
    59                              <1> struc forStruct
    60 00000000 ????????????????    <1>     .specQword  resq 1  ;Special qword (see function description)
    61 00000008 ????????????????    <1>     .cntrPtr    resq 1  ;Pointer to counter variable
    62 00000010 ????????????????    <1>     .limitValue resq 1  ;At what value, or after, do we stop the loop 
    63 00000018 ????????????????    <1>     .stepValue  resq 1  ;By how much do we increase on each iteration
    64                              <1> ;Special qword:
    65                              <1> ; Byte 7 = Offset into the line for next instruction after FOR
    66                              <1> ; Bytes[6:5] = Line number of portion after FOR (either FOR line or line after FOR)
    67                              <1> ; Byte 4 = Offset into the line for next instruction after NEXT
    68                              <1> ; Bytes[3:2] = Line number of portion after NEXT (either NEXT line or line after NEXT)
    69                              <1> ; Byte 1 = Parity check sum for the qword, makes the sum of the bytes in qword 0
    70                              <1> ; Byte 0 = FOR signature
    71                              <1> endstruc
    72                              <1> 
    73                              <1> struc whileStruct
    74 00000000 ????????????????    <1>     .specQword  resq 1  ;Special qword
    75                              <1> ;Special qword:
    76                              <1> ; Byte 7 = Offset into the line for the condition to evaluate
    77                              <1> ; Bytes[6:5] = Line number of WHILE 
    78                              <1> ; Byte 4 = Offset in line for either first : after WEND or ASCII NULL (end of line)
    79                              <1> ; Bytes[3:2] = Line number of WEND
    80                              <1> ; Byte 1 = Parity check sum for the qword, makes the sum of the bytes in qword 0
    81                              <1> ; Byte 0 = WHILE signature
    82                              <1> endstruc
    83                              <1> 
    84                              <1> struc gosubStruct
    85 00000000 ????????????????    <1>     .specQword  resq 1  ;Special qword
    86                              <1> ;Special qword:
    87                              <1> ; Byte 7 =  Offset in line for either first : after GOSUB or ASCII NULL (end of line)
    88                              <1> ; Bytes[6:5] = Line number of GOSUB 
    89                              <1> ; Bytes[4:2] = 055AA55h space filler signature
    90                              <1> ; Byte 1 = Parity check sum for the qword, makes the sum of the bytes in qword 0
    91                              <1> ; Byte 0 = GOSUB signature
    92                              <1> endstruc
    93                              <1> 
    94                              <1> ;Stack based macros
    95                              <1> %macro makeSpaceOnStack 1
    96                              <1>     ;The argument is to specify how much space to make on the stack
    97                              <1>     ;It will check to ensure that we dont go past the stack minimum.
    98                              <1>     ;If we do, call stack overflow!
    99                              <1>     pop rax    ;Get the return address qword into rax
   100                              <1>     shl %1, 3  ;Multiply argument register by 8
   101                              <1>     sub rsp, %1 ;Clear space on the stack plus one qword for ret addr
   102                              <1>     lea rbp, stack
   103                              <1>     cmp rsp, rbp
   104                              <1>     ja .macroNotOverflow ;If rsp above overflow buffer, its oki
   105                              <1>     lea rbp, stkOvflw
   106                              <1>     jmp criticalError
   107                              <1> .macroNotOverflow:
   108                              <1>     ;rsp now points to the start of the cleared space
   109                              <1>     ;Put the return address back on the stack
   110                              <1>     push rax
   111                              <1> %endmacro
   112                              <1> 
   113                              <1> %macro cleanSpaceOnStack 1
   114                              <1>     ;The argument is to specify how much space to reclaim from the stack
   115                              <1>     pop rax
   116                              <1>     shl %1, 3   ;Multiply argument register by 8
   117                              <1>     add rsp, %1
   118                              <1>     push rax
   119                              <1> %endmacro
     5                                  Segment .text align=1
     6                                  %include "RELOC.ASM"
     7 00000000 55AA                <1>     dw 0AA55h 
     8                              <1> ;First verify I have Enough RAM for my program and then run
     9 00000002 B801E80000          <1>     mov eax, 0E801h ;Get low memory count in ax
    10 00000007 CD35                <1>     int 35h
    11 00000009 663D0008            <1>     cmp ax, 200000h/400h ;Divide 2Mb into 1Kb chunks.
    12 0000000D 722A                <1>     jb bad
    13 0000000F B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    14 00000014 0F32                <1>     rdmsr
    15 00000016 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    16 00000018 48C1E720            <1>     shl rdi, 20h        ;Shift high
    17 0000001C 89C7                <1>     mov edi, eax        ;Get the low dword in
    18 0000001E 4889F8              <1>     mov rax, rdi
    19 00000021 488D35(00000000)    <1>     lea rsi, section.resSeg.start
    20 00000028 4881C7[F60E0000]    <1>     add rdi, bssLen
    21 0000002F B900100000          <1>     mov ecx, 1000h
    22 00000034 F348A5              <1>     rep movsq
    23 00000037 FFE0                <1>     jmp qword rax
    24                              <1> bad:
    25 00000039 488D2D0D000000      <1>     lea rbp, badmsg
    26 00000040 B804130000          <1>     mov eax, 1304h
    27 00000045 CD30                <1>     int 30h
    28 00000047 30E4                <1>     xor ah, ah
    29 00000049 CD36                <1>     int 36h
    30 0000004B CD38                <1>     int 38h
    31 0000004D 4E6F7420456E6F7567- <1> badmsg: db "Not Enough Memory. Press any key to enter SYSDEBUG...",0
    31 00000056 68204D656D6F72792E- <1>
    31 0000005F 20507265737320616E- <1>
    31 00000068 79206B657920746F20- <1>
    31 00000071 656E74657220535953- <1>
    31 0000007A 44454255472E2E2E00  <1>
     7                                  Segment dSeg nobits align=1 start=0
     8                                  %include "BSS.ASM"
     9 00000000 <res 50h>           <1> oflowbuff   resq 10        ;10 Qwords of overflow buffer
    10                              <1> ;rsp should never get here when operating in a program.
    11                              <1> ;Only acceptable to be used when processing a line
    12 00000050 <res D40h>          <1> stack       resq 200h - 8 - 10*8  ;Save total 4Kb stack space
    13 00000D90 ????????????????    <1> stacktop    resq 1
    14                              <1> 
    15                              <1> maxLineLen  equ 256
    16 00000D98 <res 100h>          <1> inString    resb maxLineLen         ;256 character input string
    17                              <1> 
    18                              <1> ;This string is used for printing long numbers and saving
    19                              <1> ; the variable names for string comparisons
    20                              <1> digitStringLen  equ 48
    21 00000E98 <res 30h>           <1> digitString resb digitStringLen     
    22                              <1> 
    23 00000EC8 ????????????????    <1> minMemAddr  resq 1  ;Pointer from where to start allocating memory blocks
    24 00000ED0 ????????????????    <1> maxMemAddr  resq 1  ;Pointer to the byte past which we cannot allocate anything
    25                              <1> ;==============================================================================
    26                              <1> ;This is the SDA for each program and must be included in the program area
    27                              <1> ; once we add the ability to save the program to disk.
    28                              <1> ;==============================================================================
    29                              <1> 
    30                              <1> ;void* mcbChain, lastBlock, firstLinPtr = -1 => New program, empty entries
    31                              <1> 
    32 00000ED8 ??                  <1> strLen      resb 1  ;Counter for number of chars entered in string
    33 00000ED9 ??                  <1> stateByte   resb 1  ;Bit 0 => Break Set, stop processing after end of current line
    34 00000EDA ????????????????    <1> mcbChain    resq 1  ;Pointer to the start of the chain
    35 00000EE2 ????????????????    <1> lastBlock   resq 1  ;Pointer to the last block
    36 00000EEA ????????????????    <1> firstLinPtr resq 1  ;Pointer to the programs' first line 
    37 00000EF2 ????                <1> firstLinNum resw 1  ;Line number of the first line of the program
    38 00000EF4 ????                <1> currentLine resw 1  ;Currently being executed line number
    39                              <1> 
    40                              <1> bssLen: ;Needed to compute the resident portion load location
     9                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1
    10                                  %include "MAIN.ASM"
    11                              <1> start:
    12 00000000 B801C50000          <1>     mov eax, 0C501h
    13 00000005 CD35                <1>     int 35h         ;Connect the debugger
    14 00000007 E8A1010000          <1>     call ttyClear   ;Clear the teletype
    15                              <1>     ;Set the CtrlBreak Handler
    16 0000000C 488D3DC7000000      <1>     lea rdi, ctrlBreakHandler
    17 00000013 B03B                <1>     mov al, 3Bh
    18 00000015 E8C9000000          <1>     call setHandler
    19                              <1> 
    20                              <1>     ;Memory stuff
    21 0000001A 488D2D34150000      <1>     lea rbp, mainmsg
    22 00000021 E87A010000          <1>     call ttyOutString
    23 00000026 E8C3140000          <1>     call memoryDetection
    24 0000002B 488D2D3A150000      <1>     lea rbp, bytemsg
    25 00000032 E869010000          <1>     call ttyOutString
    26 00000037 E820090000          <1>     call newProgram         ;Use this to reset program pointers
    27                              <1> mainLoop:
    28 0000003C FC                  <1>     cld                 ;Set default string op direction
    29 0000003D 488D25(900D0000)    <1>     lea rsp, stacktop    ;Reinitialize stack pointer
    30 00000044 488D05F1FFFFFF      <1>     lea rax, mainLoop
    31 0000004B 8025(D90E0000)FE    <1>     and byte [stateByte], 0FEh  ;Clear the break bit
    32 00000052 50                  <1>     push rax    ;Save address on stack
    33 00000053 488D2DF6140000      <1>     lea rbp, prompt
    34 0000005A E841010000          <1>     call ttyOutString
    35                              <1> .ml0:
    36                              <1> ;This section will execute an input line if it is an interactive expression
    37                              <1> ; or store it in the program if it has a line number.
    38                              <1> ;It will keep accepting lines until a line is entered without a line number
    39 0000005F E89F000000          <1>     call getLineInput
    40 00000064 E8A8110000          <1>     call decimalToHex   ;Check to see if we have a valid line number
    41 00000069 6685C0              <1>     test ax, ax
    42 0000006C 750C                <1>     jnz .saveLine
    43                              <1> ;Here we execute the line, move rsi to the start of the line
    44 0000006E 488D35(980D0000)    <1>     lea rsi, inString
    45 00000075 E9AE010000          <1>     jmp runLine
    46                              <1> .saveLine:
    47                              <1>     ;ax has the line number
    48 0000007A 6689C2              <1>     mov dx, ax
    49 0000007D E8FD120000          <1>     call searchForProgramLine
    50 00000082 4881FBFFFFFFFF      <1>     cmp rbx, -1
    51 00000089 751D                <1>     jne .commonProc ;If not equal, line must exist, continue
    52 0000008B E8B1020000          <1>     call spaceSkip  ;Skip all the prceeding spaces
    53 00000090 803E00              <1>     cmp byte [rsi], 0  ;Is the first non space char the end of the string?
    54 00000093 742D                <1>     je .lineDoesntExist
    55                              <1>     ;So we have a new line that isn't empty, allocate a new block for this line
    56 00000095 E815120000          <1>     call allocateBlock  ;Return a default block in rbx
    57 0000009A C6430300            <1>     mov byte [rbx + progLineBlock.bBlockType], progLineBlockType
    58 0000009E 66894304            <1>     mov word [rbx + progLineBlock.wLineNum], ax
    59 000000A2 66C743010E01        <1>     mov word [rbx + progLineBlock.wBlockSize], progLineBlock_size
    60                              <1> .commonProc:
    61                              <1>     ;If the line already exists, simply override the stored string
    62                              <1>     ;rbx has a pointer to the block
    63 000000A8 E833140000          <1>     call strlen ;Get the string length
    64 000000AD 488D7B0E            <1>     lea rdi, qword [rbx + progLineBlock.sLine]  ;Get address here
    65 000000B1 E821140000          <1>     call strcpy ;Copy the program string to the program block
    66 000000B6 56                  <1>     push rsi
    67 000000B7 4889DE              <1>     mov rsi, rbx    ;Move the block into rsi
    68 000000BA E8E4120000          <1>     call insertProgramLine
    69 000000BF 5E                  <1>     pop rsi
    70 000000C0 EB9D                <1>     jmp short .ml0
    71                              <1> .lineDoesntExist:
    72 000000C2 488D2D1B150000      <1>     lea rbp, lineNoXist
    73                              <1> ;For any error, syntax or otherwise, come here
    74                              <1> criticalError:
    75                              <1> ;Called with rbp pointing at error message
    76 000000C9 E8D2000000          <1>     call ttyOutString
    77 000000CE C605(D90E0000)00    <1>     mov byte [stateByte], 0 ;Reset the state byte
    78 000000D5 E962FFFFFF          <1>     jmp mainLoop    ;Trash input line, restart line input
    79                              <1> 
    80                              <1> ctrlBreakHandler:
    81 000000DA 800D(D90E0000)01    <1>     or byte [stateByte], 1  ;Set the byte
    82 000000E1 48CF                <1>     iretq
    83                              <1> setHandler:
    84                              <1> ;Called with:
    85                              <1> ;   rdi = Pointer to interrupt handler
    86                              <1> ;   al = Interrupt number
    87 000000E3 89C5                <1>     mov ebp, eax    ;al has interrupt number which we need to save
    88 000000E5 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
    89                              <1> ;First call to get default BIOS segement selector and attribute word
    90 000000EB 88C3                <1>     mov bl, al  ;Set interrupt number 
    91 000000ED B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
    92 000000F2 CD35                <1>     int 35h
    93 000000F4 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
    94 000000F6 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
    95                              <1> ;dx preserves the attribute word
    96 000000F8 4889FB              <1>     mov rbx, rdi  ;Pointer passed in rdi
    97 000000FB B808F00000          <1>     mov eax, 0F008h ;Set descriptor
    98 00000100 CD35                <1>     int 35h
    99                              <1>     
   100 00000102 C3                  <1>     ret
    11                                  %include "TTY.ASM"
    12                              <1> getLineInput:
    13                              <1>     ;Sets rsi to the inputstring
    14 00000103 30E4                <1>     xor ah, ah
    15 00000105 8825(D80E0000)      <1>     mov byte [strLen], ah   ;Zero the char counter
    16 0000010B 488D3D(980D0000)    <1>     lea rdi, inString   ;Move to start of line
    17 00000112 4889FE              <1>     mov rsi, rdi
    18 00000115 57                  <1>     push rdi
    19 00000116 B900010000          <1>     mov ecx, maxLineLen
    20 0000011B 30C0                <1>     xor al, al    ;Ensure the input line is sanitised
    21 0000011D F3AA                <1>     rep stosb
    22 0000011F 5F                  <1>     pop rdi
    23                              <1> .getChar:
    24 00000120 E883000000          <1>     call ttyIn
    25 00000125 3C0D                <1>     cmp al, 0Dh ;Line Feed
    26 00000127 7456                <1>     je .gliExit
    27 00000129 3C08                <1>     cmp al, 08h ;Bspace
    28 0000012B 740F                <1>     je .glibspace
    29 0000012D 803D(D80E0000)FE    <1>     cmp byte [strLen], -2   ;If at max length (255 chars), simply beep and wait for either bspace or enter
    30 00000134 7459                <1>     je .gliFull 
    31 00000136 84C0                <1>     test al, al
    32 00000138 7443                <1>     je .gliExtendedChar
    33 0000013A EB29                <1>     jmp short .gliCheckCase
    34                              <1> .glibspace:
    35 0000013C F605(D80E0000)FF    <1>     test byte [strLen], -1  ;This will only be zero if strLen=0
    36 00000143 74DB                <1>     jz .getChar
    37 00000145 48FFCF              <1>     dec rdi ;Go back by one position in the input line
    38 00000148 FE0D(D80E0000)      <1>     dec byte [strLen]
    39 0000014E B008                <1>     mov al, 08h
    40 00000150 E846000000          <1>     call ttyOutChar
    41 00000155 B020                <1>     mov al, 20h  
    42 00000157 E83F000000          <1>     call ttyOutChar
    43 0000015C B008                <1>     mov al, 08h
    44 0000015E E838000000          <1>     call ttyOutChar
    45 00000163 EBBB                <1>     jmp short .getChar
    46                              <1> .gliCheckCase:
    47                              <1>     ;al has char
    48 00000165 E831000000          <1>     call ttyOutChar ;Echo the char as is, but store it uppercase
    49 0000016A 3C61                <1>     cmp al, "a"
    50 0000016C 7206                <1>     jb .gliccStore
    51 0000016E 3C7A                <1>     cmp al, "z"
    52 00000170 7702                <1>     ja .gliccStore
    53 00000172 2C20                <1>     sub al, 20h
    54                              <1> .gliccStore:
    55 00000174 AA                  <1>     stosb   ;Increment the pointer, add char to buffer
    56 00000175 FE05(D80E0000)      <1>     inc byte [strLen]   ;Inc char count
    57 0000017B EBA3                <1>     jmp short .getChar
    58                              <1> .gliExtendedChar:
    59                              <1>     ;Currently, extended chars do nothing, 
    60                              <1>     ; eventually add F1-F10 functionality
    61                              <1>     ; and arrow key support
    62 0000017D EBA1                <1>     jmp short .getChar
    63                              <1> .gliExit:
    64 0000017F 488D2DF4130000      <1>     lea rbp, crlf
    65 00000186 E815000000          <1>     call ttyOutString
    66 0000018B C60700              <1>     mov byte [rdi], 0   ;Null terminate string here
    67 0000018E C3                  <1>     ret
    68                              <1> .gliFull:
    69 0000018F B007                <1>     mov al, 07h
    70 00000191 E805000000          <1>     call ttyOutChar
    71 00000196 E985FFFFFF          <1>     jmp .getChar
    72                              <1> 
    73                              <1> ttyOutChar:
    74 0000019B B40E                <1>     mov ah, 0Eh
    75 0000019D CD30                <1>     int 30h
    76 0000019F C3                  <1>     ret
    77                              <1> ttyOutString:
    78                              <1> ;Print 0 terminated strings
    79 000001A0 B804130000          <1>     mov eax, 1304h
    80 000001A5 CD30                <1>     int 30h
    81 000001A7 C3                  <1>     ret
    82                              <1> ttyIn:
    83 000001A8 30E4                <1>     xor ah, ah
    84 000001AA CD36                <1>     int 36h
    85 000001AC C3                  <1>     ret
    86                              <1> ttyClear:
    87 000001AD B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
    88 000001B2 CD30                <1>     int 30h
    89 000001B4 B402                <1>     mov ah, 02h
    90 000001B6 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
    91 000001B8 88D7                <1>     mov bh, dl      ;Set cursor for page 0
    92 000001BA CD30                <1>     int 30h
    93 000001BC B707                <1>     mov bh, 07h     ;Grey/Black attribs
    94 000001BE B800060000          <1>     mov eax, 0600h  ;Clear whole screen
    95 000001C3 CD30                <1>     int 30h
    96 000001C5 C3                  <1>     ret
    12                                  %include "PROCESS.ASM"
    13                              <1> keywordParser:
    14                              <1> ;rsi must point to the start of the portion of the line to execute
    15 000001C6 E876010000          <1>     call spaceSkip  ;Skip any leading spaces
    16 000001CB 803E00              <1>     cmp byte [rsi], 0   ;Null terminated line, empty line?
    17 000001CE 7444                <1>     je .exitEmpty
    18                              <1>     ;rsi now points to function
    19 000001D0 488D3D8B050000      <1>     lea rdi, funTbl     ;Point rdi to the function table
    20                              <1> .functionFinderLoop:
    21 000001D7 0FB60F              <1>     movzx ecx, byte [rdi]  ;Get the string length  
    22 000001DA 80F9FF              <1>     cmp cl, -1  ;-1 is the end of table marker, either Var assignment or error
    23 000001DD 7440                <1>     je .notLetVarAssignment ;No key word found, consider variable assignment
    24 000001DF 56                  <1>     push rsi    ;Save ptr to start of string on stack 
    25 000001E0 57                  <1>     push rdi
    26 000001E1 48FFC7              <1>     inc rdi             ;Goto first char in function name
    27 000001E4 F3A6                <1>     repe cmpsb
    28 000001E6 5F                  <1>     pop rdi
    29 000001E7 5E                  <1>     pop rsi     ;Return ptr to start of string pointer from stack
    30 000001E8 84C9                <1>     test cl, cl ;Did all the chars match?
    31 000001EA 740F                <1>     jz .functionFound
    32 000001EC 480FB607            <1>     movzx rax, byte [rdi]    ;Skip unnecessary function pointer
    33 000001F0 480502000000        <1>     add rax, 2      ;Add 2 to skip relative pointer
    34 000001F6 4801C7              <1>     add rdi, rax
    35 000001F9 EBDC                <1>     jmp short .functionFinderLoop
    36                              <1> .functionFound:
    37                              <1>     ;Function found! Execute!
    38                              <1>     ;rsi points to start of expression to evaluate for function
    39                              <1>     ;rdi points to table entry
    40 000001FB 488D1D60050000      <1>     lea rbx, funTbl         ;Get table address
    41 00000202 480FB617            <1>     movzx rdx, byte [rdi]   ;Get pascal string length
    42 00000206 0FB70C17            <1>     movzx ecx, word [rdi + rdx] ;Add pascal strlen to table entry and get word offset
    43 0000020A 4801CB              <1>     add rbx, rcx    ;Add word offset to table base
    44 0000020D 48FFCA              <1>     dec rdx         ;Get number of chars in function name
    45 00000210 4801D6              <1>     add rsi, rdx    ;rsi points to first char AFTER function name
    46                              <1> .exit:
    47 00000213 C3                  <1>     ret 
    48                              <1> .exitEmpty:
    49 00000214 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    49 0000021D FF                  <1>
    50 0000021E C3                  <1>     ret
    51                              <1>     ;rbx has the function pointer, 
    52                              <1>     ;rsi points to the first char after the keyword (e.g. PRINT, INPUT etc)
    53                              <1> .notLetVarAssignment:
    54 0000021F 488D1DB8060000      <1>     lea rbx, variableAssignment
    55 00000226 EBEB                <1>     jmp short .exit  ;Now call the function as if it was found from the table
    56                              <1> 
    57                              <1> runLine:
    58                              <1> ;New lines begin here, rsi point to the start of the program line
    59 00000228 F605(D90E0000)02    <1>     test byte [stateByte], traceBit ;Are we TRON?
    60 0000022F 0F85B0000000        <1>     jnz .tron
    61                              <1> .stringPortionProcess:
    62                              <1>     ;rsi points to string portion to begin processing
    63 00000235 E88CFFFFFF          <1>     call keywordParser
    64                              <1>     ;rbx has the function pointer, if rbx is -1, line was empty
    65                              <1>     ;rsi points to the first char after the keyword (e.g. PRINT, INPUT etc)
    66 0000023A 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If the line is empty, rbx has a -1 so skip the line
    67 00000241 7437                <1>     je .gotoNextLine
    68 00000243 F605(D90E0000)01    <1>     test byte [stateByte], breakBit ;Is break set before exec?
    69 0000024A 0F85C1000000        <1>     jnz .break
    70                              <1> ;EXEC   LINE    PORTION
    71 00000250 FFD3                <1>     call rbx        ;Call the function pointer in rbx
    72                              <1>     ;rsi should be pointing to the next portion of the line or the end of the line
    73                              <1> ;EXEC COMPLETE
    74 00000252 F605(D90E0000)01    <1>     test byte [stateByte], breakBit ;Is break set after exec?
    75 00000259 0F85B2000000        <1>     jnz .break
    76 0000025F F605(D90E0000)04    <1>     test byte [stateByte], indirectBit
    77 00000266 7448                <1>     jz .exit    ;IF in direct mode, just return to command line
    78 00000268 F605(D90E0000)08    <1>     test byte [stateByte], ctrlFlow ;Ctrl Flow =>ignore other expressions temporarily
    79 0000026F 7540                <1>     jnz .ctrlFlowHandler
    80                              <1> 
    81 00000271 E8E2040000          <1>     call findOtherExpressionsOnLine ;See if there are any other expressions
    82 00000276 84C0                <1>     test al, al ;If al is null, no more expressions on the line
    83                              <1>     ;If not null, keep executing expressions on same line
    84                              <1>     ;rsi points to first char after :
    85 00000278 75BB                <1>     jnz .stringPortionProcess ;If a : found, keep processing
    86                              <1> .gotoNextLine:
    87 0000027A 668B15(F40E0000)    <1>     mov dx, word [currentLine]  ;Get in rbx the ptr to current line
    88 00000281 E8F9100000          <1>     call searchForProgramLine
    89 00000286 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Does the line not exist somehow?
    90 0000028D 7421                <1>     je .exit
    91 0000028F 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Walk chain
    92 00000293 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Are we at the end of the chain?
    93 0000029A 7414                <1>     je .exit
    94 0000029C 668B5304            <1>     mov dx, word [rbx + progLineBlock.wLineNum] ;Save the new line number
    95 000002A0 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Point rsi to the start of the next line
    96                              <1> .gotoNextLineCommon:
    97 000002A4 668915(F40E0000)    <1>     mov word [currentLine], dx
    98 000002AB E978FFFFFF          <1>     jmp runLine
    99                              <1> .exit:
   100 000002B0 C3                  <1>     ret
   101                              <1> .ctrlFlowHandler:
   102                              <1>     ;The stack pointer should be pointing now at the block
   103                              <1>     ; control flow data block. 
   104                              <1>     ;The functions which return with this bit set, also have placed
   105                              <1>     ; the next line number in dx, offset into line in byte three of edx
   106 000002B1 8025(D90E0000)F7    <1>     and byte [stateByte], ~ctrlFlow ;First clear the ctrlflow bit
   107 000002B8 E8C2100000          <1>     call searchForProgramLine   ;Get pointer to line
   108 000002BD 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Does the line not exist?
   109 000002C4 74DE                <1>     je .gotoNextLineCommon
   110 000002C6 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Point rsi to the start of the next line
   111 000002CA 89D0                <1>     mov eax, edx    ;Isolate the offset into the line
   112 000002CC C1E810              <1>     shr eax, 10h    ;Get byte three into byte 1
   113 000002CF 25FF000000          <1>     and eax, 0FFh   ;Save only the bottom byte
   114 000002D4 4801C6              <1>     add rsi, rax    ;Add the offset into the string to rsi
   115 000002D7 EBCB                <1>     jmp short .gotoNextLineCommon
   116                              <1> .badLineNumber:
   117 000002D9 488D2D04130000      <1>     lea rbp, lineNoXist
   118 000002E0 E9E4FDFFFF          <1>     jmp criticalError
   119                              <1> 
   120                              <1> .tron:
   121                              <1> ;Print the line number about to be executed
   122 000002E5 F605(D90E0000)04    <1>     test byte [stateByte], indirectBit  ;Tron should only work in indirect mode
   123 000002EC 0F8443FFFFFF        <1>     jz .stringPortionProcess
   124 000002F2 B05B                <1>     mov al, "["
   125 000002F4 E8A2FEFFFF          <1>     call ttyOutChar
   126 000002F9 0FB705(F40E0000)    <1>     movzx eax, word [currentLine]
   127 00000300 E8340F0000          <1>     call printdecimalword
   128 00000305 B05D                <1>     mov al, "]"
   129 00000307 E88FFEFFFF          <1>     call ttyOutChar
   130 0000030C E924FFFFFF          <1>     jmp .stringPortionProcess
   131                              <1> .break:
   132 00000311 488D2DE4120000      <1>     lea rbp, breakmsg
   133 00000318 E883FEFFFF          <1>     call ttyOutString
   134 0000031D 0FB705(F40E0000)    <1>     movzx eax, word [currentLine]
   135 00000324 E8100F0000          <1>     call printdecimalword
   136 00000329 488D2D4A120000      <1>     lea rbp, crlf
   137 00000330 E86BFEFFFF          <1>     call ttyOutString
   138                              <1>     ;Preserve only bit 2 of the state byte
   139 00000335 8025(D90E0000)02    <1>     and byte [stateByte], traceBit
   140 0000033C E9FBFCFFFF          <1>     jmp mainLoop    ;Exit processing
    13                                  %include "PARSE.ASM"
    14                              <1> ;Main Parsing Routines go here
    15                              <1> 
    16                              <1> spaceSkip:
    17                              <1> ;Allows us to skip spaces that might have been placed for
    18                              <1> ; ease of reading by the user without modifying any registers
    19                              <1> ; except for rsi.
    20                              <1> ;Input: rsi = Pointer to string
    21                              <1> ;Output: rsi = First non space character encountered
    22 00000341 803E20              <1>     cmp byte [rsi], " "
    23 00000344 7505                <1>     jne .exit
    24 00000346 48FFC6              <1>     inc rsi
    25 00000349 EBF6                <1>     jmp short spaceSkip
    26                              <1> .exit:
    27 0000034B C3                  <1>     ret
    28                              <1> 
    29                              <1> getVarNameLength:
    30                              <1> ;Called pointing to the buffer with the var name in it
    31                              <1> ;Input: rsi = Start of var name
    32                              <1> ;Output: ecx = Length of varname
    33 0000034C 50                  <1>     push rax
    34 0000034D 56                  <1>     push rsi
    35 0000034E 57                  <1>     push rdi
    36 0000034F 53                  <1>     push rbx
    37 00000350 52                  <1>     push rdx
    38 00000351 31D2                <1>     xor edx, edx    ;Clear counter of chars
    39 00000353 488D1D35120000      <1>     lea rbx, varChrs    ;Get the list of valid variable name chars
    40                              <1> .search:
    41 0000035A 4889DF              <1>     mov rdi, rbx    ;Save pointer in rbx
    42 0000035D AC                  <1>     lodsb       ;Get the first char into al
    43 0000035E B926000000          <1>     mov ecx, numVarChars
    44 00000363 F2AE                <1>     repne scasb       ;Look for char in the valid chars list
    45 00000365 750A                <1>     jne .exit   ;Char not found, drop it
    46 00000367 FFC2                <1>     inc edx     ;Add one to number of chars found
    47 00000369 81FA28000000        <1>     cmp edx, 40 ;At position for char 40?
    48 0000036F 72E9                <1>     jb .search  ;Whilst below, keep going
    49                              <1> .exit:
    50 00000371 89D1                <1>     mov ecx, edx
    51 00000373 5A                  <1>     pop rdx
    52 00000374 5B                  <1>     pop rbx
    53 00000375 5F                  <1>     pop rdi
    54 00000376 5E                  <1>     pop rsi
    55 00000377 58                  <1>     pop rax
    56 00000378 C3                  <1>     ret
    57                              <1> 
    58                              <1> getVarType:
    59                              <1> ;Input: rsi = Start of var name
    60                              <1> ;       rcx = Length of varname
    61                              <1> ;Output: ebx = 0 => Integer
    62                              <1> ;        ebx = 1 => String
    63                              <1> ;        ebx = -1 => Var doesnt exist, caller handles
    64 00000379 50                  <1>     push rax
    65 0000037A 51                  <1>     push rcx
    66 0000037B 56                  <1>     push rsi
    67 0000037C E88E0F0000          <1>     call findVariable
    68 00000381 4881FBFFFFFFFF      <1>     cmp rbx, -1
    69 00000388 7406                <1>     je .exit
    70 0000038A 0FB65B03            <1>     movzx ebx, byte [rbx + memBlock.bBlockType]
    71 0000038E FFCB                <1>     dec ebx
    72                              <1> .exit:
    73 00000390 5E                  <1>     pop rsi
    74 00000391 59                  <1>     pop rcx
    75 00000392 58                  <1>     pop rax
    76 00000393 C3                  <1>     ret
    77                              <1> 
    78                              <1> handleAlgebraicExpression:
    79                              <1> ;Input: rsi = Points to a mathematical expression
    80                              <1> ;Output: rax = Result of said expression
    81                              <1> ;Declares a syntax error if weird chars found
    82                              <1> ;Declares a type error if a string variable found
    83                              <1> ;Declares a stack overflow if less than 20 stack words available
    84 00000394 50                  <1>     push rax
    85 00000395 488D05(50000000)    <1>     lea rax, stack
    86 0000039C 480550000000        <1>     add rax, 10*8   ;Be extra careful
    87 000003A2 4839C4              <1>     cmp rsp, rax
    88                              <1>     ;if rsp is below rax, fail
    89 000003A5 0F8229030000        <1>     jb .stack
    90 000003AB 58                  <1>     pop rax
    91                              <1> .handleFourthLevel:
    92 000003AC E805010000          <1>     call .handleThirdLevel
    93                              <1> .parseLogicals:
    94 000003B1 66813E414E          <1>     cmp word [rsi], "AN"
    95 000003B6 750A                <1>     jne .hae1
    96 000003B8 807E0244            <1>     cmp byte [rsi + 2], "D"
    97 000003BC 0F84AB000000        <1>     je .and
    98                              <1> .hae1:
    99 000003C2 66813E4F52          <1>     cmp word [rsi], "OR"
   100 000003C7 0F84AF000000        <1>     je .or
   101                              <1> 
   102 000003CD 66813E584F          <1>     cmp word [rsi], "XO"
   103 000003D2 750A                <1>     jne .hae2
   104 000003D4 807E0252            <1>     cmp byte [rsi + 2], "R"
   105 000003D8 0F84B0000000        <1>     je .xor
   106                              <1> .hae2:
   107 000003DE 813E494D5020        <1>     cmp dword [rsi], "IMP "
   108 000003E4 7468                <1>     je .imp
   109 000003E6 813E524F4C20        <1>     cmp dword [rsi], "ROL "
   110 000003EC 744F                <1>     je .leftRoll
   111 000003EE 813E524F5220        <1>     cmp dword [rsi], "ROR "
   112 000003F4 7436                <1>     je .rightRoll
   113 000003F6 813E53484C20        <1>     cmp dword [rsi], "SHL "
   114 000003FC 741D                <1>     je .leftShift
   115 000003FE 813E53485220        <1>     cmp dword [rsi], "SHR "
   116 00000404 0F859E020000        <1>     jne .exit
   117                              <1> .rightShift:
   118                              <1> ;Shift count is truncated to between 1 and 255 for shift and Roll
   119 0000040A 50                  <1>     push rax
   120 0000040B E89F000000          <1>     call .handleThirdLevelSkip
   121 00000410 59                  <1>     pop rcx
   122 00000411 4891                <1>     xchg rax, rcx   ;Move count into rcx, and shift target to rax
   123 00000413 48D3E8              <1>     shr rax, cl
   124 00000416 E996FFFFFF          <1>     jmp .parseLogicals
   125                              <1> 
   126                              <1> .leftShift:
   127 0000041B 50                  <1>     push rax
   128 0000041C E88E000000          <1>     call .handleThirdLevelSkip
   129 00000421 59                  <1>     pop rcx
   130 00000422 4891                <1>     xchg rax, rcx   ;Move count into rcx, and shift target to rax
   131 00000424 48D3E0              <1>     shl rax, cl
   132 00000427 E985FFFFFF          <1>     jmp .parseLogicals
   133                              <1> 
   134                              <1> .rightRoll:
   135 0000042C 50                  <1>     push rax
   136 0000042D E87D000000          <1>     call .handleThirdLevelSkip
   137 00000432 59                  <1>     pop rcx
   138 00000433 4891                <1>     xchg rax, rcx   ;Move count into rcx, and shift target to rax
   139 00000435 48D3C8              <1>     ror rax, cl
   140 00000438 E974FFFFFF          <1>     jmp .parseLogicals
   141                              <1> 
   142                              <1> .leftRoll:
   143 0000043D 50                  <1>     push rax
   144 0000043E E86C000000          <1>     call .handleThirdLevelSkip
   145 00000443 59                  <1>     pop rcx
   146 00000444 4891                <1>     xchg rax, rcx   ;Move count into rcx, and shift target to rax
   147 00000446 48D3C0              <1>     rol rax, cl
   148 00000449 E963FFFFFF          <1>     jmp .parseLogicals
   149                              <1> 
   150                              <1> .imp:
   151                              <1>     ;A => B == ¬A OR B
   152 0000044E 50                  <1>     push rax
   153 0000044F E85B000000          <1>     call .handleThirdLevelSkip
   154 00000454 59                  <1>     pop rcx ;rcx has A
   155 00000455 48F7D1              <1>     not rcx
   156 00000458 4809C8              <1>     or rax, rcx
   157 0000045B E951FFFFFF          <1>     jmp .parseLogicals
   158                              <1> 
   159                              <1> .not:
   160 00000460 E84A000000          <1>     call .handleThirdLevelSkip  ;Get result in rax
   161 00000465 48F7D0              <1>     not rax ;Save 1's compliment in rax
   162 00000468 E944FFFFFF          <1>     jmp .parseLogicals
   163                              <1> .and:
   164 0000046D 50                  <1>     push rax
   165 0000046E E83C000000          <1>     call .handleThirdLevelSkip
   166 00000473 59                  <1>     pop rcx
   167 00000474 4821C8              <1>     and rax, rcx
   168 00000477 E935FFFFFF          <1>     jmp .parseLogicals
   169                              <1> .or:
   170 0000047C 48FFCE              <1>     dec rsi ;handle third level skips skips one too many for or
   171 0000047F 50                  <1>     push rax
   172 00000480 E82A000000          <1>     call .handleThirdLevelSkip
   173 00000485 59                  <1>     pop rcx
   174 00000486 4809C8              <1>     or rax, rcx
   175 00000489 E923FFFFFF          <1>     jmp .parseLogicals
   176                              <1> .xor:
   177 0000048E 50                  <1>     push rax
   178 0000048F E81B000000          <1>     call .handleThirdLevelSkip
   179 00000494 59                  <1>     pop rcx
   180 00000495 4831C8              <1>     xor rax, rcx
   181 00000498 E914FFFFFF          <1>     jmp .parseLogicals
   182                              <1> .eqv:
   183                              <1> ;Not XOR, ie only if the two bits are equal do we set it
   184 0000049D 50                  <1>     push rax
   185 0000049E E80C000000          <1>     call .handleThirdLevelSkip
   186 000004A3 59                  <1>     pop rcx
   187 000004A4 4831C8              <1>     xor rax, rcx
   188 000004A7 48F7D0              <1>     not rax
   189 000004AA E902FFFFFF          <1>     jmp .parseLogicals
   190                              <1> 
   191                              <1> ;Level 3, Relational Connectives
   192                              <1> .handleThirdLevelSkip:
   193 000004AF 4881C603000000      <1>     add rsi, 3  ;Go past the end of the word
   194                              <1> .handleThirdLevel:
   195 000004B6 E80B010000          <1>    call .handleSecondLevel
   196                              <1> .parseRelationals:
   197                              <1>     ;Handle Relational connectives
   198 000004BB 803E3D              <1>     cmp byte [rsi], "="
   199 000004BE 0F84BA000000        <1>     je .processEq
   200 000004C4 66813E3C3E          <1>     cmp word [rsi], "<>"
   201 000004C9 0F84D0000000        <1>     je .processNeq
   202 000004CF 66813E3E3C          <1>     cmp word [rsi], "><"
   203 000004D4 0F84C5000000        <1>     je .processNeq
   204 000004DA 803E3C              <1>     cmp byte [rsi], "<"
   205 000004DD 7430                <1>     je .processLess
   206 000004DF 803E3E              <1>     cmp byte [rsi], ">"
   207 000004E2 0F85C0010000        <1>     jne .exit
   208                              <1> .processGreater:
   209 000004E8 807E013D            <1>     cmp byte [rsi + 1], "=" ;Is this a GEQ
   210 000004EC 7448                <1>     je .processGeq
   211 000004EE 50                  <1>     push rax
   212 000004EF E8CF000000          <1>     call .handleSecondLevelSkip
   213 000004F4 59                  <1>     pop rcx ;lhs, rax has rhs of >
   214                              <1> 
   215 000004F5 53                  <1>     push rbx
   216 000004F6 31DB                <1>     xor ebx, ebx
   217 000004F8 4839C1              <1>     cmp rcx, rax
   218 000004FB 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1 ;Default to true
   218 00000504 FF                  <1>
   219 00000505 480F4EC3            <1>     cmovle rax, rbx  ;Move the false value if less than
   220 00000509 5B                  <1>     pop rbx
   221 0000050A E9ACFFFFFF          <1>     jmp .parseRelationals
   222                              <1> .processLess:
   223 0000050F 807E013D            <1>     cmp byte [rsi + 1], "=" ;Is this a LEQ
   224 00000513 7445                <1>     je .processLeq
   225 00000515 50                  <1>     push rax
   226 00000516 E8A8000000          <1>     call .handleSecondLevelSkip
   227 0000051B 59                  <1>     pop rcx ;lhs, rax has rhs of <
   228                              <1> 
   229 0000051C 53                  <1>     push rbx
   230 0000051D 31DB                <1>     xor ebx, ebx
   231 0000051F 4839C1              <1>     cmp rcx, rax
   232 00000522 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1 ;Default to true
   232 0000052B FF                  <1>
   233 0000052C 480F4DC3            <1>     cmovge rax, rbx  ;Move the false value if greater than or equal to
   234 00000530 5B                  <1>     pop rbx
   235 00000531 E985FFFFFF          <1>     jmp .parseRelationals
   236                              <1> 
   237                              <1> .processGeq:
   238                              <1> ;Symbol has two chars so skip second char
   239 00000536 48FFC6              <1>     inc rsi ;Skip first symbol
   240 00000539 50                  <1>     push rax
   241 0000053A E884000000          <1>     call .handleSecondLevelSkip
   242 0000053F 59                  <1>     pop rcx ;lhs, rax has rhs of >=
   243                              <1> 
   244 00000540 53                  <1>     push rbx
   245 00000541 31DB                <1>     xor ebx, ebx
   246 00000543 4839C1              <1>     cmp rcx, rax
   247 00000546 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1 ;Default to true
   247 0000054F FF                  <1>
   248 00000550 480F4CC3            <1>     cmovl rax, rbx  ;Move the false value if less than
   249 00000554 5B                  <1>     pop rbx
   250 00000555 E961FFFFFF          <1>     jmp .parseRelationals
   251                              <1> 
   252                              <1> .processLeq:
   253                              <1> ;Symbol has two chars so skip second char
   254 0000055A 48FFC6              <1>     inc rsi
   255 0000055D 50                  <1>     push rax
   256 0000055E E860000000          <1>     call .handleSecondLevelSkip
   257 00000563 59                  <1>     pop rcx ;lhs, rax has rhs of <=
   258                              <1> 
   259 00000564 53                  <1>     push rbx
   260 00000565 31DB                <1>     xor ebx, ebx
   261 00000567 4839C1              <1>     cmp rcx, rax
   262 0000056A 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1 ;Default to true
   262 00000573 FF                  <1>
   263 00000574 480F4FC3            <1>     cmovg rax, rbx  ;Move the false value if greater than
   264 00000578 5B                  <1>     pop rbx
   265 00000579 E93DFFFFFF          <1>     jmp .parseRelationals
   266                              <1> 
   267                              <1> .processEq:
   268 0000057E 50                  <1>     push rax
   269 0000057F E83F000000          <1>     call .handleSecondLevelSkip
   270 00000584 59                  <1>     pop rcx ;lhs, rax has rhs of =
   271                              <1> 
   272 00000585 53                  <1>     push rbx 
   273 00000586 31DB                <1>     xor ebx, ebx
   274 00000588 4839C1              <1>     cmp rcx, rax
   275 0000058B 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1
   275 00000594 FF                  <1>
   276 00000595 480F45C3            <1>     cmovne rax, rbx ;Only set rax to 0 if not equal
   277 00000599 5B                  <1>     pop rbx
   278 0000059A E91CFFFFFF          <1>     jmp .parseRelationals
   279                              <1> 
   280                              <1> .processNeq:
   281                              <1> ;Symbol has two chars so skip second char
   282 0000059F 48FFC6              <1>     inc rsi
   283 000005A2 50                  <1>     push rax
   284 000005A3 E81B000000          <1>     call .handleSecondLevelSkip
   285 000005A8 59                  <1>     pop rcx ;lhs, rax has rhs of <>
   286                              <1> 
   287 000005A9 53                  <1>     push rbx 
   288 000005AA 31DB                <1>     xor ebx, ebx
   289 000005AC 4839C1              <1>     cmp rcx, rax
   290 000005AF 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1 ;Assume true, not equal
   290 000005B8 FF                  <1>
   291 000005B9 480F44C3            <1>     cmove rax, rbx ;Only set rax to 0 if equal
   292 000005BD 5B                  <1>     pop rbx
   293 000005BE E9F8FEFFFF          <1>     jmp .parseRelationals
   294                              <1> 
   295                              <1> ;Level 2, Addition and Subtraction
   296                              <1> .handleSecondLevelSkip:
   297 000005C3 48FFC6              <1>     inc rsi
   298                              <1> .handleSecondLevel:
   299 000005C6 E828000000          <1>     call .handleFirstLevel
   300                              <1> .parseAdditiveOperators:    
   301 000005CB 803E2D              <1>     cmp byte [rsi], "-"
   302 000005CE 7415                <1>     je .processMinus
   303 000005D0 803E2B              <1>     cmp byte [rsi], "+"
   304 000005D3 0F85CF000000        <1>     jne .exit              ;No operators, expression evaluated, exit
   305 000005D9 50                  <1>     push rax
   306 000005DA E811000000          <1>     call .handleFirstLevelSkip   ;Parse first level
   307                              <1> .processAdd:    
   308 000005DF 59                  <1>     pop rcx
   309 000005E0 4801C8              <1>     add rax, rcx           ;Add the two numbers
   310 000005E3 EBE6                <1>     jmp short .parseAdditiveOperators  ;Search again for + or -
   311                              <1> .processMinus:
   312 000005E5 50                  <1>     push rax
   313 000005E6 E805000000          <1>     call .handleFirstLevelSkip   ;Parse first level
   314 000005EB 48F7D8              <1>     neg rax              ;Change a - b to a + -b
   315 000005EE EBEF                <1>     jmp short .processAdd
   316                              <1> 
   317                              <1> ;Level 1, Exponent, Division and multiplication
   318                              <1> 
   319                              <1> .handleFirstLevelSkip:
   320 000005F0 48FFC6              <1>     inc rsi              ;Skip the op symbol
   321                              <1> .handleFirstLevel:
   322 000005F3 E858000000          <1>     call .handleZerothLevel      ;Call third level
   323                              <1> .parseProductOperators:
   324 000005F8 803E5E              <1>     cmp byte [rsi], "^"
   325 000005FB 742D                <1>     je .exponentFound
   326 000005FD 803E2F              <1>     cmp byte [rsi], "/"
   327 00000600 7415                <1>     je .processDiv
   328 00000602 803E2A              <1>     cmp byte [rsi], "*"
   329 00000605 0F859D000000        <1>     jne .exit           ;Neither multiplication or division, return up a level
   330                              <1> 
   331 0000060B 50                  <1>     push rax
   332 0000060C E83C000000          <1>     call .handleZerothLevelSkip   ;Call zeroth level
   333 00000611 59                  <1>     pop rcx
   334 00000612 48F7E9              <1>     imul rcx             ; Multiplication
   335 00000615 EBE1                <1>     jmp short .parseProductOperators   ;Search again for * or /
   336                              <1> 
   337                              <1> .processDiv:
   338 00000617 50                  <1>     push rax
   339 00000618 E830000000          <1>     call .handleZerothLevelSkip   ;Call zeroth level
   340 0000061D 59                  <1>     pop rcx
   341 0000061E 4891                <1>     xchg rax, rcx
   342 00000620 31D2                <1>     xor edx, edx         ;Clear rdx for rdx:rax
   343 00000622 48F7F9              <1>     idiv rcx             ;Signed division
   344 00000625 E9CEFFFFFF          <1>     jmp .parseProductOperators         ;Search again for * or /
   345                              <1> 
   346                              <1> .exponentFound:
   347                              <1>     ;rax has the number to exponentiate
   348 0000062A 6687DB              <1>     xchg bx, bx
   349 0000062D 50                  <1>     push rax
   350 0000062E E81A000000          <1>     call .handleZerothLevelSkip  ;Parse the inner expression
   351 00000633 59                  <1>     pop rcx
   352 00000634 4891                <1>     xchg rcx, rax
   353                              <1>     ;rax has the number to exponentiate, rcx has the number of times to loop imul
   354 00000636 53                  <1>     push rbx
   355 00000637 4889C3              <1>     mov rbx, rax    ;Save a copy of rax in rbx
   356 0000063A 48FFC9              <1>     dec rcx
   357                              <1> .imulLoop:
   358 0000063D 31D2                <1>     xor edx, edx
   359 0000063F 48F7EB              <1>     imul rbx
   360 00000642 48FFC9              <1>     dec rcx
   361 00000645 75F6                <1>     jnz .imulLoop
   362 00000647 5B                  <1>     pop rbx
   363 00000648 E9ABFFFFFF          <1>     jmp .parseProductOperators
   364                              <1> 
   365                              <1> ;Level 0, Brackets, numbers and vars.
   366                              <1> 
   367                              <1> .handleZerothLevelSkip:
   368 0000064D 48FFC6              <1>     inc rsi             ;Skip the op symbol
   369                              <1> .handleZerothLevel:
   370 00000650 E8ECFCFFFF          <1>     call spaceSkip
   371 00000655 AC                  <1>     lodsb               ;Read char and adv rsi
   372 00000656 3C28                <1>     cmp al, '('
   373 00000658 750F                <1>     jne .varConstCheck
   374 0000065A E835FDFFFF          <1>     call handleAlgebraicExpression  ;Parse the inner expression
   375 0000065F 803E29              <1>     cmp byte [rsi], ')'   
   376 00000662 745C                <1>     je .closeBracket     ;If close bracket, goto skip spaces
   377 00000664 E95F000000          <1>     jmp .error     ;Otherwise, error
   378                              <1>   
   379                              <1> .varConstCheck:
   380 00000669 3C41                <1>     cmp al, "A"       ;Alphabetical first char?
   381 0000066B 730D                <1>     jae .varOrRNDFound      ;Yes, variable found or rnd function or error
   382 0000066D 48FFCE              <1>     dec rsi            ;Else back one symbol 
   383 00000670 E89C0B0000          <1>     call decimalToHex  ;to read number into rax
   384 00000675 E9C7FCFFFF          <1>     jmp spaceSkip
   385                              <1> 
   386                              <1> .varOrRNDFound:
   387 0000067A 48FFCE              <1>     dec rsi
   388                              <1> ;Evaluate UNARY operators here in reverse stack order of importance
   389 0000067D 813E4E4F5420        <1>     cmp dword [rsi], "NOT "
   390 00000683 0F84D7FDFFFF        <1>     je .not
   391 00000689 48FFC6              <1>     inc rsi
   392 0000068C 3C5A                <1>     cmp al, "Z"  
   393 0000068E 7738                <1>     ja .error   ;Syntax error if char not between A-Z  
   394 00000690 3C52                <1>     cmp al, "R"
   395 00000692 7515                <1>     jne .varFound
   396 00000694 803E4E              <1>     cmp byte [rsi], "N" ;rsi was advanced by 1, check 
   397 00000697 7510                <1>     jne .varFound
   398 00000699 807E0144            <1>     cmp byte [rsi+1], "D"
   399 0000069D 750A                <1>     jne .varFound
   400 0000069F 66AD                <1>     lodsw               ;Advance rsi by 3
   401 000006A1 AC                  <1>     lodsb
   402 000006A2 E440                <1>     in al, 40h         ;Read timer counter 0
   403 000006A4 480FB6C0            <1>     movzx rax, al
   404                              <1> .exit:
   405 000006A8 C3                  <1>     ret                ;Return
   406                              <1> 
   407                              <1> .varFound:    
   408 000006A9 48FFCE              <1>     dec rsi ;Back a char
   409 000006AC 51                  <1>     push rcx
   410 000006AD E89AFCFFFF          <1>     call getVarNameLength
   411 000006B2 E829000000          <1>     call getNumericVariable ;Get variable value in rax
   412 000006B7 4801CE              <1>     add rsi, rcx    ;Go past the edge of the name
   413 000006BA 59                  <1>     pop rcx
   414 000006BB E981FCFFFF          <1>     jmp spaceSkip
   415                              <1> 
   416                              <1> .closeBracket:
   417 000006C0 48FFC6              <1>     inc rsi
   418 000006C3 E979FCFFFF          <1>     jmp spaceSkip
   419                              <1> .error:
   420 000006C8 488D2DF60E0000      <1>     lea rbp, syntax
   421 000006CF E9F5F9FFFF          <1>     jmp criticalError
   422                              <1> .stack:
   423 000006D4 488D1D2B0F0000      <1>     lea rbx, stkOvflw
   424 000006DB E9E9F9FFFF          <1>     jmp criticalError
   425                              <1> 
   426                              <1> 
   427                              <1> getNumericVariable:
   428                              <1> ;Gets the value stored in a variable into rax 
   429                              <1> ;Input: rsi = Pointer to first char of a variable name
   430                              <1> ;Output: rax = Variable Value
   431                              <1> ;        rsi = Pointer to first char of a variable name
   432 000006E0 56                  <1>     push rsi
   433 000006E1 51                  <1>     push rcx
   434 000006E2 53                  <1>     push rbx
   435 000006E3 E864FCFFFF          <1>     call getVarNameLength   ;Returns the length of the var name in cx
   436 000006E8 E8220C0000          <1>     call findVariable       ;Returns a pointer to the variable block in rbx
   437 000006ED 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Variable doesnt exist? Pretend it is 0
   438 000006F4 740E                <1>     je .noVar
   439 000006F6 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
   440 000006FA 750C                <1>     jne .stringFoundError
   441 000006FC 488B4304            <1>     mov rax, qword [rbx + varBlock.qValue]
   442                              <1> .exit:
   443 00000700 5B                  <1>     pop rbx
   444 00000701 59                  <1>     pop rcx
   445 00000702 5E                  <1>     pop rsi
   446 00000703 C3                  <1>     ret
   447                              <1> .noVar:
   448 00000704 31C0                <1>     xor eax, eax
   449 00000706 EBF8                <1>     jmp short .exit
   450                              <1> .stringFoundError:
   451 00000708 488D2DC50E0000      <1>     lea rbp, typeError
   452 0000070F E9B5F9FFFF          <1>     jmp criticalError
   453                              <1> 
   454                              <1> setNumericVariable:
   455                              <1> ;Sets the value stored in a variable
   456                              <1> ;Input: rsi = Pointer to first char of a variable name
   457                              <1> ;       rax = Variable value
   458                              <1> ;Output: rsi = Pointer to first char of variable name
   459 00000714 56                  <1>     push rsi
   460 00000715 51                  <1>     push rcx
   461 00000716 53                  <1>     push rbx
   462                              <1> 
   463 00000717 E830FCFFFF          <1>     call getVarNameLength   ;Returns the length of the var name in cx
   464 0000071C E8EE0B0000          <1>     call findVariable       ;Returns a pointer to the variable block in rbx
   465 00000721 4881FBFFFFFFFF      <1>     cmp rbx, -1             ;Variable doesnt exit?
   466 00000728 740E                <1>     je .makeEditInteger      ;Make one!
   467 0000072A 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
   468 0000072E 750F                <1>     jne .stringFoundError
   469 00000730 48894304            <1>     mov qword [rbx + varBlock.qValue], rax  ;Save value
   470                              <1> .exit:
   471 00000734 5B                  <1>     pop rbx
   472 00000735 59                  <1>     pop rcx
   473 00000736 5E                  <1>     pop rsi
   474 00000737 C3                  <1>     ret
   475                              <1> .makeEditInteger:
   476 00000738 E8E20C0000          <1>     call makeEditInteger
   477 0000073D EBF5                <1>     jmp short .exit
   478                              <1> .stringFoundError:
   479 0000073F 488D2D8E0E0000      <1>     lea rbp, typeError
   480 00000746 E97EF9FFFF          <1>     jmp criticalError
   481                              <1> 
   482                              <1> setStringVariable:
   483                              <1> ;Sets the string pointed to by rdx
   484                              <1> ;Input: rsi = Pointer to first char of a variable name
   485                              <1> ;       rdx = Start of string
   486                              <1> ;Output: rsi = Pointer to first char of variable name
   487                              <1> ;Keeps adding characters until a 0, : or " encountered
   488                              <1> ;Adds a 0 to the end
   489 0000074B 51                  <1>     push rcx
   490 0000074C E8FBFBFFFF          <1>     call getVarNameLength   ;Gets the length of the var name in cx
   491 00000751 E8140D0000          <1>     call makeEditString     ;Returns a ptr to the var block in rbx
   492 00000756 59                  <1>     pop rcx
   493 00000757 C3                  <1>     ret
   494                              <1> 
   495                              <1> findOtherExpressionsOnLine:
   496                              <1> ;Input: rsi = start of line portion
   497                              <1> ;Output: rsi = points to first char after first ":" found
   498                              <1> ;         al = : if it was found or 00 if not
   499 00000758 AC                  <1>     lodsb
   500 00000759 3C00                <1>     cmp al, 0   ;Null hit, RIP procedure
   501 0000075B 7404                <1>     je .exit
   502 0000075D 3C3A                <1>     cmp al, ":" ;Strings can be terminated with a :
   503 0000075F 75F7                <1>     jne findOtherExpressionsOnLine
   504                              <1> .exit:
   505 00000761 C3                  <1>     ret
    14                                  %include "COMMANDS.ASM"
    15                              <1> 
    16                              <1> funTbl:
    17                              <1> ;Use PASCAL strings to know how long the comparisons need to be
    18                              <1> ;All function pointers are saved as distances from the head
    19                              <1> ; of the function table
    20                              <1> ;BASIC instructions are space terminated
    21                              <1> ;Interpreter instructions are null terminated
    22 00000762 044C4554            <1>     db 4, "LET"     ;DONE
    23 00000766 7701                <1>     dw oldSchoolAssignemnt - funTbl
    24                              <1> 
    25 00000768 054E455700          <1>     db 5, "NEW",0     ;DONE
    26 0000076D FA01                <1>     dw newProgram - funTbl 
    27                              <1> 
    28 0000076F 07434C45415200      <1>     db 7, "CLEAR",0   ;DONE
    29 00000776 FA01                <1>     dw newProgram - funTbl 
    30                              <1> 
    31 00000778 064C49535400        <1>     db 6, "LIST",0    ;DONE
    32 0000077E 5C02                <1>     dw listProgram - funTbl 
    33                              <1> 
    34 00000780 0552554E00          <1>     db 5, "RUN",0     ;DONE
    35 00000785 9802                <1>     dw runProgram - funTbl
    36                              <1> 
    37 00000787 085052494E542420    <1>     db 8, "PRINT$ "    ;Not implemented yet
    38 0000078F C902                <1>     dw printStatement - funTbl
    39                              <1> 
    40 00000791 075052494E5420      <1>     db 7, "PRINT "    ;DONE
    41 00000798 C902                <1>     dw printStatement - funTbl
    42                              <1> 
    43 0000079A 033F20              <1>     db 3, "? "        ;DONE, alias Print
    44 0000079D C902                <1>     dw printStatement - funTbl
    45                              <1> 
    46 0000079F 07494E50555420      <1>     db 7, "INPUT "
    47 000007A6 6403                <1>     dw getInput - funTbl
    48                              <1> 
    49 000007A8 04494620            <1>     db 4, "IF "      ;DONE, needs to be tested
    50 000007AC 170A                <1>     dw handleIf - funTbl
    51                              <1> 
    52 000007AE 06474F544F20        <1>     db 6, "GOTO "    ;DONE
    53 000007B4 C406                <1>     dw goto - funTbl
    54                              <1> 
    55 000007B6 07474F53554220      <1>     db 7, "GOSUB "
    56 000007BD D906                <1>     dw gosub - funTbl
    57                              <1> 
    58 000007BF 0852455455524E20    <1>     db 8, "RETURN "
    59 000007C7 2207                <1>     dw return - funTbl
    60                              <1> 
    61 000007C9 0852455455524E00    <1>     db 8, "RETURN",0
    62 000007D1 2207                <1>     dw return - funTbl
    63                              <1> 
    64 000007D3 05464F5220          <1>     db 5, "FOR "
    65 000007D8 7007                <1>     dw forLoop - funTbl
    66                              <1> 
    67 000007DA 064E45585400        <1>     db 6, "NEXT",0
    68 000007E0 7C08                <1>     dw next - funTbl
    69                              <1> 
    70 000007E2 064E45585420        <1>     db 6, "NEXT "
    71 000007E8 7C08                <1>     dw next - funTbl
    72                              <1> 
    73 000007EA 07                  <1>     db 7
    74                              <1> whileStr:
    75 000007EB 5748494C4520        <1>     db "WHILE "
    76 000007F1 F008                <1>     dw while - funTbl
    77                              <1> 
    78 000007F3 0657454E4420        <1>     db 6, "WEND "
    79 000007F9 6709                <1>     dw wend - funTbl    
    80 000007FB 0657454E4400        <1>     db 6, "WEND",0
    81 00000801 6709                <1>     dw wend - funTbl   
    82                              <1> thenStr:
    83 00000803 065448454E20        <1>     db 6, "THEN "    ;DONE
    84 00000809 4401                <1>     dw badCmd - funTbl
    85                              <1> elseStr:
    86 0000080B 06454C534520        <1>     db 6, "ELSE "    ;DONE
    87 00000811 4401                <1>     dw badCmd - funTbl
    88                              <1> 
    89 00000813 0853595354454D00    <1>     db 8, "SYSTEM",0  ;DONE
    90 0000081B 0304                <1>     dw returnToDOS - funTbl
    91                              <1> 
    92 0000081D 05434C5300          <1>     db 5, "CLS",0     ;DONE
    93 00000822 0F04                <1>     dw cls - funTbl
    94 00000824 05434C5320          <1>     db 5, "CLS "      ;DONE
    95 00000829 0F04                <1>     dw cls - funTbl
    96                              <1> 
    97 0000082B 07444542554700      <1>     db 7, "DEBUG",0   ;DONE
    98 00000832 1404                <1>     dw dbgr - funTbl
    99                              <1> 
   100 00000834 0654524F4E00        <1>     db 6, "TRON",0    ;DONE
   101 0000083A 5501                <1>     dw tron - funTbl
   102                              <1> 
   103 0000083C 0754524F464600      <1>     db 7, "TROFF",0   ;DONE
   104 00000843 5D01                <1>     dw troff - funTbl
   105                              <1> 
   106 00000845 05454E4420          <1>     db 5, "END "     ;DONE
   107 0000084A 5001                <1>     dw endProg - funTbl
   108 0000084C 05454E4400          <1>     db 5, "END",0     ;DONE
   109 00000851 5001                <1>     dw endProg - funTbl
   110                              <1> 
   111 00000853 0653544F5020        <1>     db 6, "STOP "    ;DONE
   112 00000859 5001                <1>     dw endProg - funTbl
   113 0000085B 0653544F5000        <1>     db 6, "STOP",0    ;DONE
   114 00000861 5001                <1>     dw endProg - funTbl
   115                              <1> 
   116 00000863 0845534341504520    <1>     db 8, "ESCAPE "  ;DONE
   117 0000086B 5001                <1>     dw endProg - funTbl
   118 0000086D 0845534341504500    <1>     db 8, "ESCAPE",0  ;DONE
   119 00000875 5001                <1>     dw endProg - funTbl
   120                              <1> 
   121 00000877 07455045454B20      <1>     db 7, "EPEEK "
   122 0000087E 6D01                <1>     dw memRead - funTbl
   123                              <1> 
   124 00000880 0745504F4B4520      <1>     db 7, "EPOKE "
   125 00000887 6D01                <1>     dw memWrite - funTbl
   126                              <1> 
   127 00000889 065045454B20        <1>     db 6, "PEEK "
   128 0000088F 6D01                <1>     dw byteRead - funTbl
   129                              <1> 
   130 00000891 06504F4B4520        <1>     db 6, "POKE "
   131 00000897 6D01                <1>     dw byteWrite - funTbl
   132                              <1> 
   133 00000899 0552454D20          <1>     db 5, "REM "
   134 0000089E 6E01                <1>     dw remark - funTbl
   135 000008A0 032720              <1>     db 3, "' "
   136 000008A3 6E01                <1>     dw remark - funTbl
   137                              <1> 
   138 000008A5 FF                  <1>     db -1    ;Demarkate the end of the table
   139                              <1> ;End of Table
   140                              <1> badCmd:
   141 000008A6 488D2D180D0000      <1>     lea rbp, syntax
   142 000008AD E817F8FFFF          <1>     call criticalError 
   143                              <1> endProg:
   144 000008B2 E968010000          <1>     jmp runProgram.endProgramPoint
   145                              <1> tron:
   146 000008B7 800D(D90E0000)02    <1>     or byte [stateByte], traceBit   ;Set the traceBit
   147 000008BE C3                  <1>     ret
   148                              <1> troff:
   149 000008BF 8025(D90E0000)FD    <1>     and byte [stateByte], ~traceBit ;Clear the traceBit
   150 000008C6 C3                  <1>     ret
   151                              <1> notWrapper:
   152 000008C7 6687DB              <1>     xchg bx, bx
   153 000008CA E991FBFFFF          <1>     jmp handleAlgebraicExpression.not
   154                              <1> memRead:
   155                              <1> memWrite:
   156                              <1> byteRead:
   157                              <1> byteWrite:
   158 000008CF C3                  <1>     ret
   159                              <1> remark:
   160                              <1> ;Comment code, keep looping until end of line
   161 000008D0 AC                  <1>     lodsb
   162 000008D1 84C0                <1>     test al, al 
   163 000008D3 75FB                <1>     jnz remark
   164 000008D5 48FFCE              <1>     dec rsi ;When al = 0, rsi points past it, move it back by one
   165 000008D8 C3                  <1>     ret
   166                              <1> 
   167                              <1> oldSchoolAssignemnt:
   168                              <1> ;Assign with a LET directive
   169                              <1> ;rsi points to first char AFTER function name
   170 000008D9 E863FAFFFF          <1>     call spaceSkip  ;Goto var assignment as if at start of line
   171                              <1> variableAssignment: ;Assignment without a LET directive
   172                              <1>     ;Establish if the string is a variable assignment or not
   173                              <1>     ;rsi points to start of string
   174 000008DE E869FAFFFF          <1>     call getVarNameLength   ;Get the variable name length
   175 000008E3 4889F7              <1>     mov rdi, rsi    ;Save ptr to start of string in rdi
   176 000008E6 4801CE              <1>     add rsi, rcx    ;Go to end of string
   177 000008E9 E853FAFFFF          <1>     call spaceSkip  ;Skip spaces after the end of the var name
   178 000008EE AC                  <1>     lodsb   ;Get the first char after the spaces. This must be a =
   179 000008EF 3C3D                <1>     cmp al, "="
   180 000008F1 7551                <1>     jne .syntaxError
   181 000008F3 4889FE              <1>     mov rsi, rdi    ;Return rsi to the start of the string name
   182 000008F6 4801CE              <1>     add rsi, rcx    ;Go to end of var name
   183 000008F9 48FFCE              <1>     dec rsi
   184 000008FC AC                  <1>     lodsb   ;Get last char into al and inc rsi
   185 000008FD 3C24                <1>     cmp al, "$"
   186 000008FF 7420                <1>     je .stringAssignment
   187 00000901 E83BFAFFFF          <1>     call spaceSkip  ;Skip any spaces
   188 00000906 48FFC6              <1>     inc rsi         ;Go past the equality sign
   189 00000909 E833FAFFFF          <1>     call spaceSkip  ;Skip any spaces
   190 0000090E 803E22              <1>     cmp byte [rsi], 22h ;Open speech mark
   191 00000911 743D                <1>     je .typError    ;Integers cant have speechmarks
   192 00000913 E87CFAFFFF          <1>     call handleAlgebraicExpression  ;Get the result of the expression into rax
   193 00000918 4889FE              <1>     mov rsi, rdi    ;Return the start of the string into rsi
   194 0000091B E8F4FDFFFF          <1>     call setNumericVariable
   195 00000920 C3                  <1>     ret
   196                              <1> .stringAssignment:
   197                              <1> ;This simply copies the string which is either speech mark, 0 or : terminated
   198                              <1> ;First allocate a string
   199                              <1> ;rsi = First char after the end of the variable name
   200                              <1> ;rdi = start of variable name 
   201                              <1> ;rcx = char count for var name
   202 00000921 E81BFAFFFF          <1>     call spaceSkip  ;Skip any spaces
   203 00000926 48FFC6              <1>     inc rsi         ;Go past the equality sign
   204 00000929 E813FAFFFF          <1>     call spaceSkip  ;Skip any spaces
   205 0000092E 803E22              <1>     cmp byte [rsi], 22h ;Open speechmark check again
   206 00000931 751D                <1>     jne .typError    ;Assigning a number to a string is a type error
   207                              <1>     ;rsi now points to the start of the string to save
   208 00000933 48FFC6              <1>     inc rsi ;Go past the speech mark
   209 00000936 4889F2              <1>     mov rdx, rsi    ;save start of string data in rdx
   210 00000939 4889FE              <1>     mov rsi, rdi
   211 0000093C 57                  <1>     push rdi
   212 0000093D E809FEFFFF          <1>     call setStringVariable
   213 00000942 5E                  <1>     pop rsi ;Save the start of the assignment in rsi
   214 00000943 C3                  <1>     ret
   215                              <1> 
   216                              <1> .syntaxError:
   217 00000944 488D2D7A0C0000      <1>     lea rbp, syntax ;Syntax error, keyword a bit confused
   218 0000094B E979F7FFFF          <1>     jmp criticalError
   219                              <1> .typError:
   220 00000950 488D2D7D0C0000      <1>     lea rbp, typeError
   221 00000957 E96DF7FFFF          <1>     jmp criticalError
   222                              <1> 
   223                              <1> 
   224                              <1> newProgram: 
   225                              <1> ;Simply reset the program pointers
   226 0000095C 488D05(00000000)    <1>     lea rax, section.programArea.vstart
   227 00000963 488905(C80E0000)    <1>     mov qword [minMemAddr], rax
   228 0000096A 488905(E20E0000)    <1>     mov qword [lastBlock], rax  ;Start writing at this location
   229 00000971 488905(DA0E0000)    <1>     mov qword [mcbChain], rax   ;Create a mock MCB here
   230                              <1> 
   231 00000978 4889C2              <1>     mov rdx, rax
   232 0000097B 668B4801            <1>     mov cx, word [rax + memBlock.wBlockSize]
   233 0000097F 4889C7              <1>     mov rdi, rax
   234 00000982 30C0                <1>     xor al, al
   235 00000984 F3AA                <1>     rep stosb   ;Sanitise the old first allocation
   236                              <1> 
   237 00000986 C60272              <1>     mov byte [rdx + memBlock.bSignature], lastMemBlock
   238 00000989 66C742010000        <1>     mov word [rdx + memBlock.wBlockSize], 0 ;Dummy block, no size, gets overwritten
   239 0000098F 31C0                <1>     xor eax, eax
   240 00000991 8805(D80E0000)      <1>     mov byte [strLen], al
   241 00000997 488D3D(980D0000)    <1>     lea rdi, inString
   242 0000099E B900010000          <1>     mov ecx, maxLineLen
   243 000009A3 F3AA                <1>     rep stosb
   244 000009A5 C605(F40E0000)0A    <1>     mov byte [currentLine], 10  ;Default to line 10
   245 000009AC 48FFC8              <1>     dec rax ;rax = -1
   246 000009AF 488905(EA0E0000)    <1>     mov qword [firstLinPtr], rax ;No program in memory
   247 000009B6 668905(F20E0000)    <1>     mov word [firstLinNum], ax
   248 000009BD C3                  <1>     ret
   249                              <1> listProgram:
   250                              <1> ;Go line by line and echo the program lines, inserting a crlf after each
   251                              <1> ;First print the line number, then add a space
   252 000009BE 488B1D(EA0E0000)    <1>     mov rbx, qword [firstLinPtr]    ;Get a pointer to the first program line
   253                              <1> .printLines:
   254 000009C5 488D2DAE0B0000      <1>     lea rbp, crlf           ;New line
   255 000009CC E8CFF7FFFF          <1>     call ttyOutString
   256 000009D1 4881FBFFFFFFFF      <1>     cmp rbx, -1
   257 000009D8 741F                <1>     je .exit
   258 000009DA 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]
   259 000009DE E856080000          <1>     call printdecimalword
   260 000009E3 B020                <1>     mov al, " "
   261 000009E5 E8B1F7FFFF          <1>     call ttyOutChar ;Print a space
   262 000009EA 488D6B0E            <1>     lea rbp, qword [rbx + progLineBlock.sLine]  ;Null terminated string
   263 000009EE E8ADF7FFFF          <1>     call ttyOutString
   264 000009F3 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr]   ;Walk list of program lines
   265 000009F7 EBCC                <1>     jmp short .printLines
   266                              <1> .exit:
   267 000009F9 C3                  <1>     ret
   268                              <1> runProgram:
   269                              <1>     ;Runs the machine in indirect mode
   270 000009FA 800D(D90E0000)04    <1>     or byte [stateByte], indirectBit    ;Entering indirect mode
   271                              <1>     ;rsi must point to the first line
   272 00000A01 668B15(F20E0000)    <1>     mov dx, word [firstLinNum]
   273 00000A08 668915(F40E0000)    <1>     mov word [currentLine], dx ;Reset the current line back to the start
   274 00000A0F 488B1D(EA0E0000)    <1>     mov rbx, qword [firstLinPtr]
   275 00000A16 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine]
   276 00000A1A E809F8FFFF          <1>     call runLine
   277                              <1> .endProgramPoint:
   278 00000A1F 8025(D90E0000)FB    <1>     and byte [stateByte], ~indirectBit  ;Exit indirect mode
   279 00000A26 E911F6FFFF          <1>     jmp mainLoop    ;Resets the stack if exit mid loop to avoid stkoverflow
   280                              <1> 
   281                              <1> printStatement:
   282                              <1> ;Strings must be "" delimited or a string variable must be used
   283                              <1> ;rsi points to first char AFTER function name
   284                              <1> .printStart:
   285 00000A2B E811F9FFFF          <1>     call spaceSkip  ;move rsi to the start of the expression
   286 00000A30 AC                  <1>     lodsb
   287                              <1> 
   288 00000A31 84C0                <1>     test al, al     ;Is this a null string?
   289 00000A33 746B                <1>     jz .psvexit
   290 00000A35 3C22                <1>     cmp al, 022h    ;22h = ASCII Speechmarks
   291 00000A37 7449                <1>     je .stringPrint
   292                              <1>     ;Here we check if the first char is ASCII, if it is, check if its a string var
   293 00000A39 3C41                <1>     cmp al, "A"
   294 00000A3B 7204                <1>     jb .printExpr
   295 00000A3D 3C5A                <1>     cmp al, "Z"
   296 00000A3F 7214                <1>     jb .printStringVar
   297                              <1> .printExpr:
   298 00000A41 48FFCE              <1>     dec rsi ;Return to the start of the string
   299                              <1> .printExpr1:    ;Return without dec rsi
   300 00000A44 E84BF9FFFF          <1>     call handleAlgebraicExpression ;Gets value of a var and/or algebraic operation
   301 00000A49 E8EB070000          <1>     call printdecimalword
   302 00000A4E E8EEF8FFFF          <1>     call spaceSkip
   303 00000A53 EB2D                <1>     jmp short .stringPrint
   304                              <1> .printStringVar:
   305                              <1>     ;Check if it is a string var or a unary function
   306 00000A55 48FFCE              <1>     dec rsi
   307 00000A58 E8EFF8FFFF          <1>     call getVarNameLength
   308 00000A5D E817F9FFFF          <1>     call getVarType
   309 00000A62 81FB01000000        <1>     cmp ebx, strEquate
   310 00000A68 75DA                <1>     jne .printExpr1  ;rsi points to the same point as initially
   311 00000A6A E8A0080000          <1>     call findVariable   ;ecx has string length, get block ptr in rbx
   312 00000A6F 55                  <1>     push rbp
   313 00000A70 488D6B04            <1>     lea rbp, qword [rbx + stringBlock.string]
   314 00000A74 E827F7FFFF          <1>     call ttyOutString
   315 00000A79 5D                  <1>     pop rbp
   316 00000A7A 4801CE              <1>     add rsi, rcx    ;Go past variable
   317 00000A7D E8BFF8FFFF          <1>     call spaceSkip
   318                              <1> .stringPrint:
   319 00000A82 AC                  <1>     lodsb
   320 00000A83 3C00                <1>     cmp al, 0
   321 00000A85 7419                <1>     je .psvexit
   322 00000A87 3C3A                <1>     cmp al, ":"
   323 00000A89 7412                <1>     je .psvexitColon
   324 00000A8B 3C22                <1>     cmp al, 022h    ;Close Speech marks, check next char
   325 00000A8D 741E                <1>     je .closespeechmarks
   326 00000A8F 3C3B                <1>     cmp al, ";"     ;Semicolon means print next section on same line
   327 00000A91 7429                <1>     je .continue
   328 00000A93 E803F7FFFF          <1>     call ttyOutChar
   329 00000A98 EBE8                <1>     jmp short .stringPrint
   330                              <1> .openSpeechMark:
   331 00000A9A 48FFC6              <1>     inc rsi ;Go back a char
   332                              <1> .psvexitColon:
   333 00000A9D 48FFCE              <1>     dec rsi ;Go back a char
   334                              <1> .psvexit:
   335 00000AA0 488D2DD30A0000      <1>     lea rbp, crlf
   336 00000AA7 E8F4F6FFFF          <1>     call ttyOutString
   337 00000AAC C3                  <1>     ret
   338                              <1> .closespeechmarks:
   339 00000AAD E88FF8FFFF          <1>     call spaceSkip
   340 00000AB2 AC                  <1>     lodsb
   341 00000AB3 3C3B                <1>     cmp al, ";" ;only exception to exiting if next non space char is a semicolon
   342 00000AB5 74CB                <1>     je .stringPrint
   343 00000AB7 48FFCE              <1>     dec rsi ;Go back a step
   344 00000ABA EBE4                <1>     jmp short .psvexit
   345                              <1> .continue:
   346 00000ABC E880F8FFFF          <1>     call spaceSkip
   347 00000AC1 E965FFFFFF          <1>     jmp .printStart
   348                              <1> getInput:
   349                              <1> ;Take a string as a prompt
   350                              <1> ;rdi points just past the end of the command line
   351                              <1> ;rsi points to first char AFTER function name
   352                              <1> ;Input prompt strings must be speech mark delimited on both sides!
   353 00000AC6 E876F8FFFF          <1>     call spaceSkip
   354                              <1>     ;Now check to see if the user has specified a custom prompt
   355 00000ACB AC                  <1>     lodsb   ;Get first symbol and go past it
   356 00000ACC 3C22                <1>     cmp al, 22h ;Speechmark?
   357 00000ACE 7535                <1>     jne .defaultPrompt ;If no speechmark, print default prompt
   358                              <1> .customPrompt:
   359 00000AD0 4889F7              <1>     mov rdi, rsi    ;Save start of string in rdi
   360                              <1> .cp0:
   361 00000AD3 AC                  <1>     lodsb           ;Now search for end of string speech marks or null terminator
   362 00000AD4 3C22                <1>     cmp al, 22h     ;Is al a speech mark?
   363 00000AD6 7410                <1>     je .printCustomPrompt
   364 00000AD8 84C0                <1>     test al, al     ;Is al null?
   365 00000ADA 75F7                <1>     jnz .cp0        ;No, keep searching for terminator
   366                              <1> .error:
   367 00000ADC 488D2DE20A0000      <1>     lea rbp, syntax
   368 00000AE3 E9E1F5FFFF          <1>     jmp criticalError
   369                              <1> .printCustomPrompt:
   370 00000AE8 4889FE              <1>     mov rsi, rdi    ;rsi points to the first char of the string
   371                              <1> .pcp0:
   372 00000AEB AC                  <1>     lodsb
   373 00000AEC 3C22                <1>     cmp al, 22h     ;Speechmark?
   374 00000AEE 7407                <1>     je .stopPrompt
   375 00000AF0 E8A6F6FFFF          <1>     call ttyOutChar
   376 00000AF5 EBF4                <1>     jmp short .pcp0
   377                              <1> .stopPrompt:
   378 00000AF7 E845F8FFFF          <1>     call spaceSkip  ;Skip spaces
   379 00000AFC AC                  <1>     lodsb   ;Get first non space char after closing speechmark
   380 00000AFD 3C3B                <1>     cmp al, ";" ;Semicolon means no default prompt
   381 00000AFF 740E                <1>     je .noDefaultPrompt
   382 00000B01 3C2C                <1>     cmp al, "," ;Comma also means no default prompt
   383 00000B03 740A                <1>     je .noDefaultPrompt
   384                              <1> .defaultPrompt:
   385 00000B05 48FFCE              <1>     dec rsi
   386 00000B08 B03F                <1>     mov al, "?"
   387 00000B0A E88CF6FFFF          <1>     call ttyOutChar
   388                              <1> .noDefaultPrompt:
   389 00000B0F B020                <1>     mov al, " " ;space
   390 00000B11 E885F6FFFF          <1>     call ttyOutChar
   391 00000B16 E826F8FFFF          <1>     call spaceSkip  ;Skip spaces after default supressor to get to var name
   392 00000B1B E82CF8FFFF          <1>     call getVarNameLength   ;Get var name length in ecx
   393 00000B20 488D3D(980E0000)    <1>     lea rdi, digitString    ;Buffer has 48 chars, string names are max 40
   394 00000B27 E8AB090000          <1>     call strcpy     ;rsi points to var name
   395 00000B2C 57                  <1>     push rdi    ;rdi points to first char of variable
   396 00000B2D 51                  <1>     push rcx
   397 00000B2E E8D0F5FFFF          <1>     call getLineInput   ;Get input from the user in inString, null terminated
   398                              <1>     ;This will sanitise in direct mode meaning input cannot have any more statements
   399                              <1>     ; after it.
   400 00000B33 59                  <1>     pop rcx
   401 00000B34 5F                  <1>     pop rdi 
   402 00000B35 4889FE              <1>     mov rsi, rdi    ;Save the start of the var name in rsi
   403 00000B38 4801CE              <1>     add rsi, rcx    ;Go to end of var
   404 00000B3B 48FFCE              <1>     dec rsi
   405 00000B3E AC                  <1>     lodsb   ;Are we a string variable?
   406 00000B3F 488D35(980D0000)    <1>     lea rsi, inString   ;Move rsi to start of user input
   407 00000B46 3C24                <1>     cmp al, "$"
   408 00000B48 740F                <1>     je .handleString
   409                              <1> .handleNumeric:
   410 00000B4A E845F8FFFF          <1>     call handleAlgebraicExpression  ;Get the result of the expression into rax
   411 00000B4F 4889FE              <1>     mov rsi, rdi    ;Return the start of the string into rsi
   412 00000B52 E8BDFBFFFF          <1>     call setNumericVariable
   413 00000B57 EB0B                <1>     jmp short .commonExit
   414                              <1> .handleString:
   415                              <1>     ;IF a string variable, come here
   416                              <1>     ;rdi has the start of the variable name
   417                              <1> 
   418                              <1>     ;rdx must point to the start of the string
   419                              <1>     ;rsi must point to the start of the variable name
   420 00000B59 4889F2              <1>     mov rdx, rsi
   421 00000B5C 4889FE              <1>     mov rsi, rdi    ;Return start of user name in rsi
   422 00000B5F E8E7FBFFFF          <1>     call setStringVariable
   423                              <1> .commonExit:
   424 00000B64 C3                  <1>     ret
   425                              <1> 
   426                              <1> ;==========================================================:
   427                              <1> ;==========================================================:
   428                              <1> ;==========================================================:
   429                              <1> ;          Functions Related to Program Management         :
   430                              <1> ;==========================================================:
   431                              <1> ;==========================================================:
   432                              <1> ;==========================================================:
   433                              <1> returnToDOS:
   434 00000B65 B007                <1>     mov al, 07h
   435 00000B67 E82FF6FFFF          <1>     call ttyOutChar
   436 00000B6C E98FF4FFFF          <1>     jmp start   ;Reset the interpreter
   437                              <1> cls:
   438 00000B71 E937F6FFFF          <1>     jmp ttyClear
   439                              <1> dbgr:
   440                              <1>     ;Hook int 40h to main prog EP to allow returning 
   441                              <1> ;First call to get default BIOS segement selector and attribute word
   442 00000B76 B340                <1>     mov bl, 40h
   443 00000B78 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   444 00000B7D CD35                <1>     int 35h
   445 00000B7F 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   446 00000B81 B940000000          <1>     mov ecx, 40h    ;Interrupt number
   447                              <1> ;dx preserves the attribute word
   448 00000B86 488D1D09000000      <1>     lea rbx, .farReturn  ;Pointer passed in
   449 00000B8D B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   450 00000B92 CD35                <1>     int 35h
   451 00000B94 CD38                <1>     int 38h ;Call debugger
   452                              <1> .farReturn:
   453                              <1>     ;Reconnect CTRL+BREAK handler
   454 00000B96 48BC-               <1>     mov rsp, stacktop   ;Immediately reset stack
   454 00000B98 [900D000000000000]  <1>
   455 00000BA0 488D3D33F5FFFF      <1>     lea rdi, ctrlBreakHandler
   456 00000BA7 B03B                <1>     mov al, 3Bh
   457 00000BA9 E835F5FFFF          <1>     call setHandler
   458                              <1>     
   459 00000BAE 488D2DC5090000      <1>     lea rbp, crlf
   460 00000BB5 E8E6F5FFFF          <1>     call ttyOutString
   461 00000BBA E97DF4FFFF          <1>     jmp mainLoop
    15                                  %include "CTRLFLOW.ASM"
    16                              <1> 
    17                              <1> ;Handles all the specific functions related to control flow such as scanning 
    18                              <1> ; lines for WEND, RETURN, NEXT
    19                              <1> retScan:
    20                              <1> ;Gets the current line address and starts searching program from current prog line
    21                              <1> ; for a return
    22 00000BBF 56                  <1>     push rsi
    23 00000BC0 668B15(F40E0000)    <1>     mov dx, word [currentLine]  ;pre-load dx with the current line number
    24 00000BC7 E8B3070000          <1>     call searchForProgramLine   ;Get program block pointer into rbx
    25 00000BCC 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If for some reason line doesnt exist?
    26 00000BD3 0F8493000000        <1>     je .error   ;Unknown Error
    27                              <1> ;Now pack for the first portion/line after the GOSUB
    28                              <1> ;rsi points just after the GOSUB itself
    29 00000BD9 56                  <1>     push rsi    ;Save the first point after the WHILE itself
    30 00000BDA E879FBFFFF          <1>     call findOtherExpressionsOnLine     ;Get the first : or ASCII NUL
    31 00000BDF 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]  ;Get the line number
    32 00000BE3 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine]  ;Load ptr to start of string in rsi
    33 00000BE7 4829CE              <1>     sub rsi, rcx    ;Compute difference from start of string
    34 00000BEA 89F1                <1>     mov ecx, esi    ;Should just be low byte of si so cl
    35 00000BEC 81E1FF000000        <1>     and ecx, 0FFh   ;Save only bottom byte just in case of garbage
    36 00000BF2 C1E110              <1>     shl ecx, 2*8    ;Move to the third byte in the dword
    37 00000BF5 09C8                <1>     or eax, ecx     ;Add byte three to eax
    38 00000BF7 89C2                <1>     mov edx, eax    ;Save in edx
    39 00000BF9 48C1E228            <1>     shl rdx, 5*8    ;Shift three bytes to top of qword
    40 00000BFD 5E                  <1>     pop rsi
    41                              <1> .initialSearch:
    42                              <1>     ;First look for a ASCII NUL or RETURN
    43 00000BFE 803E00              <1>     cmp byte [rsi], 0
    44 00000C01 7415                <1>     je .gotoNextLine
    45 00000C03 813E52455455        <1>     cmp dword [rsi], "RETU"
    46 00000C09 7508                <1>     jne .notCandidate
    47 00000C0B 66817E04524E        <1>     cmp word [rsi + 4], "RN"
    48 00000C11 7418                <1>     je .wordFound
    49                              <1> .notCandidate:
    50 00000C13 48FFC6              <1>     inc rsi ;Now search up until the end of the line for a RETURN
    51 00000C16 EBE6                <1>     jmp short .initialSearch
    52                              <1> .gotoNextLine:
    53 00000C18 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Get pointer to next program line
    54 00000C1C 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Now, when walking if it gives a value of -1, no NEXT found
    55 00000C23 7431                <1>     je .noRet
    56 00000C25 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Load pointer to string rsi
    57 00000C29 EBD3                <1>     jmp short .initialSearch
    58                              <1> .wordFound:
    59                              <1>     ;Here, RETURN found! Huzzah! Now pack edx correctly
    60                              <1>     ;Add 055AA55h in bytes 4:2
    61 00000C2B 48B8000055AA550000- <1>     mov rax, 055AA550000h
    61 00000C34 00                  <1>
    62 00000C35 4809C2              <1>     or rdx, rax
    63                              <1>     ;Compute checksum now
    64 00000C38 31C0                <1>     xor eax, eax
    65 00000C3A B0A5                <1>     mov al, GOSUBsig 
    66 00000C3C 6689C2              <1>     mov dx, ax  ;Zero checksum byte
    67 00000C3F 31C0                <1>     xor eax, eax
    68 00000C41 B908000000          <1>     mov ecx, 8  ;8 times
    69                              <1> .csumLoop:
    70                              <1>     ;Spin rdx 8 times adding each byte to al
    71 00000C46 00D0                <1>     add al, dl
    72 00000C48 48C1C208            <1>     rol rdx, 8  ;Rotate left by 8 bits
    73 00000C4C FFC9                <1>     dec ecx
    74 00000C4E 75F6                <1>     jnz .csumLoop
    75 00000C50 F6D8                <1>     neg al ;Get twos compliment of sum (FFh - al)
    76 00000C52 88C6                <1>     mov dh, al  ;Save in checksum byte
    77                              <1> .exit:
    78 00000C54 5E                  <1>     pop rsi
    79 00000C55 C3                  <1>     ret
    80                              <1> .noRet:
    81 00000C56 488D2D0A0A0000      <1>     lea rbp, noReturn
    82 00000C5D 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
    82 00000C66 FF                  <1>
    83 00000C67 E9E8FFFFFF          <1>     jmp .exit
    84                              <1> .error:
    85 00000C6C 488D2D0B0A0000      <1>     lea rbp, uknowner
    86 00000C73 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
    86 00000C7C FF                  <1>
    87 00000C7D E9D2FFFFFF          <1>     jmp .exit
    88                              <1> 
    89                              <1> wendScan:
    90                              <1> ; Gets the current line address and starts searching program from the current line
    91                              <1> ; for a WEND
    92                              <1> ; Puts the packed specialQword into rdx if a WEND is found
    93                              <1> ; Returns rdx = -1 if an error occured with rbp pointing to the error string
    94 00000C82 56                  <1>     push rsi
    95 00000C83 668B15(F40E0000)    <1>     mov dx, word [currentLine]  ;pre-load dx with the current line number
    96 00000C8A E8F0060000          <1>     call searchForProgramLine   ;Get program block pointer into rbx
    97 00000C8F 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If for some reason line doesnt exist?
    98 00000C96 0F84A2000000        <1>     je .error   ;Unknown Error
    99                              <1> ;Now pack for the first portion/line after the for loop
   100                              <1> ;rsi points just after the FOR itself
   101 00000C9C 56                  <1>     push rsi    ;Save the first point after the WHILE itself
   102 00000C9D E8B6FAFFFF          <1>     call findOtherExpressionsOnLine     ;Get the first : or ASCII NUL
   103 00000CA2 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]  ;Get the line number
   104 00000CA6 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine]  ;Load ptr to start of string in rsi
   105 00000CAA 4829CE              <1>     sub rsi, rcx    ;Compute difference from start of string
   106 00000CAD 89F1                <1>     mov ecx, esi    ;Should just be low byte of si so cl
   107 00000CAF 81E1FF000000        <1>     and ecx, 0FFh   ;Save only bottom byte just in case of garbage
   108 00000CB5 C1E110              <1>     shl ecx, 2*8    ;Move to the third byte in the dword
   109 00000CB8 09C8                <1>     or eax, ecx     ;Add byte three to eax
   110 00000CBA 89C2                <1>     mov edx, eax    ;Save in edx
   111 00000CBC 48C1E228            <1>     shl rdx, 5*8    ;Shift three bytes to top of qword
   112 00000CC0 5E                  <1>     pop rsi
   113                              <1> .initialSearch:
   114                              <1>     ;First look for a : or a ASCII NUL to leave the WHILE part of the line
   115 00000CC1 803E00              <1>     cmp byte [rsi], 0
   116 00000CC4 740D                <1>     je .gotoNextLine
   117 00000CC6 813E57454E44        <1>     cmp dword [rsi], "WEND"
   118 00000CCC 7418                <1>     je .wordFound
   119 00000CCE 48FFC6              <1>     inc rsi ;Now search up until the end of the line for a WEND
   120                              <1>     ;"WEND" found here!
   121 00000CD1 EBEE                <1>     jmp short .initialSearch
   122                              <1> .gotoNextLine:
   123 00000CD3 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Get pointer to next program line
   124 00000CD7 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Now, when walking if it gives a value of -1, no NEXT found
   125 00000CDE 7448                <1>     je .noWend
   126 00000CE0 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Load pointer to string rsi
   127 00000CE4 EBDB                <1>     jmp short .initialSearch
   128                              <1> .wordFound:
   129                              <1>     ;Here, word found! Huzzah! Now pack edx correctly
   130                              <1>     ;rsi points to the N in "WEND "
   131 00000CE6 E86DFAFFFF          <1>     call findOtherExpressionsOnLine 
   132                              <1>     ;make rsi point to next expression on the line or the end of the line
   133 00000CEB 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]  ;Get the line number
   134 00000CEF 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine]  ;Load ptr to start of string in rsi
   135 00000CF3 4829CE              <1>     sub rsi, rcx    ;Compute difference from start of string
   136 00000CF6 89F1                <1>     mov ecx, esi    ;Should just be low byte of si so cl
   137 00000CF8 81E1FF000000        <1>     and ecx, 0FFh   ;Save only bottom byte just in case of garbage
   138 00000CFE C1E110              <1>     shl ecx, 2*8    ;Move to the third byte in the dword
   139 00000D01 09C8                <1>     or eax, ecx     ;Add byte three to eax
   140 00000D03 48C1E010            <1>     shl rax, 8*2    ;Shift three bytes to byte 4 of qword
   141 00000D07 4809C2              <1>     or rdx, rax     ;Add bytes [4:2] to rdx
   142                              <1>     ;Compute checksum now
   143 00000D0A 31C0                <1>     xor eax, eax
   144 00000D0C B055                <1>     mov al, WHILEsig 
   145 00000D0E 6689C2              <1>     mov dx, ax  ;Zero checksum byte
   146 00000D11 31C0                <1>     xor eax, eax
   147 00000D13 B908000000          <1>     mov ecx, 8  ;8 times
   148                              <1> .csumLoop:
   149                              <1>     ;Spin rdx 8 times adding each byte to al
   150 00000D18 00D0                <1>     add al, dl
   151 00000D1A 48C1C208            <1>     rol rdx, 8  ;Rotate left by 8 bits
   152 00000D1E FFC9                <1>     dec ecx
   153 00000D20 75F6                <1>     jnz .csumLoop
   154 00000D22 F6D8                <1>     neg al ;Get twos compliment of sum (FFh - al)
   155 00000D24 88C6                <1>     mov dh, al  ;Save in checksum byte
   156                              <1> .exit:
   157 00000D26 5E                  <1>     pop rsi
   158 00000D27 C3                  <1>     ret
   159                              <1> .noWend:
   160 00000D28 488D2DE8080000      <1>     lea rbp, noWend
   161 00000D2F 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
   161 00000D38 FF                  <1>
   162 00000D39 E9E8FFFFFF          <1>     jmp .exit
   163                              <1> .error:
   164 00000D3E 488D2D39090000      <1>     lea rbp, uknowner
   165 00000D45 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
   165 00000D4E FF                  <1>
   166 00000D4F E9D2FFFFFF          <1>     jmp .exit
   167                              <1> nextScan:
   168                              <1> ; Gets the current line address and starts searching program from the current line
   169                              <1> ; for a NEXT
   170                              <1> ; Puts the packed specialQword into rdx if a NEXT is found
   171                              <1> ; Returns rdx = -1 if an error occured with rbp pointing to the error string
   172 00000D54 56                  <1>     push rsi
   173 00000D55 668B15(F40E0000)    <1>     mov dx, word [currentLine]  ;pre-load dx with the current line number
   174 00000D5C E81E060000          <1>     call searchForProgramLine   ;Get program block pointer into rbx
   175 00000D61 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If for some reason line doesnt exist?
   176 00000D68 0F84A2000000        <1>     je .error   ;Unknown Error
   177                              <1> ;Now pack for the first portion/line after the for loop
   178                              <1> ;rsi points just after the FOR itself
   179 00000D6E 56                  <1>     push rsi    ;Save the first point after the FOR itself
   180 00000D6F E8E4F9FFFF          <1>     call findOtherExpressionsOnLine     ;Get the first : or ASCII NUL
   181 00000D74 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]  ;Get the line number
   182 00000D78 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine]  ;Load ptr to start of string in rsi
   183 00000D7C 4829CE              <1>     sub rsi, rcx    ;Compute difference from start of string
   184 00000D7F 89F1                <1>     mov ecx, esi    ;Should just be low byte of si so cl
   185 00000D81 81E1FF000000        <1>     and ecx, 0FFh   ;Save only bottom byte just in case of garbage
   186 00000D87 C1E110              <1>     shl ecx, 2*8    ;Move to the third byte in the dword
   187 00000D8A 09C8                <1>     or eax, ecx     ;Add byte three to eax
   188 00000D8C 89C2                <1>     mov edx, eax    ;Save in edx
   189 00000D8E 48C1E228            <1>     shl rdx, 5*8    ;Shift three bytes to top of qword
   190 00000D92 5E                  <1>     pop rsi
   191                              <1> .initialSearch:
   192                              <1>     ;First look for a : or a ASCII NUL to leave the FOR part of the line
   193 00000D93 803E00              <1>     cmp byte [rsi], 0
   194 00000D96 740D                <1>     je .gotoNextLine
   195 00000D98 813E4E455854        <1>     cmp dword [rsi], "NEXT"
   196 00000D9E 7418                <1>     je .wordFound
   197 00000DA0 48FFC6              <1>     inc rsi ;Now search up until the end of the line for a NEXT
   198                              <1>     ;"NEXT" found here!
   199 00000DA3 EBEE                <1>     jmp short .initialSearch
   200                              <1> .gotoNextLine:
   201 00000DA5 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Get pointer to next program line
   202 00000DA9 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Now, when walking if it gives a value of -1, no NEXT found
   203 00000DB0 7448                <1>     je .noNext
   204 00000DB2 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Load pointer to string rsi
   205 00000DB6 EBDB                <1>     jmp short .initialSearch
   206                              <1> .wordFound:
   207                              <1>     ;Here, word found! Huzzah! Now pack edx correctly
   208                              <1>     ;rsi points to the N in "NEXT "
   209 00000DB8 E89BF9FFFF          <1>     call findOtherExpressionsOnLine 
   210                              <1>     ;make rsi point to next expression on the line or the end of the line
   211 00000DBD 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]  ;Get the line number
   212 00000DC1 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine]  ;Load ptr to start of string in rsi
   213 00000DC5 4829CE              <1>     sub rsi, rcx    ;Compute difference from start of string
   214 00000DC8 89F1                <1>     mov ecx, esi    ;Should just be low byte of si so cl
   215 00000DCA 81E1FF000000        <1>     and ecx, 0FFh   ;Save only bottom byte just in case of garbage
   216 00000DD0 C1E110              <1>     shl ecx, 2*8    ;Move to the third byte in the dword
   217 00000DD3 09C8                <1>     or eax, ecx     ;Add byte three to eax
   218 00000DD5 48C1E010            <1>     shl rax, 8*2    ;Shift three bytes to byte 4 of qword
   219 00000DD9 4809C2              <1>     or rdx, rax     ;Add bytes [4:2] to rdx
   220                              <1>     ;Compute checksum now
   221 00000DDC 31C0                <1>     xor eax, eax
   222 00000DDE B05A                <1>     mov al, FORsig 
   223 00000DE0 6689C2              <1>     mov dx, ax  ;Zero checksum byte
   224 00000DE3 31C0                <1>     xor eax, eax
   225 00000DE5 B908000000          <1>     mov ecx, 8  ;8 times
   226                              <1> .csumLoop:
   227                              <1>     ;Spin rdx 8 times adding each byte to al
   228 00000DEA 00D0                <1>     add al, dl
   229 00000DEC 48C1C208            <1>     rol rdx, 8  ;Rotate left by 8 bits
   230 00000DF0 FFC9                <1>     dec ecx
   231 00000DF2 75F6                <1>     jnz .csumLoop
   232 00000DF4 F6D8                <1>     neg al ;Get twos compliment of sum (FFh - al)
   233 00000DF6 88C6                <1>     mov dh, al  ;Save in checksum byte
   234                              <1> .exit:
   235 00000DF8 5E                  <1>     pop rsi
   236 00000DF9 C3                  <1>     ret
   237                              <1> .noNext:
   238 00000DFA 488D2D53080000      <1>     lea rbp, noNext
   239 00000E01 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
   239 00000E0A FF                  <1>
   240 00000E0B E9E8FFFFFF          <1>     jmp .exit
   241                              <1> .error:
   242 00000E10 488D2D67080000      <1>     lea rbp, uknowner
   243 00000E17 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
   243 00000E20 FF                  <1>
   244 00000E21 E9D2FFFFFF          <1>     jmp .exit
   245                              <1> ;=======================================
   246                              <1> ;  ACTUAL CONTROL FLOW FUNCTIONS HERE  :
   247                              <1> ;=======================================
   248                              <1> ;All below functions return the line number in dx and the offset into the line
   249                              <1> ; to start reading at in byte three of edx
   250                              <1> goto:
   251                              <1> ;GOTO, works by replacing the address after the return address on the stack
   252                              <1> ;rsi points to first char AFTER function name
   253 00000E26 E816F5FFFF          <1>     call spaceSkip  ;Skip all preceeding spaces
   254 00000E2B E864F5FFFF          <1>     call handleAlgebraicExpression  ;Turn the expression into a number in ax
   255 00000E30 0FB7D0              <1>     movzx edx, ax   ;Line number into dx, start at beginning of line
   256 00000E33 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   257 00000E3A C3                  <1>     ret
   258                              <1> 
   259                              <1> gosub:
   260 00000E3B E87FFDFFFF          <1>     call retScan
   261 00000E40 4881FAFFFFFFFF      <1>     cmp rdx, -1
   262 00000E47 7436                <1>     je .error
   263 00000E49 B901000000          <1>     mov ecx, gosubStruct_size/8
   264                              <1>     makeSpaceOnStack rcx  ;Make four qwords of space on the stack
    96                              <2> 
    97                              <2> 
    98                              <2> 
    99 00000E4E 58                  <2>  pop rax
   100 00000E4F 48C1E103            <2>  shl %1, 3
   101 00000E53 4829CC              <2>  sub rsp, %1
   102 00000E56 488D2D(50000000)    <2>  lea rbp, stack
   103 00000E5D 4839EC              <2>  cmp rsp, rbp
   104 00000E60 770C                <2>  ja .macroNotOverflow
   105 00000E62 488D2D9D070000      <2>  lea rbp, stkOvflw
   106 00000E69 E95BF2FFFF          <2>  jmp criticalError
   107                              <2> .macroNotOverflow:
   108                              <2> 
   109                              <2> 
   110 00000E6E 50                  <2>  push rax
   265 00000E6F 4889E5              <1>     mov rbp, rsp
   266 00000E72 4881C508000000      <1>     add rbp, 8  ;Make rbp point to the base of the new struc
   267 00000E79 48895500            <1>     mov qword [rbp + forStruct.specQword], rdx  ;Move rdx into its place on the stack
   268                              <1>     ;rsi points just past the GOSUB
   269 00000E7D EBA7                <1>     jmp short goto ;Now behave like GOTO
   270                              <1> .error:
   271 00000E7F E945F2FFFF          <1>     jmp criticalError
   272                              <1> 
   273                              <1> return:
   274                              <1> ;First verify the GOSUB struc is on the stack
   275 00000E84 4889E5              <1>     mov rbp, rsp    ;Dont need to save rbp so trash it
   276 00000E87 4881C508000000      <1>     add rbp, 8  ;Make it point to the base of the struc past the return address
   277                              <1>     ;Read the qword on stack, verify it is a GOSUBstruc and passes checksum test
   278 00000E8E 488B5500            <1>     mov rdx, qword [rbp + gosubStruct.specQword]
   279 00000E92 80FAA5              <1>     cmp dl, GOSUBsig
   280 00000E95 752F                <1>     jne .noReturn
   281                              <1>     ;Now compute checksum to verify its not an accident
   282 00000E97 30C0                <1>     xor al, al
   283 00000E99 B908000000          <1>     mov ecx, 8
   284                              <1> .checksumTest:
   285 00000E9E 00D0                <1>     add al, dl
   286 00000EA0 48C1CA08            <1>     ror rdx, 8
   287 00000EA4 FFC9                <1>     dec ecx
   288 00000EA6 75F6                <1>     jnz .checksumTest
   289 00000EA8 84C0                <1>     test al, al     ;This should be 0
   290 00000EAA 751A                <1>     jnz .noReturn
   291                              <1>  ;Now we are truly in a RETURN
   292 00000EAC 48C1EA28            <1>     shr rdx, 5*8    ;Bring return information down to the lower three bytes
   293                              <1>     ;Clean the struc from the stack
   294 00000EB0 B901000000          <1>     mov ecx, gosubStruct_size/8
   295                              <1>     cleanSpaceOnStack rcx
   114                              <2> 
   115 00000EB5 58                  <2>  pop rax
   116 00000EB6 48C1E103            <2>  shl %1, 3
   117 00000EBA 4801CC              <2>  add rsp, %1
   118 00000EBD 50                  <2>  push rax
   296 00000EBE 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   297 00000EC5 C3                  <1>     ret
   298                              <1> .noReturn:
   299 00000EC6 488D2D9A070000      <1>     lea rbp, noReturn
   300 00000ECD E9F7F1FFFF          <1>     jmp criticalError
   301                              <1> forLoop:
   302                              <1> ;This saves the following struc on the stack
   303                              <1> ;------------Hi stack addr-------------
   304                              <1> ;stepValue (qword), default 1
   305                              <1> ;limitValue (qword), to which value do we loop
   306                              <1> ;ptr to counter variable (qword)
   307                              <1> ;Special qword:
   308                              <1> ; Byte 7 = Offset into the line for next instruction
   309                              <1> ; Bytes[6:5] = Line number of portion after FOR (either FOR line or line after FOR)
   310                              <1> ; Byte 4 = Offset into the line for next instruction
   311                              <1> ; Bytes[3:2] = Line number of portion after NEXT (either NEXT line or line after NEXT)
   312                              <1> ; Byte 1 = Parity check sum for the qword, makes the sum of the bytes in qword 0
   313                              <1> ; Byte 0 = FOR signature
   314                              <1> ;------------Low stack addr------------
   315                              <1> ;rsp -> Return address
   316                              <1>     ;First check we have a NEXT following this FOR
   317 00000ED2 E87DFEFFFF          <1>     call nextScan
   318 00000ED7 4881FAFFFFFFFF      <1>     cmp rdx, -1
   319 00000EDE 0F84F5000000        <1>     je .critError
   320                              <1>     ;Here we make space on the stack.
   321 00000EE4 B904000000          <1>     mov ecx, forStruct_size/8
   322                              <1>     makeSpaceOnStack rcx  ;Make four qwords of space on the stack
    96                              <2> 
    97                              <2> 
    98                              <2> 
    99 00000EE9 58                  <2>  pop rax
   100 00000EEA 48C1E103            <2>  shl %1, 3
   101 00000EEE 4829CC              <2>  sub rsp, %1
   102 00000EF1 488D2D(50000000)    <2>  lea rbp, stack
   103 00000EF8 4839EC              <2>  cmp rsp, rbp
   104 00000EFB 770C                <2>  ja .macroNotOverflow
   105 00000EFD 488D2D02070000      <2>  lea rbp, stkOvflw
   106 00000F04 E9C0F1FFFF          <2>  jmp criticalError
   107                              <2> .macroNotOverflow:
   108                              <2> 
   109                              <2> 
   110 00000F09 50                  <2>  push rax
   323 00000F0A 4889E5              <1>     mov rbp, rsp
   324 00000F0D 4881C508000000      <1>     add rbp, 8  ;Make rbp point to the base of the new struc
   325 00000F14 48895500            <1>     mov qword [rbp + forStruct.specQword], rdx  ;Move rdx into its place on the stack
   326 00000F18 56                  <1>     push rsi   ;rsi points to first byte after FOR. The first word should now be a var
   327 00000F19 B820544F20          <1>     mov eax, " TO " ;First find the TO and STEP values
   328                              <1> .flScanTo:
   329 00000F1E 803E00              <1>     cmp byte [rsi], 0   ;ASCII null w/o a TO? Syntax Error
   330 00000F21 0F84AB000000        <1>     je .syntaxError
   331 00000F27 803E3A              <1>     cmp byte [rsi], ":" ;Save for a next statement delimiter
   332 00000F2A 0F84A2000000        <1>     je .syntaxError
   333 00000F30 3906                <1>     cmp dword [rsi], eax
   334 00000F32 7405                <1>     je .flToFound
   335 00000F34 48FFC6              <1>     inc rsi ;Go forwards by a byte
   336 00000F37 EBE5                <1>     jmp short .flScanTo
   337                              <1> .flToFound:
   338                              <1>     ;rsi points to the preceeding space so add 3 to go to trailing space
   339 00000F39 4881C603000000      <1>     add rsi, 3
   340 00000F40 E8FCF3FFFF          <1>     call spaceSkip  ;Go to expression to evaluate
   341 00000F45 E84AF4FFFF          <1>     call handleAlgebraicExpression  ;Get in rax the limit value
   342 00000F4A 48894510            <1>     mov qword [rbp + forStruct.limitValue], rax
   343                              <1>     ;rsi now points to the next word, this should be step, otherwise ignore the word
   344 00000F4E AD                  <1>     lodsd   ;Get the word in eax
   345 00000F4F 3D53544550          <1>     cmp eax, "STEP"
   346 00000F54 754F                <1>     jne .defaultStep
   347                              <1>     ;Check it is a "STEP "
   348 00000F56 AC                  <1>     lodsb
   349 00000F57 3C20                <1>     cmp al, " "
   350 00000F59 754A                <1>     jne .defaultStep
   351                              <1>     ;rsi points to a "STEP "
   352 00000F5B E8E1F3FFFF          <1>     call spaceSkip  ;Go to expression to evaluate
   353 00000F60 E82FF4FFFF          <1>     call handleAlgebraicExpression  ;Get in rax the step value
   354 00000F65 48894518            <1>     mov qword [rbp + forStruct.stepValue], rax
   355                              <1> .flVariable:
   356 00000F69 5E                  <1>     pop rsi ;Get back OG rsi position immediately after FOR
   357 00000F6A E8D2F3FFFF          <1>     call spaceSkip ;Skip intermediate spaces
   358 00000F6F 56                  <1>     push rsi
   359 00000F70 E869F9FFFF          <1>     call variableAssignment ;Make the variable assignment, trashes rsi
   360 00000F75 5E                  <1>     pop rsi ;rsi points to the start of the variable again
   361 00000F76 E8D1F3FFFF          <1>     call getVarNameLength
   362 00000F7B E88F030000          <1>     call findVariable   ;Get the variable pointer in rbx
   363 00000F80 48895D08            <1>     mov qword [rbp + forStruct.cntrPtr], rbx    ;Save variable pointer
   364                              <1>     ;Now check whether we should run the loop at all?
   365 00000F84 488B5D08            <1>     mov rbx, qword [rbp + forStruct.cntrPtr]
   366 00000F88 488B4B04            <1>     mov rcx, qword [rbx + varBlock.qValue]  ;Get the variable value
   367 00000F8C 488B5D10            <1>     mov rbx, qword [rbp + forStruct.limitValue]
   368                              <1>     ;if rcx >= rbx, branch to after NEXT
   369 00000F90 4839D9              <1>     cmp rcx, rbx
   370 00000F93 7D1A                <1>     jge .dontRunFor
   371 00000F95 488B5500            <1>     mov rdx, qword [rbp + forStruct.specQword]
   372 00000F99 48C1EA28            <1>     shr rdx, 5*8    ;Upper bytes will be cleared, needed for the "branch"
   373                              <1> .exit:
   374                              <1>     ;Recall edx must have the correct three bytes in it from the special qword
   375 00000F9D 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   376 00000FA4 C3                  <1>     ret
   377                              <1> .defaultStep:
   378 00000FA5 48C7451801000000    <1>     mov qword [rbp + forStruct.stepValue], 1
   379 00000FAD EBBA                <1>     jmp short .flVariable
   380                              <1> .dontRunFor:
   381                              <1>     ;Move the bytes from the NEXT to edx 
   382 00000FAF 488B5500            <1>     mov rdx, qword [rbp + forStruct.specQword]
   383 00000FB3 48C1EA10            <1>     shr rdx, 2*8    ;Upper bytes will be cleared
   384 00000FB7 09D2                <1>     or edx, edx     ;This should zero the upper dword
   385                              <1>     ;Need to also reclaim the stack space
   386 00000FB9 B904000000          <1>     mov ecx, forStruct_size/8
   387                              <1>     cleanSpaceOnStack rcx
   114                              <2> 
   115 00000FBE 58                  <2>  pop rax
   116 00000FBF 48C1E103            <2>  shl %1, 3
   117 00000FC3 4801CC              <2>  add rsp, %1
   118 00000FC6 50                  <2>  push rax
   388 00000FC7 EBD4                <1>     jmp short .exit
   389                              <1> ;Errors
   390                              <1> .unknownError:
   391 00000FC9 488D2DAE060000      <1>     lea rbp, uknowner
   392 00000FD0 EB07                <1>     jmp short .critError
   393                              <1> .syntaxError:
   394 00000FD2 488D2DEC050000      <1>     lea rbp, syntax
   395                              <1> .critError:
   396                              <1>     ;called with rbp already pointing to error string
   397 00000FD9 E9EBF0FFFF          <1>     jmp criticalError
   398                              <1> 
   399                              <1> next:
   400                              <1>     ;Verify that the structure on the stack is a FOR structure
   401 00000FDE 4889E5              <1>     mov rbp, rsp    ;Dont need to save rbp so trash it
   402 00000FE1 4881C508000000      <1>     add rbp, 8  ;Make it point to the base of the struc past the return address
   403                              <1>     ;Read the qword on stack, verify it is a FORstruct and passes checksum test
   404 00000FE8 488B5500            <1>     mov rdx, qword [rbp + forStruct.specQword]
   405 00000FEC 80FA5A              <1>     cmp dl, FORsig
   406 00000FEF 7555                <1>     jne .noForNext
   407                              <1>     ;Now compute checksum to verify its not an accident
   408 00000FF1 30C0                <1>     xor al, al
   409 00000FF3 B908000000          <1>     mov ecx, 8
   410                              <1> .checksumTest:
   411 00000FF8 00D0                <1>     add al, dl
   412 00000FFA 48C1EA08            <1>     shr rdx, 8
   413 00000FFE FFC9                <1>     dec ecx
   414 00001000 75F6                <1>     jnz .checksumTest
   415 00001002 84C0                <1>     test al, al     ;This should be 0
   416 00001004 7540                <1>     jnz .noForNext
   417                              <1>     ;Now we are truly in a FOR loop
   418 00001006 488B5D08            <1>     mov rbx, qword [rbp + forStruct.cntrPtr]    ;Get variable pointer
   419 0000100A 488B4304            <1>     mov rax, qword [rbx + varBlock.qValue]      ;Get variable value
   420 0000100E 483B4510            <1>     cmp rax, qword [rbp + forStruct.limitValue] ;Compare current var value to limit
   421 00001012 7D18                <1>     jge .noMoreLooping
   422 00001014 48034518            <1>     add rax, qword [rbp + forStruct.stepValue]  ;Add the step
   423 00001018 48894304            <1>     mov qword [rbx + varBlock.qValue], rax      ;Update the variable value
   424                              <1>     ;Now go back to line after FOR
   425 0000101C 488B5500            <1>     mov rdx, qword [rbp + forStruct.specQword]
   426 00001020 48C1EA28            <1>     shr rdx, 5*8    ;Move upper three bytes to lower three bytes of edx
   427                              <1> .exit:
   428                              <1>     ;Recall edx must have the correct three bytes in it from the special qword
   429 00001024 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   430 0000102B C3                  <1>     ret
   431                              <1> .noMoreLooping:
   432                              <1>     ;No need to update the variable, it is already above
   433 0000102C 488B5500            <1>     mov rdx, qword [rbp + forStruct.specQword]
   434 00001030 48C1EA10            <1>     shr rdx, 2*8    ;Move bytes 4:2 to lower three bytes of edx
   435 00001034 09D2                <1>     or edx, edx     ;Remove upper bits
   436                              <1>     ;Need to also reclaim the stack space
   437 00001036 B904000000          <1>     mov ecx, forStruct_size/8
   438                              <1>     cleanSpaceOnStack rcx
   114                              <2> 
   115 0000103B 58                  <2>  pop rax
   116 0000103C 48C1E103            <2>  shl %1, 3
   117 00001040 4801CC              <2>  add rsp, %1
   118 00001043 50                  <2>  push rax
   439 00001044 EBDE                <1>     jmp short .exit
   440                              <1> .noForNext:
   441 00001046 488D2DF4050000      <1>     lea rbp, noFor
   442 0000104D E977F0FFFF          <1>     jmp criticalError
   443                              <1> 
   444                              <1> while:
   445                              <1>     ;First check we have a WEND following this WHILE
   446 00001052 E82BFCFFFF          <1>     call wendScan
   447 00001057 4881FAFFFFFFFF      <1>     cmp rdx, -1
   448 0000105E 7464                <1>     je .critError
   449                              <1>     ;Here we make space on the stack.
   450 00001060 B901000000          <1>     mov ecx, whileStruct_size/8
   451                              <1>     makeSpaceOnStack rcx  ;Make a qword of space on the stack
    96                              <2> 
    97                              <2> 
    98                              <2> 
    99 00001065 58                  <2>  pop rax
   100 00001066 48C1E103            <2>  shl %1, 3
   101 0000106A 4829CC              <2>  sub rsp, %1
   102 0000106D 488D2D(50000000)    <2>  lea rbp, stack
   103 00001074 4839EC              <2>  cmp rsp, rbp
   104 00001077 770C                <2>  ja .macroNotOverflow
   105 00001079 488D2D86050000      <2>  lea rbp, stkOvflw
   106 00001080 E944F0FFFF          <2>  jmp criticalError
   107                              <2> .macroNotOverflow:
   108                              <2> 
   109                              <2> 
   110 00001085 50                  <2>  push rax
   452 00001086 4889E5              <1>     mov rbp, rsp
   453 00001089 4881C508000000      <1>     add rbp, 8  ;Make rbp point to the base of the new struc
   454 00001090 48895500            <1>     mov qword [rbp + whileStruct.specQword], rdx  ;Move rdx into its place on the stack
   455                              <1>     ;rsi should point after the WHILE
   456 00001094 E8FBF2FFFF          <1>     call handleAlgebraicExpression  ;Get result of expression in rax
   457 00001099 488B5500            <1>     mov rdx, qword [rbp + whileStruct.specQword]    ;Get special qword back into rdx
   458 0000109D 4885C0              <1>     test rax, rax   ;Zero is FALSE
   459 000010A0 740C                <1>     jz .conditionFalse
   460 000010A2 48C1EA28            <1>     shr rdx, 5*8    ;Bring the upper three bytes down to eax
   461                              <1> .exit:
   462 000010A6 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   463 000010AD C3                  <1>     ret
   464                              <1> .conditionFalse:
   465                              <1>     ;If condition is false, jump to the instruction after WEND
   466                              <1>     ;Here we reclaim the space from the stack.
   467 000010AE B901000000          <1>     mov ecx, whileStruct_size/8
   468                              <1>     cleanSpaceOnStack rcx  ;Clean a qword of space on the stack
   114                              <2> 
   115 000010B3 58                  <2>  pop rax
   116 000010B4 48C1E103            <2>  shl %1, 3
   117 000010B8 4801CC              <2>  add rsp, %1
   118 000010BB 50                  <2>  push rax
   469 000010BC 48C1EA10            <1>     shr rdx, 2*8    ;Bring bytes 4:2 down to bytes 2:0
   470 000010C0 09D2                <1>     or edx, edx     ;Zero the rest of it
   471 000010C2 EBE2                <1>     jmp short .exit
   472                              <1> .critError:
   473                              <1>     ;called with rbp already pointing to error string
   474 000010C4 E900F0FFFF          <1>     jmp criticalError
   475                              <1> wend:
   476                              <1>     ;Find the While on the WHILE line and evaluate the expression
   477                              <1>     ;if true, branch to the WHILE three bytes in specialQword
   478                              <1>     ;if false, branch to WEND three bytes in specialQword and clean stack
   479                              <1>     ;First verify we have a While structure on the stack
   480 000010C9 4889E5              <1>     mov rbp, rsp    ;Dont need to save rbp so trash it
   481 000010CC 4881C508000000      <1>     add rbp, 8  ;Make it point to the base of the struc past the return address
   482 000010D3 488B5500            <1>     mov rdx, qword [rbp + whileStruct.specQword]
   483 000010D7 80FA55              <1>     cmp dl, WHILEsig
   484 000010DA 0F858D000000        <1>     jne .noWhile
   485                              <1>     ;Now compute checksum to verify its not an accident
   486 000010E0 30C0                <1>     xor al, al
   487 000010E2 B908000000          <1>     mov ecx, 8
   488                              <1> .checksumTest:
   489 000010E7 00D0                <1>     add al, dl
   490 000010E9 48C1CA08            <1>     ror rdx, 8
   491 000010ED FFC9                <1>     dec ecx
   492 000010EF 75F6                <1>     jnz .checksumTest
   493 000010F1 84C0                <1>     test al, al     ;This should be 0
   494 000010F3 7578                <1>     jnz .noWhile
   495                              <1>     ;Now we are truly in a WHILE loop
   496                              <1>     ;Search the While line for the WHILE keyword and evaluate the expression after it
   497                              <1>     ;rdx is as normal
   498 000010F5 48C1EA28            <1>     shr rdx, 5*8    ;Get upper three bytes down low
   499 000010F9 81E2FFFF0000        <1>     and edx, 0FFFFh ;Save only dx
   500 000010FF E87B020000          <1>     call searchForProgramLine
   501 00001104 4881FBFFFFFFFF      <1>     cmp rbx, -1
   502 0000110B 7454                <1>     je .error
   503 0000110D 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Point to start of string
   504                              <1> .whileScan:
   505 00001111 803E00              <1>     cmp byte [rsi], 0   ;Are we at the end of the line
   506 00001114 7457                <1>     je .noWhile ;If so, we have gotten to the end of the line without a while
   507 00001116 488D3DCEF6FFFF      <1>     lea rdi, whileStr   ;Point to the while string in the table, 6 chars long
   508 0000111D B906000000          <1>     mov ecx, 6
   509                              <1> .scanning:
   510 00001122 A6                  <1>     cmpsb
   511 00001123 75EC                <1>     jne .whileScan
   512 00001125 FFC9                <1>     dec ecx
   513 00001127 75F9                <1>     jnz .scanning
   514                              <1>     ;Here is equal, rsi points past the space in "WHILE "
   515 00001129 48FFCE              <1>     dec rsi
   516 0000112C E810F2FFFF          <1>     call spaceSkip  ;Skip all spaces
   517 00001131 E85EF2FFFF          <1>     call handleAlgebraicExpression  ;Get algebraic expression in rax
   518 00001136 488B5500            <1>     mov rdx, qword [rbp + whileStruct.specQword]    ;Get special qword back into rdx
   519 0000113A 4885C0              <1>     test rax, rax
   520 0000113D 740C                <1>     jz .conditionFalse
   521 0000113F 48C1EA28            <1>     shr rdx, 5*8    ;Bring the upper three bytes down to eax
   522                              <1> .exit:
   523 00001143 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   524 0000114A C3                  <1>     ret
   525                              <1> .conditionFalse:
   526                              <1>     ;If condition is false, go to the instruction after WEND
   527                              <1>     ;Here we reclaim the space from the stack.
   528 0000114B B901000000          <1>     mov ecx, whileStruct_size/8
   529                              <1>     cleanSpaceOnStack rcx  ;Clean a qword of space on the stack
   114                              <2> 
   115 00001150 58                  <2>  pop rax
   116 00001151 48C1E103            <2>  shl %1, 3
   117 00001155 4801CC              <2>  add rsp, %1
   118 00001158 50                  <2>  push rax
   530 00001159 48C1EA10            <1>     shr rdx, 2*8    ;Bring bytes 4:2 down to bytes 2:0
   531 0000115D 09D2                <1>     or edx, edx     ;Zero the rest of it
   532 0000115F EBE2                <1>     jmp short .exit
   533                              <1> .error:
   534 00001161 488D2D16050000      <1>     lea rbp, uknowner
   535 00001168 E95CEFFFFF          <1>     jmp criticalError
   536                              <1> .noWhile:
   537 0000116D 488D2DB8040000      <1>     lea rbp, noWhile
   538 00001174 E950EFFFFF          <1>     jmp criticalError
   539                              <1> 
   540                              <1> handleIf:
   541                              <1> ;Evaluate the string. The IF,THEN/GOTO,ELSE statement must ALL be on one line
   542                              <1> ;IF exp1 THEN statement ELSE statement
   543                              <1> ;IF exp1 GOTO linenumber ELSE statement
   544                              <1> ;rsi points to first char AFTER function name
   545 00001179 E8C3F1FFFF          <1>     call spaceSkip
   546 0000117E E811F2FFFF          <1>     call handleAlgebraicExpression
   547 00001183 4885C0              <1>     test rax, rax  ;If this is 0, go to the else
   548 00001186 7425                <1>     jz .else
   549 00001188 E8B4F1FFFF          <1>     call spaceSkip
   550 0000118D AD                  <1>     lodsd   ;Get the whole word, must be either "THEN " or "GOTO "
   551 0000118E 3D5448454E          <1>     cmp eax, "THEN"
   552 00001193 7442                <1>     je .hi0   ; Go past THEN, to process statement
   553 00001195 3D474F544F          <1>     cmp eax, "GOTO"
   554 0000119A 7569                <1>     jne .error
   555 0000119C 803E20              <1>     cmp byte [rsi], " " ;is the next char a space?
   556 0000119F 7564                <1>     jne .error
   557 000011A1 E980FCFFFF          <1>     jmp goto
   558                              <1> .candidatethen:
   559 000011A6 803E20              <1>     cmp byte [rsi], " " ;is the next char a space?
   560 000011A9 742C                <1>     je .hi0
   561 000011AB EB58                <1>     jmp short .error
   562                              <1> .else:
   563                              <1>     ;Search for the ELSE, it has to be preceeded with a space and have a space after
   564 000011AD 803E00              <1>     cmp byte [rsi], 0 ;Are we at end of line?
   565 000011B0 7452                <1>     je .noElse
   566 000011B2 803E3A              <1>     cmp byte [rsi], ":" ;Are we at end line segment?
   567 000011B5 744D                <1>     je .noElse
   568 000011B7 48FFC6              <1>     inc rsi
   569 000011BA 813E20454C53        <1>     cmp dword [rsi], " ELS"
   570 000011C0 75EB                <1>     jne .else
   571 000011C2 4881C604000000      <1>     add rsi, 4  ;Skip those four chars, we have a candidate
   572 000011C9 66813E4520          <1>     cmp word [rsi], "E "
   573 000011CE 75DD                <1>     jne .else   ;If not equal failed to match pattern
   574 000011D0 4881C602000000      <1>     add rsi, 2  ;Else its the ELSE we are looking for, move rsi to first space past it
   575                              <1> .hi0:
   576                              <1> ;Now we do the branchy stuff, branch to the same line just further down
   577 000011D7 668B15(F40E0000)    <1>     mov dx, word [currentLine]
   578 000011DE E89C010000          <1>     call searchForProgramLine
   579 000011E3 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Does the line not exist somehow?
   580 000011EA 7419                <1>     je .error
   581 000011EC 4889F0              <1>     mov rax, rsi    ;Save pointer in rax
   582 000011EF 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine] ;Get the difference in chars
   583 000011F3 4829C8              <1>     sub rax, rcx
   584 000011F6 24FF                <1>     and al, -1  ;Save only bottom byte as the difference should be less than 255
   585 000011F8 C1E010              <1>     shl eax, 10h ;Shift to byte 3
   586 000011FB 09C2                <1>     or edx, eax ;Save the offset into byte 3
   587 000011FD 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   588                              <1> .noElse:
   589                              <1> ;If no else, simply return
   590 00001204 C3                  <1>     ret
   591                              <1> .error:
   592 00001205 488D1DB9030000      <1>     lea rbx, syntax
   593 0000120C E9B8EEFFFF          <1>     jmp criticalError
    16                                  %include "MATH.ASM"
    17                              <1> decimalToHex:
    18                              <1>     ;Takes ASCII encoded decimal number and 
    19                              <1>     ;returns its hex value
    20                              <1>     ;Input: rsi = Start of numeric ONLY string
    21                              <1>     ;Output: rax = Number
    22                              <1>     ;        rsi = First non-numeric char past end of number
    23 00001211 53                  <1>     push rbx
    24 00001212 51                  <1>     push rcx
    25 00001213 52                  <1>     push rdx
    26 00001214 31DB                <1>     xor ebx, ebx    ;Start with rbx = 0
    27                              <1> .processDigits:    
    28 00001216 AC                  <1>     lodsb           ;Get the first digit in al
    29 00001217 2C30                <1>     sub al, 30h     ;Reduce to value
    30 00001219 31D2                <1>     xor edx, edx    ;Clear for multiplication
    31 0000121B 3C0A                <1>     cmp al, 10      ;Digit valid? Propagte CF
    32 0000121D 480FB6C0            <1>     movzx rax, al   ;Clear upper bits
    33 00001221 4893                <1>     xchg rax, rbx
    34 00001223 730D                <1>     jnc .exit       ;Digit was not valid, exit
    35 00001225 B90A000000          <1>     mov ecx, 10     ;Multiply result by 10
    36 0000122A 48F7E1              <1>     mul rcx
    37 0000122D 4801C3              <1>     add rbx, rax    ;Add the new digits
    38 00001230 EBE4                <1>     jmp short .processDigits
    39                              <1> .exit:
    40 00001232 48FFCE              <1>     dec rsi         ;rsi points to first non-digit
    41 00001235 5A                  <1>     pop rdx
    42 00001236 59                  <1>     pop rcx
    43 00001237 5B                  <1>     pop rbx
    44 00001238 C3                  <1>     ret
    45                              <1> 
    46                              <1> printdecimalword:
    47                              <1> ;Takes the qword in rax and prints its signed decimal representation
    48 00001239 50                  <1>     push rax
    49 0000123A 53                  <1>     push rbx
    50 0000123B 488D3D(980E0000)    <1>     lea rdi, digitString   ;Use the default line as a buffer
    51                              <1>     ;Sanitise the digit buffer
    52 00001242 57                  <1>     push rdi
    53 00001243 51                  <1>     push rcx
    54 00001244 50                  <1>     push rax
    55                              <1> 
    56 00001245 B906000000          <1>     mov ecx, digitStringLen/8
    57 0000124A F348AB              <1>     rep stosq
    58 0000124D 58                  <1>     pop rax
    59 0000124E 59                  <1>     pop rcx
    60 0000124F 5F                  <1>     pop rdi
    61                              <1> 
    62 00001250 50                  <1>     push rax    ;Save rax for the sign bit later
    63 00001251 48D1C0              <1>     rol rax, 1  ;Test the sign bit
    64 00001254 A801                <1>     test al, 1
    65 00001256 48D1C8              <1>     ror rax, 1  ;Undo the roll
    66 00001259 7403                <1>     jz .noCompliment
    67 0000125B 48F7D8              <1>     neg rax     ;Get the 2's compliment of rax
    68                              <1> ;Clear the sign bit, print the number from bits 62:0
    69                              <1> .noCompliment:
    70 0000125E 48D1E0              <1>     shl rax, 1  ;Go past the edge
    71 00001261 48D1E8              <1>     shr rax, 1  ;Return zero extended
    72 00001264 4881C72F000000      <1>     add rdi, digitStringLen - 1 ;Go to the end of the buffer
    73 0000126B FD                  <1>     std ;Reverse string ops
    74 0000126C 50                  <1>     push rax
    75 0000126D 30C0                <1>     xor al, al  ;Place delimiter
    76 0000126F AA                  <1>     stosb
    77 00001270 58                  <1>     pop rax
    78 00001271 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
    78 0000127A 00                  <1>
    79                              <1> .pdw0:
    80 0000127B 31D2                <1>     xor edx, edx
    81 0000127D 48F7F3              <1>     div rbx
    82 00001280 80C230              <1>     add dl, '0'
    83 00001283 80FA39              <1>     cmp dl, '9'
    84 00001286 7603                <1>     jbe .pdw1
    85 00001288 80C207              <1>     add dl, 'A'-'0'-10
    86                              <1> .pdw1:
    87 0000128B 50                  <1>     push rax
    88 0000128C 88D0                <1>     mov al, dl    ;Save remainder byte
    89 0000128E AA                  <1>     stosb   ;Store the byte and sub one from rdi
    90 0000128F 58                  <1>     pop rax
    91 00001290 4885C0              <1>     test rax, rax
    92 00001293 75E6                <1>     jnz .pdw0
    93                              <1> 
    94                              <1>     ;Now add a minus sign if sign bit set
    95 00001295 58                  <1>     pop rax ;Get the original for the sign bit
    96 00001296 48D1C0              <1>     rol rax, 1  ;Bring the sign bit low
    97 00001299 A801                <1>     test al, 1
    98 0000129B 7403                <1>     jz .printString
    99 0000129D B02D                <1>     mov al, "-"
   100 0000129F AA                  <1>     stosb   ;Store minus sign and decrement rdi
   101                              <1> .printString:
   102 000012A0 FC                  <1>     cld ;Return string ops to normal
   103 000012A1 48FFC7              <1>     inc rdi ;Skip the extra 0 that was inserted
   104 000012A4 4889FD              <1>     mov rbp, rdi    ;Point rbp to the head of the string
   105 000012A7 E8F4EEFFFF          <1>     call ttyOutString
   106 000012AC 5B                  <1>     pop rbx
   107 000012AD 58                  <1>     pop rax
   108 000012AE C3                  <1>     ret
    17                                  %include "MEMORY.ASM"
    18                              <1> allocateBlock:
    19                              <1> ;Allocates a program memory block, the caller then fixes the specifics
    20                              <1> ;Output: rbx = Pointer to generic memory block, or -1 if memory full
    21                              <1> ;       Caller needs to fill in, block size, block type and specifics
    22 000012AF 52                  <1>     push rdx
    23                              <1> .ab0:
    24 000012B0 488B1D(E20E0000)    <1>     mov rbx, qword [lastBlock]    ;Get the last block in the chain
    25 000012B7 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;First allocation?
    26 000012BE 742F                <1>     je .firstAllocation
    27 000012C0 C60374              <1>     mov byte [rbx + memBlock.bSignature], notLastMemBlock ;Make it not be the last
    28 000012C3 480FB75301          <1>     movzx rdx, word [rbx + memBlock.wBlockSize] ;Goto end of block
    29 000012C8 4801D3              <1>     add rbx, rdx    ;Move rbx over the previous last block
    30 000012CB 488B15(D00E0000)    <1>     mov rdx, qword [maxMemAddr]
    31 000012D2 4839D3              <1>     cmp rbx, rdx ;rbx above maxmemory? 
    32 000012D5 770C                <1>     ja .memoryFull
    33 000012D7 48891D(E20E0000)    <1>     mov qword [lastBlock], rbx  ;New last block
    34 000012DE C60372              <1>     mov byte [rbx + memBlock.bSignature], lastMemBlock
    35                              <1> .exit:
    36 000012E1 5A                  <1>     pop rdx
    37 000012E2 C3                  <1>     ret
    38                              <1> .memoryFull:
    39 000012E3 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    39 000012EC FF                  <1>
    40 000012ED EBF2                <1>     jmp short .exit
    41                              <1> .firstAllocation:
    42                              <1> ;Deal with first allocation
    43 000012EF 488D1D(00000000)    <1>     lea rbx, section.programArea.vstart   ;Get this as the head of the chain
    44 000012F6 48891D(E20E0000)    <1>     mov qword [lastBlock], rbx
    45 000012FD 48891D(DA0E0000)    <1>     mov qword [mcbChain], rbx
    46 00001304 C60372              <1>     mov byte [rbx + memBlock.bSignature], lastMemBlock
    47 00001307 66C743010000        <1>     mov word [rbx + memBlock.wBlockSize], 0 ;Dummy block
    48 0000130D EBD2                <1>     jmp short .exit
    49                              <1> 
    50                              <1> findVariable:
    51                              <1> ;Input: rsi = Source string for variable name
    52                              <1> ;       ecx = Length of variable name (max 40)
    53                              <1> ;Output: rbx = ptr to varBlock/strBlock OR -1 if doesnt exist
    54 0000130F 50                  <1>     push rax
    55 00001310 51                  <1>     push rcx
    56 00001311 52                  <1>     push rdx
    57 00001312 56                  <1>     push rsi
    58 00001313 57                  <1>     push rdi
    59 00001314 488B1D(DA0E0000)    <1>     mov rbx, qword [mcbChain]   ;Start of the chain
    60 0000131B 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Chain empty?
    61 00001322 7446                <1>     je .exit
    62                              <1> .search:
    63 00001324 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
    64 00001328 7415                <1>     je .varFound    ;We found a numerical variable
    65 0000132A 807B0302            <1>     cmp byte [rbx + memBlock.bBlockType], datBlockType
    66 0000132E 741E                <1>     je .datFound    ;We found a string variable
    67                              <1> .invalid:
    68                              <1>     ;Are we at the end of the chain?
    69 00001330 803B72              <1>     cmp byte [rbx + memBlock.bSignature], lastMemBlock
    70 00001333 742B                <1>     je .varNotFound ;At the end of the chain and var not found? Error!
    71 00001335 480FB75301          <1>     movzx rdx, word [rbx + memBlock.wBlockSize]
    72 0000133A 4801D3              <1>     add rbx, rdx    ;Goto next block
    73 0000133D EBE5                <1>     jmp short .search
    74                              <1> .varFound:
    75                              <1>     ;Compare to see the var is our var
    76 0000133F 488D7B0C            <1>     lea rdi, qword [rbx + varBlock.sVarName] ;point rdi to the name string
    77 00001343 51                  <1>     push rcx
    78 00001344 56                  <1>     push rsi
    79 00001345 F3A6                <1>     repe cmpsb  ;Compare one byte at a time
    80 00001347 5E                  <1>     pop rsi
    81 00001348 59                  <1>     pop rcx
    82 00001349 75E5                <1>     jne .invalid
    83 0000134B F8                  <1>     clc
    84 0000134C EB1C                <1>     jmp short .exit
    85                              <1> .datFound:
    86 0000134E 488DBB04010000      <1>     lea rdi, qword [rbx + stringBlock.sVarName] ;point rdi to the name string
    87 00001355 51                  <1>     push rcx
    88 00001356 56                  <1>     push rsi
    89 00001357 F3A6                <1>     repe cmpsb  ;Compare one byte at a time
    90 00001359 5E                  <1>     pop rsi
    91 0000135A 59                  <1>     pop rcx
    92 0000135B 75D3                <1>     jne .invalid
    93 0000135D F8                  <1>     clc
    94 0000135E EB0A                <1>     jmp short .exit
    95                              <1> .varNotFound:
    96 00001360 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    96 00001369 FF                  <1>
    97                              <1> .exit:
    98 0000136A 5F                  <1>     pop rdi
    99 0000136B 5E                  <1>     pop rsi
   100 0000136C 5A                  <1>     pop rdx
   101 0000136D 59                  <1>     pop rcx
   102 0000136E 58                  <1>     pop rax
   103 0000136F C3                  <1>     ret
   104                              <1> 
   105                              <1> findFirstLine:
   106                              <1> ;Output: rbx = Pointer to the first program block
   107                              <1> ;         dx = Number of the first line
   108 00001370 488B1D(EA0E0000)    <1>     mov rbx, qword [firstLinPtr]
   109 00001377 668B15(F20E0000)    <1>     mov dx, word [firstLinNum]
   110 0000137E C3                  <1>     ret
   111                              <1> 
   112                              <1> ;FIRST SEARCH FOR A LINE NUMBER BEFORE INSERTING IT INTO THE CHAIN
   113                              <1> ;IF THE LINE NUMBER IS FOUND, REPLACE THE COMMAND STRING
   114                              <1> 
   115                              <1> searchForProgramLine:
   116                              <1> ;Walk the program chain looking to see if a line number exists. If it does,
   117                              <1> ; return a pointer to the block in rbx. If it doesn't, return -1 in rbx
   118                              <1> ;Input: dx = Line number
   119                              <1> ;Output: rbx = Pointer to program block 
   120 0000137F 488B1D(EA0E0000)    <1>     mov rbx, qword [firstLinPtr]
   121 00001386 4881FBFFFFFFFF      <1>     cmp rbx, -1
   122 0000138D 7413                <1>     je .lineFound
   123                              <1> .search:
   124 0000138F 66395304            <1>     cmp word [rbx + progLineBlock.wLineNum], dx ;Equal line numbers?
   125 00001393 740D                <1>     je .lineFound
   126 00001395 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr]   ;Walk chain
   127 00001399 4881FBFFFFFFFF      <1>     cmp rbx, -1
   128 000013A0 75ED                <1>     jne .search ;Not -1? Keep searching
   129                              <1> .lineFound:
   130 000013A2 C3                  <1>     ret
   131                              <1> 
   132                              <1> insertProgramLine:
   133                              <1> ;Walk the program chain looking for the biggest number less than our
   134                              <1> ; line number. Once we have reached the end of the chain, insert the block there, or
   135                              <1> ; if there is no block, then we are the last in the chain
   136                              <1> ;Input: rsi = New Program Block to be added
   137 000013A3 50                  <1>     push rax
   138 000013A4 53                  <1>     push rbx
   139 000013A5 51                  <1>     push rcx
   140 000013A6 52                  <1>     push rdx
   141 000013A7 57                  <1>     push rdi
   142 000013A8 E8C3FFFFFF          <1>     call findFirstLine  ;Get start of program in rbx and line number in dx
   143                              <1> ;First check if we should be the first line
   144                              <1> 
   145 000013AD 668B4E04            <1>     mov cx, word [rsi + progLineBlock.wLineNum] ;Save line number in cx
   146 000013B1 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Empty program marker
   147 000013B8 744D                <1>     je .first
   148 000013BA 6639D1              <1>     cmp cx, dx  ;If cx is below dx, then our entry is first
   149 000013BD 7248                <1>     jb .first    
   150                              <1> ;Use ax as the best line number and rdi as the pointer to that block
   151 000013BF 66B8FFFF            <1>     mov ax, -1  ;Marker to indicate no insertion
   152                              <1> .walk:
   153 000013C3 48817B06FFFFFFFF    <1>     cmp qword [rbx + progLineBlock.qPtr], -1    ;We are at the end
   154 000013CB 7419                <1>     je .sort
   155 000013CD 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Walk chain in rbx
   156 000013D1 663B4B04            <1>     cmp cx, word [rbx + progLineBlock.wLineNum]
   157 000013D5 77EC                <1>     ja .walk    ;If line number is above my line number, keep walking
   158                              <1> .candidate:
   159                              <1>     ;If the new line number is below the old line number, reject
   160 000013D7 663B4304            <1>     cmp ax, word [rbx + progLineBlock.wLineNum]
   161 000013DB 72E6                <1>     jb .walk
   162 000013DD 4889DF              <1>     mov rdi, rbx
   163 000013E0 668B4304            <1>     mov ax, word [rbx + progLineBlock.wLineNum]
   164 000013E4 EBDD                <1>     jmp short .walk
   165                              <1> .sort:
   166 000013E6 66FFC0              <1>     inc ax  ;If no candidates, exit
   167 000013E9 740E                <1>     jz .skipLink
   168                              <1>     ;rdi points to the previous line to link to
   169 000013EB 488B5706            <1>     mov rdx, qword [rdi + progLineBlock.qPtr]
   170 000013EF 48897706            <1>     mov qword [rdi + progLineBlock.qPtr], rsi   ;Insert self here
   171 000013F3 48895606            <1>     mov qword [rsi + progLineBlock.qPtr], rdx   ;Link new block to next line
   172 000013F7 EB20                <1>     jmp short .exit
   173                              <1> .skipLink:
   174 000013F9 48897306            <1>     mov qword [rbx + progLineBlock.qPtr], rsi   ;Link rsi to last element in list
   175 000013FD 48C74606FFFFFFFF    <1>     mov qword [rsi + progLineBlock.qPtr], -1    ;End of chain marker
   176 00001405 EB12                <1>     jmp short .exit
   177                              <1> .first:
   178 00001407 488935(EA0E0000)    <1>     mov qword [firstLinPtr], rsi
   179 0000140E 66890D(F20E0000)    <1>     mov word [firstLinNum], cx
   180 00001415 48895E06            <1>     mov qword [rsi + progLineBlock.qPtr], rbx   ;Put the old first line as second line
   181                              <1> .exit:
   182 00001419 5F                  <1>     pop rdi
   183 0000141A 5A                  <1>     pop rdx
   184 0000141B 59                  <1>     pop rcx
   185 0000141C 5B                  <1>     pop rbx
   186 0000141D 58                  <1>     pop rax
   187 0000141E C3                  <1>     ret
   188                              <1> 
   189                              <1> makeEditInteger:
   190                              <1> ;Will make a variable if it is new name, or edit the value if it already exists
   191                              <1> ;Input: rsi = Var name
   192                              <1> ;       (e)cx = Length of varname, max 40 chars
   193                              <1> ;       rax = Value
   194 0000141F E8EBFEFFFF          <1>     call findVariable   ;rbx returned with var block or -1
   195 00001424 4881FBFFFFFFFF      <1>     cmp rbx, -1
   196 0000142B 7405                <1>     je .newVar
   197 0000142D 48894304            <1>     mov qword [rbx + varBlock.qValue], rax
   198 00001431 C3                  <1>     ret
   199                              <1> .newVar:
   200 00001432 E878FEFFFF          <1>     call allocateBlock
   201 00001437 4881FBFFFFFFFF      <1>     cmp rbx, -1
   202 0000143E 741E                <1>     je .error
   203 00001440 48894304            <1>     mov qword [rbx + varBlock.qValue], rax  ;Save value
   204 00001444 66894B01            <1>     mov word [rbx + varBlock.wBlockSize], cx    ;Save length of name
   205 00001448 668143010C00        <1>     add word [rbx + varBlock.wBlockSize], varBlock_size ;Add full block size
   206 0000144E C6430301            <1>     mov byte [rbx + varBlock.bBlockType], varBlockType  ;Block type
   207 00001452 57                  <1>     push rdi
   208 00001453 488D7B0C            <1>     lea rdi, qword [rbx + varBlock.sVarName]
   209 00001457 E87B000000          <1>     call strcpy ;Copy the string name into block buffer
   210 0000145C 5F                  <1>     pop rdi
   211 0000145D C3                  <1>     ret
   212                              <1> .error:
   213 0000145E 488D2D50010000      <1>     lea rbp, noMem
   214 00001465 E95FECFFFF          <1>     jmp criticalError
   215                              <1> makeEditString:
   216                              <1> ;Will make a string if it is new name, or replace the string. Strings are null termin
   217                              <1> ;Input: rsi = Var name
   218                              <1> ;       ecx = Length of varname, max 40 chars
   219                              <1> ;       rdx = Ptr to string itself
   220 0000146A 57                  <1>     push rdi
   221 0000146B 56                  <1>     push rsi
   222 0000146C 50                  <1>     push rax
   223 0000146D 53                  <1>     push rbx
   224 0000146E E89CFEFFFF          <1>     call findVariable   ;rbx returned with string block or -1
   225 00001473 4881FBFFFFFFFF      <1>     cmp rbx, -1
   226 0000147A 7528                <1>     jne .strcopy
   227 0000147C E82EFEFFFF          <1>     call allocateBlock
   228 00001481 4881FBFFFFFFFF      <1>     cmp rbx, -1
   229 00001488 742E                <1>     je .error
   230 0000148A 66894B01            <1>     mov word [rbx + stringBlock.wBlockSize], cx    ;Save length of name
   231 0000148E 668143010401        <1>     add word [rbx + stringBlock.wBlockSize], stringBlock_size ;Add full block size
   232 00001494 C6430302            <1>     mov byte [rbx + stringBlock.bBlockType], datBlockType  ;Block type
   233 00001498 488DBB04010000      <1>     lea rdi, qword [rbx + stringBlock.sVarName]
   234 0000149F E833000000          <1>     call strcpy ;Copy the string name into block buffer
   235                              <1> .strcopy:
   236 000014A4 488D7B04            <1>     lea rdi, qword [rbx + stringBlock.string]   ;point to string space
   237 000014A8 4889D6              <1>     mov rsi, rdx    ;Point rsi to the string itself
   238 000014AB E814000000          <1>     call terminatedstrcpy
   239 000014B0 30C0                <1>     xor al, al
   240 000014B2 AA                  <1>     stosb   ;Store the null delimiter
   241 000014B3 5B                  <1>     pop rbx
   242 000014B4 58                  <1>     pop rax
   243 000014B5 5E                  <1>     pop rsi
   244 000014B6 5F                  <1>     pop rdi
   245 000014B7 C3                  <1>     ret
   246                              <1> .error:
   247 000014B8 488D2DF6000000      <1>     lea rbp, noMem
   248 000014BF E905ECFFFF          <1>     jmp criticalError
   249                              <1> ;------------------------------------------------:
   250                              <1> ;  The below are misc memory related functions   :
   251                              <1> ;------------------------------------------------:
   252                              <1> terminatedstrcpy:
   253                              <1> ;rdi = Destination String
   254                              <1> ;rsi = Source String
   255                              <1> ;Copy a terminated string
   256 000014C4 50                  <1>     push rax
   257                              <1> .copy:
   258 000014C5 AC                  <1>     lodsb   ;Get char in al and inc rsi
   259 000014C6 3C00                <1>     cmp al, 0
   260 000014C8 740B                <1>     je .exit
   261 000014CA 3C3A                <1>     cmp al, ":"
   262 000014CC 7407                <1>     je .exit
   263 000014CE 3C22                <1>     cmp al, 22h ;Speechmark
   264 000014D0 7403                <1>     je .exit
   265 000014D2 AA                  <1>     stosb   ;Save char from al and inc rdi
   266 000014D3 EBF0                <1>     jmp short .copy 
   267                              <1> .exit:
   268 000014D5 58                  <1>     pop rax
   269 000014D6 C3                  <1>     ret
   270                              <1> strcpy:
   271                              <1> ;rdi = Destination string
   272                              <1> ;rsi = Source string
   273                              <1> ;rcx = Number of Chars to copy
   274 000014D7 57                  <1>     push rdi
   275 000014D8 56                  <1>     push rsi
   276 000014D9 51                  <1>     push rcx
   277 000014DA F3A4                <1>     rep movsb
   278 000014DC 59                  <1>     pop rcx
   279 000014DD 5E                  <1>     pop rsi
   280 000014DE 5F                  <1>     pop rdi
   281 000014DF C3                  <1>     ret
   282                              <1> strlen:
   283                              <1> ;Input: rsi = String start
   284                              <1> ;Output: rsi = String start
   285                              <1> ;        ecx = String length, inclusive of NULL char
   286 000014E0 50                  <1>     push rax
   287 000014E1 56                  <1>     push rsi
   288 000014E2 31C9                <1>     xor ecx, ecx    ;Clear counter
   289                              <1> .search:
   290 000014E4 AC                  <1>     lodsb
   291 000014E5 FFC1                <1>     inc ecx
   292 000014E7 84C0                <1>     test al, al ;Is this a null char?
   293 000014E9 75F9                <1>     jnz .search ;Null not found
   294                              <1> .exit:
   295 000014EB 5E                  <1>     pop rsi
   296 000014EC 58                  <1>     pop rax
   297 000014ED C3                  <1>     ret
   298                              <1> 
   299                              <1> memoryDetection:
   300 000014EE B820E80000          <1>     mov eax, 0E820h
   301 000014F3 CD35                <1>     int 35h     ;rax = ptr to start, rsi = ptr to data table, each entry 24 bytes
   302 000014F5 EB07                <1>     jmp short .fsa1
   303                              <1> .findStartAddr:
   304 000014F7 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   305                              <1> .fsa1:
   306 000014FE 6685C9              <1>     test cx, cx
   307 00001501 742C                <1>     jz .worstCase
   308 00001503 66FFC9              <1>     dec cx
   309 00001506 488B1E              <1>     mov rbx, qword [rsi]    ;Get the address entry into rbx
   310 00001509 4839C3              <1>     cmp rbx, rax    
   311 0000150C 75E9                <1>     jne .findStartAddr
   312 0000150E 488B4608            <1>     mov rax, qword [rsi + 8] ;Get the number of bytes saved into rax
   313                              <1> 
   314 00001512 488D15(00000000)    <1>     lea rdx, section.programArea.vstart
   315 00001519 4829DA              <1>     sub rdx, rbx    ;Get the size of the interpreter and internal data area
   316 0000151C 4829D0              <1>     sub rax, rdx    ;Remove the number of bytes reserved to the interpreter
   317 0000151F E815FDFFFF          <1>     call printdecimalword
   318 00001524 4801C3              <1>     add rbx, rax    ;Add number of bytes to start address
   319 00001527 48891D(D00E0000)    <1>     mov qword [maxMemAddr], rbx ;Save this address
   320                              <1> .exit:
   321 0000152E C3                  <1>     ret
   322                              <1> .worstCase:
   323                              <1> ;Assume 2Mb MAX memory, rax has base address
   324 0000152F 48BB00002000000000- <1>     mov rbx, 200000h    ;2Mb value
   324 00001538 00                  <1>
   325 00001539 4829C3              <1>     sub rbx, rax
   326 0000153C 4889D8              <1>     mov rax, rbx    ;Get value in rax
   327 0000153F E8F5FCFFFF          <1>     call printdecimalword
   328 00001544 48C705(D00E0000)00- <1>     mov qword [maxMemAddr], 200000h
   328 0000154C 002000              <1>
   329 0000154F C3                  <1>     ret
   330                              <1> 
    18                                  %include "BASICDAT.ASM"
    19 00001550 4F6B0A0D00          <1> prompt  db "Ok",0Ah,0Dh,0
    20 00001555 53435220494E544241- <1> mainmsg db "SCR INTBASIC/64 v0.1",0Ah,0Dh,0
    20 0000155E 5349432F3634207630- <1>
    20 00001567 2E310A0D00          <1>
    21 0000156C 204279746573206672- <1> bytemsg db " Bytes free",0Ah,0Dh,0
    21 00001575 65650A0D00          <1>
    22 0000157A 0A0D00              <1> crlf    db 0Ah,0Dh,0
    23 0000157D 4572726F720A0D00    <1> errmsg  db "Error",0Ah,0Dh,0
    24 00001585 303132333435363738- <1> numbers db "0123456789"
    24 0000158E 39                  <1>
    25                              <1> ;startVarChars db "ABCDEFGHIJKLMNOPQRSTUVWXYZ" ;Valid starting chars for a var name
    26                              <1> ;numStartVarChars equ $ - startVarChars
    27 0000158F 414243444546474849- <1> varChrs db "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789%$" ;Valid inner chars for var name
    27 00001598 4A4B4C4D4E4F505152- <1>
    27 000015A1 535455565758595A30- <1>
    27 000015AA 313233343536373839- <1>
    27 000015B3 2524                <1>
    28                              <1> numVarChars equ $ - varChrs
    29                              <1> ;% => Integer variable (8 bytes)
    30                              <1> ;! => Single-Precision, Unused and ignored
    31                              <1> ;# => Double-Precision, Unused and ignored
    32                              <1> ;$ => String variable
    33                              <1> 
    34                              <1> ;Error Messages
    35 000015B5 4F7574206F66206D65- <1> noMem   db "Out of memory",0Ah,0Dh,0
    35 000015BE 6D6F72790A0D00      <1>
    36 000015C5 53796E746178206572- <1> syntax  db "Syntax error",0Ah,0Dh,0
    36 000015CE 726F720A0D00        <1>
    37 000015D4 54797065206D69736D- <1> typeError   db "Type mismatch",0Ah,0Dh,0
    37 000015DD 617463680A0D00      <1>
    38 000015E4 556E646566696E6564- <1> lineNoXist  db "Undefined line number",0Ah,0Dh,0
    38 000015ED 206C696E65206E756D- <1>
    38 000015F6 6265720A0D00        <1>
    39 000015FC 427265616B20696E20- <1> breakmsg db "Break in ",0
    39 00001605 00                  <1>
    40 00001606 537461636B206F7665- <1> stkOvflw db "Stack overflow",0Ah,0Dh,0
    40 0000160F 72666C6F770A0D00    <1>
    41                              <1> 
    42 00001617 5748494C4520776974- <1> noWend   db "WHILE without WEND", 0Ah, 0Dh, 0
    42 00001620 686F75742057454E44- <1>
    42 00001629 0A0D00              <1>
    43 0000162C 57454E442077697468- <1> noWhile  db "WEND without WHILE", 0Ah, 0Dh, 0
    43 00001635 6F7574205748494C45- <1>
    43 0000163E 0A0D00              <1>
    44 00001641 4E4558542077697468- <1> noFor    db "NEXT without FOR", 0Ah, 0Dh, 0
    44 0000164A 6F757420464F520A0D- <1>
    44 00001653 00                  <1>
    45 00001654 464F5220776974686F- <1> noNext   db "FOR without NEXT", 0Ah, 0Dh, 0
    45 0000165D 7574204E4558540A0D- <1>
    45 00001666 00                  <1>
    46 00001667 52455455524E207769- <1> noReturn db "RETURN without GOSUB", 0Ah, 0Dh, 0
    46 00001670 74686F757420474F53- <1>
    46 00001679 55420A0D00          <1>
    47 0000167E 556E7072696E746162- <1> uknowner db "Unprintable error", 0Ah, 0Dh, 0
    47 00001687 6C65206572726F720A- <1>
    47 00001690 0D00                <1>
    19                                  Segment programArea follows=resSeg align=1 vfollows=resSeg valign=1
    20                                  ENDOFPROGRAM:

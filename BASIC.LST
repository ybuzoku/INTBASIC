     1                                      [map all BASIC.MAP]
     2                                      [DEFAULT REL]
     3                                      BITS 64
     4                                  %include "MEM.INC"
     5                              <1> 
     6                              <1> progLineBlockType   equ 0   ;Program Line
     7                              <1> varBlockType        equ 1   ;Variable block
     8                              <1> datBlockType        equ 2   ;Data block (i.e. a string block)
     9                              <1> 
    10                              <1> notLastMemBlock equ "t" ;Used for blocks that are not the last block
    11                              <1> lastMemBlock    equ "r" ;Used by the last block to indicate end of chain
    12                              <1> 
    13                              <1> %macro memBlockM 0 ;Memory block Macro
    14                              <1>     .bSignature resb 1      ;Valid Signature
    15                              <1>     .wBlockSize resw 1      ;Total block size in bytes
    16                              <1>     .bBlockType resb 1      ;Block type, program line, variable or string
    17                              <1> %endmacro
    18                              <1> 
    19                              <1> struc memBlock
    20                              <1>     memBlockM
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    21                              <1> endstruc
    22                              <1> 
    23                              <1> struc progLineBlock
    24                              <1>     memBlockM               ;Common memory block header
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    25 00000004 ????                <1>     .wLineNum   resw 1      ;Line number, up to 65535
    26 00000006 ????????????????    <1>     .qPtr       resq 1      ;Pointer to the next line, or -1 if last line
    27 0000000E <res 100h>          <1>     .sLine      resb maxLineLen  ;Maximum length 255, keep null char but 
    28                              <1>     ;                             NOT LINE NUMBER OR PRECEEDING SPACES
    29                              <1> endstruc
    30                              <1> 
    31                              <1> struc varBlock
    32                              <1>     memBlockM               ;Common memory block header
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    33 00000004 ????????????????    <1>     .qValue     resq 1      ;One value qword
    34                              <1>     .sVarName:              ;Up to 40 chars for the var name
    35                              <1> endstruc
    36                              <1> 
    37                              <1> struc stringBlock
    38                              <1>     memBlockM
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    39 00000004 <res 100h>          <1>     .string     resb maxLineLen    ;Strings allocate 256 chars
    40                              <1>     .sVarName:              ;Up to 40 chars for the var name
    41                              <1> endstruc
    42                              <1> 
    43                              <1> ;Variable equates
    44                              <1> intEquate   equ 0
    45                              <1> strEquate   equ 1
    46                              <1> 
    47                              <1> ;State byte equates
    48                              <1> breakBit    equ 1    ;Set means on
    49                              <1> traceBit    equ 2    ;Set means TRON, Clear means TROFF
    50                              <1> indirectBit equ 4    ;Set means indirect/program mode, Clear means direct/line mode
    51                              <1> ctrlFlow    equ 8    ;Set means do not find other expression on current line
    52                              <1> 
    53                              <1> ;Control Instruction Signatures
    54                              <1> WHILEsig    equ 055h
    55                              <1> FORsig      equ 05Ah
    56                              <1> GOSUBsig    equ 0A5h
    57                              <1> ;Control stack data structures
    58                              <1> 
    59                              <1> struc forStruct
    60 00000000 ????????????????    <1>     .specQword  resq 1  ;Special qword (see function description)
    61 00000008 ????????????????    <1>     .cntrPtr    resq 1  ;Pointer to counter variable
    62 00000010 ????????????????    <1>     .limitValue resq 1  ;At what value, or after, do we stop the loop 
    63 00000018 ????????????????    <1>     .stepValue  resq 1  ;By how much do we increase on each iteration
    64                              <1> ;Special qword:
    65                              <1> ; Byte 7 = Offset into the line for next instruction after FOR
    66                              <1> ; Bytes[6:5] = Line number of portion after FOR (either FOR line or line after FOR)
    67                              <1> ; Byte 4 = Offset into the line for next instruction after NEXT
    68                              <1> ; Bytes[3:2] = Line number of portion after NEXT (either NEXT line or line after NEXT)
    69                              <1> ; Byte 1 = Parity check sum for the qword, makes the sum of the bytes in qword 0
    70                              <1> ; Byte 0 = FOR signature
    71                              <1> endstruc
    72                              <1> 
    73                              <1> struc whileStruct
    74 00000000 ????????????????    <1>     .specQword  resq 1  ;Special qword
    75                              <1> ;Special qword:
    76                              <1> ; Byte 7 = Offset into the line for the condition to evaluate
    77                              <1> ; Bytes[6:5] = Line number of WHILE 
    78                              <1> ; Byte 4 = Offset in line for either first : after WEND or ASCII NULL (end of line)
    79                              <1> ; Bytes[3:2] = Line number of WEND
    80                              <1> ; Byte 1 = Parity check sum for the qword, makes the sum of the bytes in qword 0
    81                              <1> ; Byte 0 = WHILE signature
    82                              <1> endstruc
    83                              <1> 
    84                              <1> struc gosubStruct
    85 00000000 ????????????????    <1>     .specQword  resq 1  ;Special qword
    86                              <1> ;Special qword:
    87                              <1> ; Byte 7 =  Offset in line for either first : after GOSUB or ASCII NULL (end of line)
    88                              <1> ; Bytes[6:5] = Line number of GOSUB 
    89                              <1> ; Bytes[4:2] = 055AA55h space filler signature
    90                              <1> ; Byte 1 = Parity check sum for the qword, makes the sum of the bytes in qword 0
    91                              <1> ; Byte 0 = GOSUB signature
    92                              <1> endstruc
    93                              <1> 
    94                              <1> ;Stack based macros
    95                              <1> %macro makeSpaceOnStack 1
    96                              <1>     ;The argument is to specify how much space to make on the stack
    97                              <1>     ;It will check to ensure that we dont go past the stack minimum.
    98                              <1>     ;If we do, call stack overflow!
    99                              <1>     pop rax    ;Get the return address qword into rax
   100                              <1>     shl %1, 3  ;Multiply argument register by 8
   101                              <1>     sub rsp, %1 ;Clear space on the stack plus one qword for ret addr
   102                              <1>     lea rbp, stack
   103                              <1>     cmp rsp, rbp
   104                              <1>     ja .macroNotOverflow ;If rsp above overflow buffer, its oki
   105                              <1>     lea rbp, stkOvflw
   106                              <1>     jmp criticalError
   107                              <1> .macroNotOverflow:
   108                              <1>     ;rsp now points to the start of the cleared space
   109                              <1>     ;Put the return address back on the stack
   110                              <1>     push rax
   111                              <1> %endmacro
   112                              <1> 
   113                              <1> %macro cleanSpaceOnStack 1
   114                              <1>     ;The argument is to specify how much space to reclaim from the stack
   115                              <1>     pop rax
   116                              <1>     shl %1, 3   ;Multiply argument register by 8
   117                              <1>     add rsp, %1
   118                              <1>     push rax
   119                              <1> %endmacro
     5                                  Segment .text align=1
     6                                  %include "RELOC.ASM"
     7 00000000 55AA                <1>     dw 0AA55h 
     8                              <1> ;First verify I have Enough RAM for my program and then run
     9 00000002 B801E80000          <1>     mov eax, 0E801h ;Get low memory count in ax
    10 00000007 CD35                <1>     int 35h
    11 00000009 663D0008            <1>     cmp ax, 200000h/400h ;Divide 2Mb into 1Kb chunks.
    12 0000000D 722A                <1>     jb bad
    13 0000000F B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    14 00000014 0F32                <1>     rdmsr
    15 00000016 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    16 00000018 48C1E720            <1>     shl rdi, 20h        ;Shift high
    17 0000001C 89C7                <1>     mov edi, eax        ;Get the low dword in
    18 0000001E 4889F8              <1>     mov rax, rdi
    19 00000021 488D35(00000000)    <1>     lea rsi, section.resSeg.start
    20 00000028 4881C7[F60E0000]    <1>     add rdi, bssLen
    21 0000002F B900100000          <1>     mov ecx, 1000h
    22 00000034 F348A5              <1>     rep movsq
    23 00000037 FFE0                <1>     jmp qword rax
    24                              <1> bad:
    25 00000039 488D2D0D000000      <1>     lea rbp, badmsg
    26 00000040 B804130000          <1>     mov eax, 1304h
    27 00000045 CD30                <1>     int 30h
    28 00000047 30E4                <1>     xor ah, ah
    29 00000049 CD36                <1>     int 36h
    30 0000004B CD38                <1>     int 38h
    31 0000004D 4E6F7420456E6F7567- <1> badmsg: db "Not Enough Memory. Press any key to enter SYSDEBUG...",0
    31 00000056 68204D656D6F72792E- <1>
    31 0000005F 20507265737320616E- <1>
    31 00000068 79206B657920746F20- <1>
    31 00000071 656E74657220535953- <1>
    31 0000007A 44454255472E2E2E00  <1>
     7                                  Segment dSeg nobits align=1 start=0
     8                                  %include "BSS.ASM"
     9 00000000 <res 50h>           <1> oflowbuff   resq 10        ;10 Qwords of overflow buffer
    10                              <1> ;rsp should never get here when operating in a program.
    11                              <1> ;Only acceptable to be used when processing a line
    12 00000050 <res D40h>          <1> stack       resq 200h - 8 - 10*8  ;Save total 4Kb stack space
    13 00000D90 ????????????????    <1> stacktop    resq 1
    14                              <1> 
    15                              <1> maxLineLen  equ 256
    16 00000D98 <res 100h>          <1> inString    resb maxLineLen         ;256 character input string
    17                              <1> 
    18                              <1> ;This string is used for printing long numbers and saving
    19                              <1> ; the variable names for string comparisons
    20                              <1> digitStringLen  equ 48
    21 00000E98 <res 30h>           <1> digitString resb digitStringLen     
    22                              <1> 
    23 00000EC8 ????????????????    <1> minMemAddr  resq 1  ;Pointer from where to start allocating memory blocks
    24 00000ED0 ????????????????    <1> maxMemAddr  resq 1  ;Pointer to the byte past which we cannot allocate anything
    25                              <1> ;==============================================================================
    26                              <1> ;This is the SDA for each program and must be included in the program area
    27                              <1> ; once we add the ability to save the program to disk.
    28                              <1> ;==============================================================================
    29                              <1> 
    30                              <1> ;void* mcbChain, lastBlock, firstLinPtr = -1 => New program, empty entries
    31                              <1> 
    32 00000ED8 ??                  <1> strLen      resb 1  ;Counter for number of chars entered in string
    33 00000ED9 ??                  <1> stateByte   resb 1  ;Bit 0 => Break Set, stop processing after end of current line
    34 00000EDA ????????????????    <1> mcbChain    resq 1  ;Pointer to the start of the chain
    35 00000EE2 ????????????????    <1> lastBlock   resq 1  ;Pointer to the last block
    36 00000EEA ????????????????    <1> firstLinPtr resq 1  ;Pointer to the programs' first line 
    37 00000EF2 ????                <1> firstLinNum resw 1  ;Line number of the first line of the program
    38 00000EF4 ????                <1> currentLine resw 1  ;Currently being executed line number
    39                              <1> 
    40                              <1> bssLen: ;Needed to compute the resident portion load location
     9                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1
    10                                  %include "MAIN.ASM"
    11                              <1> start:
    12 00000000 B801C50000          <1>     mov eax, 0C501h
    13 00000005 CD35                <1>     int 35h         ;Connect the debugger
    14 00000007 E8A1010000          <1>     call ttyClear   ;Clear the teletype
    15                              <1>     ;Set the CtrlBreak Handler
    16 0000000C 488D3DC7000000      <1>     lea rdi, ctrlBreakHandler
    17 00000013 B03B                <1>     mov al, 3Bh
    18 00000015 E8C9000000          <1>     call setHandler
    19                              <1> 
    20                              <1>     ;Memory stuff
    21 0000001A 488D2D10150000      <1>     lea rbp, mainmsg
    22 00000021 E87A010000          <1>     call ttyOutString
    23 00000026 E89F140000          <1>     call memoryDetection
    24 0000002B 488D2D13150000      <1>     lea rbp, bytemsg
    25 00000032 E869010000          <1>     call ttyOutString
    26 00000037 E8FC080000          <1>     call newProgram         ;Use this to reset program pointers
    27                              <1> mainLoop:
    28 0000003C FC                  <1>     cld                 ;Set default string op direction
    29 0000003D 488D25(900D0000)    <1>     lea rsp, stacktop    ;Reinitialize stack pointer
    30 00000044 488D05F1FFFFFF      <1>     lea rax, mainLoop
    31 0000004B 8025(D90E0000)FE    <1>     and byte [stateByte], 0FEh  ;Clear the break bit
    32 00000052 50                  <1>     push rax    ;Save address on stack
    33 00000053 488D2DD2140000      <1>     lea rbp, prompt
    34 0000005A E841010000          <1>     call ttyOutString
    35                              <1> .ml0:
    36                              <1> ;This section will execute an input line if it is an interactive expression
    37                              <1> ; or store it in the program if it has a line number.
    38                              <1> ;It will keep accepting lines until a line is entered without a line number
    39 0000005F E89F000000          <1>     call getLineInput
    40 00000064 E884110000          <1>     call decimalToHex   ;Check to see if we have a valid line number
    41 00000069 6685C0              <1>     test ax, ax
    42 0000006C 750C                <1>     jnz .saveLine
    43                              <1> ;Here we execute the line, move rsi to the start of the line
    44 0000006E 488D35(980D0000)    <1>     lea rsi, inString
    45 00000075 E9AE010000          <1>     jmp runLine
    46                              <1> .saveLine:
    47                              <1>     ;ax has the line number
    48 0000007A 6689C2              <1>     mov dx, ax
    49 0000007D E8D9120000          <1>     call searchForProgramLine
    50 00000082 4881FBFFFFFFFF      <1>     cmp rbx, -1
    51 00000089 751D                <1>     jne .commonProc ;If not equal, line must exist, continue
    52 0000008B E8B1020000          <1>     call spaceSkip  ;Skip all the prceeding spaces
    53 00000090 803E00              <1>     cmp byte [rsi], 0  ;Is the first non space char the end of the string?
    54 00000093 742D                <1>     je .lineDoesntExist
    55                              <1>     ;So we have a new line that isn't empty, allocate a new block for this line
    56 00000095 E8F1110000          <1>     call allocateBlock  ;Return a default block in rbx
    57 0000009A C6430300            <1>     mov byte [rbx + progLineBlock.bBlockType], progLineBlockType
    58 0000009E 66894304            <1>     mov word [rbx + progLineBlock.wLineNum], ax
    59 000000A2 66C743010E01        <1>     mov word [rbx + progLineBlock.wBlockSize], progLineBlock_size
    60                              <1> .commonProc:
    61                              <1>     ;If the line already exists, simply override the stored string
    62                              <1>     ;rbx has a pointer to the block
    63 000000A8 E80F140000          <1>     call strlen ;Get the string length
    64 000000AD 488D7B0E            <1>     lea rdi, qword [rbx + progLineBlock.sLine]  ;Get address here
    65 000000B1 E8FD130000          <1>     call strcpy ;Copy the program string to the program block
    66 000000B6 56                  <1>     push rsi
    67 000000B7 4889DE              <1>     mov rsi, rbx    ;Move the block into rsi
    68 000000BA E8C0120000          <1>     call insertProgramLine
    69 000000BF 5E                  <1>     pop rsi
    70 000000C0 EB9D                <1>     jmp short .ml0
    71                              <1> .lineDoesntExist:
    72 000000C2 488D2DF4140000      <1>     lea rbp, lineNoXist
    73                              <1> ;For any error, syntax or otherwise, come here
    74                              <1> criticalError:
    75                              <1> ;Called with rbp pointing at error message
    76 000000C9 E8D2000000          <1>     call ttyOutString
    77 000000CE C605(D90E0000)00    <1>     mov byte [stateByte], 0 ;Reset the state byte
    78 000000D5 E962FFFFFF          <1>     jmp mainLoop    ;Trash input line, restart line input
    79                              <1> 
    80                              <1> ctrlBreakHandler:
    81 000000DA 800D(D90E0000)01    <1>     or byte [stateByte], 1  ;Set the byte
    82 000000E1 48CF                <1>     iretq
    83                              <1> setHandler:
    84                              <1> ;Called with:
    85                              <1> ;   rdi = Pointer to interrupt handler
    86                              <1> ;   al = Interrupt number
    87 000000E3 89C5                <1>     mov ebp, eax    ;al has interrupt number which we need to save
    88 000000E5 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
    89                              <1> ;First call to get default BIOS segement selector and attribute word
    90 000000EB 88C3                <1>     mov bl, al  ;Set interrupt number 
    91 000000ED B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
    92 000000F2 CD35                <1>     int 35h
    93 000000F4 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
    94 000000F6 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
    95                              <1> ;dx preserves the attribute word
    96 000000F8 4889FB              <1>     mov rbx, rdi  ;Pointer passed in rdi
    97 000000FB B808F00000          <1>     mov eax, 0F008h ;Set descriptor
    98 00000100 CD35                <1>     int 35h
    99                              <1>     
   100 00000102 C3                  <1>     ret
    11                                  %include "TTY.ASM"
    12                              <1> getLineInput:
    13                              <1>     ;Sets rsi to the inputstring
    14 00000103 30E4                <1>     xor ah, ah
    15 00000105 8825(D80E0000)      <1>     mov byte [strLen], ah   ;Zero the char counter
    16 0000010B 488D3D(980D0000)    <1>     lea rdi, inString   ;Move to start of line
    17 00000112 4889FE              <1>     mov rsi, rdi
    18 00000115 57                  <1>     push rdi
    19 00000116 B900010000          <1>     mov ecx, maxLineLen
    20 0000011B 30C0                <1>     xor al, al    ;Ensure the input line is sanitised
    21 0000011D F3AA                <1>     rep stosb
    22 0000011F 5F                  <1>     pop rdi
    23                              <1> .getChar:
    24 00000120 E883000000          <1>     call ttyIn
    25 00000125 3C0D                <1>     cmp al, 0Dh ;Line Feed
    26 00000127 7456                <1>     je .gliExit
    27 00000129 3C08                <1>     cmp al, 08h ;Bspace
    28 0000012B 740F                <1>     je .glibspace
    29 0000012D 803D(D80E0000)FE    <1>     cmp byte [strLen], -2   ;If at max length (255 chars), simply beep and wait for either bspace or enter
    30 00000134 7459                <1>     je .gliFull 
    31 00000136 84C0                <1>     test al, al
    32 00000138 7443                <1>     je .gliExtendedChar
    33 0000013A EB29                <1>     jmp short .gliCheckCase
    34                              <1> .glibspace:
    35 0000013C F605(D80E0000)FF    <1>     test byte [strLen], -1  ;This will only be zero if strLen=0
    36 00000143 74DB                <1>     jz .getChar
    37 00000145 48FFCF              <1>     dec rdi ;Go back by one position in the input line
    38 00000148 FE0D(D80E0000)      <1>     dec byte [strLen]
    39 0000014E B008                <1>     mov al, 08h
    40 00000150 E846000000          <1>     call ttyOutChar
    41 00000155 B020                <1>     mov al, 20h  
    42 00000157 E83F000000          <1>     call ttyOutChar
    43 0000015C B008                <1>     mov al, 08h
    44 0000015E E838000000          <1>     call ttyOutChar
    45 00000163 EBBB                <1>     jmp short .getChar
    46                              <1> .gliCheckCase:
    47                              <1>     ;al has char
    48 00000165 E831000000          <1>     call ttyOutChar ;Echo the char as is, but store it uppercase
    49 0000016A 3C61                <1>     cmp al, "a"
    50 0000016C 7206                <1>     jb .gliccStore
    51 0000016E 3C7A                <1>     cmp al, "z"
    52 00000170 7702                <1>     ja .gliccStore
    53 00000172 2C20                <1>     sub al, 20h
    54                              <1> .gliccStore:
    55 00000174 AA                  <1>     stosb   ;Increment the pointer, add char to buffer
    56 00000175 FE05(D80E0000)      <1>     inc byte [strLen]   ;Inc char count
    57 0000017B EBA3                <1>     jmp short .getChar
    58                              <1> .gliExtendedChar:
    59                              <1>     ;Currently, extended chars do nothing, 
    60                              <1>     ; eventually add F1-F10 functionality
    61                              <1>     ; and arrow key support
    62 0000017D EBA1                <1>     jmp short .getChar
    63                              <1> .gliExit:
    64 0000017F 488D2DCD130000      <1>     lea rbp, crlf
    65 00000186 E815000000          <1>     call ttyOutString
    66 0000018B C60700              <1>     mov byte [rdi], 0   ;Null terminate string here
    67 0000018E C3                  <1>     ret
    68                              <1> .gliFull:
    69 0000018F B007                <1>     mov al, 07h
    70 00000191 E805000000          <1>     call ttyOutChar
    71 00000196 E985FFFFFF          <1>     jmp .getChar
    72                              <1> 
    73                              <1> ttyOutChar:
    74 0000019B B40E                <1>     mov ah, 0Eh
    75 0000019D CD30                <1>     int 30h
    76 0000019F C3                  <1>     ret
    77                              <1> ttyOutString:
    78                              <1> ;Print 0 terminated strings
    79 000001A0 B804130000          <1>     mov eax, 1304h
    80 000001A5 CD30                <1>     int 30h
    81 000001A7 C3                  <1>     ret
    82                              <1> ttyIn:
    83 000001A8 30E4                <1>     xor ah, ah
    84 000001AA CD36                <1>     int 36h
    85 000001AC C3                  <1>     ret
    86                              <1> ttyClear:
    87 000001AD B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
    88 000001B2 CD30                <1>     int 30h
    89 000001B4 B402                <1>     mov ah, 02h
    90 000001B6 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
    91 000001B8 88D7                <1>     mov bh, dl      ;Set cursor for page 0
    92 000001BA CD30                <1>     int 30h
    93 000001BC B707                <1>     mov bh, 07h     ;Grey/Black attribs
    94 000001BE B800060000          <1>     mov eax, 0600h  ;Clear whole screen
    95 000001C3 CD30                <1>     int 30h
    96 000001C5 C3                  <1>     ret
    12                                  %include "PROCESS.ASM"
    13                              <1> keywordParser:
    14                              <1> ;rsi must point to the start of the portion of the line to execute
    15 000001C6 E876010000          <1>     call spaceSkip  ;Skip any leading spaces
    16 000001CB 803E00              <1>     cmp byte [rsi], 0   ;Null terminated line, empty line?
    17 000001CE 7444                <1>     je .exitEmpty
    18                              <1>     ;rsi now points to function
    19 000001D0 488D3D67050000      <1>     lea rdi, funTbl     ;Point rdi to the function table
    20                              <1> .functionFinderLoop:
    21 000001D7 0FB60F              <1>     movzx ecx, byte [rdi]  ;Get the string length  
    22 000001DA 80F9FF              <1>     cmp cl, -1  ;-1 is the end of table marker, either Var assignment or error
    23 000001DD 7440                <1>     je .notLetVarAssignment ;No key word found, consider variable assignment
    24 000001DF 56                  <1>     push rsi    ;Save ptr to start of string on stack 
    25 000001E0 57                  <1>     push rdi
    26 000001E1 48FFC7              <1>     inc rdi             ;Goto first char in function name
    27 000001E4 F3A6                <1>     repe cmpsb
    28 000001E6 5F                  <1>     pop rdi
    29 000001E7 5E                  <1>     pop rsi     ;Return ptr to start of string pointer from stack
    30 000001E8 84C9                <1>     test cl, cl ;Did all the chars match?
    31 000001EA 740F                <1>     jz .functionFound
    32 000001EC 480FB607            <1>     movzx rax, byte [rdi]    ;Skip unnecessary function pointer
    33 000001F0 480502000000        <1>     add rax, 2      ;Add 2 to skip relative pointer
    34 000001F6 4801C7              <1>     add rdi, rax
    35 000001F9 EBDC                <1>     jmp short .functionFinderLoop
    36                              <1> .functionFound:
    37                              <1>     ;Function found! Execute!
    38                              <1>     ;rsi points to start of expression to evaluate for function
    39                              <1>     ;rdi points to table entry
    40 000001FB 488D1D3C050000      <1>     lea rbx, funTbl         ;Get table address
    41 00000202 480FB617            <1>     movzx rdx, byte [rdi]   ;Get pascal string length
    42 00000206 0FB70C17            <1>     movzx ecx, word [rdi + rdx] ;Add pascal strlen to table entry and get word offset
    43 0000020A 4801CB              <1>     add rbx, rcx    ;Add word offset to table base
    44 0000020D 48FFCA              <1>     dec rdx         ;Get number of chars in function name
    45 00000210 4801D6              <1>     add rsi, rdx    ;rsi points to first char AFTER function name
    46                              <1> .exit:
    47 00000213 C3                  <1>     ret 
    48                              <1> .exitEmpty:
    49 00000214 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    49 0000021D FF                  <1>
    50 0000021E C3                  <1>     ret
    51                              <1>     ;rbx has the function pointer, 
    52                              <1>     ;rsi points to the first char after the keyword (e.g. PRINT, INPUT etc)
    53                              <1> .notLetVarAssignment:
    54 0000021F 488D1D94060000      <1>     lea rbx, variableAssignment
    55 00000226 EBEB                <1>     jmp short .exit  ;Now call the function as if it was found from the table
    56                              <1> 
    57                              <1> runLine:
    58                              <1> ;New lines begin here, rsi point to the start of the program line
    59 00000228 F605(D90E0000)02    <1>     test byte [stateByte], traceBit ;Are we TRON?
    60 0000022F 0F85B0000000        <1>     jnz .tron
    61                              <1> .stringPortionProcess:
    62                              <1>     ;rsi points to string portion to begin processing
    63 00000235 E88CFFFFFF          <1>     call keywordParser
    64                              <1>     ;rbx has the function pointer, if rbx is -1, line was empty
    65                              <1>     ;rsi points to the first char after the keyword (e.g. PRINT, INPUT etc)
    66 0000023A 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If the line is empty, rbx has a -1 so skip the line
    67 00000241 7437                <1>     je .gotoNextLine
    68 00000243 F605(D90E0000)01    <1>     test byte [stateByte], breakBit ;Is break set before exec?
    69 0000024A 0F85C1000000        <1>     jnz .break
    70                              <1> ;EXEC   LINE    PORTION
    71 00000250 FFD3                <1>     call rbx        ;Call the function pointer in rbx
    72                              <1>     ;rsi should be pointing to the next portion of the line or the end of the line
    73                              <1> ;EXEC COMPLETE
    74 00000252 F605(D90E0000)01    <1>     test byte [stateByte], breakBit ;Is break set after exec?
    75 00000259 0F85B2000000        <1>     jnz .break
    76 0000025F F605(D90E0000)04    <1>     test byte [stateByte], indirectBit
    77 00000266 7448                <1>     jz .exit    ;IF in direct mode, just return to command line
    78 00000268 F605(D90E0000)08    <1>     test byte [stateByte], ctrlFlow ;Ctrl Flow =>ignore other expressions temporarily
    79 0000026F 7540                <1>     jnz .ctrlFlowHandler
    80                              <1> 
    81 00000271 E8BE040000          <1>     call findOtherExpressionsOnLine ;See if there are any other expressions
    82 00000276 84C0                <1>     test al, al ;If al is null, no more expressions on the line
    83                              <1>     ;If not null, keep executing expressions on same line
    84                              <1>     ;rsi points to first char after :
    85 00000278 75BB                <1>     jnz .stringPortionProcess ;If a : found, keep processing
    86                              <1> .gotoNextLine:
    87 0000027A 668B15(F40E0000)    <1>     mov dx, word [currentLine]  ;Get in rbx the ptr to current line
    88 00000281 E8D5100000          <1>     call searchForProgramLine
    89 00000286 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Does the line not exist somehow?
    90 0000028D 7421                <1>     je .exit
    91 0000028F 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Walk chain
    92 00000293 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Are we at the end of the chain?
    93 0000029A 7414                <1>     je .exit
    94 0000029C 668B5304            <1>     mov dx, word [rbx + progLineBlock.wLineNum] ;Save the new line number
    95 000002A0 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Point rsi to the start of the next line
    96                              <1> .gotoNextLineCommon:
    97 000002A4 668915(F40E0000)    <1>     mov word [currentLine], dx
    98 000002AB E978FFFFFF          <1>     jmp runLine
    99                              <1> .exit:
   100 000002B0 C3                  <1>     ret
   101                              <1> .ctrlFlowHandler:
   102                              <1>     ;The stack pointer should be pointing now at the block
   103                              <1>     ; control flow data block. 
   104                              <1>     ;The functions which return with this bit set, also have placed
   105                              <1>     ; the next line number in dx, offset into line in byte three of edx
   106 000002B1 8025(D90E0000)F7    <1>     and byte [stateByte], ~ctrlFlow ;First clear the ctrlflow bit
   107 000002B8 E89E100000          <1>     call searchForProgramLine   ;Get pointer to line
   108 000002BD 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Does the line not exist?
   109 000002C4 74DE                <1>     je .gotoNextLineCommon
   110 000002C6 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Point rsi to the start of the next line
   111 000002CA 89D0                <1>     mov eax, edx    ;Isolate the offset into the line
   112 000002CC C1E810              <1>     shr eax, 10h    ;Get byte three into byte 1
   113 000002CF 25FF000000          <1>     and eax, 0FFh   ;Save only the bottom byte
   114 000002D4 4801C6              <1>     add rsi, rax    ;Add the offset into the string to rsi
   115 000002D7 EBCB                <1>     jmp short .gotoNextLineCommon
   116                              <1> .badLineNumber:
   117 000002D9 488D2DDD120000      <1>     lea rbp, lineNoXist
   118 000002E0 E9E4FDFFFF          <1>     jmp criticalError
   119                              <1> 
   120                              <1> .tron:
   121                              <1> ;Print the line number about to be executed
   122 000002E5 F605(D90E0000)04    <1>     test byte [stateByte], indirectBit  ;Tron should only work in indirect mode
   123 000002EC 0F8443FFFFFF        <1>     jz .stringPortionProcess
   124 000002F2 B05B                <1>     mov al, "["
   125 000002F4 E8A2FEFFFF          <1>     call ttyOutChar
   126 000002F9 0FB705(F40E0000)    <1>     movzx eax, word [currentLine]
   127 00000300 E8100F0000          <1>     call printdecimalword
   128 00000305 B05D                <1>     mov al, "]"
   129 00000307 E88FFEFFFF          <1>     call ttyOutChar
   130 0000030C E924FFFFFF          <1>     jmp .stringPortionProcess
   131                              <1> .break:
   132 00000311 488D2DBD120000      <1>     lea rbp, breakmsg
   133 00000318 E883FEFFFF          <1>     call ttyOutString
   134 0000031D 0FB705(F40E0000)    <1>     movzx eax, word [currentLine]
   135 00000324 E8EC0E0000          <1>     call printdecimalword
   136 00000329 488D2D23120000      <1>     lea rbp, crlf
   137 00000330 E86BFEFFFF          <1>     call ttyOutString
   138                              <1>     ;Preserve only bit 2 of the state byte
   139 00000335 8025(D90E0000)02    <1>     and byte [stateByte], traceBit
   140 0000033C E9FBFCFFFF          <1>     jmp mainLoop    ;Exit processing
    13                                  %include "PARSE.ASM"
    14                              <1> ;Main Parsing Routines go here
    15                              <1> 
    16                              <1> spaceSkip:
    17                              <1> ;Allows us to skip spaces that might have been placed for
    18                              <1> ; ease of reading by the user without modifying any registers
    19                              <1> ; except for rsi.
    20                              <1> ;Input: rsi = Pointer to string
    21                              <1> ;Output: rsi = First non space character encountered
    22 00000341 803E20              <1>     cmp byte [rsi], " "
    23 00000344 7505                <1>     jne .exit
    24 00000346 48FFC6              <1>     inc rsi
    25 00000349 EBF6                <1>     jmp short spaceSkip
    26                              <1> .exit:
    27 0000034B C3                  <1>     ret
    28                              <1> 
    29                              <1> getVarNameLength:
    30                              <1> ;Called pointing to the buffer with the var name in it
    31                              <1> ;Input: rsi = Start of var name
    32                              <1> ;Output: ecx = Length of varname
    33 0000034C 50                  <1>     push rax
    34 0000034D 56                  <1>     push rsi
    35 0000034E 57                  <1>     push rdi
    36 0000034F 53                  <1>     push rbx
    37 00000350 52                  <1>     push rdx
    38 00000351 31D2                <1>     xor edx, edx    ;Clear counter of chars
    39 00000353 488D1D0E120000      <1>     lea rbx, varChrs    ;Get the list of valid variable name chars
    40                              <1> .search:
    41 0000035A 4889DF              <1>     mov rdi, rbx    ;Save pointer in rbx
    42 0000035D AC                  <1>     lodsb       ;Get the first char into al
    43 0000035E B926000000          <1>     mov ecx, numVarChars
    44 00000363 F2AE                <1>     repne scasb       ;Look for char in the valid chars list
    45 00000365 750A                <1>     jne .exit   ;Char not found, drop it
    46 00000367 FFC2                <1>     inc edx     ;Add one to number of chars found
    47 00000369 81FA28000000        <1>     cmp edx, 40 ;At position for char 40?
    48 0000036F 72E9                <1>     jb .search  ;Whilst below, keep going
    49                              <1> .exit:
    50 00000371 89D1                <1>     mov ecx, edx
    51 00000373 5A                  <1>     pop rdx
    52 00000374 5B                  <1>     pop rbx
    53 00000375 5F                  <1>     pop rdi
    54 00000376 5E                  <1>     pop rsi
    55 00000377 58                  <1>     pop rax
    56 00000378 C3                  <1>     ret
    57                              <1> 
    58                              <1> getVarType:
    59                              <1> ;Input: rsi = Start of var name
    60                              <1> ;       rcx = Length of varname
    61                              <1> ;Output: ebx = 0 => Integer
    62                              <1> ;        ebx = 1 => String
    63                              <1> ;        ebx = -1 => Var doesnt exist, caller handles
    64 00000379 50                  <1>     push rax
    65 0000037A 51                  <1>     push rcx
    66 0000037B 56                  <1>     push rsi
    67 0000037C E86A0F0000          <1>     call findVariable
    68 00000381 4881FBFFFFFFFF      <1>     cmp rbx, -1
    69 00000388 7406                <1>     je .exit
    70 0000038A 0FB65B03            <1>     movzx ebx, byte [rbx + memBlock.bBlockType]
    71 0000038E FFCB                <1>     dec ebx
    72                              <1> .exit:
    73 00000390 5E                  <1>     pop rsi
    74 00000391 59                  <1>     pop rcx
    75 00000392 58                  <1>     pop rax
    76 00000393 C3                  <1>     ret
    77                              <1> 
    78                              <1> handleAlgebraicExpression:
    79                              <1> ;Input: rsi = Points to a mathematical expression
    80                              <1> ;Output: rax = Result of said expression
    81                              <1> ;Declares a syntax error if weird chars found
    82                              <1> ;Declares a type error if a string variable found
    83                              <1>     ;Handle Logical Connectives here
    84                              <1> .handleFourthLevel:
    85 00000394 E805010000          <1>     call .handleThirdLevel
    86                              <1> .parseLogicals:
    87 00000399 66813E414E          <1>     cmp word [rsi], "AN"
    88 0000039E 750A                <1>     jne .hae1
    89 000003A0 807E0244            <1>     cmp byte [rsi + 2], "D"
    90 000003A4 0F84AB000000        <1>     je .and
    91                              <1> .hae1:
    92 000003AA 66813E4F52          <1>     cmp word [rsi], "OR"
    93 000003AF 0F84AF000000        <1>     je .or
    94                              <1> 
    95 000003B5 66813E584F          <1>     cmp word [rsi], "XO"
    96 000003BA 750A                <1>     jne .hae2
    97 000003BC 807E0252            <1>     cmp byte [rsi + 2], "R"
    98 000003C0 0F84B0000000        <1>     je .xor
    99                              <1> .hae2:
   100 000003C6 813E494D5020        <1>     cmp dword [rsi], "IMP "
   101 000003CC 7468                <1>     je .imp
   102 000003CE 813E524F4C20        <1>     cmp dword [rsi], "ROL "
   103 000003D4 744F                <1>     je .leftRoll
   104 000003D6 813E524F5220        <1>     cmp dword [rsi], "ROR "
   105 000003DC 7436                <1>     je .rightRoll
   106 000003DE 813E53484C20        <1>     cmp dword [rsi], "SHL "
   107 000003E4 741D                <1>     je .leftShift
   108 000003E6 813E53485220        <1>     cmp dword [rsi], "SHR "
   109 000003EC 0F859E020000        <1>     jne .exit
   110                              <1> .rightShift:
   111                              <1> ;Shift count is truncated to between 1 and 255 for shift and Roll
   112 000003F2 50                  <1>     push rax
   113 000003F3 E89F000000          <1>     call .handleThirdLevelSkip
   114 000003F8 59                  <1>     pop rcx
   115 000003F9 4891                <1>     xchg rax, rcx   ;Move count into rcx, and shift target to rax
   116 000003FB 48D3E8              <1>     shr rax, cl
   117 000003FE E996FFFFFF          <1>     jmp .parseLogicals
   118                              <1> 
   119                              <1> .leftShift:
   120 00000403 50                  <1>     push rax
   121 00000404 E88E000000          <1>     call .handleThirdLevelSkip
   122 00000409 59                  <1>     pop rcx
   123 0000040A 4891                <1>     xchg rax, rcx   ;Move count into rcx, and shift target to rax
   124 0000040C 48D3E0              <1>     shl rax, cl
   125 0000040F E985FFFFFF          <1>     jmp .parseLogicals
   126                              <1> 
   127                              <1> .rightRoll:
   128 00000414 50                  <1>     push rax
   129 00000415 E87D000000          <1>     call .handleThirdLevelSkip
   130 0000041A 59                  <1>     pop rcx
   131 0000041B 4891                <1>     xchg rax, rcx   ;Move count into rcx, and shift target to rax
   132 0000041D 48D3C8              <1>     ror rax, cl
   133 00000420 E974FFFFFF          <1>     jmp .parseLogicals
   134                              <1> 
   135                              <1> .leftRoll:
   136 00000425 50                  <1>     push rax
   137 00000426 E86C000000          <1>     call .handleThirdLevelSkip
   138 0000042B 59                  <1>     pop rcx
   139 0000042C 4891                <1>     xchg rax, rcx   ;Move count into rcx, and shift target to rax
   140 0000042E 48D3C0              <1>     rol rax, cl
   141 00000431 E963FFFFFF          <1>     jmp .parseLogicals
   142                              <1> 
   143                              <1> .imp:
   144                              <1>     ;A => B == ¬A OR B
   145 00000436 50                  <1>     push rax
   146 00000437 E85B000000          <1>     call .handleThirdLevelSkip
   147 0000043C 59                  <1>     pop rcx ;rcx has A
   148 0000043D 48F7D1              <1>     not rcx
   149 00000440 4809C8              <1>     or rax, rcx
   150 00000443 E951FFFFFF          <1>     jmp .parseLogicals
   151                              <1> 
   152                              <1> .not:
   153 00000448 E84A000000          <1>     call .handleThirdLevelSkip  ;Get result in rax
   154 0000044D 48F7D0              <1>     not rax ;Save 1's compliment in rax
   155 00000450 E944FFFFFF          <1>     jmp .parseLogicals
   156                              <1> .and:
   157 00000455 50                  <1>     push rax
   158 00000456 E83C000000          <1>     call .handleThirdLevelSkip
   159 0000045B 59                  <1>     pop rcx
   160 0000045C 4821C8              <1>     and rax, rcx
   161 0000045F E935FFFFFF          <1>     jmp .parseLogicals
   162                              <1> .or:
   163 00000464 48FFCE              <1>     dec rsi ;handle third level skips skips one too many for or
   164 00000467 50                  <1>     push rax
   165 00000468 E82A000000          <1>     call .handleThirdLevelSkip
   166 0000046D 59                  <1>     pop rcx
   167 0000046E 4809C8              <1>     or rax, rcx
   168 00000471 E923FFFFFF          <1>     jmp .parseLogicals
   169                              <1> .xor:
   170 00000476 50                  <1>     push rax
   171 00000477 E81B000000          <1>     call .handleThirdLevelSkip
   172 0000047C 59                  <1>     pop rcx
   173 0000047D 4831C8              <1>     xor rax, rcx
   174 00000480 E914FFFFFF          <1>     jmp .parseLogicals
   175                              <1> .eqv:
   176                              <1> ;Not XOR, ie only if the two bits are equal do we set it
   177 00000485 50                  <1>     push rax
   178 00000486 E80C000000          <1>     call .handleThirdLevelSkip
   179 0000048B 59                  <1>     pop rcx
   180 0000048C 4831C8              <1>     xor rax, rcx
   181 0000048F 48F7D0              <1>     not rax
   182 00000492 E902FFFFFF          <1>     jmp .parseLogicals
   183                              <1> 
   184                              <1> ;Level 3, Relational Connectives
   185                              <1> .handleThirdLevelSkip:
   186 00000497 4881C603000000      <1>     add rsi, 3  ;Go past the end of the word
   187                              <1> .handleThirdLevel:
   188 0000049E E80B010000          <1>    call .handleSecondLevel
   189                              <1> .parseRelationals:
   190                              <1>     ;Handle Relational connectives
   191 000004A3 803E3D              <1>     cmp byte [rsi], "="
   192 000004A6 0F84BA000000        <1>     je .processEq
   193 000004AC 66813E3C3E          <1>     cmp word [rsi], "<>"
   194 000004B1 0F84D0000000        <1>     je .processNeq
   195 000004B7 66813E3E3C          <1>     cmp word [rsi], "><"
   196 000004BC 0F84C5000000        <1>     je .processNeq
   197 000004C2 803E3C              <1>     cmp byte [rsi], "<"
   198 000004C5 7430                <1>     je .processLess
   199 000004C7 803E3E              <1>     cmp byte [rsi], ">"
   200 000004CA 0F85C0010000        <1>     jne .exit
   201                              <1> .processGreater:
   202 000004D0 807E013D            <1>     cmp byte [rsi + 1], "=" ;Is this a GEQ
   203 000004D4 7448                <1>     je .processGeq
   204 000004D6 50                  <1>     push rax
   205 000004D7 E8CF000000          <1>     call .handleSecondLevelSkip
   206 000004DC 59                  <1>     pop rcx ;lhs, rax has rhs of >
   207                              <1> 
   208 000004DD 53                  <1>     push rbx
   209 000004DE 31DB                <1>     xor ebx, ebx
   210 000004E0 4839C1              <1>     cmp rcx, rax
   211 000004E3 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1 ;Default to true
   211 000004EC FF                  <1>
   212 000004ED 480F4EC3            <1>     cmovle rax, rbx  ;Move the false value if less than
   213 000004F1 5B                  <1>     pop rbx
   214 000004F2 E9ACFFFFFF          <1>     jmp .parseRelationals
   215                              <1> .processLess:
   216 000004F7 807E013D            <1>     cmp byte [rsi + 1], "=" ;Is this a LEQ
   217 000004FB 7445                <1>     je .processLeq
   218 000004FD 50                  <1>     push rax
   219 000004FE E8A8000000          <1>     call .handleSecondLevelSkip
   220 00000503 59                  <1>     pop rcx ;lhs, rax has rhs of <
   221                              <1> 
   222 00000504 53                  <1>     push rbx
   223 00000505 31DB                <1>     xor ebx, ebx
   224 00000507 4839C1              <1>     cmp rcx, rax
   225 0000050A 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1 ;Default to true
   225 00000513 FF                  <1>
   226 00000514 480F4DC3            <1>     cmovge rax, rbx  ;Move the false value if greater than or equal to
   227 00000518 5B                  <1>     pop rbx
   228 00000519 E985FFFFFF          <1>     jmp .parseRelationals
   229                              <1> 
   230                              <1> .processGeq:
   231                              <1> ;Symbol has two chars so skip second char
   232 0000051E 48FFC6              <1>     inc rsi ;Skip first symbol
   233 00000521 50                  <1>     push rax
   234 00000522 E884000000          <1>     call .handleSecondLevelSkip
   235 00000527 59                  <1>     pop rcx ;lhs, rax has rhs of >=
   236                              <1> 
   237 00000528 53                  <1>     push rbx
   238 00000529 31DB                <1>     xor ebx, ebx
   239 0000052B 4839C1              <1>     cmp rcx, rax
   240 0000052E 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1 ;Default to true
   240 00000537 FF                  <1>
   241 00000538 480F4CC3            <1>     cmovl rax, rbx  ;Move the false value if less than
   242 0000053C 5B                  <1>     pop rbx
   243 0000053D E961FFFFFF          <1>     jmp .parseRelationals
   244                              <1> 
   245                              <1> .processLeq:
   246                              <1> ;Symbol has two chars so skip second char
   247 00000542 48FFC6              <1>     inc rsi
   248 00000545 50                  <1>     push rax
   249 00000546 E860000000          <1>     call .handleSecondLevelSkip
   250 0000054B 59                  <1>     pop rcx ;lhs, rax has rhs of <=
   251                              <1> 
   252 0000054C 53                  <1>     push rbx
   253 0000054D 31DB                <1>     xor ebx, ebx
   254 0000054F 4839C1              <1>     cmp rcx, rax
   255 00000552 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1 ;Default to true
   255 0000055B FF                  <1>
   256 0000055C 480F4FC3            <1>     cmovg rax, rbx  ;Move the false value if greater than
   257 00000560 5B                  <1>     pop rbx
   258 00000561 E93DFFFFFF          <1>     jmp .parseRelationals
   259                              <1> 
   260                              <1> .processEq:
   261 00000566 50                  <1>     push rax
   262 00000567 E83F000000          <1>     call .handleSecondLevelSkip
   263 0000056C 59                  <1>     pop rcx ;lhs, rax has rhs of =
   264                              <1> 
   265 0000056D 53                  <1>     push rbx 
   266 0000056E 31DB                <1>     xor ebx, ebx
   267 00000570 4839C1              <1>     cmp rcx, rax
   268 00000573 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1
   268 0000057C FF                  <1>
   269 0000057D 480F45C3            <1>     cmovne rax, rbx ;Only set rax to 0 if not equal
   270 00000581 5B                  <1>     pop rbx
   271 00000582 E91CFFFFFF          <1>     jmp .parseRelationals
   272                              <1> 
   273                              <1> .processNeq:
   274                              <1> ;Symbol has two chars so skip second char
   275 00000587 48FFC6              <1>     inc rsi
   276 0000058A 50                  <1>     push rax
   277 0000058B E81B000000          <1>     call .handleSecondLevelSkip
   278 00000590 59                  <1>     pop rcx ;lhs, rax has rhs of <>
   279                              <1> 
   280 00000591 53                  <1>     push rbx 
   281 00000592 31DB                <1>     xor ebx, ebx
   282 00000594 4839C1              <1>     cmp rcx, rax
   283 00000597 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1 ;Assume true, not equal
   283 000005A0 FF                  <1>
   284 000005A1 480F44C3            <1>     cmove rax, rbx ;Only set rax to 0 if equal
   285 000005A5 5B                  <1>     pop rbx
   286 000005A6 E9F8FEFFFF          <1>     jmp .parseRelationals
   287                              <1> 
   288                              <1> ;Level 2, Addition and Subtraction
   289                              <1> .handleSecondLevelSkip:
   290 000005AB 48FFC6              <1>     inc rsi
   291                              <1> .handleSecondLevel:
   292 000005AE E828000000          <1>     call .handleFirstLevel
   293                              <1> .parseAdditiveOperators:    
   294 000005B3 803E2D              <1>     cmp byte [rsi], "-"
   295 000005B6 7415                <1>     je .processMinus
   296 000005B8 803E2B              <1>     cmp byte [rsi], "+"
   297 000005BB 0F85CF000000        <1>     jne .exit              ;No operators, expression evaluated, exit
   298 000005C1 50                  <1>     push rax
   299 000005C2 E811000000          <1>     call .handleFirstLevelSkip   ;Parse first level
   300                              <1> .processAdd:    
   301 000005C7 59                  <1>     pop rcx
   302 000005C8 4801C8              <1>     add rax, rcx           ;Add the two numbers
   303 000005CB EBE6                <1>     jmp short .parseAdditiveOperators  ;Search again for + or -
   304                              <1> .processMinus:
   305 000005CD 50                  <1>     push rax
   306 000005CE E805000000          <1>     call .handleFirstLevelSkip   ;Parse first level
   307 000005D3 48F7D8              <1>     neg rax              ;Change a - b to a + -b
   308 000005D6 EBEF                <1>     jmp short .processAdd
   309                              <1> 
   310                              <1> ;Level 1, Exponent, Division and multiplication
   311                              <1> 
   312                              <1> .handleFirstLevelSkip:
   313 000005D8 48FFC6              <1>     inc rsi              ;Skip the op symbol
   314                              <1> .handleFirstLevel:
   315 000005DB E858000000          <1>     call .handleZerothLevel      ;Call third level
   316                              <1> .parseProductOperators:
   317 000005E0 803E5E              <1>     cmp byte [rsi], "^"
   318 000005E3 742D                <1>     je .exponentFound
   319 000005E5 803E2F              <1>     cmp byte [rsi], "/"
   320 000005E8 7415                <1>     je .processDiv
   321 000005EA 803E2A              <1>     cmp byte [rsi], "*"
   322 000005ED 0F859D000000        <1>     jne .exit           ;Neither multiplication or division, return up a level
   323                              <1> 
   324 000005F3 50                  <1>     push rax
   325 000005F4 E83C000000          <1>     call .handleZerothLevelSkip   ;Call zeroth level
   326 000005F9 59                  <1>     pop rcx
   327 000005FA 48F7E9              <1>     imul rcx             ; Multiplication
   328 000005FD EBE1                <1>     jmp short .parseProductOperators   ;Search again for * or /
   329                              <1> 
   330                              <1> .processDiv:
   331 000005FF 50                  <1>     push rax
   332 00000600 E830000000          <1>     call .handleZerothLevelSkip   ;Call zeroth level
   333 00000605 59                  <1>     pop rcx
   334 00000606 4891                <1>     xchg rax, rcx
   335 00000608 31D2                <1>     xor edx, edx         ;Clear rdx for rdx:rax
   336 0000060A 48F7F9              <1>     idiv rcx             ;Signed division
   337 0000060D E9CEFFFFFF          <1>     jmp .parseProductOperators         ;Search again for * or /
   338                              <1> 
   339                              <1> .exponentFound:
   340                              <1>     ;rax has the number to exponentiate
   341 00000612 6687DB              <1>     xchg bx, bx
   342 00000615 50                  <1>     push rax
   343 00000616 E81A000000          <1>     call .handleZerothLevelSkip  ;Parse the inner expression
   344 0000061B 59                  <1>     pop rcx
   345 0000061C 4891                <1>     xchg rcx, rax
   346                              <1>     ;rax has the number to exponentiate, rcx has the number of times to loop imul
   347 0000061E 53                  <1>     push rbx
   348 0000061F 4889C3              <1>     mov rbx, rax    ;Save a copy of rax in rbx
   349 00000622 48FFC9              <1>     dec rcx
   350                              <1> .imulLoop:
   351 00000625 31D2                <1>     xor edx, edx
   352 00000627 48F7EB              <1>     imul rbx
   353 0000062A 48FFC9              <1>     dec rcx
   354 0000062D 75F6                <1>     jnz .imulLoop
   355 0000062F 5B                  <1>     pop rbx
   356 00000630 E9ABFFFFFF          <1>     jmp .parseProductOperators
   357                              <1> 
   358                              <1> ;Level 0, Brackets, numbers and vars.
   359                              <1> 
   360                              <1> .handleZerothLevelSkip:
   361 00000635 48FFC6              <1>     inc rsi             ;Skip the op symbol
   362                              <1> .handleZerothLevel:
   363 00000638 E804FDFFFF          <1>     call spaceSkip
   364 0000063D AC                  <1>     lodsb               ;Read char and adv rsi
   365 0000063E 3C28                <1>     cmp al, '('
   366 00000640 750F                <1>     jne .varConstCheck
   367 00000642 E84DFDFFFF          <1>     call handleAlgebraicExpression  ;Parse the inner expression
   368 00000647 803E29              <1>     cmp byte [rsi], ')'   
   369 0000064A 745C                <1>     je .closeBracket     ;If close bracket, goto skip spaces
   370 0000064C E95F000000          <1>     jmp .error     ;Otherwise, error
   371                              <1>   
   372                              <1> .varConstCheck:
   373 00000651 3C41                <1>     cmp al, "A"       ;Alphabetical first char?
   374 00000653 730D                <1>     jae .varOrRNDFound      ;Yes, variable found or rnd function or error
   375 00000655 48FFCE              <1>     dec rsi            ;Else back one symbol 
   376 00000658 E8900B0000          <1>     call decimalToHex  ;to read number into rax
   377 0000065D E9DFFCFFFF          <1>     jmp spaceSkip
   378                              <1> 
   379                              <1> .varOrRNDFound:
   380 00000662 48FFCE              <1>     dec rsi
   381                              <1> ;Evaluate UNARY operators here in reverse stack order of importance
   382 00000665 813E4E4F5420        <1>     cmp dword [rsi], "NOT "
   383 0000066B 0F84D7FDFFFF        <1>     je .not
   384 00000671 48FFC6              <1>     inc rsi
   385 00000674 3C5A                <1>     cmp al, "Z"  
   386 00000676 7738                <1>     ja .error   ;Syntax error if char not between A-Z  
   387 00000678 3C52                <1>     cmp al, "R"
   388 0000067A 7515                <1>     jne .varFound
   389 0000067C 803E4E              <1>     cmp byte [rsi], "N" ;rsi was advanced by 1, check 
   390 0000067F 7510                <1>     jne .varFound
   391 00000681 807E0144            <1>     cmp byte [rsi+1], "D"
   392 00000685 750A                <1>     jne .varFound
   393 00000687 66AD                <1>     lodsw               ;Advance rsi by 3
   394 00000689 AC                  <1>     lodsb
   395 0000068A E440                <1>     in al, 40h         ;Read timer counter 0
   396 0000068C 480FB6C0            <1>     movzx rax, al
   397                              <1> .exit:
   398 00000690 C3                  <1>     ret                ;Return
   399                              <1> 
   400                              <1> .varFound:    
   401 00000691 48FFCE              <1>     dec rsi ;Back a char
   402 00000694 51                  <1>     push rcx
   403 00000695 E8B2FCFFFF          <1>     call getVarNameLength
   404 0000069A E81D000000          <1>     call getNumericVariable ;Get variable value in rax
   405 0000069F 4801CE              <1>     add rsi, rcx    ;Go past the edge of the name
   406 000006A2 59                  <1>     pop rcx
   407 000006A3 E999FCFFFF          <1>     jmp spaceSkip
   408                              <1> 
   409                              <1> .closeBracket:
   410 000006A8 48FFC6              <1>     inc rsi
   411 000006AB E991FCFFFF          <1>     jmp spaceSkip
   412                              <1> .error:
   413 000006B0 488D2DE70E0000      <1>     lea rbp, syntax
   414 000006B7 E90DFAFFFF          <1>     jmp criticalError
   415                              <1> 
   416                              <1> 
   417                              <1> getNumericVariable:
   418                              <1> ;Gets the value stored in a variable into rax 
   419                              <1> ;Input: rsi = Pointer to first char of a variable name
   420                              <1> ;Output: rax = Variable Value
   421                              <1> ;        rsi = Pointer to first char of a variable name
   422 000006BC 56                  <1>     push rsi
   423 000006BD 51                  <1>     push rcx
   424 000006BE 53                  <1>     push rbx
   425 000006BF E888FCFFFF          <1>     call getVarNameLength   ;Returns the length of the var name in cx
   426 000006C4 E8220C0000          <1>     call findVariable       ;Returns a pointer to the variable block in rbx
   427 000006C9 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Variable doesnt exist? Pretend it is 0
   428 000006D0 740E                <1>     je .noVar
   429 000006D2 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
   430 000006D6 750C                <1>     jne .stringFoundError
   431 000006D8 488B4304            <1>     mov rax, qword [rbx + varBlock.qValue]
   432                              <1> .exit:
   433 000006DC 5B                  <1>     pop rbx
   434 000006DD 59                  <1>     pop rcx
   435 000006DE 5E                  <1>     pop rsi
   436 000006DF C3                  <1>     ret
   437                              <1> .noVar:
   438 000006E0 31C0                <1>     xor eax, eax
   439 000006E2 EBF8                <1>     jmp short .exit
   440                              <1> .stringFoundError:
   441 000006E4 488D2DC20E0000      <1>     lea rbp, typeError
   442 000006EB E9D9F9FFFF          <1>     jmp criticalError
   443                              <1> 
   444                              <1> setNumericVariable:
   445                              <1> ;Sets the value stored in a variable
   446                              <1> ;Input: rsi = Pointer to first char of a variable name
   447                              <1> ;       rax = Variable value
   448                              <1> ;Output: rsi = Pointer to first char of variable name
   449 000006F0 56                  <1>     push rsi
   450 000006F1 51                  <1>     push rcx
   451 000006F2 53                  <1>     push rbx
   452                              <1> 
   453 000006F3 E854FCFFFF          <1>     call getVarNameLength   ;Returns the length of the var name in cx
   454 000006F8 E8EE0B0000          <1>     call findVariable       ;Returns a pointer to the variable block in rbx
   455 000006FD 4881FBFFFFFFFF      <1>     cmp rbx, -1             ;Variable doesnt exit?
   456 00000704 740E                <1>     je .makeEditInteger      ;Make one!
   457 00000706 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
   458 0000070A 750F                <1>     jne .stringFoundError
   459 0000070C 48894304            <1>     mov qword [rbx + varBlock.qValue], rax  ;Save value
   460                              <1> .exit:
   461 00000710 5B                  <1>     pop rbx
   462 00000711 59                  <1>     pop rcx
   463 00000712 5E                  <1>     pop rsi
   464 00000713 C3                  <1>     ret
   465                              <1> .makeEditInteger:
   466 00000714 E8E20C0000          <1>     call makeEditInteger
   467 00000719 EBF5                <1>     jmp short .exit
   468                              <1> .stringFoundError:
   469 0000071B 488D2D8B0E0000      <1>     lea rbp, typeError
   470 00000722 E9A2F9FFFF          <1>     jmp criticalError
   471                              <1> 
   472                              <1> setStringVariable:
   473                              <1> ;Sets the string pointed to by rdx
   474                              <1> ;Input: rsi = Pointer to first char of a variable name
   475                              <1> ;       rdx = Start of string
   476                              <1> ;Output: rsi = Pointer to first char of variable name
   477                              <1> ;Keeps adding characters until a 0, : or " encountered
   478                              <1> ;Adds a 0 to the end
   479 00000727 51                  <1>     push rcx
   480 00000728 E81FFCFFFF          <1>     call getVarNameLength   ;Gets the length of the var name in cx
   481 0000072D E8140D0000          <1>     call makeEditString     ;Returns a ptr to the var block in rbx
   482 00000732 59                  <1>     pop rcx
   483 00000733 C3                  <1>     ret
   484                              <1> 
   485                              <1> findOtherExpressionsOnLine:
   486                              <1> ;Input: rsi = start of line portion
   487                              <1> ;Output: rsi = points to first char after first ":" found
   488                              <1> ;         al = : if it was found or 00 if not
   489 00000734 AC                  <1>     lodsb
   490 00000735 3C00                <1>     cmp al, 0   ;Null hit, RIP procedure
   491 00000737 7404                <1>     je .exit
   492 00000739 3C3A                <1>     cmp al, ":" ;Strings can be terminated with a :
   493 0000073B 75F7                <1>     jne findOtherExpressionsOnLine
   494                              <1> .exit:
   495 0000073D C3                  <1>     ret
    14                                  %include "COMMANDS.ASM"
    15                              <1> 
    16                              <1> funTbl:
    17                              <1> ;Use PASCAL strings to know how long the comparisons need to be
    18                              <1> ;All function pointers are saved as distances from the head
    19                              <1> ; of the function table
    20                              <1> ;BASIC instructions are space terminated
    21                              <1> ;Interpreter instructions are null terminated
    22 0000073E 044C4554            <1>     db 4, "LET"     ;DONE
    23 00000742 7701                <1>     dw oldSchoolAssignemnt - funTbl
    24                              <1> 
    25 00000744 054E455700          <1>     db 5, "NEW",0     ;DONE
    26 00000749 FA01                <1>     dw newProgram - funTbl 
    27                              <1> 
    28 0000074B 07434C45415200      <1>     db 7, "CLEAR",0   ;DONE
    29 00000752 FA01                <1>     dw newProgram - funTbl 
    30                              <1> 
    31 00000754 064C49535400        <1>     db 6, "LIST",0    ;DONE
    32 0000075A 5C02                <1>     dw listProgram - funTbl 
    33                              <1> 
    34 0000075C 0552554E00          <1>     db 5, "RUN",0     ;DONE
    35 00000761 9802                <1>     dw runProgram - funTbl
    36                              <1> 
    37 00000763 085052494E542420    <1>     db 8, "PRINT$ "    ;Not implemented yet
    38 0000076B C902                <1>     dw printStatement - funTbl
    39                              <1> 
    40 0000076D 075052494E5420      <1>     db 7, "PRINT "    ;DONE
    41 00000774 C902                <1>     dw printStatement - funTbl
    42                              <1> 
    43 00000776 033F20              <1>     db 3, "? "        ;DONE, alias Print
    44 00000779 C902                <1>     dw printStatement - funTbl
    45                              <1> 
    46 0000077B 07494E50555420      <1>     db 7, "INPUT "
    47 00000782 6403                <1>     dw getInput - funTbl
    48                              <1> 
    49 00000784 04494620            <1>     db 4, "IF "      ;DONE, needs to be tested
    50 00000788 170A                <1>     dw handleIf - funTbl
    51                              <1> 
    52 0000078A 06474F544F20        <1>     db 6, "GOTO "    ;DONE
    53 00000790 C406                <1>     dw goto - funTbl
    54                              <1> 
    55 00000792 07474F53554220      <1>     db 7, "GOSUB "
    56 00000799 D906                <1>     dw gosub - funTbl
    57                              <1> 
    58 0000079B 0852455455524E20    <1>     db 8, "RETURN "
    59 000007A3 2207                <1>     dw return - funTbl
    60                              <1> 
    61 000007A5 0852455455524E00    <1>     db 8, "RETURN",0
    62 000007AD 2207                <1>     dw return - funTbl
    63                              <1> 
    64 000007AF 05464F5220          <1>     db 5, "FOR "
    65 000007B4 7007                <1>     dw forLoop - funTbl
    66                              <1> 
    67 000007B6 064E45585400        <1>     db 6, "NEXT",0
    68 000007BC 7C08                <1>     dw next - funTbl
    69                              <1> 
    70 000007BE 064E45585420        <1>     db 6, "NEXT "
    71 000007C4 7C08                <1>     dw next - funTbl
    72                              <1> 
    73 000007C6 07                  <1>     db 7
    74                              <1> whileStr:
    75 000007C7 5748494C4520        <1>     db "WHILE "
    76 000007CD F008                <1>     dw while - funTbl
    77                              <1> 
    78 000007CF 0657454E4420        <1>     db 6, "WEND "
    79 000007D5 6709                <1>     dw wend - funTbl    
    80 000007D7 0657454E4400        <1>     db 6, "WEND",0
    81 000007DD 6709                <1>     dw wend - funTbl   
    82                              <1> thenStr:
    83 000007DF 065448454E20        <1>     db 6, "THEN "    ;DONE
    84 000007E5 4401                <1>     dw badCmd - funTbl
    85                              <1> elseStr:
    86 000007E7 06454C534520        <1>     db 6, "ELSE "    ;DONE
    87 000007ED 4401                <1>     dw badCmd - funTbl
    88                              <1> 
    89 000007EF 0853595354454D00    <1>     db 8, "SYSTEM",0  ;DONE
    90 000007F7 0304                <1>     dw returnToDOS - funTbl
    91                              <1> 
    92 000007F9 05434C5300          <1>     db 5, "CLS",0     ;DONE
    93 000007FE 0F04                <1>     dw cls - funTbl
    94 00000800 05434C5320          <1>     db 5, "CLS "      ;DONE
    95 00000805 0F04                <1>     dw cls - funTbl
    96                              <1> 
    97 00000807 07444542554700      <1>     db 7, "DEBUG",0   ;DONE
    98 0000080E 1404                <1>     dw dbgr - funTbl
    99                              <1> 
   100 00000810 0654524F4E00        <1>     db 6, "TRON",0    ;DONE
   101 00000816 5501                <1>     dw tron - funTbl
   102                              <1> 
   103 00000818 0754524F464600      <1>     db 7, "TROFF",0   ;DONE
   104 0000081F 5D01                <1>     dw troff - funTbl
   105                              <1> 
   106 00000821 05454E4420          <1>     db 5, "END "     ;DONE
   107 00000826 5001                <1>     dw endProg - funTbl
   108 00000828 05454E4400          <1>     db 5, "END",0     ;DONE
   109 0000082D 5001                <1>     dw endProg - funTbl
   110                              <1> 
   111 0000082F 0653544F5020        <1>     db 6, "STOP "    ;DONE
   112 00000835 5001                <1>     dw endProg - funTbl
   113 00000837 0653544F5000        <1>     db 6, "STOP",0    ;DONE
   114 0000083D 5001                <1>     dw endProg - funTbl
   115                              <1> 
   116 0000083F 0845534341504520    <1>     db 8, "ESCAPE "  ;DONE
   117 00000847 5001                <1>     dw endProg - funTbl
   118 00000849 0845534341504500    <1>     db 8, "ESCAPE",0  ;DONE
   119 00000851 5001                <1>     dw endProg - funTbl
   120                              <1> 
   121 00000853 07455045454B20      <1>     db 7, "EPEEK "
   122 0000085A 6D01                <1>     dw memRead - funTbl
   123                              <1> 
   124 0000085C 0745504F4B4520      <1>     db 7, "EPOKE "
   125 00000863 6D01                <1>     dw memWrite - funTbl
   126                              <1> 
   127 00000865 065045454B20        <1>     db 6, "PEEK "
   128 0000086B 6D01                <1>     dw byteRead - funTbl
   129                              <1> 
   130 0000086D 06504F4B4520        <1>     db 6, "POKE "
   131 00000873 6D01                <1>     dw byteWrite - funTbl
   132                              <1> 
   133 00000875 0552454D20          <1>     db 5, "REM "
   134 0000087A 6E01                <1>     dw remark - funTbl
   135 0000087C 032720              <1>     db 3, "' "
   136 0000087F 6E01                <1>     dw remark - funTbl
   137                              <1> 
   138 00000881 FF                  <1>     db -1    ;Demarkate the end of the table
   139                              <1> ;End of Table
   140                              <1> badCmd:
   141 00000882 488D2D150D0000      <1>     lea rbp, syntax
   142 00000889 E83BF8FFFF          <1>     call criticalError 
   143                              <1> endProg:
   144 0000088E E968010000          <1>     jmp runProgram.endProgramPoint
   145                              <1> tron:
   146 00000893 800D(D90E0000)02    <1>     or byte [stateByte], traceBit   ;Set the traceBit
   147 0000089A C3                  <1>     ret
   148                              <1> troff:
   149 0000089B 8025(D90E0000)FD    <1>     and byte [stateByte], ~traceBit ;Clear the traceBit
   150 000008A2 C3                  <1>     ret
   151                              <1> notWrapper:
   152 000008A3 6687DB              <1>     xchg bx, bx
   153 000008A6 E99DFBFFFF          <1>     jmp handleAlgebraicExpression.not
   154                              <1> memRead:
   155                              <1> memWrite:
   156                              <1> byteRead:
   157                              <1> byteWrite:
   158 000008AB C3                  <1>     ret
   159                              <1> remark:
   160                              <1> ;Comment code, keep looping until end of line
   161 000008AC AC                  <1>     lodsb
   162 000008AD 84C0                <1>     test al, al 
   163 000008AF 75FB                <1>     jnz remark
   164 000008B1 48FFCE              <1>     dec rsi ;When al = 0, rsi points past it, move it back by one
   165 000008B4 C3                  <1>     ret
   166                              <1> 
   167                              <1> oldSchoolAssignemnt:
   168                              <1> ;Assign with a LET directive
   169                              <1> ;rsi points to first char AFTER function name
   170 000008B5 E887FAFFFF          <1>     call spaceSkip  ;Goto var assignment as if at start of line
   171                              <1> variableAssignment: ;Assignment without a LET directive
   172                              <1>     ;Establish if the string is a variable assignment or not
   173                              <1>     ;rsi points to start of string
   174 000008BA E88DFAFFFF          <1>     call getVarNameLength   ;Get the variable name length
   175 000008BF 4889F7              <1>     mov rdi, rsi    ;Save ptr to start of string in rdi
   176 000008C2 4801CE              <1>     add rsi, rcx    ;Go to end of string
   177 000008C5 E877FAFFFF          <1>     call spaceSkip  ;Skip spaces after the end of the var name
   178 000008CA AC                  <1>     lodsb   ;Get the first char after the spaces. This must be a =
   179 000008CB 3C3D                <1>     cmp al, "="
   180 000008CD 7551                <1>     jne .syntaxError
   181 000008CF 4889FE              <1>     mov rsi, rdi    ;Return rsi to the start of the string name
   182 000008D2 4801CE              <1>     add rsi, rcx    ;Go to end of var name
   183 000008D5 48FFCE              <1>     dec rsi
   184 000008D8 AC                  <1>     lodsb   ;Get last char into al and inc rsi
   185 000008D9 3C24                <1>     cmp al, "$"
   186 000008DB 7420                <1>     je .stringAssignment
   187 000008DD E85FFAFFFF          <1>     call spaceSkip  ;Skip any spaces
   188 000008E2 48FFC6              <1>     inc rsi         ;Go past the equality sign
   189 000008E5 E857FAFFFF          <1>     call spaceSkip  ;Skip any spaces
   190 000008EA 803E22              <1>     cmp byte [rsi], 22h ;Open speech mark
   191 000008ED 743D                <1>     je .typError    ;Integers cant have speechmarks
   192 000008EF E8A0FAFFFF          <1>     call handleAlgebraicExpression  ;Get the result of the expression into rax
   193 000008F4 4889FE              <1>     mov rsi, rdi    ;Return the start of the string into rsi
   194 000008F7 E8F4FDFFFF          <1>     call setNumericVariable
   195 000008FC C3                  <1>     ret
   196                              <1> .stringAssignment:
   197                              <1> ;This simply copies the string which is either speech mark, 0 or : terminated
   198                              <1> ;First allocate a string
   199                              <1> ;rsi = First char after the end of the variable name
   200                              <1> ;rdi = start of variable name 
   201                              <1> ;rcx = char count for var name
   202 000008FD E83FFAFFFF          <1>     call spaceSkip  ;Skip any spaces
   203 00000902 48FFC6              <1>     inc rsi         ;Go past the equality sign
   204 00000905 E837FAFFFF          <1>     call spaceSkip  ;Skip any spaces
   205 0000090A 803E22              <1>     cmp byte [rsi], 22h ;Open speechmark check again
   206 0000090D 751D                <1>     jne .typError    ;Assigning a number to a string is a type error
   207                              <1>     ;rsi now points to the start of the string to save
   208 0000090F 48FFC6              <1>     inc rsi ;Go past the speech mark
   209 00000912 4889F2              <1>     mov rdx, rsi    ;save start of string data in rdx
   210 00000915 4889FE              <1>     mov rsi, rdi
   211 00000918 57                  <1>     push rdi
   212 00000919 E809FEFFFF          <1>     call setStringVariable
   213 0000091E 5E                  <1>     pop rsi ;Save the start of the assignment in rsi
   214 0000091F C3                  <1>     ret
   215                              <1> 
   216                              <1> .syntaxError:
   217 00000920 488D2D770C0000      <1>     lea rbp, syntax ;Syntax error, keyword a bit confused
   218 00000927 E99DF7FFFF          <1>     jmp criticalError
   219                              <1> .typError:
   220 0000092C 488D2D7A0C0000      <1>     lea rbp, typeError
   221 00000933 E991F7FFFF          <1>     jmp criticalError
   222                              <1> 
   223                              <1> 
   224                              <1> newProgram: 
   225                              <1> ;Simply reset the program pointers
   226 00000938 488D05(00000000)    <1>     lea rax, section.programArea.vstart
   227 0000093F 488905(C80E0000)    <1>     mov qword [minMemAddr], rax
   228 00000946 488905(E20E0000)    <1>     mov qword [lastBlock], rax  ;Start writing at this location
   229 0000094D 488905(DA0E0000)    <1>     mov qword [mcbChain], rax   ;Create a mock MCB here
   230                              <1> 
   231 00000954 4889C2              <1>     mov rdx, rax
   232 00000957 668B4801            <1>     mov cx, word [rax + memBlock.wBlockSize]
   233 0000095B 4889C7              <1>     mov rdi, rax
   234 0000095E 30C0                <1>     xor al, al
   235 00000960 F3AA                <1>     rep stosb   ;Sanitise the old first allocation
   236                              <1> 
   237 00000962 C60272              <1>     mov byte [rdx + memBlock.bSignature], lastMemBlock
   238 00000965 66C742010000        <1>     mov word [rdx + memBlock.wBlockSize], 0 ;Dummy block, no size, gets overwritten
   239 0000096B 31C0                <1>     xor eax, eax
   240 0000096D 8805(D80E0000)      <1>     mov byte [strLen], al
   241 00000973 488D3D(980D0000)    <1>     lea rdi, inString
   242 0000097A B900010000          <1>     mov ecx, maxLineLen
   243 0000097F F3AA                <1>     rep stosb
   244 00000981 C605(F40E0000)0A    <1>     mov byte [currentLine], 10  ;Default to line 10
   245 00000988 48FFC8              <1>     dec rax ;rax = -1
   246 0000098B 488905(EA0E0000)    <1>     mov qword [firstLinPtr], rax ;No program in memory
   247 00000992 668905(F20E0000)    <1>     mov word [firstLinNum], ax
   248 00000999 C3                  <1>     ret
   249                              <1> listProgram:
   250                              <1> ;Go line by line and echo the program lines, inserting a crlf after each
   251                              <1> ;First print the line number, then add a space
   252 0000099A 488B1D(EA0E0000)    <1>     mov rbx, qword [firstLinPtr]    ;Get a pointer to the first program line
   253                              <1> .printLines:
   254 000009A1 488D2DAB0B0000      <1>     lea rbp, crlf           ;New line
   255 000009A8 E8F3F7FFFF          <1>     call ttyOutString
   256 000009AD 4881FBFFFFFFFF      <1>     cmp rbx, -1
   257 000009B4 741F                <1>     je .exit
   258 000009B6 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]
   259 000009BA E856080000          <1>     call printdecimalword
   260 000009BF B020                <1>     mov al, " "
   261 000009C1 E8D5F7FFFF          <1>     call ttyOutChar ;Print a space
   262 000009C6 488D6B0E            <1>     lea rbp, qword [rbx + progLineBlock.sLine]  ;Null terminated string
   263 000009CA E8D1F7FFFF          <1>     call ttyOutString
   264 000009CF 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr]   ;Walk list of program lines
   265 000009D3 EBCC                <1>     jmp short .printLines
   266                              <1> .exit:
   267 000009D5 C3                  <1>     ret
   268                              <1> runProgram:
   269                              <1>     ;Runs the machine in indirect mode
   270 000009D6 800D(D90E0000)04    <1>     or byte [stateByte], indirectBit    ;Entering indirect mode
   271                              <1>     ;rsi must point to the first line
   272 000009DD 668B15(F20E0000)    <1>     mov dx, word [firstLinNum]
   273 000009E4 668915(F40E0000)    <1>     mov word [currentLine], dx ;Reset the current line back to the start
   274 000009EB 488B1D(EA0E0000)    <1>     mov rbx, qword [firstLinPtr]
   275 000009F2 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine]
   276 000009F6 E82DF8FFFF          <1>     call runLine
   277                              <1> .endProgramPoint:
   278 000009FB 8025(D90E0000)FB    <1>     and byte [stateByte], ~indirectBit  ;Exit indirect mode
   279 00000A02 E935F6FFFF          <1>     jmp mainLoop    ;Resets the stack if exit mid loop to avoid stkoverflow
   280                              <1> 
   281                              <1> printStatement:
   282                              <1> ;Strings must be "" delimited or a string variable must be used
   283                              <1> ;rsi points to first char AFTER function name
   284                              <1> .printStart:
   285 00000A07 E835F9FFFF          <1>     call spaceSkip  ;move rsi to the start of the expression
   286 00000A0C AC                  <1>     lodsb
   287                              <1> 
   288 00000A0D 84C0                <1>     test al, al     ;Is this a null string?
   289 00000A0F 746B                <1>     jz .psvexit
   290 00000A11 3C22                <1>     cmp al, 022h    ;22h = ASCII Speechmarks
   291 00000A13 7449                <1>     je .stringPrint
   292                              <1>     ;Here we check if the first char is ASCII, if it is, check if its a string var
   293 00000A15 3C41                <1>     cmp al, "A"
   294 00000A17 7204                <1>     jb .printExpr
   295 00000A19 3C5A                <1>     cmp al, "Z"
   296 00000A1B 7214                <1>     jb .printStringVar
   297                              <1> .printExpr:
   298 00000A1D 48FFCE              <1>     dec rsi ;Return to the start of the string
   299                              <1> .printExpr1:    ;Return without dec rsi
   300 00000A20 E86FF9FFFF          <1>     call handleAlgebraicExpression ;Gets value of a var and/or algebraic operation
   301 00000A25 E8EB070000          <1>     call printdecimalword
   302 00000A2A E812F9FFFF          <1>     call spaceSkip
   303 00000A2F EB2D                <1>     jmp short .stringPrint
   304                              <1> .printStringVar:
   305                              <1>     ;Check if it is a string var or a unary function
   306 00000A31 48FFCE              <1>     dec rsi
   307 00000A34 E813F9FFFF          <1>     call getVarNameLength
   308 00000A39 E83BF9FFFF          <1>     call getVarType
   309 00000A3E 81FB01000000        <1>     cmp ebx, strEquate
   310 00000A44 75DA                <1>     jne .printExpr1  ;rsi points to the same point as initially
   311 00000A46 E8A0080000          <1>     call findVariable   ;ecx has string length, get block ptr in rbx
   312 00000A4B 55                  <1>     push rbp
   313 00000A4C 488D6B04            <1>     lea rbp, qword [rbx + stringBlock.string]
   314 00000A50 E84BF7FFFF          <1>     call ttyOutString
   315 00000A55 5D                  <1>     pop rbp
   316 00000A56 4801CE              <1>     add rsi, rcx    ;Go past variable
   317 00000A59 E8E3F8FFFF          <1>     call spaceSkip
   318                              <1> .stringPrint:
   319 00000A5E AC                  <1>     lodsb
   320 00000A5F 3C00                <1>     cmp al, 0
   321 00000A61 7419                <1>     je .psvexit
   322 00000A63 3C3A                <1>     cmp al, ":"
   323 00000A65 7412                <1>     je .psvexitColon
   324 00000A67 3C22                <1>     cmp al, 022h    ;Close Speech marks, check next char
   325 00000A69 741E                <1>     je .closespeechmarks
   326 00000A6B 3C3B                <1>     cmp al, ";"     ;Semicolon means print next section on same line
   327 00000A6D 7429                <1>     je .continue
   328 00000A6F E827F7FFFF          <1>     call ttyOutChar
   329 00000A74 EBE8                <1>     jmp short .stringPrint
   330                              <1> .openSpeechMark:
   331 00000A76 48FFC6              <1>     inc rsi ;Go back a char
   332                              <1> .psvexitColon:
   333 00000A79 48FFCE              <1>     dec rsi ;Go back a char
   334                              <1> .psvexit:
   335 00000A7C 488D2DD00A0000      <1>     lea rbp, crlf
   336 00000A83 E818F7FFFF          <1>     call ttyOutString
   337 00000A88 C3                  <1>     ret
   338                              <1> .closespeechmarks:
   339 00000A89 E8B3F8FFFF          <1>     call spaceSkip
   340 00000A8E AC                  <1>     lodsb
   341 00000A8F 3C3B                <1>     cmp al, ";" ;only exception to exiting if next non space char is a semicolon
   342 00000A91 74CB                <1>     je .stringPrint
   343 00000A93 48FFCE              <1>     dec rsi ;Go back a step
   344 00000A96 EBE4                <1>     jmp short .psvexit
   345                              <1> .continue:
   346 00000A98 E8A4F8FFFF          <1>     call spaceSkip
   347 00000A9D E965FFFFFF          <1>     jmp .printStart
   348                              <1> getInput:
   349                              <1> ;Take a string as a prompt
   350                              <1> ;rdi points just past the end of the command line
   351                              <1> ;rsi points to first char AFTER function name
   352                              <1> ;Input prompt strings must be speech mark delimited on both sides!
   353 00000AA2 E89AF8FFFF          <1>     call spaceSkip
   354                              <1>     ;Now check to see if the user has specified a custom prompt
   355 00000AA7 AC                  <1>     lodsb   ;Get first symbol and go past it
   356 00000AA8 3C22                <1>     cmp al, 22h ;Speechmark?
   357 00000AAA 7535                <1>     jne .defaultPrompt ;If no speechmark, print default prompt
   358                              <1> .customPrompt:
   359 00000AAC 4889F7              <1>     mov rdi, rsi    ;Save start of string in rdi
   360                              <1> .cp0:
   361 00000AAF AC                  <1>     lodsb           ;Now search for end of string speech marks or null terminator
   362 00000AB0 3C22                <1>     cmp al, 22h     ;Is al a speech mark?
   363 00000AB2 7410                <1>     je .printCustomPrompt
   364 00000AB4 84C0                <1>     test al, al     ;Is al null?
   365 00000AB6 75F7                <1>     jnz .cp0        ;No, keep searching for terminator
   366                              <1> .error:
   367 00000AB8 488D2DDF0A0000      <1>     lea rbp, syntax
   368 00000ABF E905F6FFFF          <1>     jmp criticalError
   369                              <1> .printCustomPrompt:
   370 00000AC4 4889FE              <1>     mov rsi, rdi    ;rsi points to the first char of the string
   371                              <1> .pcp0:
   372 00000AC7 AC                  <1>     lodsb
   373 00000AC8 3C22                <1>     cmp al, 22h     ;Speechmark?
   374 00000ACA 7407                <1>     je .stopPrompt
   375 00000ACC E8CAF6FFFF          <1>     call ttyOutChar
   376 00000AD1 EBF4                <1>     jmp short .pcp0
   377                              <1> .stopPrompt:
   378 00000AD3 E869F8FFFF          <1>     call spaceSkip  ;Skip spaces
   379 00000AD8 AC                  <1>     lodsb   ;Get first non space char after closing speechmark
   380 00000AD9 3C3B                <1>     cmp al, ";" ;Semicolon means no default prompt
   381 00000ADB 740E                <1>     je .noDefaultPrompt
   382 00000ADD 3C2C                <1>     cmp al, "," ;Comma also means no default prompt
   383 00000ADF 740A                <1>     je .noDefaultPrompt
   384                              <1> .defaultPrompt:
   385 00000AE1 48FFCE              <1>     dec rsi
   386 00000AE4 B03F                <1>     mov al, "?"
   387 00000AE6 E8B0F6FFFF          <1>     call ttyOutChar
   388                              <1> .noDefaultPrompt:
   389 00000AEB B020                <1>     mov al, " " ;space
   390 00000AED E8A9F6FFFF          <1>     call ttyOutChar
   391 00000AF2 E84AF8FFFF          <1>     call spaceSkip  ;Skip spaces after default supressor to get to var name
   392 00000AF7 E850F8FFFF          <1>     call getVarNameLength   ;Get var name length in ecx
   393 00000AFC 488D3D(980E0000)    <1>     lea rdi, digitString    ;Buffer has 48 chars, string names are max 40
   394 00000B03 E8AB090000          <1>     call strcpy     ;rsi points to var name
   395 00000B08 57                  <1>     push rdi    ;rdi points to first char of variable
   396 00000B09 51                  <1>     push rcx
   397 00000B0A E8F4F5FFFF          <1>     call getLineInput   ;Get input from the user in inString, null terminated
   398                              <1>     ;This will sanitise in direct mode meaning input cannot have any more statements
   399                              <1>     ; after it.
   400 00000B0F 59                  <1>     pop rcx
   401 00000B10 5F                  <1>     pop rdi 
   402 00000B11 4889FE              <1>     mov rsi, rdi    ;Save the start of the var name in rsi
   403 00000B14 4801CE              <1>     add rsi, rcx    ;Go to end of var
   404 00000B17 48FFCE              <1>     dec rsi
   405 00000B1A AC                  <1>     lodsb   ;Are we a string variable?
   406 00000B1B 488D35(980D0000)    <1>     lea rsi, inString   ;Move rsi to start of user input
   407 00000B22 3C24                <1>     cmp al, "$"
   408 00000B24 740F                <1>     je .handleString
   409                              <1> .handleNumeric:
   410 00000B26 E869F8FFFF          <1>     call handleAlgebraicExpression  ;Get the result of the expression into rax
   411 00000B2B 4889FE              <1>     mov rsi, rdi    ;Return the start of the string into rsi
   412 00000B2E E8BDFBFFFF          <1>     call setNumericVariable
   413 00000B33 EB0B                <1>     jmp short .commonExit
   414                              <1> .handleString:
   415                              <1>     ;IF a string variable, come here
   416                              <1>     ;rdi has the start of the variable name
   417                              <1> 
   418                              <1>     ;rdx must point to the start of the string
   419                              <1>     ;rsi must point to the start of the variable name
   420 00000B35 4889F2              <1>     mov rdx, rsi
   421 00000B38 4889FE              <1>     mov rsi, rdi    ;Return start of user name in rsi
   422 00000B3B E8E7FBFFFF          <1>     call setStringVariable
   423                              <1> .commonExit:
   424 00000B40 C3                  <1>     ret
   425                              <1> 
   426                              <1> ;==========================================================:
   427                              <1> ;==========================================================:
   428                              <1> ;==========================================================:
   429                              <1> ;          Functions Related to Program Management         :
   430                              <1> ;==========================================================:
   431                              <1> ;==========================================================:
   432                              <1> ;==========================================================:
   433                              <1> returnToDOS:
   434 00000B41 B007                <1>     mov al, 07h
   435 00000B43 E853F6FFFF          <1>     call ttyOutChar
   436 00000B48 E9B3F4FFFF          <1>     jmp start   ;Reset the interpreter
   437                              <1> cls:
   438 00000B4D E95BF6FFFF          <1>     jmp ttyClear
   439                              <1> dbgr:
   440                              <1>     ;Hook int 40h to main prog EP to allow returning 
   441                              <1> ;First call to get default BIOS segement selector and attribute word
   442 00000B52 B340                <1>     mov bl, 40h
   443 00000B54 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   444 00000B59 CD35                <1>     int 35h
   445 00000B5B 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   446 00000B5D B940000000          <1>     mov ecx, 40h    ;Interrupt number
   447                              <1> ;dx preserves the attribute word
   448 00000B62 488D1D09000000      <1>     lea rbx, .farReturn  ;Pointer passed in
   449 00000B69 B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   450 00000B6E CD35                <1>     int 35h
   451 00000B70 CD38                <1>     int 38h ;Call debugger
   452                              <1> .farReturn:
   453                              <1>     ;Reconnect CTRL+BREAK handler
   454 00000B72 48BC-               <1>     mov rsp, stacktop   ;Immediately reset stack
   454 00000B74 [900D000000000000]  <1>
   455 00000B7C 488D3D57F5FFFF      <1>     lea rdi, ctrlBreakHandler
   456 00000B83 B03B                <1>     mov al, 3Bh
   457 00000B85 E859F5FFFF          <1>     call setHandler
   458                              <1>     
   459 00000B8A 488D2DC2090000      <1>     lea rbp, crlf
   460 00000B91 E80AF6FFFF          <1>     call ttyOutString
   461 00000B96 E9A1F4FFFF          <1>     jmp mainLoop
    15                                  %include "CTRLFLOW.ASM"
    16                              <1> 
    17                              <1> ;Handles all the specific functions related to control flow such as scanning 
    18                              <1> ; lines for WEND, RETURN, NEXT
    19                              <1> retScan:
    20                              <1> ;Gets the current line address and starts searching program from current prog line
    21                              <1> ; for a return
    22 00000B9B 56                  <1>     push rsi
    23 00000B9C 668B15(F40E0000)    <1>     mov dx, word [currentLine]  ;pre-load dx with the current line number
    24 00000BA3 E8B3070000          <1>     call searchForProgramLine   ;Get program block pointer into rbx
    25 00000BA8 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If for some reason line doesnt exist?
    26 00000BAF 0F8493000000        <1>     je .error   ;Unknown Error
    27                              <1> ;Now pack for the first portion/line after the GOSUB
    28                              <1> ;rsi points just after the GOSUB itself
    29 00000BB5 56                  <1>     push rsi    ;Save the first point after the WHILE itself
    30 00000BB6 E879FBFFFF          <1>     call findOtherExpressionsOnLine     ;Get the first : or ASCII NUL
    31 00000BBB 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]  ;Get the line number
    32 00000BBF 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine]  ;Load ptr to start of string in rsi
    33 00000BC3 4829CE              <1>     sub rsi, rcx    ;Compute difference from start of string
    34 00000BC6 89F1                <1>     mov ecx, esi    ;Should just be low byte of si so cl
    35 00000BC8 81E1FF000000        <1>     and ecx, 0FFh   ;Save only bottom byte just in case of garbage
    36 00000BCE C1E110              <1>     shl ecx, 2*8    ;Move to the third byte in the dword
    37 00000BD1 09C8                <1>     or eax, ecx     ;Add byte three to eax
    38 00000BD3 89C2                <1>     mov edx, eax    ;Save in edx
    39 00000BD5 48C1E228            <1>     shl rdx, 5*8    ;Shift three bytes to top of qword
    40 00000BD9 5E                  <1>     pop rsi
    41                              <1> .initialSearch:
    42                              <1>     ;First look for a ASCII NUL or RETURN
    43 00000BDA 803E00              <1>     cmp byte [rsi], 0
    44 00000BDD 7415                <1>     je .gotoNextLine
    45 00000BDF 813E52455455        <1>     cmp dword [rsi], "RETU"
    46 00000BE5 7508                <1>     jne .notCandidate
    47 00000BE7 66817E04524E        <1>     cmp word [rsi + 4], "RN"
    48 00000BED 7418                <1>     je .wordFound
    49                              <1> .notCandidate:
    50 00000BEF 48FFC6              <1>     inc rsi ;Now search up until the end of the line for a RETURN
    51 00000BF2 EBE6                <1>     jmp short .initialSearch
    52                              <1> .gotoNextLine:
    53 00000BF4 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Get pointer to next program line
    54 00000BF8 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Now, when walking if it gives a value of -1, no NEXT found
    55 00000BFF 7431                <1>     je .noRet
    56 00000C01 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Load pointer to string rsi
    57 00000C05 EBD3                <1>     jmp short .initialSearch
    58                              <1> .wordFound:
    59                              <1>     ;Here, RETURN found! Huzzah! Now pack edx correctly
    60                              <1>     ;Add 055AA55h in bytes 4:2
    61 00000C07 48B8000055AA550000- <1>     mov rax, 055AA550000h
    61 00000C10 00                  <1>
    62 00000C11 4809C2              <1>     or rdx, rax
    63                              <1>     ;Compute checksum now
    64 00000C14 31C0                <1>     xor eax, eax
    65 00000C16 B0A5                <1>     mov al, GOSUBsig 
    66 00000C18 6689C2              <1>     mov dx, ax  ;Zero checksum byte
    67 00000C1B 31C0                <1>     xor eax, eax
    68 00000C1D B908000000          <1>     mov ecx, 8  ;8 times
    69                              <1> .csumLoop:
    70                              <1>     ;Spin rdx 8 times adding each byte to al
    71 00000C22 00D0                <1>     add al, dl
    72 00000C24 48C1C208            <1>     rol rdx, 8  ;Rotate left by 8 bits
    73 00000C28 FFC9                <1>     dec ecx
    74 00000C2A 75F6                <1>     jnz .csumLoop
    75 00000C2C F6D8                <1>     neg al ;Get twos compliment of sum (FFh - al)
    76 00000C2E 88C6                <1>     mov dh, al  ;Save in checksum byte
    77                              <1> .exit:
    78 00000C30 5E                  <1>     pop rsi
    79 00000C31 C3                  <1>     ret
    80                              <1> .noRet:
    81 00000C32 488D2D070A0000      <1>     lea rbp, noReturn
    82 00000C39 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
    82 00000C42 FF                  <1>
    83 00000C43 E9E8FFFFFF          <1>     jmp .exit
    84                              <1> .error:
    85 00000C48 488D2D080A0000      <1>     lea rbp, uknowner
    86 00000C4F 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
    86 00000C58 FF                  <1>
    87 00000C59 E9D2FFFFFF          <1>     jmp .exit
    88                              <1> 
    89                              <1> wendScan:
    90                              <1> ; Gets the current line address and starts searching program from the current line
    91                              <1> ; for a WEND
    92                              <1> ; Puts the packed specialQword into rdx if a WEND is found
    93                              <1> ; Returns rdx = -1 if an error occured with rbp pointing to the error string
    94 00000C5E 56                  <1>     push rsi
    95 00000C5F 668B15(F40E0000)    <1>     mov dx, word [currentLine]  ;pre-load dx with the current line number
    96 00000C66 E8F0060000          <1>     call searchForProgramLine   ;Get program block pointer into rbx
    97 00000C6B 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If for some reason line doesnt exist?
    98 00000C72 0F84A2000000        <1>     je .error   ;Unknown Error
    99                              <1> ;Now pack for the first portion/line after the for loop
   100                              <1> ;rsi points just after the FOR itself
   101 00000C78 56                  <1>     push rsi    ;Save the first point after the WHILE itself
   102 00000C79 E8B6FAFFFF          <1>     call findOtherExpressionsOnLine     ;Get the first : or ASCII NUL
   103 00000C7E 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]  ;Get the line number
   104 00000C82 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine]  ;Load ptr to start of string in rsi
   105 00000C86 4829CE              <1>     sub rsi, rcx    ;Compute difference from start of string
   106 00000C89 89F1                <1>     mov ecx, esi    ;Should just be low byte of si so cl
   107 00000C8B 81E1FF000000        <1>     and ecx, 0FFh   ;Save only bottom byte just in case of garbage
   108 00000C91 C1E110              <1>     shl ecx, 2*8    ;Move to the third byte in the dword
   109 00000C94 09C8                <1>     or eax, ecx     ;Add byte three to eax
   110 00000C96 89C2                <1>     mov edx, eax    ;Save in edx
   111 00000C98 48C1E228            <1>     shl rdx, 5*8    ;Shift three bytes to top of qword
   112 00000C9C 5E                  <1>     pop rsi
   113                              <1> .initialSearch:
   114                              <1>     ;First look for a : or a ASCII NUL to leave the WHILE part of the line
   115 00000C9D 803E00              <1>     cmp byte [rsi], 0
   116 00000CA0 740D                <1>     je .gotoNextLine
   117 00000CA2 813E57454E44        <1>     cmp dword [rsi], "WEND"
   118 00000CA8 7418                <1>     je .wordFound
   119 00000CAA 48FFC6              <1>     inc rsi ;Now search up until the end of the line for a WEND
   120                              <1>     ;"WEND" found here!
   121 00000CAD EBEE                <1>     jmp short .initialSearch
   122                              <1> .gotoNextLine:
   123 00000CAF 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Get pointer to next program line
   124 00000CB3 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Now, when walking if it gives a value of -1, no NEXT found
   125 00000CBA 7448                <1>     je .noWend
   126 00000CBC 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Load pointer to string rsi
   127 00000CC0 EBDB                <1>     jmp short .initialSearch
   128                              <1> .wordFound:
   129                              <1>     ;Here, word found! Huzzah! Now pack edx correctly
   130                              <1>     ;rsi points to the N in "WEND "
   131 00000CC2 E86DFAFFFF          <1>     call findOtherExpressionsOnLine 
   132                              <1>     ;make rsi point to next expression on the line or the end of the line
   133 00000CC7 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]  ;Get the line number
   134 00000CCB 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine]  ;Load ptr to start of string in rsi
   135 00000CCF 4829CE              <1>     sub rsi, rcx    ;Compute difference from start of string
   136 00000CD2 89F1                <1>     mov ecx, esi    ;Should just be low byte of si so cl
   137 00000CD4 81E1FF000000        <1>     and ecx, 0FFh   ;Save only bottom byte just in case of garbage
   138 00000CDA C1E110              <1>     shl ecx, 2*8    ;Move to the third byte in the dword
   139 00000CDD 09C8                <1>     or eax, ecx     ;Add byte three to eax
   140 00000CDF 48C1E010            <1>     shl rax, 8*2    ;Shift three bytes to byte 4 of qword
   141 00000CE3 4809C2              <1>     or rdx, rax     ;Add bytes [4:2] to rdx
   142                              <1>     ;Compute checksum now
   143 00000CE6 31C0                <1>     xor eax, eax
   144 00000CE8 B055                <1>     mov al, WHILEsig 
   145 00000CEA 6689C2              <1>     mov dx, ax  ;Zero checksum byte
   146 00000CED 31C0                <1>     xor eax, eax
   147 00000CEF B908000000          <1>     mov ecx, 8  ;8 times
   148                              <1> .csumLoop:
   149                              <1>     ;Spin rdx 8 times adding each byte to al
   150 00000CF4 00D0                <1>     add al, dl
   151 00000CF6 48C1C208            <1>     rol rdx, 8  ;Rotate left by 8 bits
   152 00000CFA FFC9                <1>     dec ecx
   153 00000CFC 75F6                <1>     jnz .csumLoop
   154 00000CFE F6D8                <1>     neg al ;Get twos compliment of sum (FFh - al)
   155 00000D00 88C6                <1>     mov dh, al  ;Save in checksum byte
   156                              <1> .exit:
   157 00000D02 5E                  <1>     pop rsi
   158 00000D03 C3                  <1>     ret
   159                              <1> .noWend:
   160 00000D04 488D2DE5080000      <1>     lea rbp, noWend
   161 00000D0B 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
   161 00000D14 FF                  <1>
   162 00000D15 E9E8FFFFFF          <1>     jmp .exit
   163                              <1> .error:
   164 00000D1A 488D2D36090000      <1>     lea rbp, uknowner
   165 00000D21 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
   165 00000D2A FF                  <1>
   166 00000D2B E9D2FFFFFF          <1>     jmp .exit
   167                              <1> nextScan:
   168                              <1> ; Gets the current line address and starts searching program from the current line
   169                              <1> ; for a NEXT
   170                              <1> ; Puts the packed specialQword into rdx if a NEXT is found
   171                              <1> ; Returns rdx = -1 if an error occured with rbp pointing to the error string
   172 00000D30 56                  <1>     push rsi
   173 00000D31 668B15(F40E0000)    <1>     mov dx, word [currentLine]  ;pre-load dx with the current line number
   174 00000D38 E81E060000          <1>     call searchForProgramLine   ;Get program block pointer into rbx
   175 00000D3D 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If for some reason line doesnt exist?
   176 00000D44 0F84A2000000        <1>     je .error   ;Unknown Error
   177                              <1> ;Now pack for the first portion/line after the for loop
   178                              <1> ;rsi points just after the FOR itself
   179 00000D4A 56                  <1>     push rsi    ;Save the first point after the FOR itself
   180 00000D4B E8E4F9FFFF          <1>     call findOtherExpressionsOnLine     ;Get the first : or ASCII NUL
   181 00000D50 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]  ;Get the line number
   182 00000D54 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine]  ;Load ptr to start of string in rsi
   183 00000D58 4829CE              <1>     sub rsi, rcx    ;Compute difference from start of string
   184 00000D5B 89F1                <1>     mov ecx, esi    ;Should just be low byte of si so cl
   185 00000D5D 81E1FF000000        <1>     and ecx, 0FFh   ;Save only bottom byte just in case of garbage
   186 00000D63 C1E110              <1>     shl ecx, 2*8    ;Move to the third byte in the dword
   187 00000D66 09C8                <1>     or eax, ecx     ;Add byte three to eax
   188 00000D68 89C2                <1>     mov edx, eax    ;Save in edx
   189 00000D6A 48C1E228            <1>     shl rdx, 5*8    ;Shift three bytes to top of qword
   190 00000D6E 5E                  <1>     pop rsi
   191                              <1> .initialSearch:
   192                              <1>     ;First look for a : or a ASCII NUL to leave the FOR part of the line
   193 00000D6F 803E00              <1>     cmp byte [rsi], 0
   194 00000D72 740D                <1>     je .gotoNextLine
   195 00000D74 813E4E455854        <1>     cmp dword [rsi], "NEXT"
   196 00000D7A 7418                <1>     je .wordFound
   197 00000D7C 48FFC6              <1>     inc rsi ;Now search up until the end of the line for a NEXT
   198                              <1>     ;"NEXT" found here!
   199 00000D7F EBEE                <1>     jmp short .initialSearch
   200                              <1> .gotoNextLine:
   201 00000D81 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Get pointer to next program line
   202 00000D85 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Now, when walking if it gives a value of -1, no NEXT found
   203 00000D8C 7448                <1>     je .noNext
   204 00000D8E 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Load pointer to string rsi
   205 00000D92 EBDB                <1>     jmp short .initialSearch
   206                              <1> .wordFound:
   207                              <1>     ;Here, word found! Huzzah! Now pack edx correctly
   208                              <1>     ;rsi points to the N in "NEXT "
   209 00000D94 E89BF9FFFF          <1>     call findOtherExpressionsOnLine 
   210                              <1>     ;make rsi point to next expression on the line or the end of the line
   211 00000D99 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]  ;Get the line number
   212 00000D9D 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine]  ;Load ptr to start of string in rsi
   213 00000DA1 4829CE              <1>     sub rsi, rcx    ;Compute difference from start of string
   214 00000DA4 89F1                <1>     mov ecx, esi    ;Should just be low byte of si so cl
   215 00000DA6 81E1FF000000        <1>     and ecx, 0FFh   ;Save only bottom byte just in case of garbage
   216 00000DAC C1E110              <1>     shl ecx, 2*8    ;Move to the third byte in the dword
   217 00000DAF 09C8                <1>     or eax, ecx     ;Add byte three to eax
   218 00000DB1 48C1E010            <1>     shl rax, 8*2    ;Shift three bytes to byte 4 of qword
   219 00000DB5 4809C2              <1>     or rdx, rax     ;Add bytes [4:2] to rdx
   220                              <1>     ;Compute checksum now
   221 00000DB8 31C0                <1>     xor eax, eax
   222 00000DBA B05A                <1>     mov al, FORsig 
   223 00000DBC 6689C2              <1>     mov dx, ax  ;Zero checksum byte
   224 00000DBF 31C0                <1>     xor eax, eax
   225 00000DC1 B908000000          <1>     mov ecx, 8  ;8 times
   226                              <1> .csumLoop:
   227                              <1>     ;Spin rdx 8 times adding each byte to al
   228 00000DC6 00D0                <1>     add al, dl
   229 00000DC8 48C1C208            <1>     rol rdx, 8  ;Rotate left by 8 bits
   230 00000DCC FFC9                <1>     dec ecx
   231 00000DCE 75F6                <1>     jnz .csumLoop
   232 00000DD0 F6D8                <1>     neg al ;Get twos compliment of sum (FFh - al)
   233 00000DD2 88C6                <1>     mov dh, al  ;Save in checksum byte
   234                              <1> .exit:
   235 00000DD4 5E                  <1>     pop rsi
   236 00000DD5 C3                  <1>     ret
   237                              <1> .noNext:
   238 00000DD6 488D2D50080000      <1>     lea rbp, noNext
   239 00000DDD 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
   239 00000DE6 FF                  <1>
   240 00000DE7 E9E8FFFFFF          <1>     jmp .exit
   241                              <1> .error:
   242 00000DEC 488D2D64080000      <1>     lea rbp, uknowner
   243 00000DF3 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
   243 00000DFC FF                  <1>
   244 00000DFD E9D2FFFFFF          <1>     jmp .exit
   245                              <1> ;=======================================
   246                              <1> ;  ACTUAL CONTROL FLOW FUNCTIONS HERE  :
   247                              <1> ;=======================================
   248                              <1> ;All below functions return the line number in dx and the offset into the line
   249                              <1> ; to start reading at in byte three of edx
   250                              <1> goto:
   251                              <1> ;GOTO, works by replacing the address after the return address on the stack
   252                              <1> ;rsi points to first char AFTER function name
   253 00000E02 E83AF5FFFF          <1>     call spaceSkip  ;Skip all preceeding spaces
   254 00000E07 E888F5FFFF          <1>     call handleAlgebraicExpression  ;Turn the expression into a number in ax
   255 00000E0C 0FB7D0              <1>     movzx edx, ax   ;Line number into dx, start at beginning of line
   256 00000E0F 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   257 00000E16 C3                  <1>     ret
   258                              <1> 
   259                              <1> gosub:
   260 00000E17 E87FFDFFFF          <1>     call retScan
   261 00000E1C 4881FAFFFFFFFF      <1>     cmp rdx, -1
   262 00000E23 7436                <1>     je .error
   263 00000E25 B901000000          <1>     mov ecx, gosubStruct_size/8
   264                              <1>     makeSpaceOnStack rcx  ;Make four qwords of space on the stack
    96                              <2> 
    97                              <2> 
    98                              <2> 
    99 00000E2A 58                  <2>  pop rax
   100 00000E2B 48C1E103            <2>  shl %1, 3
   101 00000E2F 4829CC              <2>  sub rsp, %1
   102 00000E32 488D2D(50000000)    <2>  lea rbp, stack
   103 00000E39 4839EC              <2>  cmp rsp, rbp
   104 00000E3C 770C                <2>  ja .macroNotOverflow
   105 00000E3E 488D2D9A070000      <2>  lea rbp, stkOvflw
   106 00000E45 E97FF2FFFF          <2>  jmp criticalError
   107                              <2> .macroNotOverflow:
   108                              <2> 
   109                              <2> 
   110 00000E4A 50                  <2>  push rax
   265 00000E4B 4889E5              <1>     mov rbp, rsp
   266 00000E4E 4881C508000000      <1>     add rbp, 8  ;Make rbp point to the base of the new struc
   267 00000E55 48895500            <1>     mov qword [rbp + forStruct.specQword], rdx  ;Move rdx into its place on the stack
   268                              <1>     ;rsi points just past the GOSUB
   269 00000E59 EBA7                <1>     jmp short goto ;Now behave like GOTO
   270                              <1> .error:
   271 00000E5B E969F2FFFF          <1>     jmp criticalError
   272                              <1> 
   273                              <1> return:
   274                              <1> ;First verify the GOSUB struc is on the stack
   275 00000E60 4889E5              <1>     mov rbp, rsp    ;Dont need to save rbp so trash it
   276 00000E63 4881C508000000      <1>     add rbp, 8  ;Make it point to the base of the struc past the return address
   277                              <1>     ;Read the qword on stack, verify it is a GOSUBstruc and passes checksum test
   278 00000E6A 488B5500            <1>     mov rdx, qword [rbp + gosubStruct.specQword]
   279 00000E6E 80FAA5              <1>     cmp dl, GOSUBsig
   280 00000E71 752F                <1>     jne .noReturn
   281                              <1>     ;Now compute checksum to verify its not an accident
   282 00000E73 30C0                <1>     xor al, al
   283 00000E75 B908000000          <1>     mov ecx, 8
   284                              <1> .checksumTest:
   285 00000E7A 00D0                <1>     add al, dl
   286 00000E7C 48C1CA08            <1>     ror rdx, 8
   287 00000E80 FFC9                <1>     dec ecx
   288 00000E82 75F6                <1>     jnz .checksumTest
   289 00000E84 84C0                <1>     test al, al     ;This should be 0
   290 00000E86 751A                <1>     jnz .noReturn
   291                              <1>  ;Now we are truly in a RETURN
   292 00000E88 48C1EA28            <1>     shr rdx, 5*8    ;Bring return information down to the lower three bytes
   293                              <1>     ;Clean the struc from the stack
   294 00000E8C B901000000          <1>     mov ecx, gosubStruct_size/8
   295                              <1>     cleanSpaceOnStack rcx
   114                              <2> 
   115 00000E91 58                  <2>  pop rax
   116 00000E92 48C1E103            <2>  shl %1, 3
   117 00000E96 4801CC              <2>  add rsp, %1
   118 00000E99 50                  <2>  push rax
   296 00000E9A 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   297 00000EA1 C3                  <1>     ret
   298                              <1> .noReturn:
   299 00000EA2 488D2D97070000      <1>     lea rbp, noReturn
   300 00000EA9 E91BF2FFFF          <1>     jmp criticalError
   301                              <1> forLoop:
   302                              <1> ;This saves the following struc on the stack
   303                              <1> ;------------Hi stack addr-------------
   304                              <1> ;stepValue (qword), default 1
   305                              <1> ;limitValue (qword), to which value do we loop
   306                              <1> ;ptr to counter variable (qword)
   307                              <1> ;Special qword:
   308                              <1> ; Byte 7 = Offset into the line for next instruction
   309                              <1> ; Bytes[6:5] = Line number of portion after FOR (either FOR line or line after FOR)
   310                              <1> ; Byte 4 = Offset into the line for next instruction
   311                              <1> ; Bytes[3:2] = Line number of portion after NEXT (either NEXT line or line after NEXT)
   312                              <1> ; Byte 1 = Parity check sum for the qword, makes the sum of the bytes in qword 0
   313                              <1> ; Byte 0 = FOR signature
   314                              <1> ;------------Low stack addr------------
   315                              <1> ;rsp -> Return address
   316                              <1>     ;First check we have a NEXT following this FOR
   317 00000EAE E87DFEFFFF          <1>     call nextScan
   318 00000EB3 4881FAFFFFFFFF      <1>     cmp rdx, -1
   319 00000EBA 0F84F5000000        <1>     je .critError
   320                              <1>     ;Here we make space on the stack.
   321 00000EC0 B904000000          <1>     mov ecx, forStruct_size/8
   322                              <1>     makeSpaceOnStack rcx  ;Make four qwords of space on the stack
    96                              <2> 
    97                              <2> 
    98                              <2> 
    99 00000EC5 58                  <2>  pop rax
   100 00000EC6 48C1E103            <2>  shl %1, 3
   101 00000ECA 4829CC              <2>  sub rsp, %1
   102 00000ECD 488D2D(50000000)    <2>  lea rbp, stack
   103 00000ED4 4839EC              <2>  cmp rsp, rbp
   104 00000ED7 770C                <2>  ja .macroNotOverflow
   105 00000ED9 488D2DFF060000      <2>  lea rbp, stkOvflw
   106 00000EE0 E9E4F1FFFF          <2>  jmp criticalError
   107                              <2> .macroNotOverflow:
   108                              <2> 
   109                              <2> 
   110 00000EE5 50                  <2>  push rax
   323 00000EE6 4889E5              <1>     mov rbp, rsp
   324 00000EE9 4881C508000000      <1>     add rbp, 8  ;Make rbp point to the base of the new struc
   325 00000EF0 48895500            <1>     mov qword [rbp + forStruct.specQword], rdx  ;Move rdx into its place on the stack
   326 00000EF4 56                  <1>     push rsi   ;rsi points to first byte after FOR. The first word should now be a var
   327 00000EF5 B820544F20          <1>     mov eax, " TO " ;First find the TO and STEP values
   328                              <1> .flScanTo:
   329 00000EFA 803E00              <1>     cmp byte [rsi], 0   ;ASCII null w/o a TO? Syntax Error
   330 00000EFD 0F84AB000000        <1>     je .syntaxError
   331 00000F03 803E3A              <1>     cmp byte [rsi], ":" ;Save for a next statement delimiter
   332 00000F06 0F84A2000000        <1>     je .syntaxError
   333 00000F0C 3906                <1>     cmp dword [rsi], eax
   334 00000F0E 7405                <1>     je .flToFound
   335 00000F10 48FFC6              <1>     inc rsi ;Go forwards by a byte
   336 00000F13 EBE5                <1>     jmp short .flScanTo
   337                              <1> .flToFound:
   338                              <1>     ;rsi points to the preceeding space so add 3 to go to trailing space
   339 00000F15 4881C603000000      <1>     add rsi, 3
   340 00000F1C E820F4FFFF          <1>     call spaceSkip  ;Go to expression to evaluate
   341 00000F21 E86EF4FFFF          <1>     call handleAlgebraicExpression  ;Get in rax the limit value
   342 00000F26 48894510            <1>     mov qword [rbp + forStruct.limitValue], rax
   343                              <1>     ;rsi now points to the next word, this should be step, otherwise ignore the word
   344 00000F2A AD                  <1>     lodsd   ;Get the word in eax
   345 00000F2B 3D53544550          <1>     cmp eax, "STEP"
   346 00000F30 754F                <1>     jne .defaultStep
   347                              <1>     ;Check it is a "STEP "
   348 00000F32 AC                  <1>     lodsb
   349 00000F33 3C20                <1>     cmp al, " "
   350 00000F35 754A                <1>     jne .defaultStep
   351                              <1>     ;rsi points to a "STEP "
   352 00000F37 E805F4FFFF          <1>     call spaceSkip  ;Go to expression to evaluate
   353 00000F3C E853F4FFFF          <1>     call handleAlgebraicExpression  ;Get in rax the step value
   354 00000F41 48894518            <1>     mov qword [rbp + forStruct.stepValue], rax
   355                              <1> .flVariable:
   356 00000F45 5E                  <1>     pop rsi ;Get back OG rsi position immediately after FOR
   357 00000F46 E8F6F3FFFF          <1>     call spaceSkip ;Skip intermediate spaces
   358 00000F4B 56                  <1>     push rsi
   359 00000F4C E869F9FFFF          <1>     call variableAssignment ;Make the variable assignment, trashes rsi
   360 00000F51 5E                  <1>     pop rsi ;rsi points to the start of the variable again
   361 00000F52 E8F5F3FFFF          <1>     call getVarNameLength
   362 00000F57 E88F030000          <1>     call findVariable   ;Get the variable pointer in rbx
   363 00000F5C 48895D08            <1>     mov qword [rbp + forStruct.cntrPtr], rbx    ;Save variable pointer
   364                              <1>     ;Now check whether we should run the loop at all?
   365 00000F60 488B5D08            <1>     mov rbx, qword [rbp + forStruct.cntrPtr]
   366 00000F64 488B4B04            <1>     mov rcx, qword [rbx + varBlock.qValue]  ;Get the variable value
   367 00000F68 488B5D10            <1>     mov rbx, qword [rbp + forStruct.limitValue]
   368                              <1>     ;if rcx >= rbx, branch to after NEXT
   369 00000F6C 4839D9              <1>     cmp rcx, rbx
   370 00000F6F 7D1A                <1>     jge .dontRunFor
   371 00000F71 488B5500            <1>     mov rdx, qword [rbp + forStruct.specQword]
   372 00000F75 48C1EA28            <1>     shr rdx, 5*8    ;Upper bytes will be cleared, needed for the "branch"
   373                              <1> .exit:
   374                              <1>     ;Recall edx must have the correct three bytes in it from the special qword
   375 00000F79 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   376 00000F80 C3                  <1>     ret
   377                              <1> .defaultStep:
   378 00000F81 48C7451801000000    <1>     mov qword [rbp + forStruct.stepValue], 1
   379 00000F89 EBBA                <1>     jmp short .flVariable
   380                              <1> .dontRunFor:
   381                              <1>     ;Move the bytes from the NEXT to edx 
   382 00000F8B 488B5500            <1>     mov rdx, qword [rbp + forStruct.specQword]
   383 00000F8F 48C1EA10            <1>     shr rdx, 2*8    ;Upper bytes will be cleared
   384 00000F93 09D2                <1>     or edx, edx     ;This should zero the upper dword
   385                              <1>     ;Need to also reclaim the stack space
   386 00000F95 B904000000          <1>     mov ecx, forStruct_size/8
   387                              <1>     cleanSpaceOnStack rcx
   114                              <2> 
   115 00000F9A 58                  <2>  pop rax
   116 00000F9B 48C1E103            <2>  shl %1, 3
   117 00000F9F 4801CC              <2>  add rsp, %1
   118 00000FA2 50                  <2>  push rax
   388 00000FA3 EBD4                <1>     jmp short .exit
   389                              <1> ;Errors
   390                              <1> .unknownError:
   391 00000FA5 488D2DAB060000      <1>     lea rbp, uknowner
   392 00000FAC EB07                <1>     jmp short .critError
   393                              <1> .syntaxError:
   394 00000FAE 488D2DE9050000      <1>     lea rbp, syntax
   395                              <1> .critError:
   396                              <1>     ;called with rbp already pointing to error string
   397 00000FB5 E90FF1FFFF          <1>     jmp criticalError
   398                              <1> 
   399                              <1> next:
   400                              <1>     ;Verify that the structure on the stack is a FOR structure
   401 00000FBA 4889E5              <1>     mov rbp, rsp    ;Dont need to save rbp so trash it
   402 00000FBD 4881C508000000      <1>     add rbp, 8  ;Make it point to the base of the struc past the return address
   403                              <1>     ;Read the qword on stack, verify it is a FORstruct and passes checksum test
   404 00000FC4 488B5500            <1>     mov rdx, qword [rbp + forStruct.specQword]
   405 00000FC8 80FA5A              <1>     cmp dl, FORsig
   406 00000FCB 7555                <1>     jne .noForNext
   407                              <1>     ;Now compute checksum to verify its not an accident
   408 00000FCD 30C0                <1>     xor al, al
   409 00000FCF B908000000          <1>     mov ecx, 8
   410                              <1> .checksumTest:
   411 00000FD4 00D0                <1>     add al, dl
   412 00000FD6 48C1EA08            <1>     shr rdx, 8
   413 00000FDA FFC9                <1>     dec ecx
   414 00000FDC 75F6                <1>     jnz .checksumTest
   415 00000FDE 84C0                <1>     test al, al     ;This should be 0
   416 00000FE0 7540                <1>     jnz .noForNext
   417                              <1>     ;Now we are truly in a FOR loop
   418 00000FE2 488B5D08            <1>     mov rbx, qword [rbp + forStruct.cntrPtr]    ;Get variable pointer
   419 00000FE6 488B4304            <1>     mov rax, qword [rbx + varBlock.qValue]      ;Get variable value
   420 00000FEA 483B4510            <1>     cmp rax, qword [rbp + forStruct.limitValue] ;Compare current var value to limit
   421 00000FEE 7D18                <1>     jge .noMoreLooping
   422 00000FF0 48034518            <1>     add rax, qword [rbp + forStruct.stepValue]  ;Add the step
   423 00000FF4 48894304            <1>     mov qword [rbx + varBlock.qValue], rax      ;Update the variable value
   424                              <1>     ;Now go back to line after FOR
   425 00000FF8 488B5500            <1>     mov rdx, qword [rbp + forStruct.specQword]
   426 00000FFC 48C1EA28            <1>     shr rdx, 5*8    ;Move upper three bytes to lower three bytes of edx
   427                              <1> .exit:
   428                              <1>     ;Recall edx must have the correct three bytes in it from the special qword
   429 00001000 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   430 00001007 C3                  <1>     ret
   431                              <1> .noMoreLooping:
   432                              <1>     ;No need to update the variable, it is already above
   433 00001008 488B5500            <1>     mov rdx, qword [rbp + forStruct.specQword]
   434 0000100C 48C1EA10            <1>     shr rdx, 2*8    ;Move bytes 4:2 to lower three bytes of edx
   435 00001010 09D2                <1>     or edx, edx     ;Remove upper bits
   436                              <1>     ;Need to also reclaim the stack space
   437 00001012 B904000000          <1>     mov ecx, forStruct_size/8
   438                              <1>     cleanSpaceOnStack rcx
   114                              <2> 
   115 00001017 58                  <2>  pop rax
   116 00001018 48C1E103            <2>  shl %1, 3
   117 0000101C 4801CC              <2>  add rsp, %1
   118 0000101F 50                  <2>  push rax
   439 00001020 EBDE                <1>     jmp short .exit
   440                              <1> .noForNext:
   441 00001022 488D2DF1050000      <1>     lea rbp, noFor
   442 00001029 E99BF0FFFF          <1>     jmp criticalError
   443                              <1> 
   444                              <1> while:
   445                              <1>     ;First check we have a WEND following this WHILE
   446 0000102E E82BFCFFFF          <1>     call wendScan
   447 00001033 4881FAFFFFFFFF      <1>     cmp rdx, -1
   448 0000103A 7464                <1>     je .critError
   449                              <1>     ;Here we make space on the stack.
   450 0000103C B901000000          <1>     mov ecx, whileStruct_size/8
   451                              <1>     makeSpaceOnStack rcx  ;Make a qword of space on the stack
    96                              <2> 
    97                              <2> 
    98                              <2> 
    99 00001041 58                  <2>  pop rax
   100 00001042 48C1E103            <2>  shl %1, 3
   101 00001046 4829CC              <2>  sub rsp, %1
   102 00001049 488D2D(50000000)    <2>  lea rbp, stack
   103 00001050 4839EC              <2>  cmp rsp, rbp
   104 00001053 770C                <2>  ja .macroNotOverflow
   105 00001055 488D2D83050000      <2>  lea rbp, stkOvflw
   106 0000105C E968F0FFFF          <2>  jmp criticalError
   107                              <2> .macroNotOverflow:
   108                              <2> 
   109                              <2> 
   110 00001061 50                  <2>  push rax
   452 00001062 4889E5              <1>     mov rbp, rsp
   453 00001065 4881C508000000      <1>     add rbp, 8  ;Make rbp point to the base of the new struc
   454 0000106C 48895500            <1>     mov qword [rbp + whileStruct.specQword], rdx  ;Move rdx into its place on the stack
   455                              <1>     ;rsi should point after the WHILE
   456 00001070 E81FF3FFFF          <1>     call handleAlgebraicExpression  ;Get result of expression in rax
   457 00001075 488B5500            <1>     mov rdx, qword [rbp + whileStruct.specQword]    ;Get special qword back into rdx
   458 00001079 4885C0              <1>     test rax, rax   ;Zero is FALSE
   459 0000107C 740C                <1>     jz .conditionFalse
   460 0000107E 48C1EA28            <1>     shr rdx, 5*8    ;Bring the upper three bytes down to eax
   461                              <1> .exit:
   462 00001082 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   463 00001089 C3                  <1>     ret
   464                              <1> .conditionFalse:
   465                              <1>     ;If condition is false, jump to the instruction after WEND
   466                              <1>     ;Here we reclaim the space from the stack.
   467 0000108A B901000000          <1>     mov ecx, whileStruct_size/8
   468                              <1>     cleanSpaceOnStack rcx  ;Clean a qword of space on the stack
   114                              <2> 
   115 0000108F 58                  <2>  pop rax
   116 00001090 48C1E103            <2>  shl %1, 3
   117 00001094 4801CC              <2>  add rsp, %1
   118 00001097 50                  <2>  push rax
   469 00001098 48C1EA10            <1>     shr rdx, 2*8    ;Bring bytes 4:2 down to bytes 2:0
   470 0000109C 09D2                <1>     or edx, edx     ;Zero the rest of it
   471 0000109E EBE2                <1>     jmp short .exit
   472                              <1> .critError:
   473                              <1>     ;called with rbp already pointing to error string
   474 000010A0 E924F0FFFF          <1>     jmp criticalError
   475                              <1> wend:
   476                              <1>     ;Find the While on the WHILE line and evaluate the expression
   477                              <1>     ;if true, branch to the WHILE three bytes in specialQword
   478                              <1>     ;if false, branch to WEND three bytes in specialQword and clean stack
   479                              <1>     ;First verify we have a While structure on the stack
   480 000010A5 4889E5              <1>     mov rbp, rsp    ;Dont need to save rbp so trash it
   481 000010A8 4881C508000000      <1>     add rbp, 8  ;Make it point to the base of the struc past the return address
   482 000010AF 488B5500            <1>     mov rdx, qword [rbp + whileStruct.specQword]
   483 000010B3 80FA55              <1>     cmp dl, WHILEsig
   484 000010B6 0F858D000000        <1>     jne .noWhile
   485                              <1>     ;Now compute checksum to verify its not an accident
   486 000010BC 30C0                <1>     xor al, al
   487 000010BE B908000000          <1>     mov ecx, 8
   488                              <1> .checksumTest:
   489 000010C3 00D0                <1>     add al, dl
   490 000010C5 48C1CA08            <1>     ror rdx, 8
   491 000010C9 FFC9                <1>     dec ecx
   492 000010CB 75F6                <1>     jnz .checksumTest
   493 000010CD 84C0                <1>     test al, al     ;This should be 0
   494 000010CF 7578                <1>     jnz .noWhile
   495                              <1>     ;Now we are truly in a WHILE loop
   496                              <1>     ;Search the While line for the WHILE keyword and evaluate the expression after it
   497                              <1>     ;rdx is as normal
   498 000010D1 48C1EA28            <1>     shr rdx, 5*8    ;Get upper three bytes down low
   499 000010D5 81E2FFFF0000        <1>     and edx, 0FFFFh ;Save only dx
   500 000010DB E87B020000          <1>     call searchForProgramLine
   501 000010E0 4881FBFFFFFFFF      <1>     cmp rbx, -1
   502 000010E7 7454                <1>     je .error
   503 000010E9 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Point to start of string
   504                              <1> .whileScan:
   505 000010ED 803E00              <1>     cmp byte [rsi], 0   ;Are we at the end of the line
   506 000010F0 7457                <1>     je .noWhile ;If so, we have gotten to the end of the line without a while
   507 000010F2 488D3DCEF6FFFF      <1>     lea rdi, whileStr   ;Point to the while string in the table, 6 chars long
   508 000010F9 B906000000          <1>     mov ecx, 6
   509                              <1> .scanning:
   510 000010FE A6                  <1>     cmpsb
   511 000010FF 75EC                <1>     jne .whileScan
   512 00001101 FFC9                <1>     dec ecx
   513 00001103 75F9                <1>     jnz .scanning
   514                              <1>     ;Here is equal, rsi points past the space in "WHILE "
   515 00001105 48FFCE              <1>     dec rsi
   516 00001108 E834F2FFFF          <1>     call spaceSkip  ;Skip all spaces
   517 0000110D E882F2FFFF          <1>     call handleAlgebraicExpression  ;Get algebraic expression in rax
   518 00001112 488B5500            <1>     mov rdx, qword [rbp + whileStruct.specQword]    ;Get special qword back into rdx
   519 00001116 4885C0              <1>     test rax, rax
   520 00001119 740C                <1>     jz .conditionFalse
   521 0000111B 48C1EA28            <1>     shr rdx, 5*8    ;Bring the upper three bytes down to eax
   522                              <1> .exit:
   523 0000111F 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   524 00001126 C3                  <1>     ret
   525                              <1> .conditionFalse:
   526                              <1>     ;If condition is false, go to the instruction after WEND
   527                              <1>     ;Here we reclaim the space from the stack.
   528 00001127 B901000000          <1>     mov ecx, whileStruct_size/8
   529                              <1>     cleanSpaceOnStack rcx  ;Clean a qword of space on the stack
   114                              <2> 
   115 0000112C 58                  <2>  pop rax
   116 0000112D 48C1E103            <2>  shl %1, 3
   117 00001131 4801CC              <2>  add rsp, %1
   118 00001134 50                  <2>  push rax
   530 00001135 48C1EA10            <1>     shr rdx, 2*8    ;Bring bytes 4:2 down to bytes 2:0
   531 00001139 09D2                <1>     or edx, edx     ;Zero the rest of it
   532 0000113B EBE2                <1>     jmp short .exit
   533                              <1> .error:
   534 0000113D 488D2D13050000      <1>     lea rbp, uknowner
   535 00001144 E980EFFFFF          <1>     jmp criticalError
   536                              <1> .noWhile:
   537 00001149 488D2DB5040000      <1>     lea rbp, noWhile
   538 00001150 E974EFFFFF          <1>     jmp criticalError
   539                              <1> 
   540                              <1> handleIf:
   541                              <1> ;Evaluate the string. The IF,THEN/GOTO,ELSE statement must ALL be on one line
   542                              <1> ;IF exp1 THEN statement ELSE statement
   543                              <1> ;IF exp1 GOTO linenumber ELSE statement
   544                              <1> ;rsi points to first char AFTER function name
   545 00001155 E8E7F1FFFF          <1>     call spaceSkip
   546 0000115A E835F2FFFF          <1>     call handleAlgebraicExpression
   547 0000115F 4885C0              <1>     test rax, rax  ;If this is 0, go to the else
   548 00001162 7425                <1>     jz .else
   549 00001164 E8D8F1FFFF          <1>     call spaceSkip
   550 00001169 AD                  <1>     lodsd   ;Get the whole word, must be either "THEN " or "GOTO "
   551 0000116A 3D5448454E          <1>     cmp eax, "THEN"
   552 0000116F 7442                <1>     je .hi0   ; Go past THEN, to process statement
   553 00001171 3D474F544F          <1>     cmp eax, "GOTO"
   554 00001176 7569                <1>     jne .error
   555 00001178 803E20              <1>     cmp byte [rsi], " " ;is the next char a space?
   556 0000117B 7564                <1>     jne .error
   557 0000117D E980FCFFFF          <1>     jmp goto
   558                              <1> .candidatethen:
   559 00001182 803E20              <1>     cmp byte [rsi], " " ;is the next char a space?
   560 00001185 742C                <1>     je .hi0
   561 00001187 EB58                <1>     jmp short .error
   562                              <1> .else:
   563                              <1>     ;Search for the ELSE, it has to be preceeded with a space and have a space after
   564 00001189 803E00              <1>     cmp byte [rsi], 0 ;Are we at end of line?
   565 0000118C 7452                <1>     je .noElse
   566 0000118E 803E3A              <1>     cmp byte [rsi], ":" ;Are we at end line segment?
   567 00001191 744D                <1>     je .noElse
   568 00001193 48FFC6              <1>     inc rsi
   569 00001196 813E20454C53        <1>     cmp dword [rsi], " ELS"
   570 0000119C 75EB                <1>     jne .else
   571 0000119E 4881C604000000      <1>     add rsi, 4  ;Skip those four chars, we have a candidate
   572 000011A5 66813E4520          <1>     cmp word [rsi], "E "
   573 000011AA 75DD                <1>     jne .else   ;If not equal failed to match pattern
   574 000011AC 4881C602000000      <1>     add rsi, 2  ;Else its the ELSE we are looking for, move rsi to first space past it
   575                              <1> .hi0:
   576                              <1> ;Now we do the branchy stuff, branch to the same line just further down
   577 000011B3 668B15(F40E0000)    <1>     mov dx, word [currentLine]
   578 000011BA E89C010000          <1>     call searchForProgramLine
   579 000011BF 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Does the line not exist somehow?
   580 000011C6 7419                <1>     je .error
   581 000011C8 4889F0              <1>     mov rax, rsi    ;Save pointer in rax
   582 000011CB 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine] ;Get the difference in chars
   583 000011CF 4829C8              <1>     sub rax, rcx
   584 000011D2 24FF                <1>     and al, -1  ;Save only bottom byte as the difference should be less than 255
   585 000011D4 C1E010              <1>     shl eax, 10h ;Shift to byte 3
   586 000011D7 09C2                <1>     or edx, eax ;Save the offset into byte 3
   587 000011D9 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   588                              <1> .noElse:
   589                              <1> ;If no else, simply return
   590 000011E0 C3                  <1>     ret
   591                              <1> .error:
   592 000011E1 488D1DB6030000      <1>     lea rbx, syntax
   593 000011E8 E9DCEEFFFF          <1>     jmp criticalError
    16                                  %include "MATH.ASM"
    17                              <1> decimalToHex:
    18                              <1>     ;Takes ASCII encoded decimal number and 
    19                              <1>     ;returns its hex value
    20                              <1>     ;Input: rsi = Start of numeric ONLY string
    21                              <1>     ;Output: rax = Number
    22                              <1>     ;        rsi = First non-numeric char past end of number
    23 000011ED 53                  <1>     push rbx
    24 000011EE 51                  <1>     push rcx
    25 000011EF 52                  <1>     push rdx
    26 000011F0 31DB                <1>     xor ebx, ebx    ;Start with rbx = 0
    27                              <1> .processDigits:    
    28 000011F2 AC                  <1>     lodsb           ;Get the first digit in al
    29 000011F3 2C30                <1>     sub al, 30h     ;Reduce to value
    30 000011F5 31D2                <1>     xor edx, edx    ;Clear for multiplication
    31 000011F7 3C0A                <1>     cmp al, 10      ;Digit valid? Propagte CF
    32 000011F9 480FB6C0            <1>     movzx rax, al   ;Clear upper bits
    33 000011FD 4893                <1>     xchg rax, rbx
    34 000011FF 730D                <1>     jnc .exit       ;Digit was not valid, exit
    35 00001201 B90A000000          <1>     mov ecx, 10     ;Multiply result by 10
    36 00001206 48F7E1              <1>     mul rcx
    37 00001209 4801C3              <1>     add rbx, rax    ;Add the new digits
    38 0000120C EBE4                <1>     jmp short .processDigits
    39                              <1> .exit:
    40 0000120E 48FFCE              <1>     dec rsi         ;rsi points to first non-digit
    41 00001211 5A                  <1>     pop rdx
    42 00001212 59                  <1>     pop rcx
    43 00001213 5B                  <1>     pop rbx
    44 00001214 C3                  <1>     ret
    45                              <1> 
    46                              <1> printdecimalword:
    47                              <1> ;Takes the qword in rax and prints its signed decimal representation
    48 00001215 50                  <1>     push rax
    49 00001216 53                  <1>     push rbx
    50 00001217 488D3D(980E0000)    <1>     lea rdi, digitString   ;Use the default line as a buffer
    51                              <1>     ;Sanitise the digit buffer
    52 0000121E 57                  <1>     push rdi
    53 0000121F 51                  <1>     push rcx
    54 00001220 50                  <1>     push rax
    55                              <1> 
    56 00001221 B906000000          <1>     mov ecx, digitStringLen/8
    57 00001226 F348AB              <1>     rep stosq
    58 00001229 58                  <1>     pop rax
    59 0000122A 59                  <1>     pop rcx
    60 0000122B 5F                  <1>     pop rdi
    61                              <1> 
    62 0000122C 50                  <1>     push rax    ;Save rax for the sign bit later
    63 0000122D 48D1C0              <1>     rol rax, 1  ;Test the sign bit
    64 00001230 A801                <1>     test al, 1
    65 00001232 48D1C8              <1>     ror rax, 1  ;Undo the roll
    66 00001235 7403                <1>     jz .noCompliment
    67 00001237 48F7D8              <1>     neg rax     ;Get the 2's compliment of rax
    68                              <1> ;Clear the sign bit, print the number from bits 62:0
    69                              <1> .noCompliment:
    70 0000123A 48D1E0              <1>     shl rax, 1  ;Go past the edge
    71 0000123D 48D1E8              <1>     shr rax, 1  ;Return zero extended
    72 00001240 4881C72F000000      <1>     add rdi, digitStringLen - 1 ;Go to the end of the buffer
    73 00001247 FD                  <1>     std ;Reverse string ops
    74 00001248 50                  <1>     push rax
    75 00001249 30C0                <1>     xor al, al  ;Place delimiter
    76 0000124B AA                  <1>     stosb
    77 0000124C 58                  <1>     pop rax
    78 0000124D 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
    78 00001256 00                  <1>
    79                              <1> .pdw0:
    80 00001257 31D2                <1>     xor edx, edx
    81 00001259 48F7F3              <1>     div rbx
    82 0000125C 80C230              <1>     add dl, '0'
    83 0000125F 80FA39              <1>     cmp dl, '9'
    84 00001262 7603                <1>     jbe .pdw1
    85 00001264 80C207              <1>     add dl, 'A'-'0'-10
    86                              <1> .pdw1:
    87 00001267 50                  <1>     push rax
    88 00001268 88D0                <1>     mov al, dl    ;Save remainder byte
    89 0000126A AA                  <1>     stosb   ;Store the byte and sub one from rdi
    90 0000126B 58                  <1>     pop rax
    91 0000126C 4885C0              <1>     test rax, rax
    92 0000126F 75E6                <1>     jnz .pdw0
    93                              <1> 
    94                              <1>     ;Now add a minus sign if sign bit set
    95 00001271 58                  <1>     pop rax ;Get the original for the sign bit
    96 00001272 48D1C0              <1>     rol rax, 1  ;Bring the sign bit low
    97 00001275 A801                <1>     test al, 1
    98 00001277 7403                <1>     jz .printString
    99 00001279 B02D                <1>     mov al, "-"
   100 0000127B AA                  <1>     stosb   ;Store minus sign and decrement rdi
   101                              <1> .printString:
   102 0000127C FC                  <1>     cld ;Return string ops to normal
   103 0000127D 48FFC7              <1>     inc rdi ;Skip the extra 0 that was inserted
   104 00001280 4889FD              <1>     mov rbp, rdi    ;Point rbp to the head of the string
   105 00001283 E818EFFFFF          <1>     call ttyOutString
   106 00001288 5B                  <1>     pop rbx
   107 00001289 58                  <1>     pop rax
   108 0000128A C3                  <1>     ret
    17                                  %include "MEMORY.ASM"
    18                              <1> allocateBlock:
    19                              <1> ;Allocates a program memory block, the caller then fixes the specifics
    20                              <1> ;Output: rbx = Pointer to generic memory block, or -1 if memory full
    21                              <1> ;       Caller needs to fill in, block size, block type and specifics
    22 0000128B 52                  <1>     push rdx
    23                              <1> .ab0:
    24 0000128C 488B1D(E20E0000)    <1>     mov rbx, qword [lastBlock]    ;Get the last block in the chain
    25 00001293 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;First allocation?
    26 0000129A 742F                <1>     je .firstAllocation
    27 0000129C C60374              <1>     mov byte [rbx + memBlock.bSignature], notLastMemBlock ;Make it not be the last
    28 0000129F 480FB75301          <1>     movzx rdx, word [rbx + memBlock.wBlockSize] ;Goto end of block
    29 000012A4 4801D3              <1>     add rbx, rdx    ;Move rbx over the previous last block
    30 000012A7 488B15(D00E0000)    <1>     mov rdx, qword [maxMemAddr]
    31 000012AE 4839D3              <1>     cmp rbx, rdx ;rbx above maxmemory? 
    32 000012B1 770C                <1>     ja .memoryFull
    33 000012B3 48891D(E20E0000)    <1>     mov qword [lastBlock], rbx  ;New last block
    34 000012BA C60372              <1>     mov byte [rbx + memBlock.bSignature], lastMemBlock
    35                              <1> .exit:
    36 000012BD 5A                  <1>     pop rdx
    37 000012BE C3                  <1>     ret
    38                              <1> .memoryFull:
    39 000012BF 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    39 000012C8 FF                  <1>
    40 000012C9 EBF2                <1>     jmp short .exit
    41                              <1> .firstAllocation:
    42                              <1> ;Deal with first allocation
    43 000012CB 488D1D(00000000)    <1>     lea rbx, section.programArea.vstart   ;Get this as the head of the chain
    44 000012D2 48891D(E20E0000)    <1>     mov qword [lastBlock], rbx
    45 000012D9 48891D(DA0E0000)    <1>     mov qword [mcbChain], rbx
    46 000012E0 C60372              <1>     mov byte [rbx + memBlock.bSignature], lastMemBlock
    47 000012E3 66C743010000        <1>     mov word [rbx + memBlock.wBlockSize], 0 ;Dummy block
    48 000012E9 EBD2                <1>     jmp short .exit
    49                              <1> 
    50                              <1> findVariable:
    51                              <1> ;Input: rsi = Source string for variable name
    52                              <1> ;       ecx = Length of variable name (max 40)
    53                              <1> ;Output: rbx = ptr to varBlock/strBlock OR -1 if doesnt exist
    54 000012EB 50                  <1>     push rax
    55 000012EC 51                  <1>     push rcx
    56 000012ED 52                  <1>     push rdx
    57 000012EE 56                  <1>     push rsi
    58 000012EF 57                  <1>     push rdi
    59 000012F0 488B1D(DA0E0000)    <1>     mov rbx, qword [mcbChain]   ;Start of the chain
    60 000012F7 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Chain empty?
    61 000012FE 7446                <1>     je .exit
    62                              <1> .search:
    63 00001300 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
    64 00001304 7415                <1>     je .varFound    ;We found a numerical variable
    65 00001306 807B0302            <1>     cmp byte [rbx + memBlock.bBlockType], datBlockType
    66 0000130A 741E                <1>     je .datFound    ;We found a string variable
    67                              <1> .invalid:
    68                              <1>     ;Are we at the end of the chain?
    69 0000130C 803B72              <1>     cmp byte [rbx + memBlock.bSignature], lastMemBlock
    70 0000130F 742B                <1>     je .varNotFound ;At the end of the chain and var not found? Error!
    71 00001311 480FB75301          <1>     movzx rdx, word [rbx + memBlock.wBlockSize]
    72 00001316 4801D3              <1>     add rbx, rdx    ;Goto next block
    73 00001319 EBE5                <1>     jmp short .search
    74                              <1> .varFound:
    75                              <1>     ;Compare to see the var is our var
    76 0000131B 488D7B0C            <1>     lea rdi, qword [rbx + varBlock.sVarName] ;point rdi to the name string
    77 0000131F 51                  <1>     push rcx
    78 00001320 56                  <1>     push rsi
    79 00001321 F3A6                <1>     repe cmpsb  ;Compare one byte at a time
    80 00001323 5E                  <1>     pop rsi
    81 00001324 59                  <1>     pop rcx
    82 00001325 75E5                <1>     jne .invalid
    83 00001327 F8                  <1>     clc
    84 00001328 EB1C                <1>     jmp short .exit
    85                              <1> .datFound:
    86 0000132A 488DBB04010000      <1>     lea rdi, qword [rbx + stringBlock.sVarName] ;point rdi to the name string
    87 00001331 51                  <1>     push rcx
    88 00001332 56                  <1>     push rsi
    89 00001333 F3A6                <1>     repe cmpsb  ;Compare one byte at a time
    90 00001335 5E                  <1>     pop rsi
    91 00001336 59                  <1>     pop rcx
    92 00001337 75D3                <1>     jne .invalid
    93 00001339 F8                  <1>     clc
    94 0000133A EB0A                <1>     jmp short .exit
    95                              <1> .varNotFound:
    96 0000133C 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    96 00001345 FF                  <1>
    97                              <1> .exit:
    98 00001346 5F                  <1>     pop rdi
    99 00001347 5E                  <1>     pop rsi
   100 00001348 5A                  <1>     pop rdx
   101 00001349 59                  <1>     pop rcx
   102 0000134A 58                  <1>     pop rax
   103 0000134B C3                  <1>     ret
   104                              <1> 
   105                              <1> findFirstLine:
   106                              <1> ;Output: rbx = Pointer to the first program block
   107                              <1> ;         dx = Number of the first line
   108 0000134C 488B1D(EA0E0000)    <1>     mov rbx, qword [firstLinPtr]
   109 00001353 668B15(F20E0000)    <1>     mov dx, word [firstLinNum]
   110 0000135A C3                  <1>     ret
   111                              <1> 
   112                              <1> ;FIRST SEARCH FOR A LINE NUMBER BEFORE INSERTING IT INTO THE CHAIN
   113                              <1> ;IF THE LINE NUMBER IS FOUND, REPLACE THE COMMAND STRING
   114                              <1> 
   115                              <1> searchForProgramLine:
   116                              <1> ;Walk the program chain looking to see if a line number exists. If it does,
   117                              <1> ; return a pointer to the block in rbx. If it doesn't, return -1 in rbx
   118                              <1> ;Input: dx = Line number
   119                              <1> ;Output: rbx = Pointer to program block 
   120 0000135B 488B1D(EA0E0000)    <1>     mov rbx, qword [firstLinPtr]
   121 00001362 4881FBFFFFFFFF      <1>     cmp rbx, -1
   122 00001369 7413                <1>     je .lineFound
   123                              <1> .search:
   124 0000136B 66395304            <1>     cmp word [rbx + progLineBlock.wLineNum], dx ;Equal line numbers?
   125 0000136F 740D                <1>     je .lineFound
   126 00001371 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr]   ;Walk chain
   127 00001375 4881FBFFFFFFFF      <1>     cmp rbx, -1
   128 0000137C 75ED                <1>     jne .search ;Not -1? Keep searching
   129                              <1> .lineFound:
   130 0000137E C3                  <1>     ret
   131                              <1> 
   132                              <1> insertProgramLine:
   133                              <1> ;Walk the program chain looking for the biggest number less than our
   134                              <1> ; line number. Once we have reached the end of the chain, insert the block there, or
   135                              <1> ; if there is no block, then we are the last in the chain
   136                              <1> ;Input: rsi = New Program Block to be added
   137 0000137F 50                  <1>     push rax
   138 00001380 53                  <1>     push rbx
   139 00001381 51                  <1>     push rcx
   140 00001382 52                  <1>     push rdx
   141 00001383 57                  <1>     push rdi
   142 00001384 E8C3FFFFFF          <1>     call findFirstLine  ;Get start of program in rbx and line number in dx
   143                              <1> ;First check if we should be the first line
   144                              <1> 
   145 00001389 668B4E04            <1>     mov cx, word [rsi + progLineBlock.wLineNum] ;Save line number in cx
   146 0000138D 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Empty program marker
   147 00001394 744D                <1>     je .first
   148 00001396 6639D1              <1>     cmp cx, dx  ;If cx is below dx, then our entry is first
   149 00001399 7248                <1>     jb .first    
   150                              <1> ;Use ax as the best line number and rdi as the pointer to that block
   151 0000139B 66B8FFFF            <1>     mov ax, -1  ;Marker to indicate no insertion
   152                              <1> .walk:
   153 0000139F 48817B06FFFFFFFF    <1>     cmp qword [rbx + progLineBlock.qPtr], -1    ;We are at the end
   154 000013A7 7419                <1>     je .sort
   155 000013A9 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Walk chain in rbx
   156 000013AD 663B4B04            <1>     cmp cx, word [rbx + progLineBlock.wLineNum]
   157 000013B1 77EC                <1>     ja .walk    ;If line number is above my line number, keep walking
   158                              <1> .candidate:
   159                              <1>     ;If the new line number is below the old line number, reject
   160 000013B3 663B4304            <1>     cmp ax, word [rbx + progLineBlock.wLineNum]
   161 000013B7 72E6                <1>     jb .walk
   162 000013B9 4889DF              <1>     mov rdi, rbx
   163 000013BC 668B4304            <1>     mov ax, word [rbx + progLineBlock.wLineNum]
   164 000013C0 EBDD                <1>     jmp short .walk
   165                              <1> .sort:
   166 000013C2 66FFC0              <1>     inc ax  ;If no candidates, exit
   167 000013C5 740E                <1>     jz .skipLink
   168                              <1>     ;rdi points to the previous line to link to
   169 000013C7 488B5706            <1>     mov rdx, qword [rdi + progLineBlock.qPtr]
   170 000013CB 48897706            <1>     mov qword [rdi + progLineBlock.qPtr], rsi   ;Insert self here
   171 000013CF 48895606            <1>     mov qword [rsi + progLineBlock.qPtr], rdx   ;Link new block to next line
   172 000013D3 EB20                <1>     jmp short .exit
   173                              <1> .skipLink:
   174 000013D5 48897306            <1>     mov qword [rbx + progLineBlock.qPtr], rsi   ;Link rsi to last element in list
   175 000013D9 48C74606FFFFFFFF    <1>     mov qword [rsi + progLineBlock.qPtr], -1    ;End of chain marker
   176 000013E1 EB12                <1>     jmp short .exit
   177                              <1> .first:
   178 000013E3 488935(EA0E0000)    <1>     mov qword [firstLinPtr], rsi
   179 000013EA 66890D(F20E0000)    <1>     mov word [firstLinNum], cx
   180 000013F1 48895E06            <1>     mov qword [rsi + progLineBlock.qPtr], rbx   ;Put the old first line as second line
   181                              <1> .exit:
   182 000013F5 5F                  <1>     pop rdi
   183 000013F6 5A                  <1>     pop rdx
   184 000013F7 59                  <1>     pop rcx
   185 000013F8 5B                  <1>     pop rbx
   186 000013F9 58                  <1>     pop rax
   187 000013FA C3                  <1>     ret
   188                              <1> 
   189                              <1> makeEditInteger:
   190                              <1> ;Will make a variable if it is new name, or edit the value if it already exists
   191                              <1> ;Input: rsi = Var name
   192                              <1> ;       (e)cx = Length of varname, max 40 chars
   193                              <1> ;       rax = Value
   194 000013FB E8EBFEFFFF          <1>     call findVariable   ;rbx returned with var block or -1
   195 00001400 4881FBFFFFFFFF      <1>     cmp rbx, -1
   196 00001407 7405                <1>     je .newVar
   197 00001409 48894304            <1>     mov qword [rbx + varBlock.qValue], rax
   198 0000140D C3                  <1>     ret
   199                              <1> .newVar:
   200 0000140E E878FEFFFF          <1>     call allocateBlock
   201 00001413 4881FBFFFFFFFF      <1>     cmp rbx, -1
   202 0000141A 741E                <1>     je .error
   203 0000141C 48894304            <1>     mov qword [rbx + varBlock.qValue], rax  ;Save value
   204 00001420 66894B01            <1>     mov word [rbx + varBlock.wBlockSize], cx    ;Save length of name
   205 00001424 668143010C00        <1>     add word [rbx + varBlock.wBlockSize], varBlock_size ;Add full block size
   206 0000142A C6430301            <1>     mov byte [rbx + varBlock.bBlockType], varBlockType  ;Block type
   207 0000142E 57                  <1>     push rdi
   208 0000142F 488D7B0C            <1>     lea rdi, qword [rbx + varBlock.sVarName]
   209 00001433 E87B000000          <1>     call strcpy ;Copy the string name into block buffer
   210 00001438 5F                  <1>     pop rdi
   211 00001439 C3                  <1>     ret
   212                              <1> .error:
   213 0000143A 488D2D4D010000      <1>     lea rbp, noMem
   214 00001441 E983ECFFFF          <1>     jmp criticalError
   215                              <1> makeEditString:
   216                              <1> ;Will make a string if it is new name, or replace the string. Strings are null termin
   217                              <1> ;Input: rsi = Var name
   218                              <1> ;       ecx = Length of varname, max 40 chars
   219                              <1> ;       rdx = Ptr to string itself
   220 00001446 57                  <1>     push rdi
   221 00001447 56                  <1>     push rsi
   222 00001448 50                  <1>     push rax
   223 00001449 53                  <1>     push rbx
   224 0000144A E89CFEFFFF          <1>     call findVariable   ;rbx returned with string block or -1
   225 0000144F 4881FBFFFFFFFF      <1>     cmp rbx, -1
   226 00001456 7528                <1>     jne .strcopy
   227 00001458 E82EFEFFFF          <1>     call allocateBlock
   228 0000145D 4881FBFFFFFFFF      <1>     cmp rbx, -1
   229 00001464 742E                <1>     je .error
   230 00001466 66894B01            <1>     mov word [rbx + stringBlock.wBlockSize], cx    ;Save length of name
   231 0000146A 668143010401        <1>     add word [rbx + stringBlock.wBlockSize], stringBlock_size ;Add full block size
   232 00001470 C6430302            <1>     mov byte [rbx + stringBlock.bBlockType], datBlockType  ;Block type
   233 00001474 488DBB04010000      <1>     lea rdi, qword [rbx + stringBlock.sVarName]
   234 0000147B E833000000          <1>     call strcpy ;Copy the string name into block buffer
   235                              <1> .strcopy:
   236 00001480 488D7B04            <1>     lea rdi, qword [rbx + stringBlock.string]   ;point to string space
   237 00001484 4889D6              <1>     mov rsi, rdx    ;Point rsi to the string itself
   238 00001487 E814000000          <1>     call terminatedstrcpy
   239 0000148C 30C0                <1>     xor al, al
   240 0000148E AA                  <1>     stosb   ;Store the null delimiter
   241 0000148F 5B                  <1>     pop rbx
   242 00001490 58                  <1>     pop rax
   243 00001491 5E                  <1>     pop rsi
   244 00001492 5F                  <1>     pop rdi
   245 00001493 C3                  <1>     ret
   246                              <1> .error:
   247 00001494 488D2DF3000000      <1>     lea rbp, noMem
   248 0000149B E929ECFFFF          <1>     jmp criticalError
   249                              <1> ;------------------------------------------------:
   250                              <1> ;  The below are misc memory related functions   :
   251                              <1> ;------------------------------------------------:
   252                              <1> terminatedstrcpy:
   253                              <1> ;rdi = Destination String
   254                              <1> ;rsi = Source String
   255                              <1> ;Copy a terminated string
   256 000014A0 50                  <1>     push rax
   257                              <1> .copy:
   258 000014A1 AC                  <1>     lodsb   ;Get char in al and inc rsi
   259 000014A2 3C00                <1>     cmp al, 0
   260 000014A4 740B                <1>     je .exit
   261 000014A6 3C3A                <1>     cmp al, ":"
   262 000014A8 7407                <1>     je .exit
   263 000014AA 3C22                <1>     cmp al, 22h ;Speechmark
   264 000014AC 7403                <1>     je .exit
   265 000014AE AA                  <1>     stosb   ;Save char from al and inc rdi
   266 000014AF EBF0                <1>     jmp short .copy 
   267                              <1> .exit:
   268 000014B1 58                  <1>     pop rax
   269 000014B2 C3                  <1>     ret
   270                              <1> strcpy:
   271                              <1> ;rdi = Destination string
   272                              <1> ;rsi = Source string
   273                              <1> ;rcx = Number of Chars to copy
   274 000014B3 57                  <1>     push rdi
   275 000014B4 56                  <1>     push rsi
   276 000014B5 51                  <1>     push rcx
   277 000014B6 F3A4                <1>     rep movsb
   278 000014B8 59                  <1>     pop rcx
   279 000014B9 5E                  <1>     pop rsi
   280 000014BA 5F                  <1>     pop rdi
   281 000014BB C3                  <1>     ret
   282                              <1> strlen:
   283                              <1> ;Input: rsi = String start
   284                              <1> ;Output: rsi = String start
   285                              <1> ;        ecx = String length, inclusive of NULL char
   286 000014BC 50                  <1>     push rax
   287 000014BD 56                  <1>     push rsi
   288 000014BE 31C9                <1>     xor ecx, ecx    ;Clear counter
   289                              <1> .search:
   290 000014C0 AC                  <1>     lodsb
   291 000014C1 FFC1                <1>     inc ecx
   292 000014C3 84C0                <1>     test al, al ;Is this a null char?
   293 000014C5 75F9                <1>     jnz .search ;Null not found
   294                              <1> .exit:
   295 000014C7 5E                  <1>     pop rsi
   296 000014C8 58                  <1>     pop rax
   297 000014C9 C3                  <1>     ret
   298                              <1> 
   299                              <1> memoryDetection:
   300 000014CA B820E80000          <1>     mov eax, 0E820h
   301 000014CF CD35                <1>     int 35h     ;rax = ptr to start, rsi = ptr to data table, each entry 24 bytes
   302 000014D1 EB07                <1>     jmp short .fsa1
   303                              <1> .findStartAddr:
   304 000014D3 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   305                              <1> .fsa1:
   306 000014DA 6685C9              <1>     test cx, cx
   307 000014DD 742C                <1>     jz .worstCase
   308 000014DF 66FFC9              <1>     dec cx
   309 000014E2 488B1E              <1>     mov rbx, qword [rsi]    ;Get the address entry into rbx
   310 000014E5 4839C3              <1>     cmp rbx, rax    
   311 000014E8 75E9                <1>     jne .findStartAddr
   312 000014EA 488B4608            <1>     mov rax, qword [rsi + 8] ;Get the number of bytes saved into rax
   313                              <1> 
   314 000014EE 488D15(00000000)    <1>     lea rdx, section.programArea.vstart
   315 000014F5 4829DA              <1>     sub rdx, rbx    ;Get the size of the interpreter and internal data area
   316 000014F8 4829D0              <1>     sub rax, rdx    ;Remove the number of bytes reserved to the interpreter
   317 000014FB E815FDFFFF          <1>     call printdecimalword
   318 00001500 4801C3              <1>     add rbx, rax    ;Add number of bytes to start address
   319 00001503 48891D(D00E0000)    <1>     mov qword [maxMemAddr], rbx ;Save this address
   320                              <1> .exit:
   321 0000150A C3                  <1>     ret
   322                              <1> .worstCase:
   323                              <1> ;Assume 2Mb MAX memory, rax has base address
   324 0000150B 48BB00002000000000- <1>     mov rbx, 200000h    ;2Mb value
   324 00001514 00                  <1>
   325 00001515 4829C3              <1>     sub rbx, rax
   326 00001518 4889D8              <1>     mov rax, rbx    ;Get value in rax
   327 0000151B E8F5FCFFFF          <1>     call printdecimalword
   328 00001520 48C705(D00E0000)00- <1>     mov qword [maxMemAddr], 200000h
   328 00001528 002000              <1>
   329 0000152B C3                  <1>     ret
   330                              <1> 
    18                                  %include "BASICDAT.ASM"
    19 0000152C 4F6B0A0D00          <1> prompt  db "Ok",0Ah,0Dh,0
    20 00001531 5343522036342D4241- <1> mainmsg db "SCR 64-BASIC v0.1",0Ah,0Dh,0
    20 0000153A 5349432076302E310A- <1>
    20 00001543 0D00                <1>
    21 00001545 204279746573206672- <1> bytemsg db " Bytes free",0Ah,0Dh,0
    21 0000154E 65650A0D00          <1>
    22 00001553 0A0D00              <1> crlf    db 0Ah,0Dh,0
    23 00001556 4572726F720A0D00    <1> errmsg  db "Error",0Ah,0Dh,0
    24 0000155E 303132333435363738- <1> numbers db "0123456789"
    24 00001567 39                  <1>
    25                              <1> ;startVarChars db "ABCDEFGHIJKLMNOPQRSTUVWXYZ" ;Valid starting chars for a var name
    26                              <1> ;numStartVarChars equ $ - startVarChars
    27 00001568 414243444546474849- <1> varChrs db "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789%$" ;Valid inner chars for var name
    27 00001571 4A4B4C4D4E4F505152- <1>
    27 0000157A 535455565758595A30- <1>
    27 00001583 313233343536373839- <1>
    27 0000158C 2524                <1>
    28                              <1> numVarChars equ $ - varChrs
    29                              <1> ;% => Integer variable (8 bytes)
    30                              <1> ;! => Single-Precision, Unused and ignored
    31                              <1> ;# => Double-Precision, Unused and ignored
    32                              <1> ;$ => String variable
    33                              <1> 
    34                              <1> ;Error Messages
    35 0000158E 4F7574206F66206D65- <1> noMem   db "Out of memory",0Ah,0Dh,0
    35 00001597 6D6F72790A0D00      <1>
    36 0000159E 53796E746178206572- <1> syntax  db "Syntax error",0Ah,0Dh,0
    36 000015A7 726F720A0D00        <1>
    37 000015AD 54797065206D69736D- <1> typeError   db "Type mismatch",0Ah,0Dh,0
    37 000015B6 617463680A0D00      <1>
    38 000015BD 556E646566696E6564- <1> lineNoXist  db "Undefined line number",0Ah,0Dh,0
    38 000015C6 206C696E65206E756D- <1>
    38 000015CF 6265720A0D00        <1>
    39 000015D5 427265616B20696E20- <1> breakmsg db "Break in ",0
    39 000015DE 00                  <1>
    40 000015DF 537461636B206F7665- <1> stkOvflw db "Stack overflow",0Ah,0Dh,0
    40 000015E8 72666C6F770A0D00    <1>
    41                              <1> 
    42 000015F0 5748494C4520776974- <1> noWend   db "WHILE without WEND", 0Ah, 0Dh, 0
    42 000015F9 686F75742057454E44- <1>
    42 00001602 0A0D00              <1>
    43 00001605 57454E442077697468- <1> noWhile  db "WEND without WHILE", 0Ah, 0Dh, 0
    43 0000160E 6F7574205748494C45- <1>
    43 00001617 0A0D00              <1>
    44 0000161A 4E4558542077697468- <1> noFor    db "NEXT without FOR", 0Ah, 0Dh, 0
    44 00001623 6F757420464F520A0D- <1>
    44 0000162C 00                  <1>
    45 0000162D 464F5220776974686F- <1> noNext   db "FOR without NEXT", 0Ah, 0Dh, 0
    45 00001636 7574204E4558540A0D- <1>
    45 0000163F 00                  <1>
    46 00001640 52455455524E207769- <1> noReturn db "RETURN without GOSUB", 0Ah, 0Dh, 0
    46 00001649 74686F757420474F53- <1>
    46 00001652 55420A0D00          <1>
    47 00001657 556E7072696E746162- <1> uknowner db "Unprintable error", 0Ah, 0Dh, 0
    47 00001660 6C65206572726F720A- <1>
    47 00001669 0D00                <1>
    19                                  Segment programArea follows=resSeg align=1 vfollows=resSeg valign=1
    20                                  ENDOFPROGRAM:

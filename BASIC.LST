     1                                      [map all BASIC.MAP]
     2                                      [DEFAULT REL]
     3                                      BITS 64
     4                                  %include "MEM.INC"
     5                              <1> 
     6                              <1> progLineBlockType   equ 0   ;Program Line
     7                              <1> varBlockType        equ 1   ;Variable block
     8                              <1> datBlockType        equ 2   ;Data block (i.e. a string block)
     9                              <1> 
    10                              <1> notLastMemBlock equ "T" ;Used for blocks that are not the last block
    11                              <1> lastMemBlock    equ "R" ;Used by the last block to indicate end of chain
    12                              <1> 
    13                              <1> %macro memBlockM 0 ;Memory block Macro
    14                              <1>     .bSignature resb 1      ;Valid Signature
    15                              <1>     .wBlockSize resw 1      ;Total block size in bytes
    16                              <1>     .bBlockType resb 1      ;Block type, program line, variable or string
    17                              <1> %endmacro
    18                              <1> 
    19                              <1> struc memBlock
    20                              <1>     memBlockM
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    21                              <1> endstruc
    22                              <1> 
    23                              <1> struc progLineBlock
    24                              <1>     memBlockM               ;Common memory block header
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    25 00000004 ????                <1>     .wLineNum   resw 1      ;Line number, up to 65535
    26 00000006 ????????????????    <1>     .qPtr       resq 1      ;Pointer to the next line, or -1 if last line
    27                              <1>     .sLine:                 ;Maximum length 255, keep null char
    28                              <1> endstruc
    29                              <1> 
    30                              <1> struc varBlock
    31                              <1>     memBlockM               ;Common memory block header
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    32 00000004 ????????????????    <1>     .qValue     resq 1      ;One qword, either value or pointer to string
    33                              <1>     .sVarName:              ;Up to 40 chars for the var name
    34                              <1> endstruc
    35                              <1> 
    36                              <1> struc stringBlock
    37                              <1>     memBlockM
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    38 00000004 <res 100h>          <1>     .string     resb maxLineLen    ;Strings allocate 256 chars
    39                              <1>     .sVarName:              ;Up to 40 chars for the var name
    40                              <1> endstruc
    41                              <1> 
    42                              <1> ;Variable equates
    43                              <1> intEquate  equ 0
    44                              <1> strEquate  equ 1
     5                                  Segment .text align=1
     6                                  %include "RELOC.ASM"
     7 00000000 55AA                <1>     dw 0AA55h 
     8                              <1> ;First verify I have Enough RAM for my program and then run
     9 00000002 B801E80000          <1>     mov eax, 0E801h ;Get low memory count in ax
    10 00000007 CD35                <1>     int 35h
    11 00000009 663D0008            <1>     cmp ax, 200000h/400h ;Divide 2Mb into 1Kb chunks.
    12 0000000D 722A                <1>     jb bad
    13 0000000F B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    14 00000014 0F32                <1>     rdmsr
    15 00000016 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    16 00000018 48C1E720            <1>     shl rdi, 20h        ;Shift high
    17 0000001C 89C7                <1>     mov edi, eax        ;Get the low dword in
    18 0000001E 4889F8              <1>     mov rax, rdi
    19 00000021 488D35(00000000)    <1>     lea rsi, section.resSeg.start
    20 00000028 4881C7[26110000]    <1>     add rdi, bssLen
    21 0000002F B900100000          <1>     mov ecx, 1000h
    22 00000034 F348A5              <1>     rep movsq
    23 00000037 FFE0                <1>     jmp qword rax
    24                              <1> bad:
    25 00000039 488D2D0D000000      <1>     lea rbp, badmsg
    26 00000040 B804130000          <1>     mov eax, 1304h
    27 00000045 CD30                <1>     int 30h
    28 00000047 30E4                <1>     xor ah, ah
    29 00000049 CD36                <1>     int 36h
    30 0000004B CD38                <1>     int 38h
    31 0000004D 4E6F7420456E6F7567- <1> badmsg: db "Not Enough Memory. Press any key to enter SYSDEBUG...",0
    31 00000056 68204D656D6F72792E- <1>
    31 0000005F 20507265737320616E- <1>
    31 00000068 79206B657920746F20- <1>
    31 00000071 656E74657220535953- <1>
    31 0000007A 44454255472E2E2E00  <1>
     7                                  Segment dSeg nobits align=1 start=0
     8                                  %include "BSS.ASM"
     9 00000000 <res FC0h>          <1> stack       resq 200h - 8  ;Save 4Kb stack space
    10 00000FC0 ????????????????    <1> stacktop    resq 1
    11                              <1> 
    12                              <1> maxLineLen  equ 256
    13 00000FC8 <res 100h>          <1> inString    resb maxLineLen         ;256 character input string
    14                              <1> 
    15                              <1> ;This string is used for printing long numbers and saving
    16                              <1> ; the variable names for string comparisons
    17                              <1> digitStringLen  equ 48
    18 000010C8 <res 30h>           <1> digitString resb digitStringLen     
    19                              <1> 
    20 000010F8 ????????????????    <1> minMemAddr  resq 1  ;Pointer from where to start allocating memory blocks
    21 00001100 ????????????????    <1> maxMemAddr  resq 1  ;Pointer to the byte past which we cannot allocate anything
    22                              <1> ;==============================================================================
    23                              <1> ;This is the SDA for each program and must be included in the program area
    24                              <1> ; once we add the ability to save the program to disk.
    25                              <1> ;==============================================================================
    26                              <1> 
    27                              <1> ;void* mcbChain, lastBlock, firstLinPtr = -1 => New program, empty entries
    28                              <1> 
    29 00001108 ??                  <1> strLen      resb 1  ;Counter for number of chars entered in string
    30 00001109 ??                  <1> stateByte   resb 1  ;TROFF/TRON etc, unused for now
    31 0000110A ????????????????    <1> mcbChain    resq 1  ;Pointer to the start of the chain
    32 00001112 ????????????????    <1> lastBlock   resq 1  ;Pointer to the last block
    33 0000111A ????????????????    <1> firstLinPtr resq 1  ;Pointer to the programs' first line 
    34 00001122 ????                <1> firstLinNum resw 1  ;Line number of the first line of the program
    35 00001124 ????                <1> currentLine resw 1  ;Currently being executed line number
    36                              <1> 
    37                              <1> bssLen: ;Needed to compute the resident portion load location
     9                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1
    10                                  %include "MAIN.ASM"
    11                              <1> start:
    12 00000000 B801C50000          <1>     mov eax, 0C501h
    13 00000005 CD35                <1>     int 35h
    14 00000007 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
    15 0000000C CD30                <1>     int 30h
    16 0000000E B402                <1>     mov ah, 02h
    17 00000010 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
    18 00000012 88D7                <1>     mov bh, dl      ;Set cursor for page 0
    19 00000014 CD30                <1>     int 30h
    20 00000016 B707                <1>     mov bh, 07h     ;Grey/Black attribs
    21 00000018 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
    22 0000001D CD30                <1>     int 30h
    23 0000001F FC                  <1>     cld
    24                              <1>     ;Memory stuff
    25 00000020 488D05(00000000)    <1>     lea rax, section.programArea.vstart
    26 00000027 488905(F8100000)    <1>     mov qword [minMemAddr], rax
    27 0000002E 488905(12110000)    <1>     mov qword [lastBlock], rax  ;Start writing at this location
    28 00000035 31C0                <1>     xor eax, eax
    29 00000037 48FFC8              <1>     dec rax
    30 0000003A 488905(0A110000)    <1>     mov qword [mcbChain], rax   ;-1
    31 00000041 488D2DDC030000      <1>     lea rbp, mainmsg
    32 00000048 E8E3000000          <1>     call ttyOutString
    33 0000004D E86B030000          <1>     call memoryDetection
    34 00000052 488D2DE7030000      <1>     lea rbp, bytemsg
    35 00000059 E8D2000000          <1>     call ttyOutString
    36 0000005E C605(08110000)00    <1>     mov byte [strLen], 0
    37                              <1> mainLoop:
    38 00000065 488D25(C00F0000)    <1>     lea rsp, stacktop    ;Reinitialize stack pointer
    39 0000006C 488D05F2FFFFFF      <1>     lea rax, mainLoop
    40 00000073 50                  <1>     push rax
    41 00000074 488D2DA4030000      <1>     lea rbp, prompt
    42 0000007B E8B0000000          <1>     call ttyOutString
    43 00000080 E807000000          <1>     call getLineInput
    44 00000085 E801000000          <1>     call saveExecuteLine
    45 0000008A C3                  <1>     ret
    46                              <1> saveExecuteLine:
    47                              <1> ;This function will execute the line if it is an interactive expression
    48                              <1> ; or store it in the program if it has a line number
    49 0000008B C3                  <1>     ret
    50                              <1> getLineInput:
    51 0000008C 30E4                <1>     xor ah, ah
    52 0000008E 8825(08110000)      <1>     mov byte [strLen], ah   ;Zero the char counter
    53 00000094 488D3D(C80F0000)    <1>     lea rdi, inString   ;Move to start of line
    54 0000009B 57                  <1>     push rdi
    55 0000009C B900010000          <1>     mov ecx, maxLineLen
    56 000000A1 B00D                <1>     mov al, 0Dh    ;Ensure the input line is sanitised
    57 000000A3 F3AA                <1>     rep stosb
    58 000000A5 5F                  <1>     pop rdi
    59                              <1> .getChar:
    60 000000A6 E88D000000          <1>     call ttyIn
    61 000000AB 3C0D                <1>     cmp al, 0Dh ;Line Feed
    62 000000AD 7456                <1>     je .gliExit
    63 000000AF 3C08                <1>     cmp al, 08h ;Bspace
    64 000000B1 740F                <1>     je .glibspace
    65 000000B3 803D(08110000)FE    <1>     cmp byte [strLen], -2   ;If at max length (255 chars), simply beep and wait for either bspace or enter
    66 000000BA 7459                <1>     je .gliFull 
    67 000000BC 84C0                <1>     test al, al
    68 000000BE 7443                <1>     je .gliExtendedChar
    69 000000C0 EB29                <1>     jmp short .gliCheckCase
    70                              <1> .glibspace:
    71 000000C2 F605(08110000)FF    <1>     test byte [strLen], -1  ;This will only be zero if strLen=0
    72 000000C9 74DB                <1>     jz .getChar
    73 000000CB 48FFCF              <1>     dec rdi ;Go back by one position in the input line
    74 000000CE FE0D(08110000)      <1>     dec byte [strLen]
    75 000000D4 B008                <1>     mov al, 08h
    76 000000D6 E850000000          <1>     call ttyOutChar
    77 000000DB B020                <1>     mov al, 20h  
    78 000000DD E849000000          <1>     call ttyOutChar
    79 000000E2 B008                <1>     mov al, 08h
    80 000000E4 E842000000          <1>     call ttyOutChar
    81 000000E9 EBBB                <1>     jmp short .getChar
    82                              <1> .gliCheckCase:
    83                              <1>     ;al has char
    84 000000EB E83B000000          <1>     call ttyOutChar ;Echo the char as is, but store it uppercase
    85 000000F0 3C61                <1>     cmp al, "a"
    86 000000F2 7206                <1>     jb .gliccStore
    87 000000F4 3C7A                <1>     cmp al, "z"
    88 000000F6 7702                <1>     ja .gliccStore
    89 000000F8 2C20                <1>     sub al, 20h
    90                              <1> .gliccStore:
    91 000000FA AA                  <1>     stosb   ;Increment the pointer, add char to buffer
    92 000000FB FE05(08110000)      <1>     inc byte [strLen]   ;Inc char count
    93 00000101 EBA3                <1>     jmp short .getChar
    94                              <1> .gliExtendedChar:
    95                              <1>     ;Currently, extended chars do nothing, eventually add F1-F10 functionality
    96 00000103 EBA1                <1>     jmp short .getChar
    97                              <1> .gliExit:
    98 00000105 488D2D42030000      <1>     lea rbp, crlf
    99 0000010C E81F000000          <1>     call ttyOutString
   100 00000111 C60700              <1>     mov byte [rdi], 0   ;Null terminate string here
   101 00000114 C3                  <1>     ret
   102                              <1> .gliFull:
   103 00000115 B007                <1>     mov al, 07h
   104 00000117 E80F000000          <1>     call ttyOutChar
   105 0000011C E985FFFFFF          <1>     jmp .getChar
   106                              <1> 
   107                              <1> ;For any error, syntax or otherwise, come here
   108                              <1> criticalError:
   109                              <1> ;Called with rbp pointing at error message
   110 00000121 E80A000000          <1>     call ttyOutString
   111 00000126 E93AFFFFFF          <1>     jmp mainLoop    ;Trash input line, restart line input
   112                              <1> 
   113                              <1> ;-------------------------------:
   114                              <1> ;---------Misc routines---------:
   115                              <1> ;-------------------------------:
   116                              <1> ttyOutChar:
   117 0000012B B40E                <1>     mov ah, 0Eh
   118 0000012D CD30                <1>     int 30h
   119 0000012F C3                  <1>     ret
   120                              <1> ttyOutString:
   121 00000130 B804130000          <1>     mov eax, 1304h
   122 00000135 CD30                <1>     int 30h
   123 00000137 C3                  <1>     ret
   124                              <1> ttyIn:
   125 00000138 30E4                <1>     xor ah, ah
   126 0000013A CD36                <1>     int 36h
   127 0000013C C3                  <1>     ret
   128                              <1> 
   129                              <1> printdecimalword:
   130                              <1> ;Takes the qword in rax and prints its decimal representation
   131 0000013D 50                  <1>     push rax
   132 0000013E 488D3D(C8100000)    <1>     lea rdi, digitString   ;Use the default line as a buffer
   133                              <1>     ;Sanitise the digit buffer
   134 00000145 57                  <1>     push rdi
   135 00000146 51                  <1>     push rcx
   136 00000147 50                  <1>     push rax
   137 00000148 31C0                <1>     xor eax, eax
   138 0000014A B906000000          <1>     mov ecx, digitStringLen/8
   139 0000014F F348AB              <1>     rep stosq
   140 00000152 58                  <1>     pop rax
   141 00000153 59                  <1>     pop rcx
   142 00000154 5F                  <1>     pop rdi
   143                              <1> 
   144 00000155 4881C72F000000      <1>     add rdi, digitStringLen - 1 ;Go to the end of the buffer
   145 0000015C FD                  <1>     std ;Reverse string ops
   146 0000015D 50                  <1>     push rax
   147 0000015E 30C0                <1>     xor al, al  ;Place delimiter
   148 00000160 AA                  <1>     stosb
   149 00000161 58                  <1>     pop rax
   150 00000162 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
   150 0000016B 00                  <1>
   151                              <1> .pdw0:
   152 0000016C 31D2                <1>     xor edx, edx
   153 0000016E 48F7F3              <1>     div rbx
   154 00000171 80C230              <1>     add dl, '0'
   155 00000174 80FA39              <1>     cmp dl, '9'
   156 00000177 7603                <1>     jbe .pdw1
   157 00000179 80C207              <1>     add dl, 'A'-'0'-10
   158                              <1> .pdw1:
   159 0000017C 50                  <1>     push rax
   160 0000017D 88D0                <1>     mov al, dl    ;Save remainder byte
   161 0000017F AA                  <1>     stosb   ;Store the byte and add one to rdi
   162 00000180 58                  <1>     pop rax
   163 00000181 4885C0              <1>     test rax, rax
   164 00000184 75E6                <1>     jnz .pdw0
   165 00000186 FC                  <1>     cld ;Return string ops to normal
   166 00000187 48FFC7              <1>     inc rdi ;Skip the extra 0 that was inserted
   167 0000018A 4889FD              <1>     mov rbp, rdi    ;Point rbp to the head of the string
   168 0000018D E89EFFFFFF          <1>     call ttyOutString
   169 00000192 58                  <1>     pop rax
   170 00000193 C3                  <1>     ret
    11                                  %include "PARSE.ASM"
    12                              <1> ;Main Parsing Routines go here
    13                              <1> 
    14                              <1> spaceSkip:
    15                              <1> ;Allows us to skip spaces that might have been placed for
    16                              <1> ; ease of reading by the user.
    17                              <1> ;Input: rsi = Pointer to string
    18                              <1> ;Output: rsi = First non space character encountered
    19 00000194 803E20              <1>     cmp byte [rsi], " "
    20 00000197 7505                <1>     jne .exit
    21 00000199 48FFC6              <1>     inc rsi
    22 0000019C EBF6                <1>     jmp short spaceSkip
    23                              <1> .exit:
    24 0000019E C3                  <1>     ret
    25                              <1> 
    26                              <1> getVarNameLength:
    27                              <1> ;Input: rsi = Start of var name
    28                              <1> ;Output: ecx = Length of varname
    29 0000019F 56                  <1>     push rsi
    30 000001A0 57                  <1>     push rdi
    31 000001A1 53                  <1>     push rbx
    32 000001A2 31C9                <1>     xor ecx, ecx    ;Clear counter of chars
    33 000001A4 488D1DB8020000      <1>     lea rbx, varChrs    ;Get the list of valid variable name chars
    34                              <1> .search:
    35 000001AB 4889DF              <1>     mov rdi, rbx    ;Save pointer in rbx
    36 000001AE AC                  <1>     lodsb       ;Get the first char into al
    37 000001AF AE                  <1>     scasb       ;Look for char in the valid chars list
    38 000001B0 750A                <1>     jne .exit   ;Char not found, drop it
    39 000001B2 FFC1                <1>     inc ecx     ;Add one to number of chars found
    40 000001B4 81F928000000        <1>     cmp ecx, 40 ;At position for char 40?
    41 000001BA 72EF                <1>     jb .search  ;Whilst below, keep going
    42                              <1> .exit:
    43 000001BC 5B                  <1>     pop rbx
    44 000001BD 5F                  <1>     pop rdi
    45 000001BE 5E                  <1>     pop rsi
    46 000001BF C3                  <1>     ret
    47                              <1> 
    48                              <1> getVarType:
    49                              <1> ;Input: rsi = Start of var name
    50                              <1> ;       rcx = Length of varname
    51                              <1> ;Output: ebx = 0 => Integer
    52                              <1> ;        ebx = 1 => String
    53 000001C0 50                  <1>     push rax
    54 000001C1 51                  <1>     push rcx
    55 000001C2 56                  <1>     push rsi
    56 000001C3 48FFC9              <1>     dec rcx         ;Get second to last char in name
    57 000001C6 4801CE              <1>     add rsi, rcx    ;Move rsi to that char
    58 000001C9 AC                  <1>     lodsb   ;Get the char into al
    59 000001CA BB00000000          <1>     mov ebx, intEquate
    60 000001CF B901000000          <1>     mov ecx, strEquate
    61 000001D4 3C24                <1>     cmp al, "$"     ;String?
    62 000001D6 0F44D9              <1>     cmove ebx, ecx  ;Move the string type into ebx
    63 000001D9 5E                  <1>     pop rsi
    64 000001DA 59                  <1>     pop rcx
    65 000001DB 58                  <1>     pop rax
    66 000001DC C3                  <1>     ret
    67                              <1> 
    68                              <1> handleExpression:
    69                              <1> ;expr:
    70                              <1> ;    call expr1          ; Call second tier
    71                              <1> ;f20:    
    72                              <1> ;    cmp byte [si],'-'   ; Subtraction operator?
    73                              <1> ;    je f19              ; Yes, jump
    74                              <1> ;    cmp byte [si],'+'   ; Addition operator?
    75                              <1> ;    jne f6              ; No, return
    76                              <1> ;    push ax
    77                              <1> ;    call expr1_2        ; Call second tier
    78                              <1> ;f15:    
    79                              <1> ;    pop cx
    80                              <1> ;    add ax,cx           ; Addition
    81                              <1> ;    jmp f20             ; Find more operators
    82                              <1> 
    83                              <1> ;f19:
    84                              <1> ;    push ax
    85                              <1> ;    call expr1_2        ; Call second tier
    86                              <1> ;    neg ax              ; Negate it (a - b converted to a + -b)
    87                              <1> ;    jmp f15
    88                              <1> 
    89                              <1>         ;
    90                              <1>         ; Handle an expression.
    91                              <1>         ; Second tier: division & multiplication.
    92                              <1>         ;
    93                              <1> ;expr1_2:
    94                              <1> ;    inc si              ; Avoid operator
    95                              <1> ;expr1:
    96                              <1> ;    call expr2          ; Call third tier
    97                              <1> ;f21:   
    98                              <1> ;    cmp byte [si],'/'   ; Division operator?
    99                              <1> ;    je f23              ; Yes, jump
   100                              <1> ;    cmp byte [si],'*'   ; Multiplication operator?
   101                              <1> ;    jne f6              ; No, return
   102                              <1> 
   103                              <1> ;    push ax
   104                              <1> ;    call expr2_2        ; Call third tier
   105                              <1> ;    pop cx
   106                              <1> ;    imul cx             ; Multiplication
   107                              <1> ;    jmp f21             ; Find more operators
   108                              <1> 
   109                              <1> ;f23:
   110                              <1> ;    push ax
   111                              <1> ;    call expr2_2        ; Call third tier
   112                              <1> ;    pop cx
   113                              <1> ;    xchg ax,cx
   114                              <1> ;    cwd                 ; Expand AX to DX:AX
   115                              <1> ;    idiv cx             ; Signed division
   116                              <1> ;    jmp f21             ; Find more operators
   117                              <1> 
   118                              <1>         ;
   119                              <1>         ; Handle an expression.
   120                              <1>         ; Third tier: parentheses, numbers and vars.
   121                              <1>         ;
   122                              <1> ;expr2_2:
   123                              <1> ;    inc si              ; Avoid operator
   124                              <1> ;expr2:
   125                              <1> ;    call spaces         ; Jump spaces
   126                              <1> ;    lodsb               ; Read character
   127                              <1> ;    cmp al,'('          ; Open parenthesis?
   128                              <1> ;    jne f24
   129                              <1> ;    call expr           ; Process inner expr.
   130                              <1> ;    cmp byte [si],')'   ; Closing parenthesis?
   131                              <1> ;    je spaces_2         ; Yes, avoid spaces
   132                              <1> ;    jmp error           ; No, jump to error
   133                              <1> 
   134                              <1> ;f24:    
   135                              <1> ;    cmp al, 0x40         ; Variable?
   136                              <1> ;    jnc f25             ; Yes, jump
   137                              <1> ;    dec si              ; Back one letter...
   138                              <1> ;    call input_number   ; ...to read number
   139                              <1> ;    jmp short spaces
   140                              <1> 
   141                              <1> ;f25:    
   142                              <1> ;    cmp al,0x72
   143                              <1> ;    jne f22
   144                              <1> ;    cmp byte [si],0x6e
   145                              <1> ;    jne f22
   146                              <1> ;    lodsw               ; Advance SI by 2
   147                              <1> ;    in al,0x40          ; Read timer counter 0
   148                              <1> ;    mov ah,0       
   149                              <1> ;    ret
   150                              <1> 
   151                              <1> ;f22:    
   152                              <1> ;    call get_variable_2 ; Get variable address
   153                              <1> ;    xchg ax,bx
   154                              <1> ;    mov ax,[bx]         ; Read
   155                              <1> ;    ret                 ; Return
    12                                  %include "COMMANDS.ASM"
    13                              <1> 
    14                              <1> funTbl:
    15 000001DD 044E4557            <1>     db 4,"NEW"
    16                              <1> 
    17 000001E1 054C495354          <1>     db 5,"LIST"
    18                              <1> 
    19 000001E6 0452554E            <1>     db 4,"RUN"
    20                              <1> 
    21 000001EA 065052494E54        <1>     db 6,"PRINT"
    22                              <1> 
    23 000001F0 06494E505554        <1>     db 6,"INPUT"
    24                              <1> 
    25 000001F6 034946              <1>     db 3,"IF"
    26                              <1> 
    27 000001F9 05474F544F          <1>     db 5,"GOTO"
    28                              <1> 
    29 000001FE 0753595354454D      <1>     db 7,"SYSTEM"
    30                              <1> 
    31 00000205 01                  <1>     db 1
    13                                  %include "MATH.ASM"
    14                              <1> decimalToHex:
    15                              <1>     ;Takes ASCII encoded decimal number and 
    16                              <1>     ;returns its hex value
    17                              <1>     ;Input: rsi = Start of string
    18                              <1>     ;       ecx = Number of Digits in digit string (max 255)
    19                              <1>     ;Output: rax = Number
    20 00000206 53                  <1>     push rbx
    21 00000207 51                  <1>     push rcx
    22 00000208 52                  <1>     push rdx
    23 00000209 31DB                <1>     xor ebx, ebx    ;Start with rbx = 0
    24                              <1> .processDigits:    
    25 0000020B AC                  <1>     lodsb           ;Get the first digit in al
    26 0000020C 2C30                <1>     sub al, 30h     ;Reduce to value
    27 0000020E 3C0A                <1>     cmp al, 10      ;Digit valid?
    28 00000210 480FB6C0            <1>     movzx rax, al   ;Clear upper bits
    29 00000214 31D2                <1>     xor edx, edx    ;Clear for multiplication
    30 00000216 4893                <1>     xchg rax, rbx
    31 00000218 730D                <1>     jnc .exit       ;Digit was not valid, exit
    32 0000021A B90A000000          <1>     mov ecx, 10     ;Multiply result by 10
    33 0000021F 48F7E1              <1>     mul rcx
    34 00000222 4801C3              <1>     add rbx, rax    ;Add the new digits
    35 00000225 EBE4                <1>     jmp short .processDigits
    36                              <1> .exit:
    37 00000227 48FFCE              <1>     dec rsi         ;rsi points to first non-digit
    38 0000022A 5A                  <1>     pop rdx
    39 0000022B 59                  <1>     pop rcx
    40 0000022C 5B                  <1>     pop rbx
    41 0000022D C3                  <1>     ret
    14                                  %include "MEMORY.ASM"
    15                              <1> allocateBlock:
    16                              <1> ;Allocates a program memory block, the caller then fixes the specifics
    17                              <1> ;Output: rbx = Pointer to generic memory block, or -1 if memory full
    18                              <1> ;       Caller needs to fill in, block size, block type and specifics
    19 0000022E 488B1D(12110000)    <1>     mov rbx, qword [lastBlock]    ;Get the last block in the chain
    20 00000235 C60354              <1>     mov byte [rbx + memBlock.bSignature], notLastMemBlock ;Make it not be the last
    21 00000238 480FB75301          <1>     movzx rdx, word [rbx + memBlock.wBlockSize] ;Goto end of block
    22 0000023D 4801D3              <1>     add rbx, rdx    ;Move rbx over the previous last block
    23 00000240 48391D(00110000)    <1>     cmp qword [maxMemAddr], rbx ;rbx above maxmemory? 
    24 00000247 770B                <1>     ja .memoryFull
    25 00000249 48891D(12110000)    <1>     mov qword [lastBlock], rbx  ;New last block
    26 00000250 C60352              <1>     mov byte [rbx + memBlock.bSignature], lastMemBlock
    27 00000253 C3                  <1>     ret
    28                              <1> .memoryFull:
    29 00000254 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    29 0000025D FF                  <1>
    30 0000025E C3                  <1>     ret
    31                              <1> 
    32                              <1> findVariable:
    33                              <1> ;Input: rsi = Source string for variable name
    34                              <1> ;       ecx = Length of variable name (max 40)
    35                              <1> ;Output: rbx = ptr to varBlock OR -1 if doesnt exist
    36 0000025F 51                  <1>     push rcx
    37 00000260 52                  <1>     push rdx
    38 00000261 57                  <1>     push rdi
    39 00000262 488B1D(0A110000)    <1>     mov rbx, qword [mcbChain]   ;Start of the chain
    40                              <1> .search:
    41 00000269 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
    42 0000026D 740F                <1>     je .varFound    ;We found a variable
    43                              <1> .invalid:
    44                              <1>     ;Are we at the end of the chain?
    45 0000026F 803B52              <1>     cmp byte [rbx + memBlock.bSignature], lastMemBlock
    46 00000272 7415                <1>     je .varNotFound ;At the end of the chain and var not found? Error!
    47 00000274 480FB75301          <1>     movzx rdx, word [rbx + memBlock.wBlockSize]
    48 00000279 4801D3              <1>     add rbx, rdx    ;Goto next block
    49 0000027C EBEB                <1>     jmp short .search
    50                              <1> .varFound:
    51                              <1>     ;Compare to see the var is our var
    52 0000027E 488D7B0C            <1>     lea rdi, qword [rbx + varBlock.sVarName] ;point rdi to the name string
    53 00000282 F3A6                <1>     repe cmpsb  ;Compare one byte at a time
    54 00000284 75E9                <1>     jne .invalid
    55 00000286 F8                  <1>     clc
    56 00000287 EB0A                <1>     jmp short .exit
    57                              <1> .varNotFound:
    58 00000289 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    58 00000292 FF                  <1>
    59                              <1> .exit:
    60 00000293 5F                  <1>     pop rdi
    61 00000294 5A                  <1>     pop rdx
    62 00000295 59                  <1>     pop rcx
    63 00000296 C3                  <1>     ret
    64                              <1> 
    65                              <1> findFirstLine:
    66                              <1> ;Output: rbx = Pointer to the first program block
    67                              <1> ;         dx = Number of the first line
    68 00000297 488B1D(1A110000)    <1>     mov rbx, qword [firstLinPtr]
    69 0000029E 668B15(22110000)    <1>     mov dx, word [firstLinNum]
    70 000002A5 C3                  <1>     ret
    71                              <1> 
    72                              <1> ;FIRST SEARCH FOR A LINE NUMBER BEFORE INSERTING IT INTO THE CHAIN
    73                              <1> ;IF THE LINE NUMBER IS FOUND, REPLACE THE COMMAND STRING
    74                              <1> 
    75                              <1> searchForProgramLine:
    76                              <1> ;Walk the program chain looking to see if a line number exists. If it does,
    77                              <1> ; return a pointer to the block in rbx. If it doesn't, return -1 in rbx
    78                              <1> ;Input: dx = Line number
    79                              <1> ;Output: rbx = Pointer to program block 
    80 000002A6 488B1D(1A110000)    <1>     mov rbx, qword [firstLinPtr]
    81                              <1> .search:
    82 000002AD 66395304            <1>     cmp word [rbx + progLineBlock.wLineNum], dx ;Equal line numbers?
    83 000002B1 740C                <1>     je .lineFound
    84 000002B3 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr]   ;Walk chain
    85 000002B7 48FFC3              <1>     inc rbx ;At the end? If yes, this would be 0 now
    86 000002BA 75F1                <1>     jnz .search ;Not zero? Keep searching
    87 000002BC 48FFCB              <1>     dec rbx ;Make it -1 again
    88                              <1> .lineFound:
    89 000002BF C3                  <1>     ret
    90                              <1> 
    91                              <1> insertProgramLine:
    92                              <1> ;Walk the program chain looking for the biggest number less than our
    93                              <1> ; line number. Once we have reached the end of the chain, insert the block there, or
    94                              <1> ; if there is no block, then we are the last in the chain
    95                              <1> ;Input: rsi = New Program Block to be added
    96 000002C0 50                  <1>     push rax
    97 000002C1 53                  <1>     push rbx
    98 000002C2 51                  <1>     push rcx
    99 000002C3 52                  <1>     push rdx
   100 000002C4 57                  <1>     push rdi
   101 000002C5 E8CDFFFFFF          <1>     call findFirstLine  ;Get start of program in rbx and line number in dx
   102                              <1> ;First check if we should be the first line
   103 000002CA 668B4E04            <1>     mov cx, word [rsi + progLineBlock.wLineNum] ;Save line number in cx
   104 000002CE 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Empty program marker
   105 000002D5 744D                <1>     je .first
   106 000002D7 6639CA              <1>     cmp dx, cx  ;If cx is below dx, then our entry is first
   107 000002DA 7248                <1>     jb .first    
   108                              <1> ;Use ax as the best line number and rdi as the pointer to that block
   109 000002DC 66B8FFFF            <1>     mov ax, -1  ;Marker to indicate no insertion
   110                              <1> .walk:
   111 000002E0 48817B06FFFFFFFF    <1>     cmp qword [rbx + progLineBlock.qPtr], -1    ;We are at the end
   112 000002E8 7419                <1>     je .sort
   113 000002EA 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Walk chain in rbx
   114 000002EE 663B4B04            <1>     cmp cx, word [rbx + progLineBlock.wLineNum]
   115 000002F2 77EC                <1>     ja .walk    ;If line number is above my line number, keep walking
   116                              <1> .candidate:
   117                              <1>     ;If the new line number is below the old line number, reject
   118 000002F4 663B4304            <1>     cmp ax, word [rbx + progLineBlock.wLineNum]
   119 000002F8 72E6                <1>     jb .walk
   120 000002FA 4889DF              <1>     mov rdi, rbx
   121 000002FD 668B4304            <1>     mov ax, word [rbx + progLineBlock.wLineNum]
   122 00000301 EBDD                <1>     jmp short .walk
   123                              <1> .sort:
   124 00000303 66FFC0              <1>     inc ax  ;If no candidates, exit
   125 00000306 740E                <1>     jz .skipLink
   126                              <1>     ;rdi points to the previous line to link to
   127 00000308 488B5706            <1>     mov rdx, qword [rdi + progLineBlock.qPtr]
   128 0000030C 48897706            <1>     mov qword [rdi + progLineBlock.qPtr], rsi   ;Insert self here
   129 00000310 48895606            <1>     mov qword [rsi + progLineBlock.qPtr], rdx   ;Link new block to next line
   130 00000314 EB20                <1>     jmp short .exit
   131                              <1> .skipLink:
   132 00000316 48897306            <1>     mov qword [rbx + progLineBlock.qPtr], rsi   ;Link rsi to last element in list
   133 0000031A 48C74606FFFFFFFF    <1>     mov qword [rsi + progLineBlock.qPtr], -1    ;End of chain marker
   134 00000322 EB12                <1>     jmp short .exit
   135                              <1> .first:
   136 00000324 488935(1A110000)    <1>     mov qword [firstLinPtr], rsi
   137 0000032B 66890D(22110000)    <1>     mov word [firstLinNum], cx
   138 00000332 48895E06            <1>     mov qword [rsi + progLineBlock.qPtr], rbx   ;Put the old first line as second line
   139                              <1> .exit:
   140 00000336 5F                  <1>     pop rdi
   141 00000337 5A                  <1>     pop rdx
   142 00000338 59                  <1>     pop rcx
   143 00000339 5B                  <1>     pop rbx
   144 0000033A 58                  <1>     pop rax
   145 0000033B C3                  <1>     ret
   146                              <1> 
   147                              <1> makeEditVariable:
   148                              <1> ;Will make a variable if it is a new name, or edit the value if it already exists
   149                              <1> ;Input: rsi = Var name
   150                              <1> ;       rax = Value/String Pointer
   151 0000033C 50                  <1>     push rax
   152 0000033D 53                  <1>     push rbx
   153 0000033E 51                  <1>     push rcx
   154                              <1> 
   155 0000033F E85BFEFFFF          <1>     call getVarNameLength   ;Get the length in ecx, clear upper of rcx
   156 00000344 E877FEFFFF          <1>     call getVarType ;Get type in rbx
   157 00000349 85DB                <1>     test ebx, ebx
   158 0000034B 7507                <1>     jnz .string
   159 0000034D E80B000000          <1>     call makeEditInteger
   160 00000352 EB05                <1>     jmp short .exit
   161                              <1> .string:
   162 00000354 E84F000000          <1>     call makeEditString
   163                              <1> .exit:
   164 00000359 59                  <1>     pop rcx
   165 0000035A 5B                  <1>     pop rbx
   166 0000035B 58                  <1>     pop rax
   167 0000035C C3                  <1>     ret
   168                              <1> 
   169                              <1> makeEditInteger:
   170                              <1> ;Will make a variable if it is new name, or edit the value if it already exists
   171                              <1> ;Input: rsi = Var name
   172                              <1> ;       (e)cx = Length of varname, max 40 chars
   173                              <1> ;       rax = Value
   174 0000035D E8FDFEFFFF          <1>     call findVariable   ;rbx returned with var block or -1
   175 00000362 4881FBFFFFFFFF      <1>     cmp rbx, -1
   176 00000369 7405                <1>     je .newVar
   177 0000036B 48894304            <1>     mov qword [rbx + varBlock.qValue], rax
   178 0000036F C3                  <1>     ret
   179                              <1> .newVar:
   180 00000370 E8B9FEFFFF          <1>     call allocateBlock
   181 00000375 4881FBFFFFFFFF      <1>     cmp rbx, -1
   182 0000037C 741E                <1>     je .error
   183 0000037E 48894304            <1>     mov qword [rbx + varBlock.qValue], rax  ;Save value
   184 00000382 66894B01            <1>     mov word [rbx + varBlock.wBlockSize], cx    ;Save length of string
   185 00000386 668143010C00        <1>     add word [rbx + varBlock.wBlockSize], varBlock_size ;Add full block size
   186 0000038C C6430301            <1>     mov byte [rbx + varBlock.bBlockType], varBlockType  ;Block type
   187 00000390 57                  <1>     push rdi
   188 00000391 488D7B0C            <1>     lea rdi, qword [rbx + varBlock.sVarName]
   189 00000395 E81A000000          <1>     call strcpy ;Copy the string name into block buffer
   190 0000039A 5F                  <1>     pop rdi
   191 0000039B C3                  <1>     ret
   192                              <1> .error:
   193 0000039C 488D2DDC000000      <1>     lea rbp, noMem
   194 000003A3 E979FDFFFF          <1>     jmp criticalError
   195                              <1> makeEditString:
   196                              <1> ;Will make a string if it is new name, or replace the string. Strings are null termin
   197                              <1> ;Input: rsi = Var name
   198                              <1> ;       ecx = Length of varname
   199                              <1> ;       rax = Ptr to string
   200                              <1> ;FOR NOW, JUST THROW ERRORS
   201 000003A8 488D2DE0000000      <1>     lea rbp, syntax
   202 000003AF E96DFDFFFF          <1>     jmp criticalError
   203                              <1> ;------------------------------------------------:
   204                              <1> ;  The below are misc memory related functions   :
   205                              <1> ;------------------------------------------------:
   206                              <1> strcpy:
   207                              <1> ;rdi = Destination string
   208                              <1> ;rsi = Source string
   209                              <1> ;rcx = Number of Chars to copy
   210 000003B4 57                  <1>     push rdi
   211 000003B5 56                  <1>     push rsi
   212 000003B6 51                  <1>     push rcx
   213 000003B7 F3A4                <1>     rep movsb
   214 000003B9 59                  <1>     pop rcx
   215 000003BA 5E                  <1>     pop rsi
   216 000003BB 5F                  <1>     pop rdi
   217 000003BC C3                  <1>     ret
   218                              <1> memoryDetection:
   219 000003BD B820E80000          <1>     mov eax, 0E820h
   220 000003C2 CD35                <1>     int 35h     ;rax = ptr to start, rsi = ptr to data table, each entry 24 bytes
   221 000003C4 EB07                <1>     jmp short .fsa1
   222                              <1> .findStartAddr:
   223 000003C6 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   224                              <1> .fsa1:
   225 000003CD 6685C9              <1>     test cx, cx
   226 000003D0 742C                <1>     jz .worstCase
   227 000003D2 66FFC9              <1>     dec cx
   228 000003D5 488B1E              <1>     mov rbx, qword [rsi]    ;Get the address entry into rbx
   229 000003D8 4839C3              <1>     cmp rbx, rax    
   230 000003DB 75E9                <1>     jne .findStartAddr
   231 000003DD 488B4608            <1>     mov rax, qword [rsi + 8] ;Get the number of bytes saved into rax
   232                              <1> 
   233 000003E1 488D15(00000000)    <1>     lea rdx, section.programArea.vstart
   234 000003E8 4829DA              <1>     sub rdx, rbx    ;Get the size of the interpreter and internal data area
   235 000003EB 4829D0              <1>     sub rax, rdx    ;Remove the number of bytes reserved to the interpreter
   236 000003EE E84AFDFFFF          <1>     call printdecimalword
   237 000003F3 4801C3              <1>     add rbx, rax    ;Add number of bytes to start address
   238 000003F6 48891D(00110000)    <1>     mov qword [maxMemAddr], rbx ;Save this address
   239                              <1> .exit:
   240 000003FD C3                  <1>     ret
   241                              <1> .worstCase:
   242                              <1> ;Assume 2Mb MAX memory, rax has base address
   243 000003FE 48BB00002000000000- <1>     mov rbx, 200000h    ;2Mb value
   243 00000407 00                  <1>
   244 00000408 4829C3              <1>     sub rbx, rax
   245 0000040B 4889D8              <1>     mov rax, rbx    ;Get value in rax
   246 0000040E E82AFDFFFF          <1>     call printdecimalword
   247 00000413 48C705(00110000)00- <1>     mov qword [maxMemAddr], 200000h
   247 0000041B 002000              <1>
   248 0000041E C3                  <1>     ret
   249                              <1> 
    15                                  %include "BASICDAT.ASM"
    16 0000041F 4F6B0A0D00          <1> prompt  db "Ok",0Ah,0Dh,0
    17 00000424 5343522F363420496E- <1> mainmsg db "SCR/64 Integer BASIC v0.1",0Ah,0Dh,0
    17 0000042D 746567657220424153- <1>
    17 00000436 49432076302E310A0D- <1>
    17 0000043F 00                  <1>
    18 00000440 204279746573206672- <1> bytemsg db " Bytes free",0Ah,0Dh,0
    18 00000449 65650A0D00          <1>
    19 0000044E 0A0D00              <1> crlf    db 0Ah,0Dh,0
    20 00000451 4572726F720A0D00    <1> errmsg  db "Error",0Ah,0Dh,0
    21 00000459 303132333435363738- <1> numbers db "0123456789"
    21 00000462 39                  <1>
    22 00000463 414243444546474849- <1> varChrs db "ABCDEFGHIJKLMNOPQRSTUVWXYZ%$" ;Valid chars for var name
    22 0000046C 4A4B4C4D4E4F505152- <1>
    22 00000475 535455565758595A25- <1>
    22 0000047E 24                  <1>
    23                              <1> ;% => Integer variable (8 bytes)
    24                              <1> ;! => Single-Precision, Unused and ignored
    25                              <1> ;# => Double-Precision, Unused and ignored
    26                              <1> ;$ => String variable
    27                              <1> 
    28                              <1> ;Error Messages
    29 0000047F 4F7574206F66204D65- <1> noMem   db "Out of Memory",0Ah,0Dh,0
    29 00000488 6D6F72790A0D00      <1>
    30 0000048F 53796E746178204572- <1> syntax  db "Syntax Error",0Ah,0Dh,0
    30 00000498 726F720A0D00        <1>
    16                                  Segment programArea follows=resSeg align=1 vfollows=resSeg valign=1
    17                                  ENDOFPROGRAM:

     1                                      [map all BASIC.MAP]
     2                                      [DEFAULT REL]
     3                                      BITS 64
     4                                  %include "MEM.INC"
     5                              <1> 
     6                              <1> progLineBlockType   equ 0   ;Program Line
     7                              <1> varBlockType        equ 1   ;Variable block
     8                              <1> datBlockType        equ 2   ;Data block (i.e. a string block)
     9                              <1> 
    10                              <1> notLastMemBlock equ "t" ;Used for blocks that are not the last block
    11                              <1> lastMemBlock    equ "r" ;Used by the last block to indicate end of chain
    12                              <1> 
    13                              <1> %macro memBlockM 0 ;Memory block Macro
    14                              <1>     .bSignature resb 1      ;Valid Signature
    15                              <1>     .wBlockSize resw 1      ;Total block size in bytes
    16                              <1>     .bBlockType resb 1      ;Block type, program line, variable or string
    17                              <1> %endmacro
    18                              <1> 
    19                              <1> struc memBlock
    20                              <1>     memBlockM
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    21                              <1> endstruc
    22                              <1> 
    23                              <1> struc progLineBlock
    24                              <1>     memBlockM               ;Common memory block header
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    25 00000004 ????                <1>     .wLineNum   resw 1      ;Line number, up to 65535
    26 00000006 ????????????????    <1>     .qPtr       resq 1      ;Pointer to the next line, or -1 if last line
    27 0000000E <res 100h>          <1>     .sLine      resb maxLineLen  ;Maximum length 255, keep null char but 
    28                              <1>     ;                             NOT LINE NUMBER OR PRECEEDING SPACES
    29                              <1> endstruc
    30                              <1> 
    31                              <1> struc varBlock
    32                              <1>     memBlockM               ;Common memory block header
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    33 00000004 ????????????????    <1>     .qValue     resq 1      ;One value qword
    34                              <1>     .sVarName:              ;Up to 40 chars for the var name
    35                              <1> endstruc
    36                              <1> 
    37                              <1> struc stringBlock
    38                              <1>     memBlockM
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    39 00000004 <res 100h>          <1>     .string     resb maxLineLen    ;Strings allocate 256 chars
    40                              <1>     .sVarName:              ;Up to 40 chars for the var name
    41                              <1> endstruc
    42                              <1> 
    43                              <1> ;Variable equates
    44                              <1> intEquate  equ 0
    45                              <1> strEquate  equ 1
     5                                  Segment .text align=1
     6                                  %include "RELOC.ASM"
     7 00000000 55AA                <1>     dw 0AA55h 
     8                              <1> ;First verify I have Enough RAM for my program and then run
     9 00000002 B801E80000          <1>     mov eax, 0E801h ;Get low memory count in ax
    10 00000007 CD35                <1>     int 35h
    11 00000009 663D0008            <1>     cmp ax, 200000h/400h ;Divide 2Mb into 1Kb chunks.
    12 0000000D 722A                <1>     jb bad
    13 0000000F B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    14 00000014 0F32                <1>     rdmsr
    15 00000016 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    16 00000018 48C1E720            <1>     shl rdi, 20h        ;Shift high
    17 0000001C 89C7                <1>     mov edi, eax        ;Get the low dword in
    18 0000001E 4889F8              <1>     mov rax, rdi
    19 00000021 488D35(00000000)    <1>     lea rsi, section.resSeg.start
    20 00000028 4881C7[26110000]    <1>     add rdi, bssLen
    21 0000002F B900100000          <1>     mov ecx, 1000h
    22 00000034 F348A5              <1>     rep movsq
    23 00000037 FFE0                <1>     jmp qword rax
    24                              <1> bad:
    25 00000039 488D2D0D000000      <1>     lea rbp, badmsg
    26 00000040 B804130000          <1>     mov eax, 1304h
    27 00000045 CD30                <1>     int 30h
    28 00000047 30E4                <1>     xor ah, ah
    29 00000049 CD36                <1>     int 36h
    30 0000004B CD38                <1>     int 38h
    31 0000004D 4E6F7420456E6F7567- <1> badmsg: db "Not Enough Memory. Press any key to enter SYSDEBUG...",0
    31 00000056 68204D656D6F72792E- <1>
    31 0000005F 20507265737320616E- <1>
    31 00000068 79206B657920746F20- <1>
    31 00000071 656E74657220535953- <1>
    31 0000007A 44454255472E2E2E00  <1>
     7                                  Segment dSeg nobits align=1 start=0
     8                                  %include "BSS.ASM"
     9 00000000 <res FC0h>          <1> stack       resq 200h - 8  ;Save 4Kb stack space
    10 00000FC0 ????????????????    <1> stacktop    resq 1
    11                              <1> 
    12                              <1> maxLineLen  equ 256
    13 00000FC8 <res 100h>          <1> inString    resb maxLineLen         ;256 character input string
    14                              <1> 
    15                              <1> ;This string is used for printing long numbers and saving
    16                              <1> ; the variable names for string comparisons
    17                              <1> digitStringLen  equ 48
    18 000010C8 <res 30h>           <1> digitString resb digitStringLen     
    19                              <1> 
    20 000010F8 ????????????????    <1> minMemAddr  resq 1  ;Pointer from where to start allocating memory blocks
    21 00001100 ????????????????    <1> maxMemAddr  resq 1  ;Pointer to the byte past which we cannot allocate anything
    22                              <1> ;==============================================================================
    23                              <1> ;This is the SDA for each program and must be included in the program area
    24                              <1> ; once we add the ability to save the program to disk.
    25                              <1> ;==============================================================================
    26                              <1> 
    27                              <1> ;void* mcbChain, lastBlock, firstLinPtr = -1 => New program, empty entries
    28                              <1> 
    29 00001108 ??                  <1> strLen      resb 1  ;Counter for number of chars entered in string
    30 00001109 ??                  <1> stateByte   resb 1  ;TROFF/TRON etc, unused for now
    31 0000110A ????????????????    <1> mcbChain    resq 1  ;Pointer to the start of the chain
    32 00001112 ????????????????    <1> lastBlock   resq 1  ;Pointer to the last block
    33 0000111A ????????????????    <1> firstLinPtr resq 1  ;Pointer to the programs' first line 
    34 00001122 ????                <1> firstLinNum resw 1  ;Line number of the first line of the program
    35 00001124 ????                <1> currentLine resw 1  ;Currently being executed line number
    36                              <1> 
    37                              <1> bssLen: ;Needed to compute the resident portion load location
     9                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1
    10                                  %include "MAIN.ASM"
    11                              <1> start:
    12 00000000 B801C50000          <1>     mov eax, 0C501h
    13 00000005 CD35                <1>     int 35h         ;Connect the debugger
    14 00000007 E85F010000          <1>     call ttyClear   ;Clear the teletype
    15                              <1>     ;Memory stuff
    16 0000000C 488D2DC1080000      <1>     lea rbp, mainmsg
    17 00000013 E846010000          <1>     call ttyOutString
    18 00000018 E850080000          <1>     call memoryDetection
    19 0000001D 488D2DC4080000      <1>     lea rbp, bytemsg
    20 00000024 E835010000          <1>     call ttyOutString
    21 00000029 E87B040000          <1>     call newProgram         ;Use this to reset program pointers
    22                              <1> mainLoop:
    23 0000002E FC                  <1>     cld                 ;Set default string op direction
    24 0000002F 488D25(C00F0000)    <1>     lea rsp, stacktop    ;Reinitialize stack pointer
    25 00000036 488D05F1FFFFFF      <1>     lea rax, mainLoop
    26 0000003D 50                  <1>     push rax    ;Save address on stack
    27 0000003E 488D2D8A080000      <1>     lea rbp, prompt
    28 00000045 E814010000          <1>     call ttyOutString
    29                              <1> .ml0:
    30                              <1> ;This section will execute an input line if it is an interactive expression
    31                              <1> ; or store it in the program if it has a line number.
    32                              <1> ;It will keep accepting lines until a line is entered without a line number
    33 0000004A E872000000          <1>     call getLineInput
    34 0000004F E858050000          <1>     call decimalToHex   ;Check to see if we have a valid line number
    35                              <1>     ;xchg bx, bx
    36 00000054 6685C0              <1>     test ax, ax
    37 00000057 750F                <1>     jnz .saveLine
    38                              <1> ;Here we execute the line
    39                              <1> .ml1:
    40 00000059 E826010000          <1>     call executeExpression
    41                              <1>     ;Now see if the line has any more expressions by checking for :
    42 0000005E E8D5030000          <1>     call findOtherExpressionsOnLine
    43 00000063 84C0                <1>     test al, al ;If al is null, no more expressions on the line
    44 00000065 75F2                <1>     jnz .ml1    ;Execute portion
    45 00000067 C3                  <1>     ret
    46                              <1> .saveLine:
    47                              <1>     ;ax has the line number
    48 00000068 6689C2              <1>     mov dx, ax
    49 0000006B E88C060000          <1>     call searchForProgramLine
    50 00000070 4881FBFFFFFFFF      <1>     cmp rbx, -1
    51 00000077 751D                <1>     jne .commonProc ;If not equal, line must exist, continue
    52 00000079 E8CE010000          <1>     call spaceSkip  ;Skip all the prceeding spaces
    53 0000007E 803E00              <1>     cmp byte [rsi], 0  ;Is the first non space char the end of the string?
    54 00000081 742D                <1>     je .lineDoesntExist
    55                              <1>     ;So we have a new line that isn't empty, allocate a new block for this line
    56 00000083 E8A5050000          <1>     call allocateBlock  ;Return a default block in rbx
    57 00000088 C6430300            <1>     mov byte [rbx + progLineBlock.bBlockType], progLineBlockType
    58 0000008C 66894304            <1>     mov word [rbx + progLineBlock.wLineNum], ax
    59 00000090 66C743010E01        <1>     mov word [rbx + progLineBlock.wBlockSize], progLineBlock_size
    60                              <1> .commonProc:
    61                              <1>     ;If the line already exists, simply override the stored string
    62                              <1>     ;rbx has a pointer to the block
    63 00000096 E8C4070000          <1>     call strlen ;Get the string length
    64 0000009B 488D7B0E            <1>     lea rdi, qword [rbx + progLineBlock.sLine]  ;Get address here
    65 0000009F E8B2070000          <1>     call strcpy ;Copy the program string to the program block
    66 000000A4 56                  <1>     push rsi
    67 000000A5 4889DE              <1>     mov rsi, rbx    ;Move the block into rsi
    68 000000A8 E872060000          <1>     call insertProgramLine
    69 000000AD 5E                  <1>     pop rsi
    70 000000AE EB9A                <1>     jmp short .ml0
    71                              <1> .lineDoesntExist:
    72 000000B0 488D2DA9080000      <1>     lea rbp, lineNoXist
    73                              <1> ;For any error, syntax or otherwise, come here
    74                              <1> criticalError:
    75                              <1> ;Called with rbp pointing at error message
    76 000000B7 E8A2000000          <1>     call ttyOutString
    77 000000BC E96DFFFFFF          <1>     jmp mainLoop    ;Trash input line, restart line input
    11                                  %include "TTY.ASM"
    12                              <1> getLineInput:
    13                              <1>     ;Sets rsi to the inputstring
    14 000000C1 30E4                <1>     xor ah, ah
    15 000000C3 8825(08110000)      <1>     mov byte [strLen], ah   ;Zero the char counter
    16 000000C9 488D3D(C80F0000)    <1>     lea rdi, inString   ;Move to start of line
    17 000000D0 4889FE              <1>     mov rsi, rdi
    18 000000D3 57                  <1>     push rdi
    19 000000D4 B900010000          <1>     mov ecx, maxLineLen
    20 000000D9 B00D                <1>     mov al, 0Dh    ;Ensure the input line is sanitised
    21 000000DB F3AA                <1>     rep stosb
    22 000000DD 5F                  <1>     pop rdi
    23                              <1> .getChar:
    24 000000DE E883000000          <1>     call ttyIn
    25 000000E3 3C0D                <1>     cmp al, 0Dh ;Line Feed
    26 000000E5 7456                <1>     je .gliExit
    27 000000E7 3C08                <1>     cmp al, 08h ;Bspace
    28 000000E9 740F                <1>     je .glibspace
    29 000000EB 803D(08110000)FE    <1>     cmp byte [strLen], -2   ;If at max length (255 chars), simply beep and wait for either bspace or enter
    30 000000F2 7459                <1>     je .gliFull 
    31 000000F4 84C0                <1>     test al, al
    32 000000F6 7443                <1>     je .gliExtendedChar
    33 000000F8 EB29                <1>     jmp short .gliCheckCase
    34                              <1> .glibspace:
    35 000000FA F605(08110000)FF    <1>     test byte [strLen], -1  ;This will only be zero if strLen=0
    36 00000101 74DB                <1>     jz .getChar
    37 00000103 48FFCF              <1>     dec rdi ;Go back by one position in the input line
    38 00000106 FE0D(08110000)      <1>     dec byte [strLen]
    39 0000010C B008                <1>     mov al, 08h
    40 0000010E E846000000          <1>     call ttyOutChar
    41 00000113 B020                <1>     mov al, 20h  
    42 00000115 E83F000000          <1>     call ttyOutChar
    43 0000011A B008                <1>     mov al, 08h
    44 0000011C E838000000          <1>     call ttyOutChar
    45 00000121 EBBB                <1>     jmp short .getChar
    46                              <1> .gliCheckCase:
    47                              <1>     ;al has char
    48 00000123 E831000000          <1>     call ttyOutChar ;Echo the char as is, but store it uppercase
    49 00000128 3C61                <1>     cmp al, "a"
    50 0000012A 7206                <1>     jb .gliccStore
    51 0000012C 3C7A                <1>     cmp al, "z"
    52 0000012E 7702                <1>     ja .gliccStore
    53 00000130 2C20                <1>     sub al, 20h
    54                              <1> .gliccStore:
    55 00000132 AA                  <1>     stosb   ;Increment the pointer, add char to buffer
    56 00000133 FE05(08110000)      <1>     inc byte [strLen]   ;Inc char count
    57 00000139 EBA3                <1>     jmp short .getChar
    58                              <1> .gliExtendedChar:
    59                              <1>     ;Currently, extended chars do nothing, 
    60                              <1>     ; eventually add F1-F10 functionality
    61                              <1>     ; and arrow key support
    62 0000013B EBA1                <1>     jmp short .getChar
    63                              <1> .gliExit:
    64 0000013D 488D2DB2070000      <1>     lea rbp, crlf
    65 00000144 E815000000          <1>     call ttyOutString
    66 00000149 C60700              <1>     mov byte [rdi], 0   ;Null terminate string here
    67 0000014C C3                  <1>     ret
    68                              <1> .gliFull:
    69 0000014D B007                <1>     mov al, 07h
    70 0000014F E805000000          <1>     call ttyOutChar
    71 00000154 E985FFFFFF          <1>     jmp .getChar
    72                              <1> 
    73                              <1> ttyOutChar:
    74 00000159 B40E                <1>     mov ah, 0Eh
    75 0000015B CD30                <1>     int 30h
    76 0000015D C3                  <1>     ret
    77                              <1> ttyOutString:
    78 0000015E B804130000          <1>     mov eax, 1304h
    79 00000163 CD30                <1>     int 30h
    80 00000165 C3                  <1>     ret
    81                              <1> ttyIn:
    82 00000166 30E4                <1>     xor ah, ah
    83 00000168 CD36                <1>     int 36h
    84 0000016A C3                  <1>     ret
    85                              <1> ttyClear:
    86 0000016B B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
    87 00000170 CD30                <1>     int 30h
    88 00000172 B402                <1>     mov ah, 02h
    89 00000174 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
    90 00000176 88D7                <1>     mov bh, dl      ;Set cursor for page 0
    91 00000178 CD30                <1>     int 30h
    92 0000017A B707                <1>     mov bh, 07h     ;Grey/Black attribs
    93 0000017C B800060000          <1>     mov eax, 0600h  ;Clear whole screen
    94 00000181 CD30                <1>     int 30h
    95 00000183 C3                  <1>     ret
    12                                  %include "PROCESS.ASM"
    13                              <1> executeExpression:
    14                              <1> ;rsi must point to the start of the portion of the line to execute
    15 00000184 E8C3000000          <1>     call spaceSkip  ;Skip any leading spaces
    16 00000189 803E00              <1>     cmp byte [rsi], 0   ;Null terminated line, empty line?
    17 0000018C 743F                <1>     je .exit
    18                              <1>     ;rsi now points to function
    19 0000018E 488D3DAD020000      <1>     lea rdi, funTbl     ;Point rdi to the function table
    20                              <1> .functionFinderLoop:
    21 00000195 0FB60F              <1>     movzx ecx, byte [rdi]  ;Get the string length  
    22 00000198 80F9FF              <1>     cmp cl, -1  ;-1 is the end of table marker, either Var assignment or error
    23 0000019B 7431                <1>     je .variableAssignment 
    24 0000019D 56                  <1>     push rsi    ;Save ptr to start of string on stack 
    25 0000019E 57                  <1>     push rdi
    26 0000019F 48FFC7              <1>     inc rdi             ;Goto first char in function name
    27 000001A2 F3A6                <1>     repe cmpsb
    28 000001A4 5F                  <1>     pop rdi
    29 000001A5 5E                  <1>     pop rsi     ;Return ptr to start of string pointer from stack
    30 000001A6 84C9                <1>     test cl, cl ;Did all the chars match?
    31 000001A8 740F                <1>     jz .functionFound
    32 000001AA 480FB607            <1>     movzx rax, byte [rdi]    ;Skip unnecessary function pointer
    33 000001AE 480502000000        <1>     add rax, 2      ;Add 2 to skip relative pointer
    34 000001B4 4801C7              <1>     add rdi, rax
    35 000001B7 EBDC                <1>     jmp short .functionFinderLoop
    36                              <1> .functionFound:
    37                              <1>     ;Function found! Execute!
    38                              <1>     ;rsi points to start of expression to evaluate for function
    39                              <1>     ;rdi points to table entry
    40 000001B9 488D1D82020000      <1>     lea rbx, funTbl         ;Get table address
    41 000001C0 480FB617            <1>     movzx rdx, byte [rdi]   ;Get pascal string length
    42 000001C4 0FB71417            <1>     movzx edx, word [rdi + rdx]    ;Add pascal strlen to table entry and get ptr
    43 000001C8 4801D3              <1>     add rbx, rdx    ;Add word offset to table base
    44 000001CB FFE3                <1>     jmp rbx ;Goto function pointer in rbx
    45                              <1> .exit:
    46 000001CD C3                  <1>     ret
    47                              <1> 
    48                              <1> .variableAssignment:
    49                              <1>     ;Establish if the string is a variable assignment or not
    50                              <1>     ;rsi points to start of string
    51 000001CE E884000000          <1>     call getVarNameLength   ;Get the variable name length
    52 000001D3 4889F7              <1>     mov rdi, rsi    ;Save ptr to start of string in rdi
    53 000001D6 4801CE              <1>     add rsi, rcx    ;Go to end of string
    54 000001D9 E86E000000          <1>     call spaceSkip  ;Skip spaces after the end of the var name
    55 000001DE AC                  <1>     lodsb   ;Get the first char after the spaces. This must be a =
    56 000001DF 3C3D                <1>     cmp al, "="
    57 000001E1 7551                <1>     jne .syntaxError
    58 000001E3 4889FE              <1>     mov rsi, rdi    ;Return rsi to the start of the string name
    59 000001E6 4801CE              <1>     add rsi, rcx    ;Go to end of var name
    60 000001E9 48FFCE              <1>     dec rsi
    61 000001EC AC                  <1>     lodsb   ;Get last char into al and inc rsi
    62 000001ED 3C24                <1>     cmp al, "$"
    63 000001EF 7420                <1>     je .stringAssignment
    64 000001F1 E856000000          <1>     call spaceSkip  ;Skip any spaces
    65 000001F6 48FFC6              <1>     inc rsi         ;Go past the equality sign
    66 000001F9 E84E000000          <1>     call spaceSkip  ;Skip any spaces
    67 000001FE 803E22              <1>     cmp byte [rsi], 22h ;Open speech mark
    68 00000201 743D                <1>     je .typError    ;Integers cant have speechmarks
    69 00000203 E897000000          <1>     call handleAlgebraicExpression  ;Get the result of the expression into rax
    70 00000208 4889FE              <1>     mov rsi, rdi    ;Return the start of the string into rsi
    71 0000020B E8E4010000          <1>     call setNumericVariable
    72 00000210 C3                  <1>     ret
    73                              <1> .stringAssignment:
    74                              <1> ;This simply copies the string which is either speech mark, 0 or : terminated
    75                              <1> ;First allocate a string
    76                              <1> ;rsi = First char after the end of the variable name
    77                              <1> ;rdi = start of variable name 
    78                              <1> ;rcx = char count for var name
    79 00000211 E836000000          <1>     call spaceSkip  ;Skip any spaces
    80 00000216 48FFC6              <1>     inc rsi         ;Go past the equality sign
    81 00000219 E82E000000          <1>     call spaceSkip  ;Skip any spaces
    82 0000021E 803E22              <1>     cmp byte [rsi], 22h ;Open speechmark check again
    83 00000221 751D                <1>     jne .typError    ;Assigning a number to a string is a type error
    84                              <1>     ;rsi now points to the start of the string to save
    85 00000223 48FFC6              <1>     inc rsi ;Go past the speech mark
    86 00000226 4889F2              <1>     mov rdx, rsi    ;save start of string data in rdx
    87 00000229 4889FE              <1>     mov rsi, rdi
    88 0000022C 57                  <1>     push rdi
    89 0000022D E8F9010000          <1>     call setStringVariable
    90 00000232 5E                  <1>     pop rsi ;Save the start of the assignment in rsi
    91 00000233 C3                  <1>     ret
    92                              <1> 
    93                              <1> .syntaxError:
    94 00000234 488D2D06070000      <1>     lea rbp, syntax ;Syntax error, keyword a bit confused
    95 0000023B E977FEFFFF          <1>     jmp criticalError
    96                              <1> .typError:
    97 00000240 488D2D09070000      <1>     lea rbp, typeError
    98 00000247 E96BFEFFFF          <1>     jmp criticalError
    99                              <1> 
    13                                  %include "PARSE.ASM"
    14                              <1> ;Main Parsing Routines go here
    15                              <1> 
    16                              <1> spaceSkip:
    17                              <1> ;Allows us to skip spaces that might have been placed for
    18                              <1> ; ease of reading by the user.
    19                              <1> ;Input: rsi = Pointer to string
    20                              <1> ;Output: rsi = First non space character encountered
    21 0000024C 803E20              <1>     cmp byte [rsi], " "
    22 0000024F 7505                <1>     jne .exit
    23 00000251 48FFC6              <1>     inc rsi
    24 00000254 EBF6                <1>     jmp short spaceSkip
    25                              <1> .exit:
    26 00000256 C3                  <1>     ret
    27                              <1> 
    28                              <1> getVarNameLength:
    29                              <1> ;Called pointing to the buffer with the var name in it
    30                              <1> ;Input: rsi = Start of var name
    31                              <1> ;Output: ecx = Length of varname
    32 00000257 50                  <1>     push rax
    33 00000258 56                  <1>     push rsi
    34 00000259 57                  <1>     push rdi
    35 0000025A 53                  <1>     push rbx
    36 0000025B 52                  <1>     push rdx
    37 0000025C 31D2                <1>     xor edx, edx    ;Clear counter of chars
    38 0000025E 488D1DA6060000      <1>     lea rbx, varChrs    ;Get the list of valid variable name chars
    39                              <1> .search:
    40 00000265 4889DF              <1>     mov rdi, rbx    ;Save pointer in rbx
    41 00000268 AC                  <1>     lodsb       ;Get the first char into al
    42 00000269 B926000000          <1>     mov ecx, numVarChars
    43 0000026E F2AE                <1>     repne scasb       ;Look for char in the valid chars list
    44 00000270 750A                <1>     jne .exit   ;Char not found, drop it
    45 00000272 FFC2                <1>     inc edx     ;Add one to number of chars found
    46 00000274 81FA28000000        <1>     cmp edx, 40 ;At position for char 40?
    47 0000027A 72E9                <1>     jb .search  ;Whilst below, keep going
    48                              <1> .exit:
    49 0000027C 89D1                <1>     mov ecx, edx
    50 0000027E 5A                  <1>     pop rdx
    51 0000027F 5B                  <1>     pop rbx
    52 00000280 5F                  <1>     pop rdi
    53 00000281 5E                  <1>     pop rsi
    54 00000282 58                  <1>     pop rax
    55 00000283 C3                  <1>     ret
    56                              <1> 
    57                              <1> getVarType:
    58                              <1> ;Input: rsi = Start of var name
    59                              <1> ;       rcx = Length of varname
    60                              <1> ;Output: ebx = 0 => Integer
    61                              <1> ;        ebx = 1 => String
    62                              <1> ;        ebx = -1 => Var doesnt exist, caller handles
    63 00000284 50                  <1>     push rax
    64 00000285 51                  <1>     push rcx
    65 00000286 56                  <1>     push rsi
    66 00000287 E800040000          <1>     call findVariable
    67 0000028C 4881FBFFFFFFFF      <1>     cmp rbx, -1
    68 00000293 7406                <1>     je .exit
    69 00000295 0FB65B03            <1>     movzx ebx, byte [rbx + memBlock.bBlockType]
    70 00000299 FFCB                <1>     dec ebx
    71                              <1> .exit:
    72 0000029B 5E                  <1>     pop rsi
    73 0000029C 59                  <1>     pop rcx
    74 0000029D 58                  <1>     pop rax
    75 0000029E C3                  <1>     ret
    76                              <1> 
    77                              <1> handleAlgebraicExpression:
    78                              <1> ;Input: rsi = Points to a mathematical expression
    79                              <1> ;Output: rax = Result of said expression
    80                              <1> ;Declares a syntax error if weird chars found
    81                              <1> ;Declares a type error if a string variable found
    82                              <1>     ;Handle Logical Connectives here
    83 0000029F 66813E4E4F          <1>     cmp word [rsi], "NO"
    84 000002A4 7504                <1>     jne .hae0
    85 000002A6 807E0254            <1>     cmp byte [rsi + 2], "T"
    86                              <1> ;    je .not
    87                              <1> .hae0:
    88 000002AA 66813E414E          <1>     cmp word [rsi], "AN"
    89 000002AF 7504                <1>     jne .hae1
    90 000002B1 807E0244            <1>     cmp byte [rsi + 2], "D"
    91                              <1> ;    je .and
    92                              <1> .hae1:
    93 000002B5 66813E4F52          <1>     cmp word [rsi], "OR"
    94                              <1> ;    je .or
    95 000002BA 66813E584F          <1>     cmp word [rsi], "XO"
    96 000002BF 7504                <1>     jne .hae2
    97 000002C1 807E0252            <1>     cmp byte [rsi + 2], "R"
    98                              <1> ;    je .xor
    99                              <1> .hae2:
   100 000002C5 66813E494D          <1>     cmp word [rsi], "IM"
   101 000002CA 7504                <1>     jne .relationals
   102 000002CC 807E0250            <1>     cmp byte [rsi + 2], "P"
   103                              <1> ;    je .implicaton
   104                              <1> .relationals:
   105                              <1>     ;Handle Relational connectives
   106 000002D0 803E3D              <1>     cmp byte [rsi], "="
   107                              <1> ;    je .equivalence
   108 000002D3 66813E3C3E          <1>     cmp word [rsi], "<>"
   109                              <1> ;    je .neq
   110 000002D8 66813E3E3C          <1>     cmp word [rsi], "><"
   111                              <1> ;    je .neq
   112 000002DD 803E3C              <1>     cmp byte [rsi], "<"
   113                              <1> ;    je .less
   114 000002E0 803E3E              <1>     cmp byte [rsi], ">"
   115                              <1> ;    je .greater
   116 000002E3 66813E3C3D          <1>     cmp word [rsi], "<="
   117                              <1> ;    je .leq
   118 000002E8 66813E3E3D          <1>     cmp word [rsi], ">="
   119                              <1> ;    je .geq
   120 000002ED E828000000          <1>     call .handleSecondLevel
   121                              <1> .parseAdditiveOperators:    
   122 000002F2 803E2D              <1>     cmp byte [rsi], '-'
   123 000002F5 7415                <1>     je .processMinus
   124 000002F7 803E2B              <1>     cmp byte [rsi], '+'
   125 000002FA 0F8592000000        <1>     jne .exit              ;No operators, expression evaluated, exit
   126 00000300 50                  <1>     push rax
   127 00000301 E811000000          <1>     call .handleSecondLevelSkip   ;Parse second level
   128                              <1> .processAdd:    
   129 00000306 59                  <1>     pop rcx
   130 00000307 4801C8              <1>     add rax, rcx           ;Add the two numbers
   131 0000030A EBE6                <1>     jmp short .parseAdditiveOperators  ;Search again for + or -
   132                              <1> .processMinus:
   133 0000030C 50                  <1>     push rax
   134 0000030D E805000000          <1>     call .handleSecondLevelSkip   ;Parse second level
   135 00000312 48F7D8              <1>     neg rax              ;Change a - b to a + -b
   136 00000315 EBEF                <1>     jmp short .processAdd
   137                              <1> 
   138                              <1> ;Level 2, Division and multiplication
   139                              <1> 
   140                              <1> .handleSecondLevelSkip:
   141 00000317 48FFC6              <1>     inc rsi              ;Skip the op symbol
   142                              <1> .handleSecondLevel:
   143 0000031A E82C000000          <1>     call .handleThirdLevel      ;Call third level
   144                              <1> .parseProductOperators:   
   145 0000031F 803E2F              <1>     cmp byte [rsi], '/'
   146 00000322 7411                <1>     je .processDiv
   147 00000324 803E2A              <1>     cmp byte [rsi], '*'
   148 00000327 7569                <1>     jne .exit           ;Neither multiplication or division, return up a level
   149                              <1> 
   150 00000329 50                  <1>     push rax
   151 0000032A E819000000          <1>     call .handleThirdLevelSkip   ;Call third level
   152 0000032F 59                  <1>     pop rcx
   153 00000330 48F7E9              <1>     imul rcx             ; Multiplication
   154 00000333 EBEA                <1>     jmp short .parseProductOperators   ;Search again for * or /
   155                              <1> 
   156                              <1> .processDiv:
   157 00000335 50                  <1>     push rax
   158 00000336 E80D000000          <1>     call .handleThirdLevelSkip   ;Call third level
   159 0000033B 59                  <1>     pop rcx
   160 0000033C 4891                <1>     xchg rax, rcx
   161 0000033E 31D2                <1>     xor edx, edx         ;Clear rdx for rdx:rax
   162 00000340 48F7F9              <1>     idiv rcx             ;Signed division
   163 00000343 E9D7FFFFFF          <1>     jmp .parseProductOperators         ;Search again for * or /
   164                              <1> 
   165                              <1> ;Level 3, Brackets, numbers and vars.
   166                              <1> 
   167                              <1> .handleThirdLevelSkip:
   168 00000348 48FFC6              <1>     inc rsi             ;Skip the op symbol
   169                              <1> .handleThirdLevel:
   170 0000034B E8FCFEFFFF          <1>     call spaceSkip
   171 00000350 AC                  <1>     lodsb               ;Read char and adv rsi
   172 00000351 3C28                <1>     cmp al, '('
   173 00000353 750C                <1>     jne .notBracket
   174 00000355 E845FFFFFF          <1>     call handleAlgebraicExpression  ;Parse the inner expression
   175 0000035A 803E29              <1>     cmp byte [rsi], ')'   
   176 0000035D 744D                <1>     je .closeBracket     ;If close bracket, goto skip spaces
   177 0000035F EB53                <1>     jmp short .error     ;Otherwise, error
   178                              <1> 
   179                              <1> .notBracket:    
   180 00000361 3C5E                <1>     cmp al, "^"
   181 00000363 742E                <1>     je .exponentFound
   182                              <1> .varConstCheck:
   183 00000365 3C41                <1>     cmp al, "A"       ;Alphabetical first char?
   184 00000367 730D                <1>     jae .varOrRNDFound      ;Yes, variable found or rnd function or error
   185 00000369 48FFCE              <1>     dec rsi            ;Else back one symbol 
   186 0000036C E83B020000          <1>     call decimalToHex  ;to read number into rax
   187 00000371 E9D6FEFFFF          <1>     jmp spaceSkip
   188                              <1> 
   189                              <1> .varOrRNDFound:
   190 00000376 3C5A                <1>     cmp al, "Z"  
   191 00000378 773A                <1>     ja .error   ;Syntax error if char not between A-Z  
   192 0000037A 3C52                <1>     cmp al, "R"
   193 0000037C 7517                <1>     jne .varFound
   194 0000037E 803E4E              <1>     cmp byte [rsi], "N" ;rsi was advanced by 1, check 
   195 00000381 7512                <1>     jne .varFound
   196 00000383 807E0144            <1>     cmp byte [rsi+1], "D"
   197 00000387 750C                <1>     jne .varFound
   198 00000389 66AD                <1>     lodsw               ;Advance rsi by 3
   199 0000038B AC                  <1>     lodsb
   200 0000038C E440                <1>     in al, 40h         ;Read timer counter 0
   201 0000038E 480FB6C0            <1>     movzx rax, al
   202                              <1> .exit:
   203 00000392 C3                  <1>     ret                ;Return
   204                              <1> .exponentFound:
   205 00000393 EBD0                <1>    jmp short .varConstCheck
   206                              <1> .varFound:    
   207 00000395 48FFCE              <1>     dec rsi ;Back a char
   208 00000398 51                  <1>     push rcx
   209 00000399 E8B9FEFFFF          <1>     call getVarNameLength
   210 0000039E E81D000000          <1>     call getNumericVariable ;Get variable value in rax
   211 000003A3 4801CE              <1>     add rsi, rcx    ;Go past the edge of the name
   212 000003A6 59                  <1>     pop rcx
   213 000003A7 E9A0FEFFFF          <1>     jmp spaceSkip
   214                              <1> 
   215                              <1> .closeBracket:
   216 000003AC 48FFC6              <1>     inc rsi
   217 000003AF E998FEFFFF          <1>     jmp spaceSkip
   218                              <1> .error:
   219 000003B4 488D2D86050000      <1>     lea rbp, syntax
   220 000003BB E9F7FCFFFF          <1>     jmp criticalError
   221                              <1> 
   222                              <1> 
   223                              <1> getNumericVariable:
   224                              <1> ;Gets the value stored in a variable into rax 
   225                              <1> ;Input: rsi = Pointer to first char of a variable name
   226                              <1> ;Output: rax = Variable Value
   227                              <1> ;        rsi = Pointer to first char of a variable name
   228 000003C0 56                  <1>     push rsi
   229 000003C1 51                  <1>     push rcx
   230 000003C2 53                  <1>     push rbx
   231 000003C3 E88FFEFFFF          <1>     call getVarNameLength   ;Returns the length of the var name in cx
   232 000003C8 E8BF020000          <1>     call findVariable       ;Returns a pointer to the variable block in rbx
   233 000003CD 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Variable doesnt exist? Pretend it is 0
   234 000003D4 740E                <1>     je .noVar
   235 000003D6 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
   236 000003DA 750C                <1>     jne .stringFoundError
   237 000003DC 488B4304            <1>     mov rax, qword [rbx + varBlock.qValue]
   238                              <1> .exit:
   239 000003E0 5B                  <1>     pop rbx
   240 000003E1 59                  <1>     pop rcx
   241 000003E2 5E                  <1>     pop rsi
   242 000003E3 C3                  <1>     ret
   243                              <1> .noVar:
   244 000003E4 31C0                <1>     xor eax, eax
   245 000003E6 EBF8                <1>     jmp short .exit
   246                              <1> .stringFoundError:
   247 000003E8 488D2D61050000      <1>     lea rbp, typeError
   248 000003EF E9C3FCFFFF          <1>     jmp criticalError
   249                              <1> 
   250                              <1> setNumericVariable:
   251                              <1> ;Sets the value stored in a variable
   252                              <1> ;Input: rsi = Pointer to first char of a variable name
   253                              <1> ;       rax = Variable value
   254                              <1> ;Output: rsi = Pointer to first char of variable name
   255 000003F4 56                  <1>     push rsi
   256 000003F5 51                  <1>     push rcx
   257 000003F6 53                  <1>     push rbx
   258                              <1> 
   259 000003F7 E85BFEFFFF          <1>     call getVarNameLength   ;Returns the length of the var name in cx
   260 000003FC E88B020000          <1>     call findVariable       ;Returns a pointer to the variable block in rbx
   261 00000401 4881FBFFFFFFFF      <1>     cmp rbx, -1             ;Variable doesnt exit?
   262 00000408 740E                <1>     je .makeEditInteger      ;Make one!
   263 0000040A 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
   264 0000040E 750F                <1>     jne .stringFoundError
   265 00000410 48894304            <1>     mov qword [rbx + varBlock.qValue], rax  ;Save value
   266                              <1> .exit:
   267 00000414 5B                  <1>     pop rbx
   268 00000415 59                  <1>     pop rcx
   269 00000416 5E                  <1>     pop rsi
   270 00000417 C3                  <1>     ret
   271                              <1> .makeEditInteger:
   272 00000418 E881030000          <1>     call makeEditInteger
   273 0000041D EBF5                <1>     jmp short .exit
   274                              <1> .stringFoundError:
   275 0000041F 488D2D2A050000      <1>     lea rbp, typeError
   276 00000426 E98CFCFFFF          <1>     jmp criticalError
   277                              <1> 
   278                              <1> setStringVariable:
   279                              <1> ;Sets the string pointed to by rdx
   280                              <1> ;Input: rsi = Pointer to first char of a variable name
   281                              <1> ;       rdx = Start of string
   282                              <1> ;Output: rsi = Pointer to first char of variable name
   283                              <1> ;Keeps adding characters until a 0, : or " encountered
   284                              <1> ;Adds a 0 to the end
   285 0000042B 51                  <1>     push rcx
   286 0000042C E826FEFFFF          <1>     call getVarNameLength   ;Gets the length of the var name in cx
   287 00000431 E8B3030000          <1>     call makeEditString     ;Returns a ptr to the var block in rbx
   288 00000436 59                  <1>     pop rcx
   289 00000437 C3                  <1>     ret
   290                              <1> 
   291                              <1> findOtherExpressionsOnLine:
   292                              <1> ;Input: rsi = start of line portion
   293                              <1> ;Output: rsi = points to first char after first ":" found
   294                              <1> ;         al = : if it was found or 00 if not
   295 00000438 AC                  <1>     lodsb
   296 00000439 3C00                <1>     cmp al, 0   ;Null hit, RIP procedure
   297 0000043B 7404                <1>     je .exit
   298 0000043D 3C3A                <1>     cmp al, ":" ;Strings can be terminated with a :
   299 0000043F 75F7                <1>     jne findOtherExpressionsOnLine
   300                              <1> .exit:
   301 00000441 C3                  <1>     ret
    14                                  %include "COMMANDS.ASM"
    15                              <1> 
    16                              <1> funTbl:
    17                              <1> ;Use PASCAL strings to know how long the comparisons need to be
    18                              <1> ;All function pointers are saved as distances from the head
    19                              <1> ; of the function table
    20 00000442 044C4554            <1>     db 4, "LET"     ;DONE
    21 00000446 5700                <1>     dw oldSchoolAssignemnt - funTbl
    22 00000448 044E4557            <1>     db 4, "NEW"     ;DONE
    23 0000044C 6700                <1>     dw newProgram - funTbl 
    24                              <1> 
    25 0000044E 054C495354          <1>     db 5, "LIST"
    26 00000453 BB00                <1>     dw listProgram - funTbl 
    27                              <1> 
    28 00000455 0452554E            <1>     db 4, "RUN"
    29 00000459 BE00                <1>     dw runProgram - funTbl
    30                              <1> 
    31 0000045B 065052494E54        <1>     db 6, "PRINT"    ;ALMOST DONE
    32 00000461 C100                <1>     dw printStatement - funTbl
    33                              <1> 
    34 00000463 023F                <1>     db 2, "?"        ;ALMOST DONE
    35 00000465 C100                <1>     dw printStatement - funTbl
    36                              <1> 
    37 00000467 06494E505554        <1>     db 6, "INPUT"
    38 0000046D 5301                <1>     dw getInput - funTbl
    39                              <1> 
    40 0000046F 034946              <1>     db 3, "IF"
    41 00000472 5601                <1>     dw handleIf - funTbl
    42                              <1> 
    43 00000474 05474F544F          <1>     db 5, "GOTO"
    44 00000479 5901                <1>     dw fancyJmp - funTbl
    45                              <1> 
    46 0000047B 0753595354454D      <1>     db 7, "SYSTEM"
    47 00000482 5C01                <1>     dw returnToDOS - funTbl
    48                              <1> 
    49 00000484 04464F52            <1>     db 4, "FOR"
    50 00000488 5F01                <1>     dw forLoop - funTbl
    51                              <1> 
    52 0000048A 04434C53            <1>     db 4, "CLS"     ;DONE
    53 0000048E 6201                <1>     dw cls - funTbl
    54                              <1> 
    55 00000490 064445425547        <1>     db 6, "DEBUG"
    56 00000496 6701                <1>     dw dbgr - funTbl
    57                              <1> 
    58 00000498 FF                  <1>     db -1    ;Demarkate the end of the table
    59                              <1> oldSchoolAssignemnt:
    60                              <1> ;
    61 00000499 0FB60F              <1>     movzx ecx, byte [rdi]
    62 0000049C 4801CE              <1>     add rsi, rcx
    63 0000049F E8A8FDFFFF          <1>     call spaceSkip  ;Goto var assignment as if at start of line
    64 000004A4 E925FDFFFF          <1>     jmp executeExpression.variableAssignment
    65                              <1> newProgram: 
    66                              <1> ;Simply reset the program pointers
    67 000004A9 488D05(00000000)    <1>     lea rax, section.programArea.vstart
    68 000004B0 488905(F8100000)    <1>     mov qword [minMemAddr], rax
    69 000004B7 488905(12110000)    <1>     mov qword [lastBlock], rax  ;Start writing at this location
    70 000004BE 488905(0A110000)    <1>     mov qword [mcbChain], rax   ;Create a mock MCB here
    71 000004C5 C60072              <1>     mov byte [rax + memBlock.bSignature], lastMemBlock
    72 000004C8 66C740010000        <1>     mov word [rax + memBlock.wBlockSize], 0 ;Dummy block, no size, gets overwritten
    73 000004CE 31C0                <1>     xor eax, eax
    74 000004D0 8805(08110000)      <1>     mov byte [strLen], al
    75 000004D6 488D3D(C80F0000)    <1>     lea rdi, inString
    76 000004DD B900010000          <1>     mov ecx, maxLineLen
    77 000004E2 F3AA                <1>     rep stosb
    78 000004E4 C605(24110000)0A    <1>     mov byte [currentLine], 10  ;Default to line 10
    79 000004EB 48FFC8              <1>     dec rax ;rax = -1
    80 000004EE 488905(1A110000)    <1>     mov qword [firstLinPtr], rax ;No program in memory
    81 000004F5 668905(22110000)    <1>     mov word [firstLinNum], ax
    82 000004FC C3                  <1>     ret
    83                              <1> listProgram:
    84                              <1> ;Go line by line and echo the program lines, inserting a crlf after each
    85                              <1> ;First print the line number, then add a space
    86 000004FD B002                <1>     mov al, 2
    87 000004FF C3                  <1>     ret
    88                              <1> runProgram:
    89                              <1> ;Go to each line, one at a time, skip the line number and execute the expr
    90                              <1> ;First thing it does, takes the first line number and moves it to current line number
    91 00000500 B003                <1>     mov al, 3
    92 00000502 C3                  <1>     ret
    93                              <1> printStatement:
    94                              <1> ;Strings must be "" delimited or a string variable must be used
    95                              <1> ;rdi points to the command length
    96 00000503 0FB60F              <1>     movzx ecx, byte [rdi]
    97 00000506 4801CE              <1>     add rsi, rcx
    98                              <1> .printStart:
    99 00000509 E83EFDFFFF          <1>     call spaceSkip  ;move rsi to the start of the expression
   100 0000050E AC                  <1>     lodsb
   101 0000050F 84C0                <1>     test al, al     ;Is this a null string?
   102 00000511 746E                <1>     jz .psvexit
   103 00000513 3C22                <1>     cmp al, 022h    ;22h = ASCII Speechmarks
   104 00000515 7452                <1>     je .stringPrint
   105                              <1>     ;Here we check if the first char is ASCII, if it is, check if its a string var
   106 00000517 3C41                <1>     cmp al, "A"
   107 00000519 7204                <1>     jb .printExpr
   108 0000051B 3C5A                <1>     cmp al, "Z"
   109 0000051D 721A                <1>     jb .printStringVar
   110                              <1> .printExpr:
   111 0000051F 48FFCE              <1>     dec rsi ;Return to the start of the string
   112 00000522 E878FDFFFF          <1>     call handleAlgebraicExpression ;Gets value of a var and/or algebraic operation
   113 00000527 E8A8000000          <1>     call printdecimalword
   114 0000052C 488D2DC3030000      <1>     lea rbp, crlf
   115 00000533 E826FCFFFF          <1>     call ttyOutString
   116 00000538 C3                  <1>     ret
   117                              <1> .printStringVar:
   118                              <1>     ;Check if it is a string var
   119 00000539 48FFCE              <1>     dec rsi
   120 0000053C 6687DB              <1>     xchg bx, bx
   121 0000053F E813FDFFFF          <1>     call getVarNameLength
   122 00000544 E83BFDFFFF          <1>     call getVarType
   123 00000549 81FB01000000        <1>     cmp ebx, strEquate
   124 0000054F 75CE                <1>     jne .printExpr  ;rsi points to the same point as initially
   125 00000551 E836010000          <1>     call findVariable   ;ecx has string length, get block ptr in rbx
   126 00000556 55                  <1>     push rbp
   127 00000557 488D6B04            <1>     lea rbp, qword [rbx + stringBlock.string]
   128 0000055B E8FEFBFFFF          <1>     call ttyOutString
   129 00000560 5D                  <1>     pop rbp
   130 00000561 4801CE              <1>     add rsi, rcx    ;Go past variable
   131 00000564 E8E3FCFFFF          <1>     call spaceSkip
   132                              <1> .stringPrint:
   133 00000569 AC                  <1>     lodsb
   134 0000056A 3C00                <1>     cmp al, 0
   135 0000056C 7413                <1>     je .psvexit
   136 0000056E 3C3A                <1>     cmp al, ":"
   137 00000570 740F                <1>     je .psvexit
   138 00000572 3C22                <1>     cmp al, 022h    ;Close Speech marks, check next char
   139 00000574 7418                <1>     je .closespeechmarks
   140 00000576 3C3B                <1>     cmp al, ";"     ;Semicolon means print next section on same line
   141 00000578 748F                <1>     je .printStart
   142 0000057A E8DAFBFFFF          <1>     call ttyOutChar
   143 0000057F EBE8                <1>     jmp short .stringPrint
   144                              <1> .psvexit:
   145 00000581 488D2D6E030000      <1>     lea rbp, crlf
   146 00000588 E8D1FBFFFF          <1>     call ttyOutString
   147 0000058D C3                  <1>     ret
   148                              <1> .closespeechmarks:
   149 0000058E E8B9FCFFFF          <1>     call spaceSkip
   150 00000593 EBD4                <1>     jmp short .stringPrint
   151                              <1> getInput:
   152                              <1> ;Take a string as a prompt
   153 00000595 B005                <1>     mov al, 5
   154 00000597 C3                  <1>     ret
   155                              <1> handleIf:
   156                              <1> ;Evaluate the string after IF is greater than 0, THEN goto line x
   157                              <1> ;IF exp1 THEN exp2
   158 00000598 B006                <1>     mov al, 6
   159 0000059A C3                  <1>     ret
   160                              <1> fancyJmp:
   161                              <1> ;GOTO, the hell of every dumb high level programmer
   162 0000059B B007                <1>     mov al, 7
   163 0000059D C3                  <1>     ret
   164                              <1> returnToDOS:
   165 0000059E B008                <1>     mov al, 8
   166 000005A0 C3                  <1>     ret
   167                              <1> forLoop:
   168 000005A1 B009                <1>     mov al, 9
   169 000005A3 C3                  <1>     ret
   170                              <1> cls:
   171 000005A4 E9C2FBFFFF          <1>     jmp ttyClear
   172                              <1> dbgr:
   173 000005A9 CD38                <1>     int 38h
   174                              <1>     ;Reconnect CTRL+BREAK handler
   175 000005AB C3                  <1>     ret
    15                                  %include "MATH.ASM"
    16                              <1> decimalToHex:
    17                              <1>     ;Takes ASCII encoded decimal number and 
    18                              <1>     ;returns its hex value
    19                              <1>     ;Input: rsi = Start of numeric ONLY string
    20                              <1>     ;Output: rax = Number
    21                              <1>     ;        rsi = First non-numeric char past end of number
    22 000005AC 53                  <1>     push rbx
    23 000005AD 51                  <1>     push rcx
    24 000005AE 52                  <1>     push rdx
    25 000005AF 31DB                <1>     xor ebx, ebx    ;Start with rbx = 0
    26                              <1> .processDigits:    
    27 000005B1 AC                  <1>     lodsb           ;Get the first digit in al
    28 000005B2 2C30                <1>     sub al, 30h     ;Reduce to value
    29 000005B4 31D2                <1>     xor edx, edx    ;Clear for multiplication
    30 000005B6 3C0A                <1>     cmp al, 10      ;Digit valid? Propagte CF
    31 000005B8 480FB6C0            <1>     movzx rax, al   ;Clear upper bits
    32 000005BC 4893                <1>     xchg rax, rbx
    33 000005BE 730D                <1>     jnc .exit       ;Digit was not valid, exit
    34 000005C0 B90A000000          <1>     mov ecx, 10     ;Multiply result by 10
    35 000005C5 48F7E1              <1>     mul rcx
    36 000005C8 4801C3              <1>     add rbx, rax    ;Add the new digits
    37 000005CB EBE4                <1>     jmp short .processDigits
    38                              <1> .exit:
    39 000005CD 48FFCE              <1>     dec rsi         ;rsi points to first non-digit
    40 000005D0 5A                  <1>     pop rdx
    41 000005D1 59                  <1>     pop rcx
    42 000005D2 5B                  <1>     pop rbx
    43 000005D3 C3                  <1>     ret
    44                              <1> 
    45                              <1> printdecimalword:
    46                              <1> ;Takes the qword in rax and prints its decimal representation
    47 000005D4 50                  <1>     push rax
    48 000005D5 53                  <1>     push rbx
    49 000005D6 488D3D(C8100000)    <1>     lea rdi, digitString   ;Use the default line as a buffer
    50                              <1>     ;Sanitise the digit buffer
    51 000005DD 57                  <1>     push rdi
    52 000005DE 51                  <1>     push rcx
    53 000005DF 50                  <1>     push rax
    54 000005E0 31C0                <1>     xor eax, eax
    55 000005E2 B906000000          <1>     mov ecx, digitStringLen/8
    56 000005E7 F348AB              <1>     rep stosq
    57 000005EA 58                  <1>     pop rax
    58 000005EB 59                  <1>     pop rcx
    59 000005EC 5F                  <1>     pop rdi
    60                              <1> 
    61 000005ED 4881C72F000000      <1>     add rdi, digitStringLen - 1 ;Go to the end of the buffer
    62 000005F4 FD                  <1>     std ;Reverse string ops
    63 000005F5 50                  <1>     push rax
    64 000005F6 30C0                <1>     xor al, al  ;Place delimiter
    65 000005F8 AA                  <1>     stosb
    66 000005F9 58                  <1>     pop rax
    67 000005FA 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
    67 00000603 00                  <1>
    68                              <1> .pdw0:
    69 00000604 31D2                <1>     xor edx, edx
    70 00000606 48F7F3              <1>     div rbx
    71 00000609 80C230              <1>     add dl, '0'
    72 0000060C 80FA39              <1>     cmp dl, '9'
    73 0000060F 7603                <1>     jbe .pdw1
    74 00000611 80C207              <1>     add dl, 'A'-'0'-10
    75                              <1> .pdw1:
    76 00000614 50                  <1>     push rax
    77 00000615 88D0                <1>     mov al, dl    ;Save remainder byte
    78 00000617 AA                  <1>     stosb   ;Store the byte and add one to rdi
    79 00000618 58                  <1>     pop rax
    80 00000619 4885C0              <1>     test rax, rax
    81 0000061C 75E6                <1>     jnz .pdw0
    82 0000061E FC                  <1>     cld ;Return string ops to normal
    83 0000061F 48FFC7              <1>     inc rdi ;Skip the extra 0 that was inserted
    84 00000622 4889FD              <1>     mov rbp, rdi    ;Point rbp to the head of the string
    85 00000625 E834FBFFFF          <1>     call ttyOutString
    86 0000062A 5B                  <1>     pop rbx
    87 0000062B 58                  <1>     pop rax
    88 0000062C C3                  <1>     ret
    16                                  %include "MEMORY.ASM"
    17                              <1> allocateBlock:
    18                              <1> ;Allocates a program memory block, the caller then fixes the specifics
    19                              <1> ;Output: rbx = Pointer to generic memory block, or -1 if memory full
    20                              <1> ;       Caller needs to fill in, block size, block type and specifics
    21 0000062D 52                  <1>     push rdx
    22 0000062E 488B1D(12110000)    <1>     mov rbx, qword [lastBlock]    ;Get the last block in the chain
    23 00000635 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;First allocation?
    24 0000063C 742F                <1>     je .firstAllocation
    25 0000063E C60374              <1>     mov byte [rbx + memBlock.bSignature], notLastMemBlock ;Make it not be the last
    26 00000641 480FB75301          <1>     movzx rdx, word [rbx + memBlock.wBlockSize] ;Goto end of block
    27 00000646 4801D3              <1>     add rbx, rdx    ;Move rbx over the previous last block
    28 00000649 488B15(00110000)    <1>     mov rdx, qword [maxMemAddr]
    29 00000650 4839D3              <1>     cmp rbx, rdx ;rbx above maxmemory? 
    30 00000653 770C                <1>     ja .memoryFull
    31 00000655 48891D(12110000)    <1>     mov qword [lastBlock], rbx  ;New last block
    32 0000065C C60372              <1>     mov byte [rbx + memBlock.bSignature], lastMemBlock
    33                              <1> .exit:
    34 0000065F 5A                  <1>     pop rdx
    35 00000660 C3                  <1>     ret
    36                              <1> .memoryFull:
    37 00000661 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    37 0000066A FF                  <1>
    38 0000066B EBF2                <1>     jmp short .exit
    39                              <1> .firstAllocation:
    40                              <1> ;Deal with first allocation
    41 0000066D 488D1D(00000000)    <1>     lea rbx, section.programArea.vstart   ;Get this as the head of the chain
    42 00000674 48891D(12110000)    <1>     mov qword [lastBlock], rbx
    43 0000067B 48891D(0A110000)    <1>     mov qword [mcbChain], rbx
    44 00000682 C60372              <1>     mov byte [rbx + memBlock.bSignature], lastMemBlock
    45 00000685 66C743010000        <1>     mov word [rbx + memBlock.wBlockSize], 0 ;Dummy block
    46 0000068B C3                  <1>     ret
    47                              <1> 
    48                              <1> findVariable:
    49                              <1> ;Input: rsi = Source string for variable name
    50                              <1> ;       ecx = Length of variable name (max 40)
    51                              <1> ;Output: rbx = ptr to varBlock/strBlock OR -1 if doesnt exist
    52 0000068C 50                  <1>     push rax
    53 0000068D 51                  <1>     push rcx
    54 0000068E 52                  <1>     push rdx
    55 0000068F 56                  <1>     push rsi
    56 00000690 57                  <1>     push rdi
    57 00000691 488B1D(0A110000)    <1>     mov rbx, qword [mcbChain]   ;Start of the chain
    58 00000698 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Chain empty?
    59 0000069F 7446                <1>     je .exit
    60                              <1> .search:
    61 000006A1 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
    62 000006A5 7415                <1>     je .varFound    ;We found a numerical variable
    63 000006A7 807B0302            <1>     cmp byte [rbx + memBlock.bBlockType], datBlockType
    64 000006AB 741E                <1>     je .datFound    ;We found a string variable
    65                              <1> .invalid:
    66                              <1>     ;Are we at the end of the chain?
    67 000006AD 803B72              <1>     cmp byte [rbx + memBlock.bSignature], lastMemBlock
    68 000006B0 742B                <1>     je .varNotFound ;At the end of the chain and var not found? Error!
    69 000006B2 480FB75301          <1>     movzx rdx, word [rbx + memBlock.wBlockSize]
    70 000006B7 4801D3              <1>     add rbx, rdx    ;Goto next block
    71 000006BA EBE5                <1>     jmp short .search
    72                              <1> .varFound:
    73                              <1>     ;Compare to see the var is our var
    74 000006BC 488D7B0C            <1>     lea rdi, qword [rbx + varBlock.sVarName] ;point rdi to the name string
    75 000006C0 51                  <1>     push rcx
    76 000006C1 56                  <1>     push rsi
    77 000006C2 F3A6                <1>     repe cmpsb  ;Compare one byte at a time
    78 000006C4 5E                  <1>     pop rsi
    79 000006C5 59                  <1>     pop rcx
    80 000006C6 75E5                <1>     jne .invalid
    81 000006C8 F8                  <1>     clc
    82 000006C9 EB1C                <1>     jmp short .exit
    83                              <1> .datFound:
    84 000006CB 488DBB04010000      <1>     lea rdi, qword [rbx + stringBlock.sVarName] ;point rdi to the name string
    85 000006D2 51                  <1>     push rcx
    86 000006D3 56                  <1>     push rsi
    87 000006D4 F3A6                <1>     repe cmpsb  ;Compare one byte at a time
    88 000006D6 5E                  <1>     pop rsi
    89 000006D7 59                  <1>     pop rcx
    90 000006D8 75D3                <1>     jne .invalid
    91 000006DA F8                  <1>     clc
    92 000006DB EB0A                <1>     jmp short .exit
    93                              <1> .varNotFound:
    94 000006DD 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    94 000006E6 FF                  <1>
    95                              <1> .exit:
    96 000006E7 5F                  <1>     pop rdi
    97 000006E8 5E                  <1>     pop rsi
    98 000006E9 5A                  <1>     pop rdx
    99 000006EA 59                  <1>     pop rcx
   100 000006EB 58                  <1>     pop rax
   101 000006EC C3                  <1>     ret
   102                              <1> 
   103                              <1> findFirstLine:
   104                              <1> ;Output: rbx = Pointer to the first program block
   105                              <1> ;         dx = Number of the first line
   106 000006ED 488B1D(1A110000)    <1>     mov rbx, qword [firstLinPtr]
   107 000006F4 668B15(22110000)    <1>     mov dx, word [firstLinNum]
   108 000006FB C3                  <1>     ret
   109                              <1> 
   110                              <1> ;FIRST SEARCH FOR A LINE NUMBER BEFORE INSERTING IT INTO THE CHAIN
   111                              <1> ;IF THE LINE NUMBER IS FOUND, REPLACE THE COMMAND STRING
   112                              <1> 
   113                              <1> searchForProgramLine:
   114                              <1> ;Walk the program chain looking to see if a line number exists. If it does,
   115                              <1> ; return a pointer to the block in rbx. If it doesn't, return -1 in rbx
   116                              <1> ;Input: dx = Line number
   117                              <1> ;Output: rbx = Pointer to program block 
   118 000006FC 488B1D(1A110000)    <1>     mov rbx, qword [firstLinPtr]
   119 00000703 4881FBFFFFFFFF      <1>     cmp rbx, -1
   120 0000070A 7412                <1>     je .lineFound
   121                              <1> .search:
   122 0000070C 66395304            <1>     cmp word [rbx + progLineBlock.wLineNum], dx ;Equal line numbers?
   123 00000710 740C                <1>     je .lineFound
   124 00000712 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr]   ;Walk chain
   125 00000716 48FFC3              <1>     inc rbx ;At the end? If yes, this would be 0 now
   126 00000719 75F1                <1>     jnz .search ;Not zero? Keep searching
   127 0000071B 48FFCB              <1>     dec rbx ;Make it -1 again
   128                              <1> .lineFound:
   129 0000071E C3                  <1>     ret
   130                              <1> 
   131                              <1> insertProgramLine:
   132                              <1> ;Walk the program chain looking for the biggest number less than our
   133                              <1> ; line number. Once we have reached the end of the chain, insert the block there, or
   134                              <1> ; if there is no block, then we are the last in the chain
   135                              <1> ;Input: rsi = New Program Block to be added
   136 0000071F 50                  <1>     push rax
   137 00000720 53                  <1>     push rbx
   138 00000721 51                  <1>     push rcx
   139 00000722 52                  <1>     push rdx
   140 00000723 57                  <1>     push rdi
   141 00000724 E8C4FFFFFF          <1>     call findFirstLine  ;Get start of program in rbx and line number in dx
   142                              <1> ;First check if we should be the first line
   143 00000729 6687DB              <1>     xchg bx, bx
   144 0000072C 668B4E04            <1>     mov cx, word [rsi + progLineBlock.wLineNum] ;Save line number in cx
   145 00000730 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Empty program marker
   146 00000737 744D                <1>     je .first
   147 00000739 6639D1              <1>     cmp cx, dx  ;If cx is below dx, then our entry is first
   148 0000073C 7248                <1>     jb .first    
   149                              <1> ;Use ax as the best line number and rdi as the pointer to that block
   150 0000073E 66B8FFFF            <1>     mov ax, -1  ;Marker to indicate no insertion
   151                              <1> .walk:
   152 00000742 48817B06FFFFFFFF    <1>     cmp qword [rbx + progLineBlock.qPtr], -1    ;We are at the end
   153 0000074A 7419                <1>     je .sort
   154 0000074C 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Walk chain in rbx
   155 00000750 663B4B04            <1>     cmp cx, word [rbx + progLineBlock.wLineNum]
   156 00000754 77EC                <1>     ja .walk    ;If line number is above my line number, keep walking
   157                              <1> .candidate:
   158                              <1>     ;If the new line number is below the old line number, reject
   159 00000756 663B4304            <1>     cmp ax, word [rbx + progLineBlock.wLineNum]
   160 0000075A 72E6                <1>     jb .walk
   161 0000075C 4889DF              <1>     mov rdi, rbx
   162 0000075F 668B4304            <1>     mov ax, word [rbx + progLineBlock.wLineNum]
   163 00000763 EBDD                <1>     jmp short .walk
   164                              <1> .sort:
   165 00000765 66FFC0              <1>     inc ax  ;If no candidates, exit
   166 00000768 740E                <1>     jz .skipLink
   167                              <1>     ;rdi points to the previous line to link to
   168 0000076A 488B5706            <1>     mov rdx, qword [rdi + progLineBlock.qPtr]
   169 0000076E 48897706            <1>     mov qword [rdi + progLineBlock.qPtr], rsi   ;Insert self here
   170 00000772 48895606            <1>     mov qword [rsi + progLineBlock.qPtr], rdx   ;Link new block to next line
   171 00000776 EB20                <1>     jmp short .exit
   172                              <1> .skipLink:
   173 00000778 48897306            <1>     mov qword [rbx + progLineBlock.qPtr], rsi   ;Link rsi to last element in list
   174 0000077C 48C74606FFFFFFFF    <1>     mov qword [rsi + progLineBlock.qPtr], -1    ;End of chain marker
   175 00000784 EB12                <1>     jmp short .exit
   176                              <1> .first:
   177 00000786 488935(1A110000)    <1>     mov qword [firstLinPtr], rsi
   178 0000078D 66890D(22110000)    <1>     mov word [firstLinNum], cx
   179 00000794 48895E06            <1>     mov qword [rsi + progLineBlock.qPtr], rbx   ;Put the old first line as second line
   180                              <1> .exit:
   181 00000798 5F                  <1>     pop rdi
   182 00000799 5A                  <1>     pop rdx
   183 0000079A 59                  <1>     pop rcx
   184 0000079B 5B                  <1>     pop rbx
   185 0000079C 58                  <1>     pop rax
   186 0000079D C3                  <1>     ret
   187                              <1> 
   188                              <1> makeEditInteger:
   189                              <1> ;Will make a variable if it is new name, or edit the value if it already exists
   190                              <1> ;Input: rsi = Var name
   191                              <1> ;       (e)cx = Length of varname, max 40 chars
   192                              <1> ;       rax = Value
   193 0000079E E8E9FEFFFF          <1>     call findVariable   ;rbx returned with var block or -1
   194 000007A3 4881FBFFFFFFFF      <1>     cmp rbx, -1
   195 000007AA 7405                <1>     je .newVar
   196 000007AC 48894304            <1>     mov qword [rbx + varBlock.qValue], rax
   197 000007B0 C3                  <1>     ret
   198                              <1> .newVar:
   199 000007B1 E877FEFFFF          <1>     call allocateBlock
   200 000007B6 4881FBFFFFFFFF      <1>     cmp rbx, -1
   201 000007BD 741E                <1>     je .error
   202 000007BF 48894304            <1>     mov qword [rbx + varBlock.qValue], rax  ;Save value
   203 000007C3 66894B01            <1>     mov word [rbx + varBlock.wBlockSize], cx    ;Save length of name
   204 000007C7 668143010C00        <1>     add word [rbx + varBlock.wBlockSize], varBlock_size ;Add full block size
   205 000007CD C6430301            <1>     mov byte [rbx + varBlock.bBlockType], varBlockType  ;Block type
   206 000007D1 57                  <1>     push rdi
   207 000007D2 488D7B0C            <1>     lea rdi, qword [rbx + varBlock.sVarName]
   208 000007D6 E87B000000          <1>     call strcpy ;Copy the string name into block buffer
   209 000007DB 5F                  <1>     pop rdi
   210 000007DC C3                  <1>     ret
   211                              <1> .error:
   212 000007DD 488D2D4D010000      <1>     lea rbp, noMem
   213 000007E4 E9CEF8FFFF          <1>     jmp criticalError
   214                              <1> makeEditString:
   215                              <1> ;Will make a string if it is new name, or replace the string. Strings are null termin
   216                              <1> ;Input: rsi = Var name
   217                              <1> ;       ecx = Length of varname, max 40 chars
   218                              <1> ;       rdx = Ptr to string itself
   219 000007E9 57                  <1>     push rdi
   220 000007EA 56                  <1>     push rsi
   221 000007EB 50                  <1>     push rax
   222 000007EC 53                  <1>     push rbx
   223 000007ED E89AFEFFFF          <1>     call findVariable   ;rbx returned with string block or -1
   224 000007F2 4881FBFFFFFFFF      <1>     cmp rbx, -1
   225 000007F9 7528                <1>     jne .strcopy
   226 000007FB E82DFEFFFF          <1>     call allocateBlock
   227 00000800 4881FBFFFFFFFF      <1>     cmp rbx, -1
   228 00000807 742E                <1>     je .error
   229 00000809 66894B01            <1>     mov word [rbx + stringBlock.wBlockSize], cx    ;Save length of name
   230 0000080D 668143010401        <1>     add word [rbx + stringBlock.wBlockSize], stringBlock_size ;Add full block size
   231 00000813 C6430302            <1>     mov byte [rbx + stringBlock.bBlockType], datBlockType  ;Block type
   232 00000817 488DBB04010000      <1>     lea rdi, qword [rbx + stringBlock.sVarName]
   233 0000081E E833000000          <1>     call strcpy ;Copy the string name into block buffer
   234                              <1> .strcopy:
   235 00000823 488D7B04            <1>     lea rdi, qword [rbx + stringBlock.string]   ;point to string space
   236 00000827 4889D6              <1>     mov rsi, rdx    ;Point rsi to the string itself
   237 0000082A E814000000          <1>     call terminatedstrcpy
   238 0000082F 30C0                <1>     xor al, al
   239 00000831 AA                  <1>     stosb   ;Store the null delimiter
   240 00000832 5B                  <1>     pop rbx
   241 00000833 58                  <1>     pop rax
   242 00000834 5E                  <1>     pop rsi
   243 00000835 5F                  <1>     pop rdi
   244 00000836 C3                  <1>     ret
   245                              <1> .error:
   246 00000837 488D2DF3000000      <1>     lea rbp, noMem
   247 0000083E E974F8FFFF          <1>     jmp criticalError
   248                              <1> ;------------------------------------------------:
   249                              <1> ;  The below are misc memory related functions   :
   250                              <1> ;------------------------------------------------:
   251                              <1> terminatedstrcpy:
   252                              <1> ;rdi = Destination String
   253                              <1> ;rsi = Source String
   254                              <1> ;Copy a terminated string
   255 00000843 50                  <1>     push rax
   256                              <1> .copy:
   257 00000844 AC                  <1>     lodsb   ;Get char in al and inc rsi
   258 00000845 3C00                <1>     cmp al, 0
   259 00000847 740B                <1>     je .exit
   260 00000849 3C3A                <1>     cmp al, ":"
   261 0000084B 7407                <1>     je .exit
   262 0000084D 3C22                <1>     cmp al, 22h ;Speechmark
   263 0000084F 7403                <1>     je .exit
   264 00000851 AA                  <1>     stosb   ;Save char from al and inc rdi
   265 00000852 EBF0                <1>     jmp short .copy 
   266                              <1> .exit:
   267 00000854 58                  <1>     pop rax
   268 00000855 C3                  <1>     ret
   269                              <1> strcpy:
   270                              <1> ;rdi = Destination string
   271                              <1> ;rsi = Source string
   272                              <1> ;rcx = Number of Chars to copy
   273 00000856 57                  <1>     push rdi
   274 00000857 56                  <1>     push rsi
   275 00000858 51                  <1>     push rcx
   276 00000859 F3A4                <1>     rep movsb
   277 0000085B 59                  <1>     pop rcx
   278 0000085C 5E                  <1>     pop rsi
   279 0000085D 5F                  <1>     pop rdi
   280 0000085E C3                  <1>     ret
   281                              <1> strlen:
   282                              <1> ;Input: rsi = String start
   283                              <1> ;Output: rsi = String start
   284                              <1> ;        ecx = String length, inclusive of NULL char
   285 0000085F 50                  <1>     push rax
   286 00000860 56                  <1>     push rsi
   287 00000861 31C9                <1>     xor ecx, ecx    ;Clear counter
   288                              <1> .search:
   289 00000863 AC                  <1>     lodsb
   290 00000864 FFC1                <1>     inc ecx
   291 00000866 84C0                <1>     test al, al ;Is this a null char?
   292 00000868 75F9                <1>     jnz .search ;Null not found
   293                              <1> .exit:
   294 0000086A 5E                  <1>     pop rsi
   295 0000086B 58                  <1>     pop rax
   296 0000086C C3                  <1>     ret
   297                              <1> 
   298                              <1> memoryDetection:
   299 0000086D B820E80000          <1>     mov eax, 0E820h
   300 00000872 CD35                <1>     int 35h     ;rax = ptr to start, rsi = ptr to data table, each entry 24 bytes
   301 00000874 EB07                <1>     jmp short .fsa1
   302                              <1> .findStartAddr:
   303 00000876 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   304                              <1> .fsa1:
   305 0000087D 6685C9              <1>     test cx, cx
   306 00000880 742C                <1>     jz .worstCase
   307 00000882 66FFC9              <1>     dec cx
   308 00000885 488B1E              <1>     mov rbx, qword [rsi]    ;Get the address entry into rbx
   309 00000888 4839C3              <1>     cmp rbx, rax    
   310 0000088B 75E9                <1>     jne .findStartAddr
   311 0000088D 488B4608            <1>     mov rax, qword [rsi + 8] ;Get the number of bytes saved into rax
   312                              <1> 
   313 00000891 488D15(00000000)    <1>     lea rdx, section.programArea.vstart
   314 00000898 4829DA              <1>     sub rdx, rbx    ;Get the size of the interpreter and internal data area
   315 0000089B 4829D0              <1>     sub rax, rdx    ;Remove the number of bytes reserved to the interpreter
   316 0000089E E831FDFFFF          <1>     call printdecimalword
   317 000008A3 4801C3              <1>     add rbx, rax    ;Add number of bytes to start address
   318 000008A6 48891D(00110000)    <1>     mov qword [maxMemAddr], rbx ;Save this address
   319                              <1> .exit:
   320 000008AD C3                  <1>     ret
   321                              <1> .worstCase:
   322                              <1> ;Assume 2Mb MAX memory, rax has base address
   323 000008AE 48BB00002000000000- <1>     mov rbx, 200000h    ;2Mb value
   323 000008B7 00                  <1>
   324 000008B8 4829C3              <1>     sub rbx, rax
   325 000008BB 4889D8              <1>     mov rax, rbx    ;Get value in rax
   326 000008BE E811FDFFFF          <1>     call printdecimalword
   327 000008C3 48C705(00110000)00- <1>     mov qword [maxMemAddr], 200000h
   327 000008CB 002000              <1>
   328 000008CE C3                  <1>     ret
   329                              <1> 
    17                                  %include "BASICDAT.ASM"
    18 000008CF 4F6B0A0D00          <1> prompt  db "Ok",0Ah,0Dh,0
    19 000008D4 5343522036342D4241- <1> mainmsg db "SCR 64-BASIC v0.1",0Ah,0Dh,0
    19 000008DD 5349432076302E310A- <1>
    19 000008E6 0D00                <1>
    20 000008E8 204279746573206672- <1> bytemsg db " Bytes free",0Ah,0Dh,0
    20 000008F1 65650A0D00          <1>
    21 000008F6 0A0D00              <1> crlf    db 0Ah,0Dh,0
    22 000008F9 4572726F720A0D00    <1> errmsg  db "Error",0Ah,0Dh,0
    23 00000901 303132333435363738- <1> numbers db "0123456789"
    23 0000090A 39                  <1>
    24                              <1> ;startVarChars db "ABCDEFGHIJKLMNOPQRSTUVWXYZ" ;Valid starting chars for a var name
    25                              <1> ;numStartVarChars equ $ - startVarChars
    26 0000090B 414243444546474849- <1> varChrs db "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789%$" ;Valid inner chars for var name
    26 00000914 4A4B4C4D4E4F505152- <1>
    26 0000091D 535455565758595A30- <1>
    26 00000926 313233343536373839- <1>
    26 0000092F 2524                <1>
    27                              <1> numVarChars equ $ - varChrs
    28                              <1> ;% => Integer variable (8 bytes)
    29                              <1> ;! => Single-Precision, Unused and ignored
    30                              <1> ;# => Double-Precision, Unused and ignored
    31                              <1> ;$ => String variable
    32                              <1> 
    33                              <1> ;Error Messages
    34 00000931 4F7574206F66204D65- <1> noMem   db "Out of Memory",0Ah,0Dh,0
    34 0000093A 6D6F72790A0D00      <1>
    35 00000941 53796E746178204572- <1> syntax  db "Syntax Error",0Ah,0Dh,0
    35 0000094A 726F720A0D00        <1>
    36 00000950 54797065206D69736D- <1> typeError   db "Type mismatch",0Ah,0Dh,0
    36 00000959 617463680A0D00      <1>
    37 00000960 556E646566696E6564- <1> lineNoXist  db "Undefined line number",0Ah,0Dh,0
    37 00000969 206C696E65206E756D- <1>
    37 00000972 6265720A0D00        <1>
    18                                  Segment programArea follows=resSeg align=1 vfollows=resSeg valign=1
    19                                  ENDOFPROGRAM:

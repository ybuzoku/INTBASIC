     1                                      [map all BASIC.MAP]
     2                                      [DEFAULT REL]
     3                                      BITS 64
     4                                  %include "MEM.INC"
     5                              <1> 
     6                              <1> progLineBlockType   equ 0   ;Program Line
     7                              <1> varBlockType        equ 1   ;Variable block
     8                              <1> datBlockType        equ 2   ;Data block (i.e. a string block)
     9                              <1> 
    10                              <1> notLastMemBlock equ "T" ;Used for blocks that are not the last block
    11                              <1> lastMemBlock    equ "R" ;Used by the last block to indicate end of chain
    12                              <1> 
    13                              <1> %macro memBlockM 0 ;Memory block Macro
    14                              <1>     .bSignature resb 1      ;Valid Signature
    15                              <1>     .wBlockSize resw 1      ;Total block size in bytes
    16                              <1>     .bBlockType resb 1      ;Block type, program line or variable
    17                              <1> %endmacro
    18                              <1> 
    19                              <1> struc memBlock
    20                              <1>     memBlockM
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    21                              <1> endstruc
    22                              <1> 
    23                              <1> struc progLineBlock
    24                              <1>     memBlockM               ;Common memory block header
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    25 00000004 ????                <1>     .wLineNum   resw 1      ;Line number, up to 65535
    26 00000006 ????????????????    <1>     .qPtr       resq 1      ;Pointer to the next line, or -1 if last line
    27 0000000E <res 100h>          <1>     .sLine      resb maxLineLen    ;Maximum length 255, keep null char
    28                              <1> endstruc
    29                              <1> 
    30                              <1> varTypeNum  equ 0   ;Variable is a number
    31                              <1> varTypStr   equ 1   ;Variable is a string
    32                              <1> 
    33                              <1> struc varBlock
    34                              <1>     memBlockM               ;Common memory block header
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    35 00000004 <res 28h>           <1>     .sVarName   resb 40     ;Up to 40 chars for the var name
    36 0000002C ??                  <1>     .bVarType   resb 1      ;String or num
    37 0000002D ????????????????    <1>     .qValue     resq 1      ;One qword, either value or pointer to string
    38                              <1> endstruc
    39                              <1> 
    40                              <1> struc stringBlock
    41                              <1>     memBlockM
    14 00000000 ??                  <2>  .bSignature resb 1
    15 00000001 ????                <2>  .wBlockSize resw 1
    16 00000003 ??                  <2>  .bBlockType resb 1
    42 00000004 <res 100h>          <1>     .string     resb maxLineLen    ;Strings of up to 256 chars, OK
    43                              <1> endstruc
     5                                  Segment .text align=1
     6                                  %include "RELOC.ASM"
     7 00000000 55AA                <1>     dw 0AA55h 
     8                              <1> ;First verify I have Enough RAM for my program and then run
     9 00000002 B801E80000          <1>     mov eax, 0E801h ;Get low memory count in ax
    10 00000007 CD35                <1>     int 35h
    11 00000009 663D0008            <1>     cmp ax, 200000h/400h ;Divide 2Mb into 1Kb chunks.
    12 0000000D 722A                <1>     jb bad
    13 0000000F B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    14 00000014 0F32                <1>     rdmsr
    15 00000016 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    16 00000018 48C1E720            <1>     shl rdi, 20h        ;Shift high
    17 0000001C 89C7                <1>     mov edi, eax        ;Get the low dword in
    18 0000001E 4889F8              <1>     mov rax, rdi
    19 00000021 488D35(00000000)    <1>     lea rsi, section.resSeg.start
    20 00000028 4881C7[EC100000]    <1>     add rdi, bssLen
    21 0000002F B900100000          <1>     mov ecx, 1000h
    22 00000034 F348A5              <1>     rep movsq
    23 00000037 FFE0                <1>     jmp qword rax
    24                              <1> bad:
    25 00000039 488D2D0D000000      <1>     lea rbp, badmsg
    26 00000040 B804130000          <1>     mov eax, 1304h
    27 00000045 CD30                <1>     int 30h
    28 00000047 30E4                <1>     xor ah, ah
    29 00000049 CD36                <1>     int 36h
    30 0000004B CD38                <1>     int 38h
    31 0000004D 4E6F7420456E6F7567- <1> badmsg: db "Not Enough Memory. Press any key to enter SYSDEBUG...",0
    31 00000056 68204D656D6F72792E- <1>
    31 0000005F 20507265737320616E- <1>
    31 00000068 79206B657920746F20- <1>
    31 00000071 656E74657220535953- <1>
    31 0000007A 44454255472E2E2E00  <1>
     7                                  Segment dSeg nobits align=1 start=0
     8                                  %include "BSS.ASM"
     9 00000000 <res FC0h>          <1> stack       resq 200h - 8  ;Save 4Kb stack space
    10 00000FC0 ????????????????    <1> stacktop    resq 1
    11                              <1> 
    12                              <1> maxLineLen  equ 256
    13 00000FC8 <res 100h>          <1> inString    resb maxLineLen        ;256 character input string
    14                              <1> 
    15 000010C8 ??                  <1> strLen      resb 1  ;Counter for number of chars entered in string
    16 000010C9 ??                  <1> stateByte   resb 1  ;TROFF/TRON etc, unused for now
    17 000010CA ????????????????    <1> mcbChain    resq 1  ;Pointer to the start of the chain
    18 000010D2 ????????????????    <1> lastBlock   resq 1  ;Pointer to the last block
    19 000010DA ????????????????    <1> firstLinPtr resq 1  ;Pointer to the programs' first line 
    20 000010E2 ????                <1> firstLinNum resw 1  ;Line number of the first line of the program
    21 000010E4 ????????????????    <1> maxMemAddr  resq 1  ;Pointer to the byte past which we cannot allocate anything
    22                              <1> bssLen: ;Needed to compute the resident portion load location
     9                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1
    10                                  %include "MAIN.ASM"
    11                              <1> start:
    12 00000000 B801C50000          <1>     mov eax, 0C501h
    13 00000005 CD35                <1>     int 35h
    14 00000007 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
    15 0000000C CD30                <1>     int 30h
    16 0000000E B402                <1>     mov ah, 02h
    17 00000010 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
    18 00000012 88D7                <1>     mov bh, dl      ;Set cursor for page 0
    19 00000014 CD30                <1>     int 30h
    20 00000016 B707                <1>     mov bh, 07h     ;Grey/Black attribs
    21 00000018 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
    22 0000001D CD30                <1>     int 30h
    23 0000001F FC                  <1>     cld
    24 00000020 488D05(00000000)    <1>     lea rax, section.programArea.vstart
    25 00000027 488905(CA100000)    <1>     mov qword [mcbChain], rax
    26 0000002E 488905(D2100000)    <1>     mov qword [lastBlock], rax
    27 00000035 488D2DAD020000      <1>     lea rbp, mainmsg
    28 0000003C B804130000          <1>     mov eax, 1304h
    29 00000041 CD30                <1>     int 30h
    30 00000043 E83A020000          <1>     call memoryDetection
    31 00000048 488D2DB6020000      <1>     lea rbp, bytemsg
    32 0000004F B804130000          <1>     mov eax, 1304h
    33 00000054 CD30                <1>     int 30h
    34 00000056 C605(C8100000)00    <1>     mov byte [strLen], 0
    35                              <1> mainLoop:
    36 0000005D 488D25(C00F0000)    <1>     lea rsp, stacktop    ;Reinitialize stack pointer
    37 00000064 488D05F2FFFFFF      <1>     lea rax, mainLoop
    38 0000006B 50                  <1>     push rax
    39 0000006C 488D2D71020000      <1>     lea rbp, prompt
    40 00000073 E8B7000000          <1>     call ttyOutString
    41 00000078 E807000000          <1>     call getLineInput
    42 0000007D E801000000          <1>     call saveExecuteLine
    43 00000082 C3                  <1>     ret
    44                              <1> saveExecuteLine:
    45                              <1> ;This function will execute the line if it is an interactive expression
    46                              <1> ; or store it in the program if it has a line number
    47 00000083 C3                  <1>     ret
    48                              <1> getLineInput:
    49 00000084 30E4                <1>     xor ah, ah
    50 00000086 8825(C8100000)      <1>     mov byte [strLen], ah   ;Zero the char counter
    51 0000008C 488D3D(C80F0000)    <1>     lea rdi, inString   ;Move to start of line
    52 00000093 57                  <1>     push rdi
    53 00000094 B900010000          <1>     mov ecx, maxLineLen
    54 00000099 B00D                <1>     mov al, 0Dh    ;Ensure the input line is sanitised
    55 0000009B F3AA                <1>     rep stosb
    56 0000009D 5F                  <1>     pop rdi
    57                              <1> .getChar:
    58 0000009E E894000000          <1>     call ttyIn
    59 000000A3 3C0D                <1>     cmp al, 0Dh ;Line Feed
    60 000000A5 7456                <1>     je .gliExit
    61 000000A7 3C08                <1>     cmp al, 08h ;Bspace
    62 000000A9 740F                <1>     je .glibspace
    63 000000AB 803D(C8100000)FE    <1>     cmp byte [strLen], -2   ;If at max length (255 chars), simply beep and wait for either bspace or enter
    64 000000B2 7459                <1>     je .gliFull 
    65 000000B4 84C0                <1>     test al, al
    66 000000B6 7443                <1>     je .gliExtendedChar
    67 000000B8 EB29                <1>     jmp short .gliCheckCase
    68                              <1> .glibspace:
    69 000000BA F605(C8100000)FF    <1>     test byte [strLen], -1  ;This will only be zero if strLen=0
    70 000000C1 74DB                <1>     jz .getChar
    71 000000C3 48FFCF              <1>     dec rdi ;Go back by one position in the input line
    72 000000C6 FE0D(C8100000)      <1>     dec byte [strLen]
    73 000000CC B008                <1>     mov al, 08h
    74 000000CE E857000000          <1>     call ttyOutChar
    75 000000D3 B020                <1>     mov al, 20h  
    76 000000D5 E850000000          <1>     call ttyOutChar
    77 000000DA B008                <1>     mov al, 08h
    78 000000DC E849000000          <1>     call ttyOutChar
    79 000000E1 EBBB                <1>     jmp short .getChar
    80                              <1> .gliCheckCase:
    81                              <1>     ;al has char
    82 000000E3 E842000000          <1>     call ttyOutChar ;Echo the char as is, but store it uppercase
    83 000000E8 3C61                <1>     cmp al, "a"
    84 000000EA 7206                <1>     jb .gliccStore
    85 000000EC 3C7A                <1>     cmp al, "z"
    86 000000EE 7702                <1>     ja .gliccStore
    87 000000F0 2C20                <1>     sub al, 20h
    88                              <1> .gliccStore:
    89 000000F2 AA                  <1>     stosb   ;Increment the pointer, add char to buffer
    90 000000F3 FE05(C8100000)      <1>     inc byte [strLen]   ;Inc char count
    91 000000F9 EBA3                <1>     jmp short .getChar
    92                              <1> .gliExtendedChar:
    93                              <1>     ;Currently, extended chars do nothing, eventually add F1-F10 functionality
    94 000000FB EBA1                <1>     jmp short .getChar
    95                              <1> .gliExit:
    96 000000FD 488D2D0F020000      <1>     lea rbp, crlf
    97 00000104 E826000000          <1>     call ttyOutString
    98 00000109 C60700              <1>     mov byte [rdi], 0   ;Null terminate string here
    99 0000010C C3                  <1>     ret
   100                              <1> .gliFull:
   101 0000010D B007                <1>     mov al, 07h
   102 0000010F E816000000          <1>     call ttyOutChar
   103 00000114 E985FFFFFF          <1>     jmp .getChar
   104                              <1> 
   105                              <1> ;For any error, syntax or otherwise, come here
   106                              <1> criticalError:
   107 00000119 488D2DF6010000      <1>     lea rbp, errmsg
   108 00000120 E80A000000          <1>     call ttyOutString
   109 00000125 E933FFFFFF          <1>     jmp mainLoop    ;Trash input line, restart line input
   110                              <1> 
   111                              <1> ;-------------------------------:
   112                              <1> ;---------Misc routines---------:
   113                              <1> ;-------------------------------:
   114                              <1> ttyOutChar:
   115 0000012A B40E                <1>     mov ah, 0Eh
   116 0000012C CD30                <1>     int 30h
   117 0000012E C3                  <1>     ret
   118                              <1> ttyOutString:
   119 0000012F B804130000          <1>     mov eax, 1304h
   120 00000134 CD30                <1>     int 30h
   121 00000136 C3                  <1>     ret
   122                              <1> ttyIn:
   123 00000137 30E4                <1>     xor ah, ah
   124 00000139 CD36                <1>     int 36h
   125 0000013B C3                  <1>     ret
   126                              <1> 
   127                              <1> printdecimalword:
   128                              <1> ;Takes the qword in rax and prints its decimal representation
   129 0000013C 50                  <1>     push rax
   130 0000013D 488D3D(C80F0000)    <1>     lea rdi, inString   ;Use the default line as a buffer
   131 00000144 4881C7FF000000      <1>     add rdi, maxLineLen - 1 ;Go to the end of the buffer
   132 0000014B FD                  <1>     std ;Reverse string ops
   133 0000014C 50                  <1>     push rax
   134 0000014D 30C0                <1>     xor al, al  ;Place delimiter
   135 0000014F AA                  <1>     stosb
   136 00000150 58                  <1>     pop rax
   137 00000151 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
   137 0000015A 00                  <1>
   138                              <1> .pdw0:
   139 0000015B 31D2                <1>     xor edx, edx
   140 0000015D 48F7F3              <1>     div rbx
   141 00000160 80C230              <1>     add dl, '0'
   142 00000163 80FA39              <1>     cmp dl, '9'
   143 00000166 7603                <1>     jbe .pdw1
   144 00000168 80C207              <1>     add dl, 'A'-'0'-10
   145                              <1> .pdw1:
   146 0000016B 50                  <1>     push rax
   147 0000016C 88D0                <1>     mov al, dl    ;Save remainder byte
   148 0000016E AA                  <1>     stosb   ;Store the byte and add one to rdi
   149 0000016F 58                  <1>     pop rax
   150 00000170 4885C0              <1>     test rax, rax
   151 00000173 75E6                <1>     jnz .pdw0
   152 00000175 FC                  <1>     cld ;Return string ops to normal
   153 00000176 48FFC7              <1>     inc rdi ;Skip the extra 0 that was inserted
   154 00000179 4889FD              <1>     mov rbp, rdi    ;Point rbp to the head of the string
   155 0000017C E8AEFFFFFF          <1>     call ttyOutString
   156 00000181 58                  <1>     pop rax
   157 00000182 C3                  <1>     ret
    11                                  %include "COMMANDS.ASM"
    12                              <1> 
    13                              <1> funTbl:
    14 00000183 044E4557            <1>     db 4,"NEW"
    15                              <1> 
    16 00000187 054C495354          <1>     db 5,"LIST"
    17                              <1> 
    18 0000018C 0452554E            <1>     db 4,"RUN"
    19                              <1> 
    20 00000190 065052494E54        <1>     db 6,"PRINT"
    21                              <1> 
    22 00000196 06494E505554        <1>     db 6,"INPUT"
    23                              <1> 
    24 0000019C 034946              <1>     db 3,"IF"
    25                              <1> 
    26 0000019F 05474F544F          <1>     db 5,"GOTO"
    27                              <1> 
    28 000001A4 0753595354454D      <1>     db 7,"SYSTEM"
    29                              <1> 
    30 000001AB 01                  <1>     db 1
    12                                  %include "MATH.ASM"
    13                              <1> decimalToHex:
    14                              <1>     ;Takes ASCII encoded decimal number and 
    15                              <1>     ;returns its hex value
    16                              <1>     ;Input: rsi = Start of string
    17                              <1>     ;       ecx = Number of Digits in digit string (max 255)
    18                              <1>     ;Output: rax = Number
    19 000001AC 53                  <1>     push rbx
    20 000001AD 52                  <1>     push rdx
    21 000001AE 57                  <1>     push rdi
    22 000001AF 55                  <1>     push rbp
    23 000001B0 FD                  <1>     std             ;Reverse string traversal direction
    24 000001B1 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
    25 000001B4 4801CE              <1>     add rsi, rcx    ;Go to end of number string
    26 000001B7 31ED                <1>     xor ebp, ebp    ;Clear rbp, to store value in
    27 000001B9 BB01000000          <1>     mov ebx, 1      ;Start with ebx = 1
    28                              <1> .processDigits:
    29 000001BE AC                  <1>     lodsb           ;Get the first digit in al
    30 000001BF 2C30                <1>     sub al, 30h     ;Reduce to value
    31 000001C1 480FB6C0            <1>     movzx rax, al   ;Clear upper bits
    32 000001C5 31D2                <1>     xor edx, edx    ;Clear for multiplication
    33 000001C7 48F7E3              <1>     mul rbx         ;Multiply digit value by rbx
    34 000001CA 4801C5              <1>     add rbp, rax    ;Add value, overflows past 64 bit integers ignored
    35 000001CD FEC9                <1>     dec cl          ;Decrement the number of chars left to process
    36 000001CF 7409                <1>     jz .exit        ;If now zero, exit!
    37 000001D1 4801DB              <1>     add rbx, rbx    ;Multiply by 2
    38 000001D4 488D1C9B            <1>     lea rbx, qword [rbx + 4*rbx] ;Multiply by 5
    39 000001D8 EBE4                <1>     jmp short .processDigits
    40                              <1> .exit:
    41 000001DA FC                  <1>     cld             ;Return string traversal direction to normal
    42 000001DB 5D                  <1>     pop rbp
    43 000001DC 5F                  <1>     pop rdi
    44 000001DD 5A                  <1>     pop rdx
    45 000001DE 5B                  <1>     pop rbx
    46 000001DF C3                  <1>     ret
    13                                  %include "MEMORY.ASM"
    14                              <1> allocateBlock:
    15                              <1> ;Allocates a program memory block, the caller then fixes the specifics
    16                              <1> ;Output: rbx = Pointer to generic memory block, or -1 if memory full
    17                              <1> ;       Caller needs to fill in, block size, block type and specifics
    18 000001E0 488B1D(D2100000)    <1>     mov rbx, qword [lastBlock]    ;Get the last block in the chain
    19 000001E7 C60354              <1>     mov byte [rbx + memBlock.bSignature], notLastMemBlock ;Make it not be the last
    20 000001EA 480FB75301          <1>     movzx rdx, word [rbx + memBlock.wBlockSize] ;Goto end of block
    21 000001EF 4801D3              <1>     add rbx, rdx    ;Move rbx over the previous last block
    22 000001F2 483B1D(E4100000)    <1>     cmp rbx, qword [maxMemAddr]
    23 000001F9 770B                <1>     ja .memoryFull  ;Above? fail
    24 000001FB 48891D(D2100000)    <1>     mov qword [lastBlock], rbx  ;New last block
    25 00000202 C60352              <1>     mov byte [rbx + memBlock.bSignature], lastMemBlock
    26 00000205 C3                  <1>     ret
    27                              <1> .memoryFull:
    28 00000206 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    28 0000020F FF                  <1>
    29 00000210 C3                  <1>     ret
    30                              <1> 
    31                              <1> findVariable:
    32                              <1> ;Input: rsi = Source string for variable name
    33                              <1> ;       ecx = Length of variable name (max 40)
    34                              <1> ;Output: rsi = ptr to varBlock OR -1 if doesnt exist
    35 00000211 53                  <1>     push rbx
    36 00000212 51                  <1>     push rcx
    37 00000213 52                  <1>     push rdx
    38 00000214 57                  <1>     push rdi
    39 00000215 488B1D(CA100000)    <1>     mov rbx, qword [mcbChain]   ;Start of the chain
    40                              <1> .search:
    41 0000021C 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
    42 00000220 740F                <1>     je .varFound    ;We found a variable
    43                              <1> .invalid:
    44                              <1>     ;Are we at the end of the chain?
    45 00000222 803B52              <1>     cmp byte [rbx + memBlock.bSignature], lastMemBlock
    46 00000225 7417                <1>     je .varNotFound ;At the end of the chain and var not found? Error!
    47 00000227 480FB75301          <1>     movzx rdx, word [rbx + memBlock.wBlockSize]
    48 0000022C 4801D3              <1>     add rbx, rdx    ;Goto next block
    49 0000022F EBEB                <1>     jmp short .search
    50                              <1> .varFound:
    51                              <1>     ;Compare to see the var is our var
    52 00000231 488D7B04            <1>     lea rdi, qword [rbx + varBlock.sVarName] ;point rdi to the name string
    53 00000235 F3A6                <1>     repe cmpsb  ;Compare one byte at a time
    54 00000237 75E9                <1>     jne .invalid
    55 00000239 4889DE              <1>     mov rsi, rbx    ;Move varblock into rsi
    56 0000023C EB0A                <1>     jmp short .exit
    57                              <1> .varNotFound:
    58 0000023E 48BEFFFFFFFFFFFFFF- <1>     mov rsi, -1
    58 00000247 FF                  <1>
    59                              <1> .exit:
    60 00000248 5F                  <1>     pop rdi
    61 00000249 5A                  <1>     pop rdx
    62 0000024A 59                  <1>     pop rcx
    63 0000024B 5B                  <1>     pop rbx
    64 0000024C C3                  <1>     ret
    65                              <1> 
    66                              <1> findFirstLine:
    67                              <1> ;Output: rbx = Pointer to the first program block
    68                              <1> ;         dx = Number of the first line
    69 0000024D 488B1D(DA100000)    <1>     mov rbx, qword [firstLinPtr]
    70 00000254 668B15(E2100000)    <1>     mov dx, word [firstLinNum]
    71 0000025B C3                  <1>     ret
    72                              <1> 
    73                              <1> ;FIRST SEARCH FOR A LINE NUMBER BEFORE INSERTING IT INTO THE CHAIN
    74                              <1> 
    75                              <1> searchForProgramLine:
    76                              <1> ;Walk the program chain looking to see if a line number exists. If it does,
    77                              <1> ; return a pointer to the block in rbx. If it doesn't, return -1 in rbx
    78                              <1> ;Input: dx = Line number
    79                              <1> ;Output: rbx = Pointer to program block 
    80 0000025C 488B1D(DA100000)    <1>     mov rbx, qword [firstLinPtr]
    81                              <1> .search:
    82 00000263 66395304            <1>     cmp word [rbx + progLineBlock.wLineNum], dx ;Equal line numbers?
    83 00000267 740C                <1>     je .lineFound
    84 00000269 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr]   ;Walk chain
    85 0000026D 48FFC3              <1>     inc rbx ;At the end? If yes, this would be 0 now
    86 00000270 75F1                <1>     jnz .search ;Not zero? Keep searching
    87 00000272 48FFCB              <1>     dec rbx ;Make it -1 again
    88                              <1> .lineFound:
    89 00000275 C3                  <1>     ret
    90                              <1> 
    91                              <1> insertProgramLine:
    92                              <1> ;Walk the memory block chain looking for the biggest number less than our
    93                              <1> ; line number. Once we have reached the end of the chain, insert the block there, or
    94                              <1> ; if there is no block, then
    95                              <1> ;Input: rsi = New Program Block to be added
    96 00000276 E8D2FFFFFF          <1>     call findFirstLine  ;Get start of program in rbx and line number in dx
    97                              <1> ;First check if we should be the first line now?
    98 0000027B 663B5604            <1>     cmp dx, word [rsi + progLineBlock.wLineNum]
    99 0000027F 7E00                <1>     jng .notFirst    ;If sign change, 
   100                              <1> .notFirst:
   101 00000281 C3                  <1>     ret
   102                              <1> 
   103                              <1> 
   104                              <1> 
   105                              <1> memoryDetection:
   106 00000282 B820E80000          <1>     mov eax, 0E820h
   107 00000287 CD35                <1>     int 35h     ;rax = ptr to start, rsi = ptr to data table, each entry 24 bytes
   108 00000289 EB07                <1>     jmp short .fsa1
   109                              <1> .findStartAddr:
   110 0000028B 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   111                              <1> .fsa1:
   112 00000292 6685C9              <1>     test cx, cx
   113 00000295 742C                <1>     jz .worstCase
   114 00000297 66FFC9              <1>     dec cx
   115 0000029A 488B1E              <1>     mov rbx, qword [rsi]    ;Get the address entry into rbx
   116 0000029D 4839C3              <1>     cmp rbx, rax    
   117 000002A0 75E9                <1>     jne .findStartAddr
   118 000002A2 488B4608            <1>     mov rax, qword [rsi + 8] ;Get the number of bytes saved into rax
   119                              <1> 
   120 000002A6 488D15(00000000)    <1>     lea rdx, section.programArea.vstart
   121 000002AD 4829DA              <1>     sub rdx, rbx    ;Get the size of the interpreter and internal data area
   122 000002B0 4829D0              <1>     sub rax, rdx    ;Remove the number of bytes reserved to the interpreter
   123                              <1>     
   124 000002B3 E884FEFFFF          <1>     call printdecimalword
   125 000002B8 4801C3              <1>     add rbx, rax    ;Add number of bytes to start address
   126 000002BB 48891D(E4100000)    <1>     mov qword [maxMemAddr], rbx ;Save this address
   127                              <1> .exit:
   128 000002C2 C3                  <1>     ret
   129                              <1> .worstCase:
   130                              <1> ;Assume 2Mb MAX memory, rax has base address
   131 000002C3 48BB00002000000000- <1>     mov rbx, 200000h    ;2Mb value
   131 000002CC 00                  <1>
   132 000002CD 4829C3              <1>     sub rbx, rax
   133 000002D0 4889D8              <1>     mov rax, rbx    ;Get value in rax
   134 000002D3 E864FEFFFF          <1>     call printdecimalword
   135 000002D8 48C705(E4100000)00- <1>     mov qword [maxMemAddr], 200000h
   135 000002E0 002000              <1>
   136 000002E3 C3                  <1>     ret
   137                              <1> 
    14                                  %include "BASICDAT.ASM"
    15 000002E4 4F6B0A0D00          <1> prompt  db "Ok",0Ah,0Dh,0
    16 000002E9 5343522F363420496E- <1> mainmsg db "SCR/64 Integer BASIC v0.1",0Ah,0Dh,0
    16 000002F2 746567657220424153- <1>
    16 000002FB 49432076302E310A0D- <1>
    16 00000304 00                  <1>
    17 00000305 204279746573206672- <1> bytemsg db " Bytes free",0Ah,0Dh,0
    17 0000030E 65650A0D00          <1>
    18 00000313 0A0D00              <1> crlf    db 0Ah,0Dh,0
    19 00000316 4572726F720A0D00    <1> errmsg  db "Error",0Ah,0Dh,0
    20 0000031E 303132333435363738- <1> numbers db "0123456789"
    20 00000327 39                  <1>
    15                                  Segment programArea follows=resSeg align=1 vfollows=resSeg valign=1
    16                                  ENDOFPROGRAM:
